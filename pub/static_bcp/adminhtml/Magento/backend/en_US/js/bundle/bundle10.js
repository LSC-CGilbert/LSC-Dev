require.config({"config": {
        "jsbuild":{"Magento_PageBuilder/js/utils/editor.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"mage/adminhtml/tools\", \"mage/translate\", \"mageUtils\", \"Magento_PageBuilder/js/config\"], function (_jquery, _tools, _translate, _mageUtils, _config) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Is the inline WYSIWYG supported?\n   */\n  function isWysiwygSupported() {\n    return _config.getConfig(\"can_use_inline_editing_on_stage\");\n  }\n  /**\n   * Encode content for TinyMCE\n   *\n   * @param content\n   */\n\n\n  function encodeContent(content) {\n    if (isWysiwygSupported()) {\n      return convertVariablesToHtmlPreview(convertWidgetsToHtmlPreview(unescapeDoubleQuoteWithinWidgetDirective(removeInvalidPlaceholders(content))));\n    }\n\n    return content;\n  }\n  /**\n   * Prior to parsing the content remove any invalid placeholders within the content\n   *\n   * @param content\n   */\n\n\n  function removeInvalidPlaceholders(content) {\n    if (content.indexOf(\"magento-placeholder\") !== -1) {\n      var html = new DOMParser().parseFromString(content, \"text/html\");\n      var placeholders = html.querySelectorAll(\"span.magento-placeholder\");\n\n      if (placeholders.length > 0) {\n        [].slice.call(placeholders).forEach(function (placeholder) {\n          // If the invalid placeholder contains a directive, let's insert it back where it belongs\n          if (placeholder.innerText.indexOf(\"{{\") !== -1) {\n            placeholder.parentNode.insertBefore(document.createTextNode(placeholder.innerText), placeholder);\n          }\n\n          placeholder.remove();\n        });\n      }\n\n      return html.body.innerHTML;\n    }\n\n    return content;\n  }\n  /**\n   * Convert all variables to their HTML preview counterparts\n   *\n   * Re-implements logic from lib/web/mage/adminhtml/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js to parse\n   * and replace the variables within the content.\n   *\n   * @param content\n   */\n\n\n  function convertVariablesToHtmlPreview(content) {\n    var config = _config.getConfig(\"tinymce\").variables;\n\n    var magentoVariables = JSON.parse(config.placeholders);\n    return content.replace(/{\\{\\s?(?:customVar code=|config path=\\\")([^\\}\\\"]+)[\\\"]?\\s?\\}\\}/ig, function (match, path) {\n      var id = btoa(path).replace(/\\+/g, \":\").replace(/\\//g, \"_\").replace(/=/g, \"-\");\n      var placeholder = (0, _jquery)(\"<span />\").addClass(\"magento-variable\").addClass(\"magento-placeholder\").addClass(\"mceNonEditable\").prop(\"id\", id).prop(\"contentEditable\", \"false\");\n\n      if (magentoVariables[path].variable_type === \"custom\") {\n        placeholder.addClass(\"magento-custom-var\");\n      }\n\n      var variableType = magentoVariables[path].variable_type;\n\n      if (magentoVariables[path] && (variableType === \"default\" || variableType === \"custom\")) {\n        placeholder.text(magentoVariables[path].variable_name);\n      } else {\n        // If we're unable to find the placeholder we need to attach an error class\n        placeholder.addClass(\"magento-placeholder-error\");\n        placeholder.text(variableType === \"custom\" ? path : (0, _translate)(\"Not Found\"));\n      }\n\n      return placeholder[0].outerHTML;\n    });\n  }\n  /**\n   * Convert widgets within content to their HTML counterparts\n   *\n   * @param content\n   */\n\n\n  function convertWidgetsToHtmlPreview(content) {\n    var config = _config.getConfig(\"tinymce\").widgets;\n\n    return content.replace(/\\{\\{widget([\\S\\s]*?)\\}\\}/ig, function (match, widgetBody) {\n      var attributes = parseAttributesString(widgetBody);\n      var imageSrc;\n\n      if (attributes.type) {\n        var placeholder = (0, _jquery)(\"<span />\").addClass(\"magento-placeholder\").addClass(\"magento-widget\").addClass(\"mceNonEditable\").prop(\"id\", _mageUtils.uniqueid()).prop(\"contentEditable\", \"false\");\n        attributes.type = attributes.type.replace(/\\\\\\\\/g, \"\\\\\");\n        imageSrc = config.placeholders[attributes.type];\n\n        if (!imageSrc) {\n          imageSrc = config.error_image_url;\n          placeholder.addClass(\"magento-placeholder-error\");\n        }\n\n        var image = (0, _jquery)(\"<img />\").prop(\"id\", window.Base64.idEncode(match)).prop(\"src\", imageSrc);\n        placeholder.append(image);\n        var widgetType = \"\";\n\n        if (config.types[attributes.type]) {\n          widgetType += config.types[attributes.type];\n        }\n\n        placeholder.append((0, _jquery)(document.createTextNode(widgetType)));\n        return placeholder[0].outerHTML;\n      }\n    });\n  }\n  /**\n   * Parse attributes into a string\n   *\n   * @param attributes\n   */\n\n\n  function parseAttributesString(attributes) {\n    var result = {};\n    attributes.replace(/(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g, function (match, key, value) {\n      result[key] = value ? value.replace(/&quote;/g, \"\\\"\") : value;\n      return \"\";\n    });\n    return result;\n  }\n  /**\n   * Lock all image sizes before initializing TinyMCE to avoid content jumps\n   *\n   * @param element\n   */\n\n\n  function lockImageSize(element) {\n    [].slice.call(element.querySelectorAll(\"img\")).forEach(function (image) {\n      if (image.style.width.length === 0) {\n        image.style.width = /^\\d+$/.test(image.getAttribute(\"width\")) ? image.getAttribute(\"width\") + \"px\" : image.getAttribute(\"width\");\n        image.setAttribute(\"data-width-locked\", \"true\");\n      }\n\n      if (image.style.height.length === 0) {\n        image.style.height = /^\\d+$/.test(image.getAttribute(\"height\")) ? image.getAttribute(\"height\") + \"px\" : image.getAttribute(\"height\");\n        image.setAttribute(\"data-height-locked\", \"true\");\n      }\n    });\n  }\n  /**\n   * Reverse forced image size after TinyMCE is finished initializing\n   *\n   * @param element\n   */\n\n\n  function unlockImageSize(element) {\n    [].slice.call(element.querySelectorAll(\"img\")).forEach(function (image) {\n      if (image.getAttribute(\"data-width-locked\")) {\n        image.style.width = null;\n        image.removeAttribute(\"data-width-locked\");\n      }\n\n      if (image.getAttribute(\"data-height-locked\")) {\n        image.style.height = null;\n        image.removeAttribute(\"data-height-locked\");\n      }\n    });\n  }\n  /**\n   * Create a bookmark within the content to be restored later\n   */\n\n\n  function createBookmark(event) {\n    var wrapperElement = (0, _jquery)(event.target).parents(\".inline-wysiwyg\");\n    /**\n     * Create an element bookmark\n     *\n     * @param element\n     */\n\n    var createElementBookmark = function createElementBookmark(element) {\n      return {\n        name: element.nodeName,\n        index: findNodeIndex(wrapperElement[0], element.nodeName, element)\n      };\n    }; // Handle direct clicks onto an IMG\n\n\n    if (event.target.nodeName === \"IMG\") {\n      return createElementBookmark(event.target);\n    }\n\n    if (window.getSelection) {\n      var selection = window.getSelection();\n\n      var id = _mageUtils.uniqueid();\n\n      if (selection.getRangeAt && selection.rangeCount) {\n        var range = normalizeTableCellSelection(selection.getRangeAt(0).cloneRange()); // Determine if the current node is an image or span that we want to select instead of text\n\n        var currentNode = range.startContainer;\n\n        if (currentNode.nodeType === Node.ELEMENT_NODE && (currentNode.nodeName === \"IMG\" || currentNode.nodeName === \"SPAN\" && currentNode.classList.contains(\"magento-placeholder\"))) {\n          return createElementBookmark(currentNode);\n        } // Also check if the direct parent is either of these\n\n\n        var parentNode = range.startContainer.parentNode;\n\n        if (parentNode.nodeName === \"IMG\" || parentNode.nodeName === \"SPAN\" && parentNode.classList.contains(\"magento-placeholder\")) {\n          return createElementBookmark(parentNode);\n        }\n\n        if (!range.collapsed) {\n          range.collapse(false);\n          var endBookmarkNode = createBookmarkSpan(id + \"_end\");\n          range.insertNode(endBookmarkNode);\n        }\n\n        var range2 = normalizeTableCellSelection(selection.getRangeAt(0));\n        range2.collapse(true);\n        var startBookmarkNode = createBookmarkSpan(id + \"_start\");\n        range2.insertNode(startBookmarkNode);\n        return {\n          id: id\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Move the cursor to our new bookmark\n   *\n   * @param bookmark\n   */\n\n\n  function moveToBookmark(bookmark) {\n    window.tinymce.activeEditor.selection.moveToBookmark(bookmark);\n  }\n  /**\n   * Retrieve active editor from TinyMCE\n   */\n\n\n  function getActiveEditor() {\n    return window.tinymce.activeEditor;\n  }\n  /**\n   * Create a bookmark span for the selection\n   *\n   * @param id\n   */\n\n\n  function createBookmarkSpan(id) {\n    var bookmark = document.createElement(\"span\");\n    bookmark.setAttribute(\"data-mce-type\", \"bookmark\");\n    bookmark.id = id;\n    bookmark.style.overflow = \"hidden\";\n    bookmark.style.lineHeight = \"0px\";\n    return bookmark;\n  }\n  /**\n   * Find the index of an element within a wrapper\n   *\n   * @param wrapperElement\n   * @param name\n   * @param element\n   */\n\n\n  function findNodeIndex(wrapperElement, name, element) {\n    var selector = name.toLowerCase() + ':not([data-mce-bogus=\"all\"])'; // If there is no ID on the element add a unique ID so we can efficiently find it\n\n    if (!element.id) {\n      element.id = _mageUtils.uniqueid();\n    }\n\n    return (0, _jquery)(wrapperElement).find(selector).toArray().findIndex(function (node) {\n      return node.id === element.id;\n    });\n  }\n  /**\n   * Get a node by index within a wrapper\n   *\n   * @param wrapperElement\n   * @param name\n   * @param index\n   */\n\n\n  function getNodeByIndex(wrapperElement, name, index) {\n    var selector = name.toLowerCase() + ':not([data-mce-bogus=\"all\"])';\n    return (0, _jquery)(wrapperElement).find(selector).get(index);\n  }\n  /**\n   * Create a double click event that works in all browsers\n   */\n\n\n  function createDoubleClickEvent() {\n    try {\n      return new MouseEvent(\"dblclick\", {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n    } catch (e) {\n      var dblClickEvent = document.createEvent(\"MouseEvent\");\n      dblClickEvent.initMouseEvent(\"dblclick\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n      return dblClickEvent;\n    }\n  }\n  /**\n   * Replace all desktop styles that left unprocessed back to style element to prevent data corruption.\n   */\n\n\n  function processInlineStyles(html) {\n    var name = _config.getConfig(\"defaultViewport\");\n\n    var searchPattern = new RegExp(\"data-\" + name + \"-style=\", \"g\");\n    return html.replace(searchPattern, \"style=\");\n  }\n  /**\n   * Move the end point of a range to handle tables\n   *\n   * @param range\n   * @param start\n   */\n\n\n  function moveEndPoint(range, start) {\n    var container;\n    var offset;\n    var childNodes;\n\n    if (start) {\n      container = range.startContainer;\n      offset = range.startOffset;\n    } else {\n      container = range.endContainer;\n      offset = range.endOffset;\n    }\n\n    if (container.nodeType === Node.ELEMENT_NODE && container.nodeName === \"TR\") {\n      childNodes = container.childNodes;\n      container = childNodes[Math.min(start ? offset : offset - 1, childNodes.length - 1)];\n\n      if (container) {\n        offset = start ? 0 : container.childNodes.length;\n\n        if (start) {\n          range.setStart(container, offset);\n        } else {\n          range.setEnd(container, offset);\n        }\n      }\n    }\n  }\n  /**\n   * Normalize the table sell selection within a range to better handle selections being inside of tables\n   *\n   * @param range\n   */\n\n\n  function normalizeTableCellSelection(range) {\n    moveEndPoint(range, true);\n    moveEndPoint(range, false);\n    return range;\n  }\n  /**\n   * Convert HTML encoded double quote to double quote with backslash within widget directives\n   *\n   * @param {string} content\n   * @returns {string}\n   */\n\n\n  function escapeDoubleQuoteWithinWidgetDirective(content) {\n    return content.replace(/\\{\\{widget[\\S\\s]*?\\}\\}/ig, function (match) {\n      return match.replace(/&quot;/g, \"\\\\\\\"\");\n    });\n  }\n  /**\n   * Convert double quote with backslash to HTML encoded double quote within widget directives\n   *\n   * @param {string} content\n   * @returns {string}\n   */\n\n\n  function unescapeDoubleQuoteWithinWidgetDirective(content) {\n    return content.replace(/\\{\\{widget[\\S\\s]*?\\}\\}/ig, function (match) {\n      return match.replace(/\\\\+\"/g, \"&quot;\");\n    });\n  }\n  /**\n   * Convert double quote to single quote within magento variable directives\n   *\n   * @param {string} content\n   * @returns {string}\n   */\n\n\n  function replaceDoubleQuoteWithSingleQuoteWithinVariableDirective(content) {\n    // Find html elements which attributes contain magento variables directives\n    return content.replace(/<([a-z0-9\\-\\_]+)([^>]+?[a-z0-9\\-\\_]+=\"[^\"]*?\\{\\{.+?\\}\\}.*?\".*?)>/gi, function (match1, tag, attributes) {\n      // Replace double quote with single quote within magento variable directive\n      var sanitizedAttributes = attributes.replace(/\\{\\{[^\\{\\}]+\\}\\}/gi, function (match2) {\n        return match2.replace(/\"/g, \"'\");\n      });\n      return \"<\" + tag + sanitizedAttributes + \">\";\n    });\n  }\n\n  return {\n    isWysiwygSupported: isWysiwygSupported,\n    encodeContent: encodeContent,\n    parseAttributesString: parseAttributesString,\n    lockImageSize: lockImageSize,\n    unlockImageSize: unlockImageSize,\n    createBookmark: createBookmark,\n    moveToBookmark: moveToBookmark,\n    getActiveEditor: getActiveEditor,\n    findNodeIndex: findNodeIndex,\n    getNodeByIndex: getNodeByIndex,\n    createDoubleClickEvent: createDoubleClickEvent,\n    processInlineStyles: processInlineStyles,\n    escapeDoubleQuoteWithinWidgetDirective: escapeDoubleQuoteWithinWidgetDirective,\n    unescapeDoubleQuoteWithinWidgetDirective: unescapeDoubleQuoteWithinWidgetDirective,\n    replaceDoubleQuoteWithSingleQuoteWithinVariableDirective: replaceDoubleQuoteWithSingleQuoteWithinVariableDirective\n  };\n});\n//# sourceMappingURL=editor.js.map","Magento_PageBuilder/js/utils/image.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/utils/directives\", \"Magento_PageBuilder/js/utils/url\"], function (_config, _directives, _url) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Decode image background URL to object\n   *\n   * @param value\n   * @returns {Object}\n   * @api\n   */\n  function decodeUrl(value) {\n    var result = \"\";\n    value = decodeURIComponent(value.replace(window.location.href, \"\"));\n    var regexp = /{{.*\\s*url=\"?(.*\\.([a-z|A-Z]*))\"?\\s*}}/;\n\n    if (regexp.test(value)) {\n      var _regexp$exec = regexp.exec(value),\n          url = _regexp$exec[1],\n          type = _regexp$exec[2];\n\n      var image = {\n        name: url.split(\"/\").pop(),\n        size: 0,\n        type: \"image/\" + type,\n        url: _config.getConfig(\"media_url\") + url\n      };\n      result = [image];\n    }\n\n    return result;\n  }\n  /**\n   * Convert a URL to an image directive\n   *\n   * @param {string} imageUrl\n   * @returns {string}\n   */\n\n\n  function urlToDirective(imageUrl) {\n    var mediaUrl = (0, _url.convertUrlToPathIfOtherUrlIsOnlyAPath)(_config.getConfig(\"media_url\"), imageUrl);\n    var mediaPath = imageUrl.split(mediaUrl);\n    return \"{{media url=\" + mediaPath[1] + \"}}\";\n  }\n  /**\n   * Convert an image URL to a background image data uri\n   *\n   * @param {string} imageUrl\n   * @returns {string}\n   */\n\n\n  function imageToBackgroundImageDataUrl(imageUrl) {\n    return \"url(\\'\" + (0, _directives.toDataUrl)(urlToDirective(imageUrl)) + \"\\')\";\n  }\n\n  return {\n    decodeUrl: decodeUrl,\n    urlToDirective: urlToDirective,\n    imageToBackgroundImageDataUrl: imageToBackgroundImageDataUrl\n  };\n});\n//# sourceMappingURL=image.js.map","Magento_PageBuilder/js/utils/loader.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  function load(dependencies, factory, onError) {\n    require(dependencies, factory, onError);\n  }\n\n  return load;\n});\n//# sourceMappingURL=loader.js.map","Magento_PageBuilder/js/utils/nesting-link-dialog.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"mage/translate\", \"Magento_PageBuilder/js/modal/dismissible-confirm\"], function (_jquery, _translate, _dismissibleConfirm) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Validate inline editor for having nested link\n   * Creates a dialog and removes inline editor link if present\n   *\n   * @param {DataStore} dataStore\n   * @param {WysiwygInterface} wysiwyg\n   * @param {string} inlineMessageField\n   * @param {string} linkUrlField\n   */\n  function nestingLinkDialog(dataStore, wysiwyg, inlineMessageField, linkUrlField) {\n    var dataStoreContent = dataStore.getState();\n    var inlineMessage = dataStoreContent[inlineMessageField];\n    var linkUrl = dataStoreContent[linkUrlField];\n    var aLinkRegex = /(<a[\\s]+[^>]+).+(?=<\\/a>)<\\/a>/igm;\n\n    if (wysiwyg && inlineMessage.match(aLinkRegex) && linkUrl && [\"page\", \"product\", \"category\", \"default\"].indexOf(linkUrl.type) !== -1 && linkUrl[linkUrl.type] && linkUrl[linkUrl.type].length !== 0) {\n      var inlineEditor = (0, _jquery)(\"#\" + wysiwyg.elementId);\n      inlineEditor.trigger(\"blur\");\n      (0, _dismissibleConfirm)({\n        actions: {\n          always: function always() {\n            var anchorLessDataStoreMessage = inlineMessage.replace(aLinkRegex, \"\");\n            var anchorLessInlineMessage = inlineEditor.html().replace(aLinkRegex, \"\");\n            dataStore.set(inlineMessageField, anchorLessDataStoreMessage);\n            inlineEditor.html(anchorLessInlineMessage);\n          }\n        },\n        content: (0, _translate)(\"We are unable to support links within the content field whilst having a link set on the content type. Please remove the content type link if you'd like to set a link within the content. We will automatically remove the links within the content field.\"),\n        // tslint:disable-line:max-line-length\n        title: (0, _translate)(\"Nested links are not allowed\"),\n        haveCancelButton: false\n      });\n    }\n  }\n\n  return nestingLinkDialog;\n});\n//# sourceMappingURL=nesting-link-dialog.js.map","Magento_PageBuilder/js/utils/nesting-widget-dialog.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"mage/translate\", \"Magento_PageBuilder/js/modal/dismissible-confirm\"], function (_jquery, _translate, _dismissibleConfirm) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Validate inline editor for having nested widget\n   * Creates a dialog and removes inline editor widget if present\n   *\n   * @param {DataStore} dataStore\n   * @param {WysiwygInterface} wysiwyg\n   * @param {string} inlineMessageField\n   * @param {string} linkUrlField\n   */\n  function nestingWidgetDialog(dataStore, wysiwyg, inlineMessageField, linkUrlField) {\n    var dataStoreContent = dataStore.getState();\n    var inlineMessage = dataStoreContent[inlineMessageField];\n    var linkUrl = dataStoreContent[linkUrlField];\n    var widgetRegex = /\\{\\{widget([\\S\\s]*?)\\}\\}/ig;\n    var widgetPlaceholderRegex = /<span.*(class=)(\\\"|\\').*((magento-placeholder).*(magento-widget)|(magento-widget).*(magento-placeholder)).*<\\/span>/igm;\n\n    if (wysiwyg && inlineMessage.match(widgetRegex) && linkUrl && [\"page\", \"product\", \"category\", \"default\"].indexOf(linkUrl.type) !== -1 && linkUrl[linkUrl.type] && linkUrl[linkUrl.type].length !== 0) {\n      var inlineEditor = (0, _jquery)(\"#\" + wysiwyg.elementId);\n      inlineEditor.trigger(\"blur\");\n      (0, _dismissibleConfirm)({\n        actions: {\n          always: function always() {\n            var widgetLessDataStoreMessage = inlineMessage.replace(widgetRegex, \"\");\n            var widgetLessInlineMessage = inlineEditor.html().replace(widgetPlaceholderRegex, \"\");\n            dataStore.set(inlineMessageField, widgetLessDataStoreMessage);\n            inlineEditor.html(widgetLessInlineMessage);\n          }\n        },\n        content: (0, _translate)(\"We are unable to support widget within the content field whilst having a link set on the content type. Please remove the content type link if you'd like to set a widget within the content. We will automatically remove the widget within the content field.\"),\n        // tslint:disable-line:max-line-length\n        title: (0, _translate)(\"Nested widgets are not allowed\"),\n        haveCancelButton: false\n      });\n    }\n  }\n\n  return nestingWidgetDialog;\n});\n//# sourceMappingURL=nesting-widget-dialog.js.map","Magento_PageBuilder/js/utils/object.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"object-path\"], function (_objectPath) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Retrieve a value from an object via a path\n   *\n   * @param {object} object\n   * @param {string} path\n   * @param {TResult} defaultValue\n   * @returns {TResult}\n   */\n  function get(object, path, defaultValue) {\n    return _objectPath.get(object, path, defaultValue);\n  }\n  /**\n   * Set a value within an object via a path\n   *\n   * @param {object} object\n   * @param {string} path\n   * @param {TResult} value\n   * @returns {TResult | undefined}\n   */\n\n\n  function set(object, path, value) {\n    return _objectPath.set(object, path, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n});\n//# sourceMappingURL=object.js.map","Magento_PageBuilder/js/utils/pagebuilder-header-height.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\"], function (_jquery) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Checks if PageBuilder has header and returns it's height\n   *\n   * @param {string} stageId\n   * @param {string} stageWrapper\n   * @param {string} pageBuilderHeader\n   * @returns {number}\n   */\n  function pageBuilderHeaderHeight(stageId, stageWrapper, pageBuilderHeader) {\n    if (stageWrapper === void 0) {\n      stageWrapper = \".pagebuilder-stage-wrapper\";\n    }\n\n    if (pageBuilderHeader === void 0) {\n      pageBuilderHeader = \".pagebuilder-header\";\n    }\n\n    var $stageWrapper = (0, _jquery)(\"#\" + stageId).closest(stageWrapper);\n    var $pageBuilderHeader = $stageWrapper.find(pageBuilderHeader);\n    return !!$pageBuilderHeader.length ? $pageBuilderHeader.height() : 0;\n  }\n\n  return pageBuilderHeaderHeight;\n});\n//# sourceMappingURL=pagebuilder-header-height.js.map","Magento_PageBuilder/js/utils/position-sticky.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Determine if the current browser supports position sticky\n   *\n   * @returns {boolean}\n   */\n  function supportsPositionSticky() {\n    if (!window.getComputedStyle) {\n      return false;\n    }\n\n    var testNode = document.createElement(\"div\");\n    return [\"\", \"-webkit-\", \"-moz-\", \"-ms-\"].some(function (prefix) {\n      try {\n        testNode.style.position = prefix + \"sticky\";\n      } catch (e) {// Fail silently\n      }\n\n      return testNode.style.position !== \"\";\n    });\n  }\n\n  return {\n    supportsPositionSticky: supportsPositionSticky\n  };\n});\n//# sourceMappingURL=position-sticky.js.map","Magento_PageBuilder/js/utils/promise-deferred.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Returns a deferred promise\n   *\n   * @returns {DeferredInterface}\n   * @api\n   */\n  function deferred() {\n    var resolve;\n    var reject;\n    var promise = new Promise(function (promiseResolve, promiseReject) {\n      resolve = promiseResolve;\n      reject = promiseReject;\n    });\n    return {\n      resolve: resolve,\n      reject: reject,\n      promise: promise\n    };\n  }\n\n  return deferred;\n});\n//# sourceMappingURL=promise-deferred.js.map","Magento_PageBuilder/js/utils/string.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Convert from snake case to camel case\n   *\n   * @param {string} currentString\n   * @returns {string}\n   * @api\n   */\n  function fromSnakeToCamelCase(currentString) {\n    var parts = currentString.split(/[_-]/);\n    var newString = \"\";\n\n    for (var i = 1; i < parts.length; i++) {\n      newString += parts[i].charAt(0).toUpperCase() + parts[i].slice(1);\n    }\n\n    return parts[0] + newString;\n  }\n  /**\n   * Convert a camel case string to snake case\n   *\n   * @param currentString\n   */\n\n\n  function fromCamelCaseToDash(currentString) {\n    return currentString.replace(/[A-Z]/g, function (m) {\n      return \"-\" + m.toLowerCase();\n    });\n  }\n\n  return {\n    fromSnakeToCamelCase: fromSnakeToCamelCase,\n    fromCamelCaseToDash: fromCamelCaseToDash\n  };\n});\n//# sourceMappingURL=string.js.map","Magento_PageBuilder/js/utils/text.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=text.js.map","Magento_PageBuilder/js/utils/url.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Check for whether url string contains only a path\n   *\n   * @param {String} url\n   * @returns {Boolean}\n   */\n  function isPathOnly(url) {\n    return url.indexOf(\"/\") === 0;\n  }\n  /**\n   * Get the path from a URL\n   *\n   * @param {String} url\n   * @returns {String}\n   */\n\n\n  function getPathFromUrl(url) {\n    var a = document.createElement(\"a\");\n    a.href = url;\n    return a.pathname;\n  }\n  /**\n   * Convert url to path if other url is only a path\n   *\n   * @param {string} url\n   * @param {string} otherUrl\n   * @returns {string}\n   * @api\n   */\n\n\n  function convertUrlToPathIfOtherUrlIsOnlyAPath(url, otherUrl) {\n    return isPathOnly(otherUrl) ? getPathFromUrl(url) : url;\n  }\n\n  return {\n    convertUrlToPathIfOtherUrlIsOnlyAPath: convertUrlToPathIfOtherUrlIsOnlyAPath\n  };\n});\n//# sourceMappingURL=url.js.map","Magento_PageBuilder/js/widget/show-on-hover.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['jquery'], function ($) {\n    'use strict';\n\n    /**\n     * Show the overlay on hover of specific elements\n     *\n     * @param {JQuery<Element>[]} $elements\n     */\n    function showOverlayOnHover($elements) {\n        $elements.each(function (index, element) {\n            var overlayEl = $(element).find('.pagebuilder-overlay'),\n                overlayColor = overlayEl.attr('data-overlay-color');\n\n            $(element).on('mouseenter', function () {\n                overlayEl.css('background-color', overlayColor);\n            });\n\n            $(element).on('mouseleave', function () {\n                overlayEl.css('background-color', 'transparent');\n            });\n        });\n    }\n\n    /**\n     * Show button on hover of specific elements\n     *\n     * @param {JQuery<Element>[]} $elements\n     * @param {String} buttonClass\n     */\n    function showButtonOnHover($elements, buttonClass) {\n        $elements.each(function (index, element) {\n            var buttonEl = $(element).find(buttonClass);\n\n            $(element).on('mouseenter', function () {\n                buttonEl.css({\n                    'opacity': '1',\n                    'visibility': 'visible'\n                });\n            });\n\n            $(element).on('mouseleave', function () {\n                buttonEl.css({\n                    'opacity': '0',\n                    'visibility': 'hidden'\n                });\n            });\n        });\n    }\n\n    return function (config) {\n\n        var buttonSelector = config.buttonSelector,\n            overlayHoverSelector = 'div[data-content-type=\"%s\"][data-show-overlay=\"%s\"]'\n                .replace('%s', config.dataRole)\n                .replace('%s', config.showOverlay),\n            overlayButtonSelector = 'div[data-content-type=\"%s\"][data-show-button=\"%s\"]'\n                .replace('%s', config.dataRole)\n                .replace('%s', config.showOverlay);\n\n        showOverlayOnHover($(overlayHoverSelector));\n        showButtonOnHover($(overlayButtonSelector), buttonSelector);\n    };\n});\n","Magento_PageBuilder/js/widget/video-background.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jarallax',\n    'jarallaxVideo',\n    'vimeoWrapper'\n], function ($) {\n    'use strict';\n\n    return function (config, element) {\n        var $element = $(element),\n            parallaxSpeed = $element.data('enableParallax') !== 1 ? 1 : parseFloat($element.data('parallaxSpeed'));\n\n        if ($element.data('background-type') !== 'video') {\n            return;\n        }\n\n        $element.addClass('jarallax');\n        $element.attr('data-jarallax', '');\n\n        window.jarallax($element[0], {\n            imgSrc: $element.data('videoFallbackSrc'),\n            speed: !isNaN(parallaxSpeed) ? parallaxSpeed : 0.5,\n            videoLoop: $element.data('videoLoop'),\n            videoPlayOnlyVisible: $element.data('videoPlayOnlyVisible'),\n            videoLazyLoading: $element.data('videoLazyLoad'),\n            disableVideo: false,\n            elementInViewport: $element.data('elementInViewport') &&\n                $element[0].querySelector($element.data('elementInViewport'))\n        });\n        $element[0].jarallax.video && $element[0].jarallax.video.on('started', function () {\n            if ($element[0].jarallax.$video) {\n                $element[0].jarallax.$video.style.visibility = 'visible';\n            }\n        });\n    };\n});\n","Magento_PageBuilder/js/binding/draggable.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"knockout\"], function (_jquery, _knockout) {\n  \"use strict\";\n\n  _jquery = _interopRequireDefault(_jquery);\n  _knockout = _interopRequireDefault(_knockout);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  // Create a new sortable Knockout binding\n  _knockout.default.bindingHandlers.draggable = {\n    init: function init(element, valueAccessor) {\n      (0, _jquery.default)(element).draggable(valueAccessor());\n    }\n  };\n});\n//# sourceMappingURL=draggable.js.map","Magento_PageBuilder/js/binding/focus.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\"], function (_knockout) {\n  \"use strict\";\n\n  _knockout = _interopRequireDefault(_knockout);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  _knockout.default.bindingHandlers.hasFocusNoScroll = {\n    init: _knockout.default.bindingHandlers.hasFocus.init,\n    update: function update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n      var value = !!_knockout.default.utils.unwrapObservable(valueAccessor());\n      value ? element.focus({\n        preventScroll: true\n      }) : element.blur();\n    }\n  };\n});\n//# sourceMappingURL=focus.js.map","Magento_PageBuilder/js/binding/live-edit.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"knockout\", \"Magento_Ui/js/lib/key-codes\", \"underscore\"], function (_jquery, _knockout, _keyCodes, _underscore) {\n  \"use strict\";\n\n  _jquery = _interopRequireDefault(_jquery);\n  _knockout = _interopRequireDefault(_knockout);\n  _keyCodes = _interopRequireDefault(_keyCodes);\n  _underscore = _interopRequireDefault(_underscore);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n\n  /**\n   * Strip HTML and return text\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n  function stripHtml(html) {\n    if (html) {\n      var htmlDocument = new DOMParser().parseFromString(html, \"text/html\");\n      return htmlDocument.body ? htmlDocument.body.textContent : \"\";\n    }\n\n    return html;\n  }\n  /**\n   * Add or remove the placeholder-text class from the element based on its content\n   *\n   * @param {Element} element\n   */\n\n\n  function handlePlaceholderClass(element) {\n    if (stripHtml(element.innerHTML).length === 0) {\n      element.innerHTML = \"\";\n      element.classList.add(\"placeholder-text\");\n    } else {\n      element.classList.remove(\"placeholder-text\");\n    }\n  } // Custom Knockout binding for live editing text inputs\n\n\n  _knockout.default.bindingHandlers.liveEdit = {\n    /**\n     * Init the live edit binding on an element\n     *\n     * @param {HTMLElement} element\n     * @param {() => any} valueAccessor\n     * @param {KnockoutAllBindingsAccessor} allBindings\n     * @param {any} viewModel\n     * @param {KnockoutBindingContext} bindingContext\n     */\n    init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n      var _valueAccessor = valueAccessor(),\n          field = _valueAccessor.field,\n          placeholder = _valueAccessor.placeholder,\n          _valueAccessor$select = _valueAccessor.selectAll,\n          selectAll = _valueAccessor$select === void 0 ? false : _valueAccessor$select;\n\n      var focusedValue = element.innerHTML;\n      var previouslyFocused = false;\n      var blurTimeout;\n      var lastUpdateValue;\n      /**\n       * Record the value on focus, only conduct an update when data changes\n       */\n\n      var onFocus = function onFocus() {\n        clearTimeout(blurTimeout);\n        focusedValue = stripHtml(element.innerHTML);\n        lastUpdateValue = focusedValue;\n\n        if (selectAll && element.innerHTML !== \"\" && !previouslyFocused) {\n          _underscore.default.defer(function () {\n            var selection = window.getSelection();\n            var range = document.createRange();\n            range.selectNodeContents(element);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            previouslyFocused = true;\n          });\n        }\n      };\n      /**\n       * On blur change our timeout for previously focused. We require a flag to track whether the input has been\n       * focused and selected previously due to a bug in Firefox which doesn't handle focus events correctly when\n       * contenteditable is placed within an anchor.\n       */\n\n\n      var onBlur = function onBlur() {\n        blurTimeout = setTimeout(function () {\n          previouslyFocused = false;\n        }, 100);\n      };\n      /**\n       * Mousedown event on element\n       *\n       * @param {Event} event\n       */\n\n\n      var onMouseDown = function onMouseDown(event) {\n        event.stopPropagation();\n      };\n      /**\n       * Key down event on element\n       *\n       * Prevent styling such as bold, italic, and underline using keyboard commands, and prevent multi-line entries\n       *\n       * @param {JQueryEventObject} event\n       */\n\n\n      var onKeyDown = function onKeyDown(event) {\n        var key = _keyCodes.default[event.keyCode]; // command or control\n\n        if (event.metaKey || event.ctrlKey) {\n          if (key === \"bKey\" || key === \"iKey\" || key === \"uKey\") {\n            event.preventDefault();\n          }\n        }\n\n        if (key === \"enterKey\") {\n          event.preventDefault();\n        } // prevent slides from sliding\n\n\n        if (key === \"pageLeftKey\" || key === \"pageRightKey\") {\n          event.stopPropagation();\n        }\n      };\n      /**\n       * On key up update the view model to ensure all changes are saved\n       */\n\n\n      var onKeyUp = function onKeyUp() {\n        var strippedValue = stripHtml(element.innerHTML);\n\n        if (focusedValue !== strippedValue) {\n          lastUpdateValue = strippedValue;\n          viewModel.updateData(field, strippedValue);\n        }\n      };\n      /**\n       * Prevent content from being dropped inside of inline edit area\n       *\n       * @param {DragEvent} event\n       */\n\n\n      var onDrop = function onDrop(event) {\n        event.preventDefault();\n      };\n      /**\n       * Prevent content from being dragged\n       *\n       * @param {DragEvent} event\n       */\n\n\n      var onDragStart = function onDragStart(event) {\n        event.preventDefault();\n      };\n      /**\n       * Input event on element\n       */\n\n\n      var onInput = function onInput() {\n        handlePlaceholderClass(element);\n      };\n      /**\n       * On paste strip any HTML\n       */\n\n\n      var onPaste = function onPaste() {\n        // Record the original caret position so we can ensure we restore it at the correct position\n        var selection = window.getSelection();\n        var originalPositionStart = selection.getRangeAt(0).cloneRange().startOffset;\n        var originalPositionEnd = selection.getRangeAt(0).cloneRange().endOffset;\n        var originalContentLength = stripHtml(element.innerHTML).length; // Allow the paste action to update the content\n\n        _underscore.default.defer(function () {\n          var strippedValue = stripHtml(element.innerHTML);\n          lastUpdateValue = strippedValue;\n          element.textContent = strippedValue;\n          /**\n           * Calculate the position the caret should end up at, the difference in string length + the original\n           * end offset position\n           */\n\n          var restoredPosition = Math.abs(strippedValue.length - originalContentLength) + originalPositionStart; // If part of the text was selected adjust the position for the removed text\n\n          if (originalPositionStart !== originalPositionEnd) {\n            restoredPosition += Math.abs(originalPositionEnd - originalPositionStart);\n          }\n\n          var range = document.createRange();\n          range.setStart(element.childNodes[0], restoredPosition);\n          range.setEnd(element.childNodes[0], restoredPosition);\n          selection.removeAllRanges();\n          selection.addRange(range);\n        });\n      };\n\n      element.setAttribute(\"data-placeholder\", placeholder);\n      element.textContent = viewModel.contentType.dataStore.get(field);\n      element.contentEditable = \"true\";\n      element.addEventListener(\"focus\", onFocus);\n      element.addEventListener(\"blur\", onBlur);\n      element.addEventListener(\"mousedown\", onMouseDown);\n      element.addEventListener(\"keydown\", onKeyDown);\n      element.addEventListener(\"keyup\", onKeyUp);\n      element.addEventListener(\"input\", onInput);\n      element.addEventListener(\"drop\", onDrop);\n      element.addEventListener(\"paste\", onPaste);\n      element.addEventListener(\"dragstart\", onDragStart);\n      (0, _jquery.default)(element).parent().css(\"cursor\", \"text\");\n      handlePlaceholderClass(element); // Create a subscription onto the original data to update the internal value\n\n      viewModel.contentType.dataStore.subscribe(function (data) {\n        // Only update the value if it differs from the last value added within live edit\n        if (lastUpdateValue !== data[field]) {\n          lastUpdateValue = data[field];\n          element.textContent = data[field];\n          handlePlaceholderClass(element);\n        }\n      }, field); // Resolve issues of content editable being within an anchor\n\n      if ((0, _jquery.default)(element).parent().is(\"a\")) {\n        (0, _jquery.default)(element).parent().attr(\"draggable\", \"false\");\n      }\n    },\n\n    /**\n     * Update live edit binding on an element\n     *\n     * @param {any} element\n     * @param {() => any} valueAccessor\n     * @param {KnockoutAllBindingsAccessor} allBindings\n     * @param {any} viewModel\n     * @param {KnockoutBindingContext} bindingContext\n     */\n    update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n      var _valueAccessor2 = valueAccessor(),\n          field = _valueAccessor2.field;\n\n      element.textContent = viewModel.contentType.dataStore.get(field);\n      handlePlaceholderClass(element);\n    }\n  };\n});\n//# sourceMappingURL=live-edit.js.map","Magento_PageBuilder/js/binding/master-style.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\", \"mageUtils\", \"underscore\", \"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/content-type/style-registry\"], function (_knockout, _mageUtils, _underscore, _config, _styleRegistry) {\n  \"use strict\";\n\n  _knockout = _interopRequireDefault(_knockout);\n  _mageUtils = _interopRequireDefault(_mageUtils);\n  _underscore = _interopRequireDefault(_underscore);\n  _config = _interopRequireDefault(_config);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var bodyId = _config.default.getConfig(\"bodyId\");\n\n  var getStyles = function getStyles(styleObject) {\n    var styles = {};\n\n    _knockout.default.utils.objectForEach(styleObject, function (styleName, styleValue) {\n      styleValue = _knockout.default.utils.unwrapObservable(styleValue);\n\n      if (styleValue === null || styleValue === undefined || styleValue === false) {\n        // Empty string removes the value, whereas null/undefined have no effect\n        styleValue = \"\";\n      }\n\n      if (styleValue) {\n        styles[styleName] = styleValue;\n      }\n    });\n\n    return styles;\n  };\n\n  _knockout.default.bindingHandlers.style = {\n    update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n      var value = _knockout.default.utils.unwrapObservable(valueAccessor() || {});\n\n      var viewportKeys = _underscore.default.keys(_config.default.getConfig(\"viewports\"));\n\n      var commonStyles = getStyles(_underscore.default.omit(value, viewportKeys));\n      var viewportStyles = {};\n\n      _underscore.default.each(viewportKeys, function (name) {\n        viewportStyles[name] = _underscore.default.extend(getStyles(value[name]), commonStyles);\n      });\n\n      if (_underscore.default.findKey(viewportStyles, function (styles) {\n        return !_underscore.default.isEmpty(styles);\n      })) {\n        var id = _mageUtils.default.uniqueid();\n\n        var selector = \"#\" + bodyId + \" [\" + _styleRegistry.pbStyleAttribute + \"=\\\"\" + id + \"\\\"]\";\n\n        _underscore.default.each(viewportKeys, function (name) {\n          var registry = (0, _styleRegistry.getStyleRegistry)(name + bindingContext.$root.id);\n          registry.setStyles(selector, viewportStyles[name]);\n        });\n\n        element.setAttribute(_styleRegistry.pbStyleAttribute, id);\n      }\n    }\n  };\n});\n//# sourceMappingURL=master-style.js.map","Magento_PageBuilder/js/binding/sortable-children.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"knockout\", \"Magento_PageBuilder/js/events\", \"Magento_PageBuilder/js/drag-drop/move-content-type\", \"Magento_PageBuilder/js/utils/array\"], function (_jquery, _knockout, _events, _moveContentType, _array) {\n  \"use strict\";\n\n  _jquery = _interopRequireDefault(_jquery);\n  _knockout = _interopRequireDefault(_knockout);\n  _events = _interopRequireDefault(_events);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var draggedContentType; // Create a new sortable Knockout binding\n\n  _knockout.default.bindingHandlers.sortableChildren = {\n    /**\n     * Init the draggable binding on an element\n     *\n     * @param element\n     * @param valueAccessor\n     * @param allBindingsAccessor\n     * @param data\n     * @param context\n     */\n    init: function init(element, valueAccessor, allBindingsAccessor, data, context) {\n      var instance = context.$data.contentType;\n\n      var options = _knockout.default.unwrap(valueAccessor());\n\n      var originalPosition;\n      (0, _jquery.default)(element).sortable(options).on(\"sortstart\", function (event, ui) {\n        originalPosition = ui.item.index();\n        draggedContentType = instance.children()[originalPosition];\n\n        _events.default.trigger(\"childContentType:sortStart\", {\n          instance: instance,\n          originalPosition: originalPosition,\n          ui: ui\n        });\n      }).on(\"sortstop\", function (event, ui) {\n        _events.default.trigger(\"childContentType:sortStop\", {\n          instance: instance,\n          ui: ui,\n          originalPosition: originalPosition\n        });\n      }).on(\"sortupdate\", function (event, ui) {\n        if (this === ui.item.parent()[0]) {\n          var index = ui.item.index();\n\n          var targetParent = _knockout.default.dataFor(ui.item.parent()[0]).contentType;\n\n          if (targetParent && (originalPosition !== index || draggedContentType.parentContentType !== targetParent)) {\n            ui.item.remove();\n\n            if (draggedContentType.parentContentType === targetParent) {\n              (0, _array.moveArrayItem)(instance.children, originalPosition, index);\n            } else {\n              (0, _moveContentType.moveContentType)(draggedContentType, index, targetParent);\n            }\n\n            _events.default.trigger(\"childContentType:sortUpdate\", {\n              instance: instance,\n              newPosition: index,\n              originalPosition: originalPosition,\n              ui: ui,\n              event: event\n            });\n          }\n        }\n      });\n    }\n  };\n});\n//# sourceMappingURL=sortable-children.js.map","Magento_PageBuilder/js/binding/sortable.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"knockout\", \"underscore\"], function (_jquery, _knockout, _underscore) {\n  \"use strict\";\n\n  _jquery = _interopRequireDefault(_jquery);\n  _knockout = _interopRequireDefault(_knockout);\n  _underscore = _interopRequireDefault(_underscore);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  // Create a new sortable Knockout binding\n  _knockout.default.bindingHandlers.sortable = {\n    init: function init(element, valueAccessor) {\n      // As we can't conditionally apply bindings we block this operation when options are null\n      if (valueAccessor() === null) {\n        return;\n      }\n\n      _underscore.default.defer(function () {\n        (0, _jquery.default)(element).sortable(valueAccessor());\n      });\n    }\n  };\n});\n//# sourceMappingURL=sortable.js.map","Magento_PageBuilder/js/binding/style.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\", \"mageUtils\", \"underscore\", \"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/content-type/style-registry\"], function (_knockout, _mageUtils, _underscore, _config, _styleRegistry) {\n  \"use strict\";\n\n  _knockout = _interopRequireDefault(_knockout);\n  _mageUtils = _interopRequireDefault(_mageUtils);\n  _underscore = _interopRequireDefault(_underscore);\n  _config = _interopRequireDefault(_config);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var originalStyle = _knockout.default.bindingHandlers.style;\n\n  var bodyId = _config.default.getConfig(\"bodyId\");\n\n  function isPageBuilderContext(context) {\n    return !!(context.stage && context.stage.pageBuilder);\n  }\n\n  _knockout.default.bindingHandlers.style = {\n    init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n      if (isPageBuilderContext(bindingContext)) {\n        element.setAttribute(_styleRegistry.pbStyleAttribute, _mageUtils.default.uniqueid());\n      }\n    },\n    update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n      if (isPageBuilderContext(bindingContext)) {\n        var value = _knockout.default.utils.unwrapObservable(valueAccessor() || {});\n\n        var styles = {};\n        var styleId = element.getAttribute(_styleRegistry.pbStyleAttribute);\n        var existedStyleBlock = document.querySelector(\"style[\" + _styleRegistry.styleDataAttribute + \"=\\\"\" + styleId + \"\\\"]\");\n\n        _knockout.default.utils.objectForEach(value, function (styleName, styleValue) {\n          styleValue = _knockout.default.utils.unwrapObservable(styleValue);\n\n          if (styleValue === null || styleValue === undefined || styleValue === false) {\n            styleValue = \"\";\n          }\n\n          if (styleValue) {\n            styles[styleName] = styleValue;\n          }\n        });\n\n        if (existedStyleBlock) {\n          existedStyleBlock.remove();\n        }\n\n        if (!_underscore.default.isEmpty(styles)) {\n          var styleElement = document.createElement(\"style\");\n          styleElement.setAttribute(_styleRegistry.styleDataAttribute, styleId);\n          styleElement.innerHTML = (0, _styleRegistry.generateCssBlock)(\"#\" + bodyId + \" [\" + _styleRegistry.pbStyleAttribute + \"=\\\"\" + styleId + \"\\\"]\", styles);\n          element.parentElement.append(styleElement);\n        }\n      } else {\n        originalStyle.update(element, valueAccessor, allBindings, viewModel, bindingContext);\n      }\n    }\n  };\n});\n//# sourceMappingURL=style.js.map","Magento_PageBuilder/js/content-type-menu/conditional-remove-option.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\ndefine([\"Magento_PageBuilder/js/content-type-menu/option\"], function (_option) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var ConditionalRemoveOption = /*#__PURE__*/function (_option2) {\n    \"use strict\";\n\n    _inheritsLoose(ConditionalRemoveOption, _option2);\n\n    /**\n     * @param {OptionConfigInterface} config\n     */\n    function ConditionalRemoveOption(config) {\n      var _this;\n\n      _this = _option2.call(this, config) || this;\n      var parentContentType = _this.preview.contentType.parentContentType;\n\n      if (parentContentType.children().length < 2) {\n        _this.isDisabled(true);\n      }\n\n      parentContentType.children.subscribe(function (children) {\n        _this.isDisabled(children.length < 2);\n      });\n      return _this;\n    }\n\n    return ConditionalRemoveOption;\n  }(_option);\n\n  return ConditionalRemoveOption;\n});\n//# sourceMappingURL=conditional-remove-option.js.map","Magento_PageBuilder/js/content-type-menu/edit.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/events\", \"mageUtils\", \"underscore\", \"Magento_PageBuilder/js/config\"], function (_events, _mageUtils, _underscore, _config) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var Edit = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * @param {ContentTypeInterface} instance\n     * @param {DataStore} dataStore\n     */\n    function Edit(instance, dataStore) {\n      var _this = this;\n\n      this.instance = instance;\n      this.dataStore = dataStore;\n\n      _events.on(\"form:\" + this.instance.id + \":saveAfter\", function (data) {\n        var viewport = _config.getConfig(\"viewport\");\n\n        var defaultViewport = _config.getConfig(\"defaultViewport\"); // set value to dataStore from default viewport if it is empty\n\n\n        if (defaultViewport !== viewport) {\n          _underscore.each(_this.instance.getViewportFields(viewport, data), function (value, key) {\n            var isEmpty = !_underscore.find(_mageUtils.compare(data[key], _this.instance.dataStores[defaultViewport].get(key)).changes, function (change) {\n              return !_underscore.isEmpty(change.oldValue);\n            });\n\n            if (isEmpty) {\n              _this.instance.dataStores[viewport].set(key, data[key]);\n\n              data[key] = _this.instance.dataStores[defaultViewport].get(key);\n            }\n          });\n        }\n\n        _this.dataStore.setState(_this.filterData(data));\n      });\n    }\n    /**\n     * Open the modal\n     */\n\n\n    var _proto = Edit.prototype;\n\n    _proto.open = function open() {\n      var _this2 = this;\n\n      var contentTypeData = this.dataStore.getState();\n\n      var viewport = _config.getConfig(\"viewport\");\n\n      var defaultViewport = _config.getConfig(\"defaultViewport\"); // set empty value if it the same in default viewport\n\n\n      if (defaultViewport !== viewport) {\n        _underscore.each(this.instance.getViewportFields(viewport, contentTypeData), function (value, key) {\n          if (_mageUtils.compare(contentTypeData[key], _this2.instance.dataStores.desktop.get(key)).equal) {\n            contentTypeData[key] = undefined;\n          }\n        });\n      }\n\n      _events.trigger(\"contentType:editBefore\", {\n        contentType: this.instance\n      });\n\n      _events.trigger(\"form:renderAfter\", {\n        data: contentTypeData,\n        appearances: this.instance.config.appearances,\n        defaultNamespace: this.getDefaultNamespaceForm(),\n        id: this.instance.id,\n        namespace: this.getFormNamespace(contentTypeData),\n        title: this.instance.config.label\n      });\n    }\n    /**\n     * Flip flop to JSON and back again to ensure all data received from the form is serializable. Magento by default\n     * adds functions into some basic types which cannot be serialized when calling PostMessage.\n     *\n     * @param {DataObject} data\n     * @returns {DataObject}\n     */\n    ;\n\n    _proto.filterData = function filterData(data) {\n      return JSON.parse(JSON.stringify(data));\n    }\n    /**\n     * Determine the form namespace based on the currently set appearance\n     *\n     * @param {DataObject} contentTypeData\n     * @returns {string}\n     */\n    ;\n\n    _proto.getFormNamespace = function getFormNamespace(contentTypeData) {\n      var viewport = this.instance.preview.viewport();\n      var currentAppearance = this.dataStore.get(\"appearance\");\n      var appearance = this.instance.config.appearances[currentAppearance];\n      var breakpoints = appearance.breakpoints;\n      var formNamespace = this.getDefaultNamespaceForm(); // Use the default form unless a custom one is defined\n\n      if (breakpoints && breakpoints[viewport] && breakpoints[viewport].form) {\n        formNamespace = breakpoints[viewport].form;\n      } else if (!_underscore.isUndefined(appearance.form)) {\n        formNamespace = appearance.form;\n      }\n\n      return formNamespace;\n    }\n    /**\n     * Determine the form default namespace based on the currently set appearance and breakpoint\n     *\n     * @returns {string}\n     */\n    ;\n\n    _proto.getDefaultNamespaceForm = function getDefaultNamespaceForm() {\n      var viewport = this.instance.preview.viewport();\n      var breakpoints = this.instance.config.breakpoints;\n      var formNamespace = this.instance.config.form;\n\n      if (breakpoints && breakpoints[viewport] && breakpoints[viewport].form) {\n        formNamespace = breakpoints[viewport].form;\n      }\n\n      return formNamespace;\n    };\n\n    return Edit;\n  }();\n\n  return Edit;\n});\n//# sourceMappingURL=edit.js.map","Magento_PageBuilder/js/content-type-menu/hide-show-option.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\ndefine([\"mage/translate\", \"Magento_PageBuilder/js/content-type-menu/option\"], function (_translate, _option) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var HideShowOption = /*#__PURE__*/function (_option2) {\n    \"use strict\";\n\n    _inheritsLoose(HideShowOption, _option2);\n\n    /**\n     * @param {OptionConfigInterface} options\n     */\n    function HideShowOption(options) {\n      var _this;\n\n      _this = _option2.call(this, options) || this; // Modify the icon when changes are made to display in the data store\n\n      _this.preview.contentType.dataStore.subscribe(_this.onDisplayChange.bind(_assertThisInitialized(_this)), \"display\");\n\n      return _this;\n    }\n    /**\n     * On display change update the title and icon\n     *\n     * @param {DataObject} state\n     */\n\n\n    var _proto = HideShowOption.prototype;\n\n    _proto.onDisplayChange = function onDisplayChange(state) {\n      var display = !!state.display;\n\n      if (display) {\n        this.icon(HideShowOption.hideIcon);\n        this.title(HideShowOption.hideText);\n      } else {\n        this.icon(HideShowOption.showIcon);\n        this.title(HideShowOption.showText);\n      }\n    };\n\n    return HideShowOption;\n  }(_option);\n\n  HideShowOption.showText = (0, _translate)(\"Show\");\n  HideShowOption.showIcon = \"<i class='icon-pagebuilder-show'></i>\";\n  HideShowOption.hideText = (0, _translate)(\"Hide\");\n  HideShowOption.hideIcon = \"<i class='icon-pagebuilder-hide'></i>\";\n  return HideShowOption;\n});\n//# sourceMappingURL=hide-show-option.js.map","Magento_PageBuilder/js/content-type-menu/option.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\ndefine([\"knockout\"], function (_knockout) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var Option = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * @param {OptionConfigInterface} config\n     */\n    function Option(config) {\n      var _this = this;\n\n      this.icon = _knockout.observable(\"\");\n      this.title = _knockout.observable(\"\");\n      this.classes = _knockout.observable({});\n      this.isDisabled = _knockout.observable(false);\n      this.config = config;\n      this.preview = config.preview;\n      this.icon(config.icon);\n      this.title(config.title);\n      this.code = config.code;\n      this.sort = config.sort || 0;\n      this.customTemplate = config.template; // Generate an array of classes for KO to consume\n\n      var koClasses = {};\n\n      if (config.classes && config.classes.length > 0) {\n        config.classes.forEach(function (cssClass) {\n          koClasses[cssClass] = true;\n        });\n      } // Always add a disabled class which tracks whether this option is disabled\n\n\n      koClasses.disabled = this.isDisabled;\n      this.classes(koClasses); // If no action is supplied pass an empty function, this is called within the context of the preview\n\n      var action = config.action ? config.action : function () {\n        return;\n      };\n\n      this.action = function () {\n        if (!_this.isDisabled()) {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          action.apply(_this.preview, args);\n        }\n      };\n    }\n\n    _createClass(Option, [{\n      key: \"template\",\n      get: function get() {\n        return this.customTemplate || null;\n      }\n    }]);\n\n    return Option;\n  }();\n\n  return Option;\n});\n//# sourceMappingURL=option.js.map","Magento_PageBuilder/js/content-type-menu/title-option.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\ndefine([\"Magento_PageBuilder/js/content-type-menu/option\"], function (_option) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var TitleOption = /*#__PURE__*/function (_option2) {\n    \"use strict\";\n\n    _inheritsLoose(TitleOption, _option2);\n\n    /**\n     * @param {OptionConfigInterface} options\n     */\n    function TitleOption(options) {\n      var _this;\n\n      _this = _option2.call(this, options) || this; // Modify the icon when changes are made to display in the data store\n\n      _this.preview.displayLabel.subscribe(function (label) {\n        _this.title(label);\n      });\n\n      return _this;\n    }\n\n    return TitleOption;\n  }(_option);\n\n  return TitleOption;\n});\n//# sourceMappingURL=title-option.js.map","Magento_PageBuilder/js/converter/converter-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=converter-interface.js.map","Magento_PageBuilder/js/converter/converter-pool-factory.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/utils/loader\", \"Magento_PageBuilder/js/converter/converter-pool\"], function (_config, _loader, _converterPool) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Create a new instance of converter pool\n   */\n  function create(contentType) {\n    var config = _config.getContentTypeConfig(contentType);\n\n    var converters = [];\n    var appearanceName;\n\n    for (var _i = 0, _Object$keys = Object.keys(config.appearances); _i < _Object$keys.length; _i++) {\n      appearanceName = _Object$keys[_i];\n      var appearance = config.appearances[appearanceName];\n\n      if (appearance !== undefined && appearance.elements !== undefined) {\n        var elementName = void 0;\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(appearance.elements); _i2 < _Object$keys2.length; _i2++) {\n          elementName = _Object$keys2[_i2];\n\n          if (appearance.elements[elementName].style !== undefined) {\n            for (var _iterator = _createForOfIteratorHelperLoose(appearance.elements[elementName].style), _step; !(_step = _iterator()).done;) {\n              var propertyConfig = _step.value;\n\n              if (!!propertyConfig.converter && converters.indexOf(propertyConfig.converter) === -1 && !_converterPool.get(propertyConfig.converter)) {\n                converters.push(propertyConfig.converter);\n              }\n\n              if (!!propertyConfig.preview_converter && converters.indexOf(propertyConfig.preview_converter) === -1 && !_converterPool.get(propertyConfig.preview_converter)) {\n                converters.push(propertyConfig.preview_converter);\n              }\n            }\n          }\n\n          if (appearance.elements[elementName].attributes !== undefined) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(appearance.elements[elementName].attributes), _step2; !(_step2 = _iterator2()).done;) {\n              var attributeConfig = _step2.value;\n\n              if (!!attributeConfig.converter && converters.indexOf(attributeConfig.converter) === -1 && !_converterPool.get(attributeConfig.converter)) {\n                converters.push(attributeConfig.converter);\n              }\n\n              if (!!attributeConfig.preview_converter && converters.indexOf(attributeConfig.preview_converter) === -1 && !_converterPool.get(attributeConfig.preview_converter)) {\n                converters.push(attributeConfig.preview_converter);\n              }\n            }\n          }\n\n          if (appearance.elements[elementName].html !== undefined) {\n            var htmlConfig = appearance.elements[elementName].html;\n\n            if (!!htmlConfig.converter && converters.indexOf(htmlConfig.converter) === -1 && !_converterPool.get(htmlConfig.converter)) {\n              converters.push(htmlConfig.converter);\n            }\n\n            if (!!htmlConfig.preview_converter && converters.indexOf(htmlConfig.preview_converter) === -1 && !_converterPool.get(htmlConfig.preview_converter)) {\n              converters.push(htmlConfig.preview_converter);\n            }\n          }\n        }\n      }\n    }\n\n    return new Promise(function (resolve) {\n      (0, _loader)(converters, function () {\n        for (var _len = arguments.length, loadedConverters = new Array(_len), _key = 0; _key < _len; _key++) {\n          loadedConverters[_key] = arguments[_key];\n        }\n\n        for (var i = 0; i < converters.length; i++) {\n          _converterPool.register(converters[i], new loadedConverters[i]());\n        }\n\n        resolve(_converterPool);\n      });\n    });\n  }\n\n  return create;\n});\n//# sourceMappingURL=converter-pool-factory.js.map","Magento_PageBuilder/js/converter/converter-pool.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var ConverterPool = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function ConverterPool() {\n      this.converters = {};\n    }\n\n    var _proto = ConverterPool.prototype;\n\n    /**\n     * Retrieve a converter from the pool\n     *\n     * @param {string} name\n     * @returns {ConverterInterface}\n     */\n    _proto.get = function get(name) {\n      return this.converters[name] !== undefined ? this.converters[name] : null;\n    }\n    /**\n     * Register a new converter into the pool\n     *\n     * @param {string} name\n     * @param {ConverterInterface} converter\n     */\n    ;\n\n    _proto.register = function register(name, converter) {\n      this.converters[name] = converter;\n    };\n\n    return ConverterPool;\n  }();\n\n  var _default = new ConverterPool();\n\n  return _default;\n});\n//# sourceMappingURL=converter-pool.js.map","Magento_PageBuilder/js/converter/attribute/link-href.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var CreateValueForHref = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function CreateValueForHref() {\n      this.widgetParamsByLinkType = {\n        category: {\n          type: \"Magento\\\\Catalog\\\\Block\\\\Category\\\\Widget\\\\Link\",\n          id_path: \"category/:href\",\n          template: \"Magento_PageBuilder::widget/link_href.phtml\",\n          type_name: \"Catalog Category Link\"\n        },\n        product: {\n          type: \"Magento\\\\Catalog\\\\Block\\\\Product\\\\Widget\\\\Link\",\n          id_path: \"product/:href\",\n          template: \"Magento_PageBuilder::widget/link_href.phtml\",\n          type_name: \"Catalog Product Link\"\n        },\n        page: {\n          type: \"Magento\\\\Cms\\\\Block\\\\Widget\\\\Page\\\\Link\",\n          page_id: \":href\",\n          template: \"Magento_PageBuilder::widget/link_href.phtml\",\n          type_name: \"CMS Page Link\"\n        }\n      };\n    }\n\n    var _proto = CreateValueForHref.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var link = (0, _object.get)(data, name);\n      var href = \"\";\n\n      if (!link) {\n        return href;\n      }\n\n      var linkType = link.type;\n      var isHrefId = !isNaN(parseInt(link[linkType], 10));\n\n      if (isHrefId && link) {\n        href = this.convertToWidget(link[linkType], linkType);\n      } else if (typeof link[linkType] === \"string\") {\n        href = link[linkType];\n      }\n\n      return href;\n    }\n    /**\n     * @param {string} href\n     * @param {string} linkType\n     * @returns {string}\n     */\n    ;\n\n    _proto.convertToWidget = function convertToWidget(href, linkType) {\n      if (!href || !this.widgetParamsByLinkType[linkType]) {\n        return href;\n      }\n\n      var attributesString = _underscore.map(this.widgetParamsByLinkType[linkType], function (val, key) {\n        return key + \"='\" + val.replace(\":href\", href) + \"'\";\n      }).join(\" \");\n\n      return \"{{widget \" + attributesString + \" }}\";\n    };\n\n    return CreateValueForHref;\n  }();\n\n  return CreateValueForHref;\n});\n//# sourceMappingURL=link-href.js.map","Magento_PageBuilder/js/converter/attribute/link-target.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var CreateValueForTarget = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function CreateValueForTarget() {}\n\n    var _proto = CreateValueForTarget.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (!value) {\n        return \"\";\n      }\n\n      return value.setting ? \"_blank\" : \"\";\n    };\n\n    return CreateValueForTarget;\n  }();\n\n  return CreateValueForTarget;\n});\n//# sourceMappingURL=link-target.js.map","Magento_PageBuilder/js/converter/attribute/link-type.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var CreateValueForLinkType = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function CreateValueForLinkType() {}\n\n    var _proto = CreateValueForLinkType.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n      return value && value.type ? value.type : \"default\";\n    };\n\n    return CreateValueForLinkType;\n  }();\n\n  return CreateValueForLinkType;\n});\n//# sourceMappingURL=link-type.js.map","Magento_PageBuilder/js/converter/attribute/src.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/utils/image\", \"Magento_PageBuilder/js/utils/object\", \"Magento_PageBuilder/js/utils/url\"], function (_config, _image, _object, _url) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Src = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Src() {}\n\n    var _proto = Src.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (!value) {\n        return \"\";\n      }\n\n      return (0, _image.decodeUrl)(value);\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value[0] === undefined || value[0].url === undefined) {\n        return \"\";\n      }\n\n      var imageUrl = value[0].url;\n      var mediaUrl = (0, _url.convertUrlToPathIfOtherUrlIsOnlyAPath)(_config.getConfig(\"media_url\"), imageUrl);\n      var mediaPath = imageUrl.split(mediaUrl);\n      return \"{{media url=\" + mediaPath[1] + \"}}\";\n    };\n\n    return Src;\n  }();\n\n  return Src;\n});\n//# sourceMappingURL=src.js.map","Magento_PageBuilder/js/converter/attribute/video-overlay-color.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var OverlayColor = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function OverlayColor() {}\n\n    var _proto = OverlayColor.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value === \"transparent\" ? \"\" : value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      if (data.video_overlay_color) {\n        return data.video_overlay_color.toString();\n      }\n\n      return \"\";\n    };\n\n    return OverlayColor;\n  }();\n\n  return OverlayColor;\n});\n//# sourceMappingURL=video-overlay-color.js.map","Magento_PageBuilder/js/converter/attribute/preview/src.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Src = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Src() {}\n\n    var _proto = Src.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value && typeof value[0] === \"object\") {\n        return value[0].url;\n      }\n\n      return \"\";\n    };\n\n    return Src;\n  }();\n\n  return Src;\n});\n//# sourceMappingURL=src.js.map","Magento_PageBuilder/js/converter/attribute/preview/store-id.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\"], function (_jquery) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var StoreId = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function StoreId() {}\n\n    var _proto = StoreId.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      if (typeof data[name] !== \"string\") {\n        return \"\";\n      }\n\n      var storeId = (0, _jquery)('[data-role=\"store-view-id\"]').val() || \"0\";\n      return data[name].replace(/}}$/, \" store_id=\\\"\" + storeId + \"\\\"}}\");\n    };\n\n    return StoreId;\n  }();\n\n  return StoreId;\n});\n//# sourceMappingURL=store-id.js.map","Magento_PageBuilder/js/converter/html/decode.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/directives\", \"Magento_PageBuilder/js/utils/object\"], function (_directives, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Decode = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Decode() {}\n\n    var _proto = Decode.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {string} value\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      // Convert the encoded string back to HTML without executing\n      var html = new DOMParser().parseFromString(value, \"text/html\");\n      return html.body.textContent;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {Object} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return (0, _directives.removeQuotesInMediaDirectives)((0, _object.get)(data, name));\n    };\n\n    return Decode;\n  }();\n\n  return Decode;\n});\n//# sourceMappingURL=decode.js.map","Magento_PageBuilder/js/converter/html/directive.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/directives\", \"Magento_PageBuilder/js/utils/editor\", \"Magento_PageBuilder/js/utils/object\"], function (_directives, _editor, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Directives = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Directives() {}\n\n    var _proto = Directives.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {string} value\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {Object} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return (0, _editor.encodeContent)((0, _directives.convertMediaDirectivesToUrls)((0, _directives.removeQuotesInMediaDirectives)((0, _object.get)(data, name))));\n    };\n\n    return Directives;\n  }();\n\n  return Directives;\n});\n//# sourceMappingURL=directive.js.map","Magento_PageBuilder/js/converter/html/tag-escaper.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var TagEscaper = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function TagEscaper() {}\n\n    var _proto = TagEscaper.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {string} value\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      var result = (0, _underscore.unescape)(value); // Have to do a manual &nbsp; replace since underscore un-escape does not un-escape &nbsp;\n\n      return result.replace(/&nbsp;/g, String.fromCharCode(160));\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {Object} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return (0, _underscore.escape)((0, _object.get)(data, name));\n    };\n\n    return TagEscaper;\n  }();\n\n  return TagEscaper;\n});\n//# sourceMappingURL=tag-escaper.js.map","Magento_PageBuilder/js/converter/style/background-image.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var BackgroundImage = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BackgroundImage() {}\n\n    var _proto = BackgroundImage.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return null;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return null;\n    };\n\n    return BackgroundImage;\n  }();\n\n  return BackgroundImage;\n});\n//# sourceMappingURL=background-image.js.map","Magento_PageBuilder/js/converter/style/border-style.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var BorderStyleDefault = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BorderStyleDefault() {}\n\n    var _proto = BorderStyleDefault.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (!value) {\n        return \"_default\";\n      }\n\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value && value !== \"_default\") {\n        return value;\n      }\n    };\n\n    return BorderStyleDefault;\n  }();\n\n  return BorderStyleDefault;\n});\n//# sourceMappingURL=border-style.js.map","Magento_PageBuilder/js/converter/style/border-width.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var BorderWidth = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BorderWidth() {}\n\n    var _proto = BorderWidth.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value === \"initial\" ? \"\" : value.replace(\"px\", \"\");\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value) {\n        return value + \"px\";\n      }\n    };\n\n    return BorderWidth;\n  }();\n\n  return BorderWidth;\n});\n//# sourceMappingURL=border-width.js.map","Magento_PageBuilder/js/converter/style/color.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Color = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Color() {}\n\n    var _proto = Color.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (value === \"default\" || value === \"initial\" || value === \"\") {\n        value = \"\";\n      } else {\n        var regexp = /(\\d{0,3}),\\s(\\d{0,3}),\\s(\\d{0,3})/;\n        var matches = regexp.exec(value);\n\n        if (matches) {\n          value = \"#\" + this.fromIntToHex(parseInt(matches[1], 10)) + this.fromIntToHex(parseInt(matches[2], 10)) + this.fromIntToHex(parseInt(matches[3], 10));\n        }\n      }\n\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return (0, _object.get)(data, name, \"\");\n    }\n    /**\n     * Convert from int to hex\n     *\n     * @param {number} value\n     * @returns {string}\n     */\n    ;\n\n    _proto.fromIntToHex = function fromIntToHex(value) {\n      var hex = value.toString(16);\n      return hex.length === 1 ? \"0\" + hex : hex;\n    };\n\n    return Color;\n  }();\n\n  return Color;\n});\n//# sourceMappingURL=color.js.map","Magento_PageBuilder/js/converter/style/display.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Display = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Display() {}\n\n    var _proto = Display.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return !(value === \"none\");\n    }\n    /**\n     * Convert value to knockout format, we only provide a none property if we intend for the content type to be hidden,\n     * otherwise we let the original display property handle the display of the content type.\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (!_underscore.isUndefined(value) && value === false) {\n        return \"none\";\n      }\n\n      return;\n    };\n\n    return Display;\n  }();\n\n  return Display;\n});\n//# sourceMappingURL=display.js.map","Magento_PageBuilder/js/converter/style/margins.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Margins = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Margins() {}\n\n    var _proto = Margins.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (undefined !== value.margin) {\n        return {\n          margin: {\n            top: value.margin.top.replace(\"px\", \"\"),\n            left: value.margin.left.replace(\"px\", \"\"),\n            right: value.margin.right.replace(\"px\", \"\"),\n            bottom: value.margin.bottom.replace(\"px\", \"\")\n          }\n        };\n      }\n\n      return {};\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var result = {};\n      var value = (0, _object.get)(data, name);\n\n      if (value && _underscore.isString(value)) {\n        value = JSON.parse(value);\n      }\n\n      if (value && undefined !== value.margin) {\n        result.marginLeft = value.margin.left ? value.margin.left + \"px\" : \"\";\n        result.marginTop = value.margin.top ? value.margin.top + \"px\" : \"\";\n        result.marginRight = value.margin.right ? value.margin.right + \"px\" : \"\";\n        result.marginBottom = value.margin.bottom ? value.margin.bottom + \"px\" : \"\";\n      }\n\n      return result;\n    };\n\n    return Margins;\n  }();\n\n  return Margins;\n});\n//# sourceMappingURL=margins.js.map","Magento_PageBuilder/js/converter/style/min-height.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var MinHeight = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function MinHeight() {}\n\n    var _proto = MinHeight.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value.indexOf(\"calc\") !== -1 ? value.substring(5, value.length - 1) : value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n      return value.split(/\\+|\\-|\\*|\\//).length > 1 ? \"calc(\" + (0, _object.get)(data, name) + \")\" : value;\n    };\n\n    return MinHeight;\n  }();\n\n  return MinHeight;\n});\n//# sourceMappingURL=min-height.js.map","Magento_PageBuilder/js/converter/style/overlay-border-radius.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Takes difference of border width from border radius to conform snugly to edges of wrapper border\n   *\n   * @api\n   */\n  var OverlayBorderRadius = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function OverlayBorderRadius() {}\n\n    var _proto = OverlayBorderRadius.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var borderRadius = data.border_radius ? parseInt(data.border_radius, 10) : 0;\n      var borderWidth = data.border_width ? parseInt(data.border_width, 10) : 0;\n\n      if (borderRadius <= borderWidth) {\n        return \"0\";\n      }\n\n      return borderRadius - borderWidth + \"px\";\n    };\n\n    return OverlayBorderRadius;\n  }();\n\n  return OverlayBorderRadius;\n});\n//# sourceMappingURL=overlay-border-radius.js.map","Magento_PageBuilder/js/converter/style/paddings.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Paddings = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Paddings() {}\n\n    var _proto = Paddings.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (undefined !== value.padding) {\n        return {\n          padding: {\n            top: value.padding.top.replace(\"px\", \"\"),\n            left: value.padding.left.replace(\"px\", \"\"),\n            right: value.padding.right.replace(\"px\", \"\"),\n            bottom: value.padding.bottom.replace(\"px\", \"\")\n          }\n        };\n      }\n\n      return {};\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {DataObject} data\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var result = {};\n      var value = (0, _object.get)(data, name);\n\n      if (value && _underscore.isString(value)) {\n        value = JSON.parse(value);\n      }\n\n      if (value && undefined !== value.padding) {\n        result.paddingLeft = value.padding.left ? value.padding.left + \"px\" : \"\";\n        result.paddingTop = value.padding.top ? value.padding.top + \"px\" : \"\";\n        result.paddingRight = value.padding.right ? value.padding.right + \"px\" : \"\";\n        result.paddingBottom = value.padding.bottom ? value.padding.bottom + \"px\" : \"\";\n      }\n\n      return result;\n    };\n\n    return Paddings;\n  }();\n\n  return Paddings;\n});\n//# sourceMappingURL=paddings.js.map","Magento_PageBuilder/js/converter/style/remove-px.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var RemovePx = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function RemovePx() {}\n\n    var _proto = RemovePx.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value.replace(\"px\", \"\");\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value) {\n        return value + \"px\";\n      }\n    };\n\n    return RemovePx;\n  }();\n\n  return RemovePx;\n});\n//# sourceMappingURL=remove-px.js.map","Magento_PageBuilder/js/converter/style/video-overlay-color.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var VideoOverlayColor = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function VideoOverlayColor() {}\n\n    var _proto = VideoOverlayColor.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value !== \"\" && value !== undefined) {\n        return value;\n      }\n\n      return \"transparent\";\n    };\n\n    return VideoOverlayColor;\n  }();\n\n  return VideoOverlayColor;\n});\n//# sourceMappingURL=video-overlay-color.js.map","Magento_PageBuilder/js/converter/style/width.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Subtract margin from width to ensure adjacent elements do not\n   * move or resize when positive or negative margins are present\n   *\n   * @api\n   */\n  var Width = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Width() {}\n\n    var _proto = Width.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      if (value.indexOf(\"calc\") !== -1) {\n        return value.split(\"%\")[0].split(\"(\")[1] + \"%\";\n      }\n\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string | object}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      if (data[name] && data[name] !== \"\") {\n        var marginsAndPadding = data.margins_and_padding || {};\n        var margins = marginsAndPadding.margin || \"\";\n        var marginLeft = margins.left ? parseInt(margins.left, 10) : 0;\n        var marginRight = margins.right ? parseInt(margins.right, 10) : 0;\n\n        if (marginLeft === 0 && marginRight === 0) {\n          return data[name].toString();\n        }\n\n        return \"calc(\" + data[name].toString() + \" - \" + (marginLeft + marginRight) + \"px)\";\n      }\n    };\n\n    return Width;\n  }();\n\n  return Width;\n});\n//# sourceMappingURL=width.js.map","Magento_PageBuilder/js/converter/style/preview/background-image.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var BackgroundImage = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BackgroundImage() {}\n\n    var _proto = BackgroundImage.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return value;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      var value = (0, _object.get)(data, name);\n\n      if (value && typeof value[0] === \"object\") {\n        return \"url(\" + value[0].url + \")\";\n      }\n\n      return \"\";\n    };\n\n    return BackgroundImage;\n  }();\n\n  return BackgroundImage;\n});\n//# sourceMappingURL=background-image.js.map","Magento_PageBuilder/js/converter/style/preview/display.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Display = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Display() {}\n\n    var _proto = Display.prototype;\n\n    /**\n     * Ensure the display none property doesn't persist to the preview\n     *\n     * @param value string\n     * @returns {string | object}\n     */\n    _proto.fromDom = function fromDom(value) {\n      return;\n    }\n    /**\n     * Ensure the display none property doesn't persist to the preview\n     *\n     * @param name string\n     * @param data Object\n     * @returns {string}\n     */\n    ;\n\n    _proto.toDom = function toDom(name, data) {\n      return;\n    };\n\n    return Display;\n  }();\n\n  return Display;\n});\n//# sourceMappingURL=display.js.map","Magento_PageBuilder/js/drag-drop/drop-indicators.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/create-stylesheet\", \"Magento_PageBuilder/js/drag-drop/matrix\"], function (_createStylesheet, _matrix) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var headDropIndicatorStyles;\n  /**\n   * Show the drop indicators for a specific content type\n   *\n   * We do this by creating a style sheet and injecting it into the head. It's dramatically quicker to allow the browsers\n   * CSS engine to display these for us than manually iterating through the DOM and applying a class to the elements.\n   *\n   * @param {string} contentType\n   * @param {string} stageId\n   * @returns {HTMLStyleElement}\n   */\n\n  function showDropIndicators(contentType, stageId) {\n    var acceptedContainers = (0, _matrix.getContainersFor)(contentType);\n\n    if (acceptedContainers.length > 0) {\n      var _ref;\n\n      var classNames = acceptedContainers.map(function (container) {\n        return \"#\" + stageId + \" .content-type-container.\" + container + \"-container > .pagebuilder-drop-indicator, \" + (\"#\" + stageId + \" .pagebuilder-content-type.type-container.empty-container > .content-type-container.\") + (container + \"-container:before\");\n      });\n      var styles = (0, _createStylesheet.createStyleSheet)((_ref = {}, _ref[classNames.join(\", \")] = {\n        opacity: 1,\n        visibility: \"visible\"\n      }, _ref));\n      document.head.appendChild(styles);\n      headDropIndicatorStyles = styles;\n      return styles;\n    }\n  }\n  /**\n   * Hide the drop indicators\n   */\n\n\n  function hideDropIndicators() {\n    if (headDropIndicatorStyles) {\n      headDropIndicatorStyles.remove();\n      headDropIndicatorStyles = null;\n    }\n  }\n\n  return {\n    showDropIndicators: showDropIndicators,\n    hideDropIndicators: hideDropIndicators\n  };\n});\n//# sourceMappingURL=drop-indicators.js.map","Magento_PageBuilder/js/drag-drop/matrix.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/config\"], function (_underscore, _config) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var allowedParents = {};\n  /**\n   * Build a matrix of which containers each content type can go into, these are determined by the allowed_parents\n   * node within the content types configuration\n   */\n\n  function generateAllowedParents() {\n    _underscore.values(_config.getConfig(\"content_types\")).forEach(function (contentType) {\n      allowedParents[contentType.name] = contentType.allowed_parents.slice();\n    });\n  }\n  /**\n   * Retrieve the containers a specific content type can be contained in\n   *\n   * @param {string} contentType\n   * @returns {any}\n   */\n\n\n  function getContainersFor(contentType) {\n    if (allowedParents[contentType]) {\n      return allowedParents[contentType];\n    }\n\n    return [];\n  }\n  /**\n   * Generate classes of containers the content type is allowed within\n   *\n   * @param {string} contentType\n   * @param {string} stageId\n   * @returns {string}\n   */\n\n\n  function getAllowedContainersClasses(contentType, stageId) {\n    return getContainersFor(contentType).map(function (value) {\n      return \"#\" + stageId + \" .content-type-container.\" + value + \"-container\";\n    }).join(\", \");\n  }\n  /**\n   * @api\n   */\n\n\n  return {\n    generateAllowedParents: generateAllowedParents,\n    getContainersFor: getContainersFor,\n    getAllowedContainersClasses: getAllowedContainersClasses\n  };\n});\n//# sourceMappingURL=matrix.js.map","Magento_PageBuilder/js/drag-drop/move-content-type.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\", \"Magento_PageBuilder/js/events\"], function (_knockout, _events) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Move a content type to a new index, with the option to move to a new container\n   *\n   * @param {ContentTypeInterface | ContentTypeCollectionInterface} contentType\n   * @param {number} targetIndex\n   * @param {ContentTypeCollectionInterface} targetParent\n   */\n  function moveContentType(contentType, targetIndex, targetParent) {\n    if (targetParent === void 0) {\n      targetParent = null;\n    }\n\n    var sourceParent = contentType.parentContentType;\n    var sourceIndex = contentType.parentContentType.children().indexOf(contentType);\n    var sourceParentChildren = sourceParent.getChildren(); // Trigger our block move event\n\n    _events.trigger(\"contentType:moveBefore\", {\n      contentType: contentType,\n      sourceParent: sourceParent,\n      targetParent: targetParent,\n      targetIndex: targetIndex,\n      stageId: contentType.stageId\n    });\n\n    _events.trigger(contentType.config.name + \":moveBefore\", {\n      contentType: contentType,\n      sourceParent: sourceParent,\n      targetParent: targetParent,\n      targetIndex: targetIndex,\n      stageId: contentType.stageId\n    });\n\n    if (targetParent && sourceParent !== targetParent) {\n      contentType.parentContentType = targetParent; // Handle dragging between sortable elements\n\n      sourceParentChildren.splice(sourceIndex, 1);\n      targetParent.getChildren().splice(targetIndex, 0, contentType);\n    } else {\n      // Retrieve the children from the source parent\n      var children = _knockout.utils.unwrapObservable(sourceParentChildren); // Inform KO that this value is about to mutate\n\n\n      if (sourceParentChildren.valueWillMutate) {\n        sourceParentChildren.valueWillMutate();\n      } // Perform the mutation\n\n\n      children.splice(sourceIndex, 1);\n      children.splice(targetIndex, 0, contentType); // Inform KO that the mutation is complete\n\n      if (sourceParentChildren.valueHasMutated) {\n        sourceParentChildren.valueHasMutated();\n      }\n    } // Process any deferred bindings\n\n\n    if (_knockout.processAllDeferredBindingUpdates) {\n      _knockout.processAllDeferredBindingUpdates();\n    } // Trigger our content type move event\n\n\n    _events.trigger(\"contentType:moveAfter\", {\n      contentType: contentType,\n      sourceParent: sourceParent,\n      targetParent: targetParent,\n      targetIndex: targetIndex,\n      stageId: contentType.stageId\n    });\n\n    _events.trigger(contentType.config.name + \":moveAfter\", {\n      contentType: contentType,\n      sourceParent: sourceParent,\n      targetParent: targetParent,\n      targetIndex: targetIndex,\n      stageId: contentType.stageId\n    });\n  }\n\n  return {\n    moveContentType: moveContentType\n  };\n});\n//# sourceMappingURL=move-content-type.js.map","Magento_PageBuilder/js/drag-drop/registry.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var draggedContentTypeConfig;\n  /**\n   * Set the current dragged blocks config into the registry\n   *\n   * @param {ContentTypeConfigInterface} config\n   */\n\n  function setDraggedContentTypeConfig(config) {\n    draggedContentTypeConfig = config;\n  }\n  /**\n   * Retrieve the dragged blocks config\n   *\n   * @returns {ContentTypeConfigInterface}\n   */\n\n\n  function getDraggedContentTypeConfig() {\n    return draggedContentTypeConfig;\n  }\n\n  return {\n    setDraggedContentTypeConfig: setDraggedContentTypeConfig,\n    getDraggedContentTypeConfig: getDraggedContentTypeConfig\n  };\n});\n//# sourceMappingURL=registry.js.map","Magento_PageBuilder/js/drag-drop/sortable.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"knockout\", \"Magento_PageBuilder/js/events\", \"Magento_PageBuilder/js/content-type-factory\", \"Magento_PageBuilder/js/drag-drop/drop-indicators\", \"Magento_PageBuilder/js/drag-drop/matrix\", \"Magento_PageBuilder/js/drag-drop/move-content-type\", \"Magento_PageBuilder/js/drag-drop/registry\"], function (_jquery, _knockout, _events, _contentTypeFactory, _dropIndicators, _matrix, _moveContentType, _registry) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * The class used when hiding a content type\n   * @type {string}\n   */\n  var hiddenClass = \".pagebuilder-content-type-hidden\";\n  /**\n   * Return the sortable options for an instance which requires sorting / dropping functionality\n   *\n   * @param {Preview} preview\n   * @returns {JQueryUI.SortableOptions | any}\n   */\n\n  function getSortableOptions(preview) {\n    return {\n      cursor: \"-webkit-grabbing\",\n      tolerance: \"pointer\",\n      helper: function helper(event, item) {\n        var helper = (0, _jquery)(item).clone();\n        helper.css({\n          pointerEvents: \"none\"\n        });\n        return helper[0];\n      },\n      appendTo: document.body,\n      placeholder: {\n        element: function element() {\n          return (0, _jquery)(\"<div />\").addClass(\"pagebuilder-sortable-placeholder\")[0];\n        },\n        update: function update() {\n          return;\n        }\n      },\n      handle: \".move-structural\",\n      items: \"> .pagebuilder-content-type-wrapper\",\n      start: function start() {\n        onSortStart.apply(this, [preview].concat(Array.prototype.slice.call(arguments)));\n      },\n      sort: function sort() {\n        onSort.apply(this, [preview].concat(Array.prototype.slice.call(arguments)));\n      },\n      receive: function receive() {\n        onSortReceive.apply(this, [preview].concat(Array.prototype.slice.call(arguments)));\n      },\n      update: function update() {\n        onSortUpdate.apply(this, [preview].concat(Array.prototype.slice.call(arguments)));\n      },\n      stop: function stop() {\n        onSortStop.apply(this, [preview].concat(Array.prototype.slice.call(arguments)));\n      }\n    };\n  }\n  /**\n   * Get the stage ID from the preview\n   *\n   * @param {Preview | Stage} preview\n   * @returns {string}\n   */\n\n\n  function getPreviewStageIdProxy(preview) {\n    return preview.contentType.stageId;\n  }\n  /**\n   * Retrieve the contentType from the preview\n   *\n   * @param {Preview | Stage} instance\n   * @returns {any}\n   */\n\n\n  function getcontentTypeProxy(instance) {\n    return instance.contentType;\n  }\n\n  var sortedContentType;\n  /**\n   * On sort start record the item being sorted\n   *\n   * @param {Preview} preview\n   * @param {Event} event\n   * @param {JQueryUI.SortableUIParams} ui\n   */\n\n  function onSortStart(preview, event, ui) {\n    // Verify we're sorting an already created item\n    if (ui.item.hasClass(\"pagebuilder-content-type-wrapper\")) {\n      _events.trigger(\"stage:interactionStart\");\n\n      var contentTypeInstance = _knockout.dataFor(ui.item[0]);\n\n      if (contentTypeInstance) {\n        // Ensure the original item is displayed but with reduced opacity\n        ui.item.css(\"display\", \"block\").addClass(\"pagebuilder-sorting-original\");\n        (0, _jquery)(\".pagebuilder-drop-indicator.hidden-drop-indicator\").css(\"display\", \"block\").removeClass(\"hidden-drop-indicator\"); // If we're the first item in the container we need to hide the first drop indicator\n\n        if (contentTypeInstance.parentContentType.getChildren().indexOf(contentTypeInstance) === 0) {\n          ui.item.prev(\".pagebuilder-drop-indicator\").css(\"display\", \"none\").addClass(\"hidden-drop-indicator\");\n        }\n\n        (0, _dropIndicators.showDropIndicators)(contentTypeInstance.config.name, preview.contentType.stageId);\n        sortedContentType = contentTypeInstance; // Dynamically change the connect with option to restrict content types\n\n        (0, _jquery)(this).sortable(\"option\", \"connectWith\", (0, _matrix.getAllowedContainersClasses)(contentTypeInstance.config.name, preview.contentType.stageId));\n        (0, _jquery)(this).sortable(\"refresh\");\n      }\n    }\n  }\n\n  var placeholderContainer;\n  /**\n   * On a sort action hide the placeholder if disabled\n   *\n   * @param {Preview} preview\n   * @param {Event} event\n   * @param {JQueryUI.SortableUIParams} ui\n   */\n\n  function onSort(preview, event, ui) {\n    if ((0, _jquery)(this).sortable(\"option\", \"disabled\") || ui.placeholder.parents(hiddenClass).length > 0) {\n      ui.placeholder.css(\"display\", \"none\");\n    } else {\n      ui.placeholder.css(\"display\", \"block\");\n    }\n    /**\n     * We record the position of the placeholder on sort so we can ensure we place the content type in the correct place\n     * as jQuery UI's events aren't reliable.\n     */\n\n\n    placeholderContainer = ui.placeholder.parents(\".content-type-container\")[0];\n  }\n  /**\n   * On sort stop hide any indicators\n   */\n\n\n  function onSortStop(preview, event, ui) {\n    ui.item.removeClass(\"pagebuilder-sorting-original\");\n    (0, _dropIndicators.hideDropIndicators)();\n    (0, _registry.setDraggedContentTypeConfig)(null); // Only trigger stop if we triggered start\n\n    if (ui.item.hasClass(\"pagebuilder-content-type-wrapper\")) {\n      _events.trigger(\"stage:interactionStop\");\n    }\n\n    if (ui.item && !sortedContentType) {\n      ui.item.remove();\n    }\n\n    sortedContentType = null;\n  }\n  /**\n   * Handle receiving a content type from the left panel\n   *\n   * @param {Preview} preview\n   * @param {Event} event\n   * @param {JQueryUI.SortableUIParams} ui\n   */\n\n\n  function onSortReceive(preview, event, ui) {\n    var contentTypeConfig = (0, _registry.getDraggedContentTypeConfig)();\n    (0, _registry.setDraggedContentTypeConfig)(null);\n\n    if ((0, _jquery)(event.target)[0] !== this) {\n      return;\n    } // If the container content type can't receive drops we need to cancel the operation\n\n\n    if (!preview.isContainer()) {\n      (0, _jquery)(this).sortable(\"cancel\");\n      return;\n    }\n\n    if (contentTypeConfig) {\n      // If the sortable instance is disabled don't complete this operation\n      if ((0, _jquery)(this).sortable(\"option\", \"disabled\") || (0, _jquery)(this).parents(hiddenClass).length > 0) {\n        return;\n      } // jQuery's index method doesn't work correctly here, so use Array.findIndex instead\n\n\n      var index = (0, _jquery)(event.target).children(\".pagebuilder-content-type-wrapper, .pagebuilder-draggable-content-type\").toArray().findIndex(function (element) {\n        return element.classList.contains(\"pagebuilder-draggable-content-type\");\n      }); // Create the new content type and insert it into the parent\n\n      (0, _contentTypeFactory)(contentTypeConfig, getcontentTypeProxy(preview), getPreviewStageIdProxy(preview)).then(function (contentType) {\n        // Set the content type instance as \"dropped\", as it was dropped from the left panel\n        contentType.dropped = true;\n        getcontentTypeProxy(preview).addChild(contentType, index);\n\n        _events.trigger(\"contentType:dropAfter\", {\n          id: contentType.id,\n          contentType: contentType\n        });\n\n        _events.trigger(contentTypeConfig.name + \":dropAfter\", {\n          id: contentType.id,\n          contentType: contentType\n        });\n\n        return contentType;\n      }); // Remove the DOM element, as this is a drop event we can't just remove the ui.item\n\n      (0, _jquery)(event.target).find(\".pagebuilder-draggable-content-type\").remove();\n    }\n  }\n  /**\n   * On sort update handle sorting the underlying children knockout list\n   *\n   * @param {Preview} preview\n   * @param {Event} event\n   * @param {JQueryUI.SortableUIParams} ui\n   */\n\n\n  function onSortUpdate(preview, event, ui) {\n    // If the sortable instance is disabled don't complete this operation\n    if ((0, _jquery)(this).hasClass(\"ui-sortable\") && (0, _jquery)(this).sortable(\"option\", \"disabled\") || ui.item.parents(hiddenClass).length > 0) {\n      ui.item.remove();\n      (0, _jquery)(this).sortable(\"cancel\"); // jQuery tries to reset the state but kills KO's bindings, so we'll force a re-render on the content type\n\n      if (ui.item.length > 0 && typeof _knockout.dataFor(ui.item[0]) !== \"undefined\") {\n        var data = _knockout.dataFor(ui.item[0]);\n\n        var contentType = data.contentType && data.contentType.getChildren ? data.contentType : data.parentContentType;\n        var children = contentType.getChildren()().splice(0);\n        contentType.getChildren()([]);\n        contentType.getChildren()(children);\n      }\n\n      return;\n    }\n    /**\n     * Validate the event is coming from the exact instance or a child instance, we validate on the child instance\n     * as the event is sometimes annoyingly caught by the parent rather than the child it's dropped into. Combining this\n     * with placeholderContainer logic we can ensure we always do the right operation.\n     */\n\n\n    if (sortedContentType && (this === ui.item.parent()[0] || placeholderContainer && (0, _jquery)(this).find(ui.item.parent()).length > 0)) {\n      var el = ui.item[0];\n\n      var contentTypeInstance = _knockout.dataFor(el);\n\n      var target = _knockout.dataFor(placeholderContainer);\n\n      if (target && contentTypeInstance) {\n        // Calculate the source and target index\n        var sourceParent = contentTypeInstance.parentContentType;\n        var targetParent = getcontentTypeProxy(target);\n        var targetIndex = (0, _jquery)(placeholderContainer).children(\".pagebuilder-content-type-wrapper, .pagebuilder-draggable-content-type\").toArray().findIndex(function (element) {\n          return element === el;\n        });\n\n        if (sourceParent) {\n          (0, _jquery)(sourceParent === targetParent ? this : ui.sender || this).sortable(\"cancel\");\n        } else {\n          (0, _jquery)(el).remove();\n        }\n\n        (0, _moveContentType.moveContentType)(contentTypeInstance, targetIndex, targetParent);\n\n        if (contentTypeInstance.parentContentType !== targetParent) {\n          ui.item.remove();\n        }\n      }\n    }\n  }\n\n  return {\n    getSortableOptions: getSortableOptions,\n    hiddenClass: hiddenClass\n  };\n});\n//# sourceMappingURL=sortable.js.map","Magento_PageBuilder/js/form/form-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'jquery',\n    'Magento_PageBuilder/js/events',\n    'consoleLogger'\n], function (_, $, events, consoleLogger) {\n    'use strict';\n\n    var mixin = {\n        defaults: {\n            pageBuilderInstances: []\n        },\n\n        /**\n         * Record instances of Page Builder initialized in the forms namespace\n         */\n        initialize: function () {\n            var self = this;\n\n            this._super();\n\n            events.on('pagebuilder:register', function (data) {\n                if (data.ns === self.ns) {\n                    self.pageBuilderInstances.push(data.instance);\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * Intercept save call to ensure any Page Builder rendering is completed before submitting form\n         *\n         * @param {String} redirect\n         * @param {Object} data\n         */\n        save: function (redirect, data) {\n            var submit = this._super.bind(this, redirect, data),\n                timeout,\n                locks;\n\n            if (_.isEmpty(this.pageBuilderInstances)) {\n                submit();\n            } else {\n                timeout = setTimeout(function () {\n                    consoleLogger.error('Page Builder was rendering for 5 seconds without releasing locks.');\n                }, 5000);\n\n                $('body').trigger('processStart');\n\n                // Wait for all rendering locks within Page Builder stages to resolve\n                $.when.apply(\n                    null,\n                    this.pageBuilderInstances.map(function (instance) {\n                        locks = instance.stage.renderingLocks;\n\n                        return locks[locks.length - 1];\n                    })\n                ).then(function () {\n                    $('body').trigger('processStop');\n                    clearTimeout(timeout);\n                    submit();\n                });\n            }\n        }\n    };\n\n    return function (target) {\n        return target.extend(mixin);\n    };\n});\n","Magento_PageBuilder/js/form/map-location-provider.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/provider',\n    'Magento_PageBuilder/js/events'\n], function (Provider, events) {\n    'use strict';\n\n    return Provider.extend({\n        /** @inheritdoc **/\n        initClient: function () {\n            return this;\n        },\n\n        /** @inheritdoc **/\n        save: function () {\n            events.trigger('mapLocation:saveAfter', this.get('data'));\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/provider.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/provider',\n    'Magento_PageBuilder/js/events'\n], function (Provider, events) {\n    'use strict';\n\n    return Provider.extend({\n        /** @inheritdoc **/\n        initClient: function () {\n            return this;\n        },\n\n        /** @inheritdoc **/\n        save: function () {\n            events.trigger('form:' + this.id + ':saveAfter', this.get('data'));\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/components/action-button.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/button'\n], function (Button) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            modules: {\n                parent: '${ $.parentName }',\n                insertForm: '${ $.insertFormProvider }',\n                modal: '${ $.modalProvider }'\n            }\n        },\n\n        /**\n         * Edit form with data assigning.\n         */\n        edit: function () {\n            this.modal().openModal();\n            this.insertForm().edit(this.parent().data());\n        },\n\n        /**\n         * Delete record from dynamic row.\n         */\n        deleteRecord: function () {\n            var record = this.parent(),\n                dynamicRow = record.parentComponent(),\n                prop = dynamicRow.identificationProperty,\n                id = record.data()[prop];\n\n            dynamicRow.deleteRecord(record.index, id);\n        }\n    });\n});\n","Magento_PageBuilder/js/form/components/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form',\n    'Magento_PageBuilder/js/events',\n    'jquery'\n], function (Insert, events, $) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            appearanceIndex: '',\n            configs: {},\n            tracks: {\n                id: true\n            },\n            listens: {\n                appearance: 'onAppearanceChange'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            events.on('form:renderAfter', function (params) {\n                this.render(params);\n            }.bind(this));\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        render: function (params) {\n            this.availableAppearances = params.appearances;\n            this.title = params.title;\n            this.defaultNamespace = params.defaultNamespace;\n            this.destroyInserted();\n            this.setData(params);\n\n            return this._super({\n                namespace: params.namespace,\n                handle: params.namespace\n            });\n        },\n\n        /**\n         * Set data for new form.\n         *\n         * @param {Object} params\n         */\n        setData: function (params) {\n            var formQuery = 'index=' + params.namespace,\n                dataProviderQuery = 'index=' + params.namespace + '_data_source';\n\n            this.providerData = params.data;\n            this.id = params.id;\n            this.externalForm = this.requestModule(formQuery);\n            this.externalSource = this.requestModule(dataProviderQuery);\n            this.setLinks({\n                appearance: 'ns = ' + params.namespace + ', index = ' + this.appearanceIndex + ':value'\n            }, 'imports');\n            this.setLinks({\n                providerData: dataProviderQuery + ':data',\n                prefix: formQuery + ':selectorPrefix',\n                id: dataProviderQuery + ':id'\n            }, 'exports');\n        },\n\n        /** @inheritdoc **/\n        requestData: function (params) {\n            var deffer = $.Deferred(),\n                formConfig = this.configs[params.namespace];\n\n            if (formConfig) {\n                return deffer.resolve(formConfig);\n            }\n\n            return this._super().done(function (data) {\n                this.configs[params.namespace] = data;\n            }.bind(this));\n        },\n\n        /**\n         * Re-render after appearance change\n         *\n         * @param {String} value\n         */\n        onAppearanceChange: function (value) {\n            var namespace = this.availableAppearances[value] && this.availableAppearances[value].form ||\n                this.defaultNamespace;\n\n            if (namespace !== this.previousParams.namespace) {\n                this.render({\n                    namespace: namespace,\n                    id: this.id,\n                    data: this.externalSource().get('data'),\n                    appearances: this.availableAppearances,\n                    title: this.title,\n                    defaultNamespace: this.defaultNamespace\n                });\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/form/components/map-location-dynamic-rows.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\n    'Magento_PageBuilder/js/events',\n    'underscore',\n    'jquery'\n], function (dynamicRows, Events, _, $) {\n    'use strict';\n\n    /**\n     * Returns sortable values\n     *\n     * @param {String | Number | Object | Array} value\n     * @return {String | Number}\n     */\n    var sortValueValidator = function (value) {\n        if (typeof value === 'string') {\n            return value.toLowerCase();\n        }\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        return '';\n    };\n\n    return dynamicRows.extend({\n        defaults: {\n            modules: {\n                insertForm: '${ $.insertFormProvider }',\n                modal: '${$.modalProvider}'\n            }\n        },\n\n        /** @inheritdoc */\n        initLinks: function () {\n            this._super();\n            Events.on('mapLocation:saveAfter', function (data) {\n                this.modal().closeModal();\n                this.reInitData(data);\n            }.bind(this), this.name);\n\n            return this;\n        },\n\n        /**\n         * Open the location modal and insert form with the data from selected record\n         *\n         * @param {Object} record\n         */\n        edit: function (record) {\n            this.modal().openModal();\n            this.insertForm().edit(record.data());\n        },\n\n        /**\n         * Reinitializing of dynamic row records.\n         *\n         * @param {Object} data\n         */\n        reInitData: function (data) {\n            var recordData = this.recordData().slice(),\n                prop = this.identificationProperty,\n                isExists = false;\n\n            _.each(recordData, function (elem, index) {\n                if (elem[prop] === data[prop]) {\n                    recordData[index] = data;\n                    isExists = true;\n                }\n            }, this);\n\n            if (!isExists) {\n                recordData.push(data);\n            }\n\n            this.recordData(recordData);\n\n            _.each(this.labels(), function (label) {\n                if (label.columnsHeaderClasses) {\n                    this.sortRecord(label.name, label.columnsHeaderClasses === '_ascend');\n                }\n            }.bind(this));\n\n            this.reload();\n        },\n\n        /**\n         * Logic to toggle ascend and descend sorting for headers\n         *\n         * @param {KnockoutObservableArray} property\n         */\n        sortByHeader: function (property) {\n            var ascend,\n                activeLabel,\n                allLabels,\n                placeholder;\n\n            if (property().name === 'actions') {\n                return;\n            }\n\n            if (property().columnsHeaderClasses) {\n                activeLabel = $.extend({}, property());\n                activeLabel.columnsHeaderClasses =\n                    property().columnsHeaderClasses === '_ascend' ? '_descend' : '_ascend';\n                ascend = activeLabel.columnsHeaderClasses === '_ascend';\n                property(activeLabel);\n            } else {\n                allLabels = this.labels().slice();\n                allLabels.forEach(function (label) {\n\n                    if (label.name === property().name) {\n                        label.columnsHeaderClasses = '_ascend';\n                    } else {\n                        label.columnsHeaderClasses = '';\n                    }\n                });\n                ascend = true;\n                this.labels(allLabels);\n            }\n\n            if (this.recordData().length) {\n                placeholder = this.emptyContentPlaceholder;\n\n                this.emptyContentPlaceholder = false;\n                this.sortRecord(property().name, ascend);\n                this.reload();\n                this.emptyContentPlaceholder = placeholder;\n            }\n        },\n\n        /**\n         * Sorting of dynamic row records.\n         *\n         * @param {String} sortBy\n         * @param {Boolean} ascend\n         */\n        sortRecord: function (sortBy, ascend) {\n            this.recordData.sort(function (left, right) {\n                var record1 = ascend ? left : right,\n                    record2 = ascend ? right : left;\n\n                record1 = sortValueValidator(record1[sortBy]);\n                record2 = sortValueValidator(record2[sortBy]);\n\n                return record1 === record2 ? 0 : record1 < record2 ? -1 : 1;\n            });\n        },\n\n        /** @inheritdoc */\n        destroy: function () {\n            this._super();\n            Events.off(this.name);\n        }\n    });\n});\n","Magento_PageBuilder/js/form/components/map-location-insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form'\n], function (Insert) {\n    'use strict';\n\n    return Insert.extend({\n        /**\n         * Clear form content and reinsert data in argument\n         * @param {Object} data\n         */\n        edit: function (data) {\n            this.destroyInserted();\n            this.render();\n            this.setData(data);\n        },\n\n        /**\n         * Set data for new form\n         *\n         * @param {Object} data\n         */\n        setData: function (data) {\n            var formQuery = 'index=' + this.ns,\n                dataProviderQuery = 'index=' + this.ns + '_data_source';\n\n            this.providerData = data;\n            this.externalForm = this.requestModule(formQuery);\n            this.externalSource = this.requestModule(dataProviderQuery);\n            this.setLinks({\n                providerData: dataProviderQuery + ':data'\n            }, 'exports');\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/block-chooser.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiLayout',\n    'uiElement',\n    'Magento_PageBuilder/js/config',\n    'mage/translate',\n    'mage/utils/objects'\n], function ($, layout, Element, Config, $t, objectUtils) {\n    'use strict';\n\n    return Element.extend({\n        id: null,\n        meta: {},\n        errorMessage: null,\n        displayMetadata: true,\n        messages: {\n            UNKOWN_ERROR: $t('Sorry, there was an error getting requested content. ' +\n                'Please contact the store owner.'),\n            UNKNOWN_SELECTION: $t('The currently selected block does not exist.')\n        },\n        defaults: {\n            template: 'Magento_PageBuilder/form/element/block-chooser',\n            requestParameter: null,\n            dataUrlConfigPath: null,\n            modalName: null,\n            buttonComponentConfig: {\n                title: '${ $.buttonTitle }',\n                component: 'Magento_Ui/js/form/components/button',\n                actions: [{\n                    targetName: '${ $.modalName }',\n                    actionName: 'openModal'\n                }]\n            },\n            requestData: {\n                method: 'POST',\n                data: {\n                    'form_key': window.FORM_KEY\n                }\n            },\n            listens: {\n                id: 'updateFromServer'\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            return this._super()\n                .observe('id meta errorMessage displayMetadata');\n        },\n\n        /**\n         * Updates the block data from the server\n         *\n         * @returns void\n         */\n        updateFromServer: function () {\n            var requestData = $.extend(true, {}, this.requestData);\n\n            // The component hasn't be configured yet. Nothing to do.\n            if (!this.id().length || !this.requestParameter || !this.dataUrlConfigPath) {\n                this.meta({});\n\n                return;\n            }\n\n            requestData.data[this.requestParameter] = this.id();\n            $('body').trigger('processStart');\n\n            $.ajax(objectUtils.nested(Config.getConfig(), this.dataUrlConfigPath), requestData)\n                .always(function () {\n                    $('body').trigger('processStop');\n                    this.errorMessage(null);\n                }.bind(this))\n                .done(function (response) {\n                    if (typeof response !== 'object' || response.error) {\n                        this.meta({});\n                        this.errorMessage(this.messages.UNKOWN_ERROR);\n\n                        return;\n                    } else if (Array.isArray(response)) {\n                        this.meta({});\n                        this.errorMessage(this.messages.UNKNOWN_SELECTION);\n\n                        return;\n                    }\n\n                    this.meta(response);\n                }.bind(this))\n                .fail(function () {\n                    this.meta({});\n                    this.errorMessage(this.messages.UNKOWN_ERROR);\n                }.bind(this));\n        },\n\n        /**\n         * Creates the button component for rendering\n         *\n         * @returns {Object} The button component\n         */\n        getButton: function () {\n            var elementConfig = this.buttonComponentConfig;\n\n            elementConfig.name = this.name + '_button';\n            layout([elementConfig]);\n\n            return this.requestModule(elementConfig.name);\n        },\n\n        /**\n         * Determines the status label for the currently loaded block\n         *\n         * @returns {String}\n         */\n        getStatusLabel: function () {\n            return this.meta()['is_active'] === '1' ? $t('Active') : $t('Inactive');\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/condition-options.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_PageBuilder/js/form/element/visual-select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.showRelatedElement(this.value());\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super();\n\n            this.options().forEach(function (option) {\n                this.observe(option.value + 'Visible');\n            }.bind(this));\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        onUpdate: function (value) {\n            this.showRelatedElement(value);\n\n            return this._super();\n        },\n\n        /**\n         * Sets exported property, linked with visibility of the element, defined as option\n         *\n         * @param {String} value\n         * @returns {Object} Chainable\n         */\n        showRelatedElement: function (value) {\n            this[value + 'Visible'](true);\n            this.options().forEach(function (option) {\n                if (value !== option.value) {\n                    this[option.value + 'Visible'](false);\n                }\n            }.bind(this));\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/conditional-disable-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore'\n], function (_) {\n    'use strict';\n\n    var setDisabledSetting = {\n        defaults: {\n            disabledValues: []\n        },\n\n        /**\n         * Set the field as disabled when it's empty or is equal to a value within disabledValues\n         *\n         * @param {Array} value\n         */\n        setDisabled: function (value) {\n            if (_.indexOf(_.values(this.disabledValues), value) !== -1) {\n                this.disable();\n            } else {\n                this.enable();\n            }\n        }\n    };\n\n    return function (target) {\n        return target.extend(setDisabledSetting);\n    };\n});\n","Magento_PageBuilder/js/form/element/conditions-loader.js":"define([\n    'jquery',\n    'Magento_Rule/rules',\n    'uiRegistry',\n    'mage/utils/objects'\n], function ($, RulesForm, uiRegistry, objectUtils) {\n    'use strict';\n\n    return function (config, conditionsFormPlaceholder) {\n        var $conditionsFormPlaceholder = $(conditionsFormPlaceholder),\n            attributeData = uiRegistry.get(config.formNamespace + '.' + config.formNamespace).source.data,\n            conditions = objectUtils.nested(attributeData, config.attribute) || '[]';\n\n        $('body').trigger('processStart');\n\n        $.ajax(config.componentUrl, {\n            method: 'POST',\n            data: {\n                conditions: conditions\n            }\n        })\n        .done(function (response) {\n            $conditionsFormPlaceholder.html(response);\n            window[config.jsObjectName] = new RulesForm(config.jsObjectName, config.childComponentUrl);\n            $('body').trigger('processStop');\n        });\n    };\n});\n","Magento_PageBuilder/js/form/element/dependent-fieldset.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/fieldset'\n], function (Fieldset) {\n    'use strict';\n\n    return Fieldset.extend({\n        defaults: {\n            originalLabelValue: ''\n        },\n\n        /**\n         * Observe label\n         * {@inheritDoc}\n         */\n        initObservable: function () {\n            this._super().observe('label');\n\n            return this;\n        },\n\n        /**\n         * Store original label value\n         * {@inheritDoc}\n         */\n        initConfig: function () {\n            this._super();\n            this.originalLabelValue = this.label;\n        },\n\n        /**\n         * Hide fieldset if number of field options is <= 1 and it is the only element in the group\n         *\n         * @param {Array} options\n         */\n        hideFieldset: function (options) {\n            this.visible(options.length > 1 || this.elems().length > 1);\n        },\n\n        /**\n         * Hide label if number of field options is <= 1\n         *\n         * @param {Array} options\n         */\n        hideLabel: function (options) {\n            this.label(options.length > 1 ? this.originalLabelValue : '');\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/dependent-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            visible: false\n        },\n\n        /**\n         * Dependently display dropdown component if it contains more than one option\n         *\n         * @returns {Object} Chainable\n         */\n        setOptions: function () {\n            this._super();\n\n            if (this.options().length > 1) {\n                this.setVisible(true);\n            }\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/dependent-value-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    var setDependentValuesSetting = {\n        defaults: {\n            dependentValues: {}\n        },\n\n        /**\n         * Change value of component if it present in dependentValues\n         */\n        setDependentValues: function (value) {\n            if (this.dependentValues.hasOwnProperty(value)) {\n                this.previousValue = this.value();\n                this.value(this.dependentValues[value]);\n            } else if (this.hasOwnProperty('previousValue')) {\n                this.value(this.previousValue);\n            }\n        }\n    };\n\n    return function (target) {\n        return target.extend(setDependentValuesSetting);\n    };\n});\n","Magento_PageBuilder/js/form/element/dependent-visual-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_PageBuilder/js/form/element/visual-select'\n], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            visible: false\n        },\n\n        /**\n         * Dependently display dropdown component if it contains more than one option\n         *\n         * @returns {Object} Chainable\n         */\n        setOptions: function () {\n            this._super();\n\n            if (this.options().length > 1) {\n                this.setVisible(true);\n            }\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/grid-size.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        validate: function () {\n            var externalFormSourceData = this.requestModule('index=' + this.ns)().source.data;\n\n            this.validationParams = {\n                'non_empty_column_count': externalFormSourceData.non_empty_column_count,\n                'max_grid_size': externalFormSourceData.max_grid_size\n            };\n\n            return this._super();\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/html-code.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global MediabrowserUtility, widgetTools, MagentovariablePlugin */\ndefine([\n    'Magento_Ui/js/form/element/textarea',\n    'mage/adminhtml/wysiwyg/widget'\n], function (Textarea) {\n    'use strict';\n\n    var HTML_ID_PLACEHOLDER = 'HTML_ID_PLACEHOLDER';\n\n    return Textarea.extend({\n        defaults: {\n            elementTmpl: 'Magento_PageBuilder/form/element/html-code'\n        },\n\n        /**\n         * Click event for Insert Widget Button\n         */\n        clickInsertWidget: function () {\n            return widgetTools.openDialog(\n                this.widgetUrl.replace(HTML_ID_PLACEHOLDER, this.uid)\n            );\n        },\n\n        /**\n         * Click event for Insert Image Button\n         */\n        clickInsertImage: function () {\n            return MediabrowserUtility.openDialog(\n                this.imageUrl.replace(HTML_ID_PLACEHOLDER, this.uid)\n            );\n        },\n\n        /**\n         * Click event for Insert Variable Button\n         */\n        clickInsertVariable: function () {\n            return MagentovariablePlugin.loadChooser(\n                this.variableUrl,\n                this.uid\n            );\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/html.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/html',\n    'jquery',\n    'underscore'\n], function (Html, $, _) {\n    'use strict';\n\n    return Html.extend({\n        defaults: {\n            inputSelector: '[data-form-part=${ $.ns }]',\n            elements: [],\n            value: {}\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.initInputListener();\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            return this._super()\n                .observe('value');\n        },\n\n        /**\n         * Listen for value change on each field that has been added.\n         */\n        initInputListener: function () {\n            $.async({\n                component: this,\n                selector: this.inputSelector\n            }, function (el) {\n                this.elements.push(el);\n                $(el).on('change', this.updateValue.bind(this));\n                $(el).nextAll('.rule-param-apply').on('click', function () {\n                    $(el).trigger('change');\n                });\n                $(el).closest('li').find('.rule-param-remove').on('click', function () {\n                    $(el).val('').trigger('change');\n                });\n                this.updateValue(this);\n            }.bind(this));\n        },\n\n        /**\n         * Collect data and update value.\n         */\n        updateValue: function () {\n            var result = {},\n                name;\n\n            this.elements.forEach(function (item) {\n                switch (item.type) {\n                    case 'checkbox':\n                        result[item.name] = +!!item.checked;\n                        break;\n\n                    case 'radio':\n                        if (item.checked) {\n                            result[item.name] = item.value;\n                        }\n                        break;\n\n                    case 'select-multiple':\n                        name = item.name.substring(0, item.name.length - 2); //remove [] from the name ending\n                        result[name] = _.pluck(item.selectedOptions, 'value');\n                        break;\n\n                    default:\n                        result[item.name] = item.value;\n                }\n            });\n\n            this.value(result);\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/image-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/image-uploader',\n    'Magento_PageBuilder/js/resource/resize-observer/ResizeObserver',\n    'Magento_PageBuilder/js/events',\n    'mage/translate'\n], function ($, _, uiRegistry, Uploader, ResizeObserver, events, $t) {\n    'use strict';\n\n    var initializedOnce = false;\n\n    return Uploader.extend({\n        defaults: {\n            $uploadArea: null,\n            isShowImageUploadInstructions: true,\n            isShowImageUploadOptions: false,\n            visibleControls: true,\n            classes: {\n                dragging: 'dragging',\n                draggingInside: 'dragging-inside',\n                draggingOutside: 'dragging-outside'\n            },\n            // listed in ascending order\n            elementWidthModifierClasses: {\n                '_micro-ui': {\n                    maxWidth: 130\n                },\n                '_compact-ui': {\n                    minWidth: 131,\n                    maxWidth: 440\n                }\n            },\n            translations: {\n                allowedFileTypes: $t('Allowed file types'),\n                dragImageHere: $t('Drag image here'),\n                dropHere: $t('Drop here'),\n                maximumFileSize: $t('Maximum file size'),\n                selectFromGallery: $t('Select from Gallery'),\n                or: $t('or'),\n                uploadImage: $t('Upload Image'),\n                uploadNewImage: $t('Upload New Image')\n            },\n            tracks: {\n                visibleControls: true\n            }\n        },\n\n        /**\n         * Bind drag events to highlight/unhighlight dropzones\n         * {@inheritDoc}\n         */\n        initialize: function () {\n            var $document = $(document);\n\n            this._super();\n\n            events.on('image:' + this.id + ':assignAfter', this.onAssignedFile.bind(this));\n\n            // bind dropzone highlighting using event delegation only once\n            if (!initializedOnce) {\n                // dropzone highlighting\n                $document.on('dragover', this.highlightDropzone.bind(this));\n\n                // dropzone unhighlighting\n                $document.on('dragend dragleave mouseup', this.unhighlightDropzone.bind(this));\n\n                initializedOnce = true;\n            }\n        },\n\n        /**\n         * {@inheritDoc}\n         */\n        initUploader: function (fileInput) {\n            this._super(fileInput);\n            this.$uploadArea = $(this.$fileInput).closest('.pagebuilder-image-empty-preview');\n            new ResizeObserver(this.updateResponsiveClasses.bind(this)).observe(this.$uploadArea.get(0));\n        },\n\n        /**\n         * Checks if provided file is allowed to be uploaded.\n         * {@inheritDoc}\n         */\n        isFileAllowed: function () {\n            var result = this._super(),\n                allowedExtensions = this.getAllowedFileExtensionsInCommaDelimitedFormat();\n\n            if (!result.passed && result.rule === 'validate-file-type') {\n                result.message += ' ' + this.translations.allowedFileTypes + ': ' + allowedExtensions + '.';\n            }\n\n            return result;\n        },\n\n        /**\n         * Remove draggable classes from dropzones\n         * {@inheritDoc}\n         */\n        onBeforeFileUpload: function () {\n            this.removeDraggableClassesFromDropzones();\n            this._super();\n        },\n\n        /**\n         * Add/remove CSS classes to $dropzone element to provide UI feedback\n         *\n         * @param {jQuery.event} e\n         */\n        highlightDropzone: function (e) {\n            var $dropzone = $(e.target).closest(this.dropZone),\n                $otherDropzones = $(this.dropZone).not($dropzone),\n                isInsideDropzone = !!$dropzone.length;\n\n            if (isInsideDropzone) {\n                $dropzone\n                  .removeClass(this.classes.draggingOutside)\n                  .addClass([this.classes.dragging, this.classes.draggingInside].join(' '));\n            }\n\n            $otherDropzones\n              .removeClass(this.classes.draggingInside)\n              .addClass([this.classes.dragging, this.classes.draggingOutside].join(' '));\n        },\n\n        /**\n         * Remove all UI styling from dropzone\n         *\n         * @param {jQuery.event} e\n         */\n        unhighlightDropzone: function (e) {\n            var isMouseReleased = e.type === 'mouseup' || e.type === 'dragend',\n                isActuallyLeavingThePage = e.type === 'dragleave' && (e.clientX === 0 || e.clientY === 0);\n\n            if (!isMouseReleased && !isActuallyLeavingThePage) {\n                return;\n            }\n\n            this.removeDraggableClassesFromDropzones();\n        },\n\n        /**\n         * Remove draggable CSS classes from dropzone elements\n         */\n        removeDraggableClassesFromDropzones: function () {\n            var $dropzones = $(this.dropZone);\n\n            $dropzones\n                .removeClass([\n                    this.classes.dragging,\n                    this.classes.draggingInside,\n                    this.classes.draggingOutside\n                ].join(' '));\n        },\n\n        /**\n         * Trigger image:uploadAfter event to be handled by PageBuilder image component\n         * {@inheritDoc}\n         */\n        addFile: function (file) {\n            this._super();\n\n            events.trigger('image:' + this.id + ':uploadAfter', [file]);\n\n            return this;\n        },\n\n        /**\n         * Trigger image:deleteFileAfter event to be handled by PageBuilder image component\n         * {inheritDoc}\n         */\n        clear: function () {\n            this._super();\n\n            events.trigger('image:' + this.id + ':deleteFileAfter');\n\n            return this;\n        },\n\n        /**\n         * Propagate file changes through all image uploaders sharing the same id\n         *\n         * @param {Object} file\n         */\n        onAssignedFile: function (file) {\n            this.value([file]);\n        },\n\n        /**\n         * Adds the appropriate ui state class to the upload control area based on the current rendered size\n         */\n        updateResponsiveClasses: function () {\n            var classesToAdd = [],\n                classConfig,\n                elementWidth = this.$uploadArea.width(),\n                modifierClass;\n\n            if (!this.$uploadArea.is(':visible')) {\n                return;\n            }\n\n            this.$uploadArea.removeClass(Object.keys(this.elementWidthModifierClasses).join(' '));\n\n            for (modifierClass in this.elementWidthModifierClasses) {\n                if (!this.elementWidthModifierClasses.hasOwnProperty(modifierClass)) {\n                    // jscs:disable disallowKeywords\n                    continue;\n                    // jscs:enable disallowKeywords\n                }\n\n                classConfig = this.elementWidthModifierClasses[modifierClass];\n\n                if (classConfig.minWidth && classConfig.maxWidth &&\n                    (classConfig.minWidth <= elementWidth && elementWidth <= classConfig.maxWidth) ||\n                    classConfig.minWidth && !classConfig.maxWidth && classConfig.minWidth <= elementWidth ||\n                    classConfig.maxWidth && !classConfig.minWidth && elementWidth <= classConfig.maxWidth\n                ) {\n                    classesToAdd.push(modifierClass);\n                }\n            }\n\n            if (classesToAdd.length) {\n                this.$uploadArea.addClass(classesToAdd.join(' '));\n            }\n        },\n\n        /**\n         * {@inheritDoc}\n         */\n        hasData: function () {\n            // Some of the components automatically add an empty object if the value is unset.\n            return this._super() && !$.isEmptyObject(this.value()[0]);\n        },\n\n        /**\n         * Stop event to prevent it from reaching any objects other than the current object.\n         *\n         * @param {Object} uploader\n         * @param {Event} event\n         * @returns {Boolean}\n         */\n        stopEvent: function (uploader, event) {\n            event.stopPropagation();\n\n            return true;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/map.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*eslint-disable vars-on-top, strict */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract',\n    'Magento_PageBuilder/js/utils/map',\n    'module',\n    'Magento_PageBuilder/js/events'\n], function (AbstractField, GoogleMap, module, events) {\n    'use strict';\n\n    var google = window.google || {};\n\n    return AbstractField.extend({\n        defaults: {\n            elementTmpl: 'Magento_PageBuilder/form/element/map',\n            map: false,\n            marker: false,\n            apiKeyValid: !!module.config().apiKey,\n            apiKeyErrorMessage: module.config().apiKeyErrorMessage\n        },\n\n        /**\n         * Initializes observable properties of instance\n         *\n         * @returns {Abstract} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n\n            this.observe('apiKeyValid');\n\n            return this;\n        },\n\n        /**\n         * Render the map into the field\n         *\n         * @param {HTMLElement} element\n         */\n        renderMap: function (element) {\n            // Get the start value and convert the value into an array\n            var startValue = this.value(),\n                mapOptions,\n                latitudeLongitude;\n\n            if (!this.apiKeyValid()) {\n                return;\n            }\n\n            if (typeof startValue === 'string' && startValue !== '') {\n                startValue = JSON.parse(startValue);\n            }\n\n            mapOptions = {\n                navigationControl: true,\n                navigationControlOptions: {\n                    style: google.maps.NavigationControlStyle.DEFAULT\n                }\n            };\n\n            events.on('googleMaps:authFailure', function () {\n                this.apiKeyValid(false);\n            }.bind(this));\n\n            // Create the map\n            this.mapElement = new GoogleMap(element, [], mapOptions);\n\n            if (!this.mapElement || !this.mapElement.map) {\n                return;\n            }\n\n            // Add marker if there is a start value\n            if (startValue.latitude !== '' && startValue.longitude !== '') {\n                latitudeLongitude = new google.maps.LatLng(\n                    parseFloat(startValue.latitude),\n                    parseFloat(startValue.longitude)\n                );\n\n                this.mapElement.map.setCenter(latitudeLongitude);\n                this.addMarker(startValue.latitude, startValue.longitude);\n            }\n\n            // After click, add and update both Latitude and Longitude.\n            google.maps.event.addListener(this.mapElement.map, 'click', this.onClick.bind(this));\n            google.maps.event.addListener(this.mapElement.map, 'dblclick', this.onDblClick.bind(this));\n            google.maps.event.trigger(this.marker, 'click');\n        },\n\n        /**\n         * Adds a map marker\n         *\n         * @param {String} latitude\n         * @param {String} longitude\n         */\n        addMarker: function (latitude, longitude) {\n            this.marker = new google.maps.Marker({\n                draggable: true,\n                map: this.mapElement.map,\n                position: new google.maps.LatLng(latitude, longitude)\n            });\n            google.maps.event.addListener(this.marker, 'dragend', this.onDragEnd.bind(this));\n        },\n\n        /**\n         * Event for drag end to update value\n         */\n        onDragEnd: function () {\n            this.value(this.exportValue());\n        },\n\n        /**\n         * Event for click to update marker, delayed by 300ms in case of double click\n         *\n         * @param {Event} event\n         */\n        onClick: function (event) {\n            this.clickTimer = setTimeout(function () {\n                if (!this.marker) {\n                    this.addMarker(event.latLng.lat(), event.latLng.lng());\n                }\n                this.value(this.exportValue(event.latLng));\n            }.bind(this), 300);\n        },\n\n        /**\n         * Event for double click to prevent call from single click\n         */\n        onDblClick: function () {\n            clearTimeout(this.clickTimer);\n        },\n\n        /**\n         * Callback after an update to map\n         */\n        onUpdate: function () {\n            if (!this.mapElement) {\n                return;\n            }\n\n            this._super();\n            var content = this.value(),\n                latitudeLongitude;\n\n            if (this.marker && content.latitude === '' && content.longitude === '') {\n                this.marker.setMap(null);\n                delete this.marker;\n\n                return;\n            }\n\n            if (!this.validateCoordinate(content) ||\n                this.mapElement &&\n                !this.mapElement.map ||\n                this.value() === '' ||\n                this.value() === this.exportValue()) {\n                return;\n            }\n\n            if (typeof this.value() === 'string' && this.value() !== '') {\n                content = JSON.parse(this.value());\n            }\n            latitudeLongitude = new google.maps.LatLng(parseFloat(content.latitude), parseFloat(content.longitude));\n\n            if (!this.marker) {\n                this.addMarker(latitudeLongitude.lat(), latitudeLongitude.lng());\n            }\n\n            this.marker.setPosition(latitudeLongitude);\n            this.mapElement.map.setCenter(latitudeLongitude);\n        },\n\n        /**\n         * Coordinate validation\n         *\n         * @param {Object} coordinates\n         * @return {Boolean}\n         */\n        validateCoordinate: function (coordinates) {\n            var valid = true;\n\n            if (coordinates.longitude === '' ||\n                coordinates.latitude === '' ||\n                isNaN(coordinates.longitude) ||\n                isNaN(coordinates.latitude) ||\n                parseFloat(coordinates.longitude) < -180 ||\n                parseFloat(coordinates.longitude) > 180 ||\n                parseFloat(coordinates.latitude) < -90 ||\n                parseFloat(coordinates.latitude) > 90\n            ) {\n                valid = false;\n            }\n\n            return valid;\n        },\n\n        /**\n         * Returns current latitude and longitude as an object\n         *\n         * @param {Object} coordinate\n         * @return {Object}\n         */\n        exportValue: function (coordinate) {\n            var position = this.marker ?\n                this.marker.getPosition() :\n                new google.maps.LatLng(this.mapElement.map.center.lat(), this.mapElement.map.center.lng()),\n                currentCoordinate = coordinate ? coordinate : position;\n\n            return {\n                latitude: currentCoordinate.lat(),\n                longitude: currentCoordinate.lng()\n            };\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/margins-and-padding.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*eslint-disable vars-on-top, strict */\n\ndefine([\n    'underscore',\n    'ko',\n    'Magento_Ui/js/form/element/abstract'\n], function (_, ko, Abstract) {\n    'use strict';\n\n    var defaultValue = '';\n\n    return Abstract.extend({\n        defaults: {\n            elementTmpl: 'Magento_PageBuilder/form/element/margins-and-padding',\n            marginTop: defaultValue,\n            marginRight: defaultValue,\n            marginBottom: defaultValue,\n            marginLeft: defaultValue,\n            paddingTop: defaultValue,\n            paddingRight: defaultValue,\n            paddingBottom: defaultValue,\n            paddingLeft: defaultValue,\n            listens: {\n                marginTop: 'updateValue',\n                marginRight: 'updateValue',\n                marginBottom: 'updateValue',\n                marginLeft: 'updateValue',\n                paddingTop: 'updateValue',\n                paddingRight: 'updateValue',\n                paddingBottom: 'updateValue',\n                paddingLeft: 'updateValue'\n            }\n        },\n\n        /**\n         * Init observable on our margin & padding properties\n         *\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super();\n            this.observe('marginTop marginRight marginBottom marginLeft ' +\n                'paddingTop paddingRight paddingBottom paddingLeft');\n\n            return this;\n        },\n\n        /**\n         * Update the value on individual property changes\n         */\n        updateValue: function () {\n            this.value({\n                margin: {\n                    top: this.marginTop(),\n                    right: this.marginRight(),\n                    bottom: this.marginBottom(),\n                    left: this.marginLeft()\n                },\n                padding: {\n                    top: this.paddingTop(),\n                    right: this.paddingRight(),\n                    bottom: this.paddingBottom(),\n                    left: this.paddingLeft()\n                }\n            });\n        },\n\n        /**\n         * On set of the initial value update our individual observables\n         *\n         * @returns {exports}\n         */\n        setInitialValue: function () {\n            this._super();\n            this._updateObservables(this.initialValue);\n\n            return this;\n        },\n\n        /**\n         * On update of the value property update our individual observables, the data provider can have data\n         * set on it after the initial construction, this ensures we translate our values\n         *\n         * @returns {exports}\n         */\n        onUpdate: function () {\n            this._super();\n            this._updateObservables(this.value());\n\n            return this;\n        },\n\n        /**\n         * Update the observable properties\n         *\n         * @param {Number} value\n         * @private\n         */\n        _updateObservables: function (value) {\n            if (value && _.isString(value)) {\n                value = JSON.parse(value);\n            }\n\n            if (value && _.isObject(value)) {\n                _.each(value, function (attributeData, attributeType) {\n                    _.each(attributeData, function (attributeValue, attributeDirection) {\n                        if (attributeValue !== defaultValue) {\n                            this[attributeType + attributeDirection.capitalize()](attributeValue);\n                        }\n                    }, this);\n                }, this);\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/page-ui-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/ui-select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n\n        /**\n         * Get path to current option\n         *\n         * @param {Object} data - option data\n         * @returns {String} path\n         */\n        getPath: function (data) {\n            var path = '';\n\n            if (this.renderPath) {\n                path = data.identifier || path;\n            }\n\n            return path;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/product-totals.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'jquery',\n    'mage/translate',\n    'Magento_PageBuilder/js/form/provider/conditions-data-processor',\n    'Magento_Ui/js/form/element/abstract'\n], function (_, $, $t, conditionsDataProcessor, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            conditionOption: '',\n            conditionValue: '',\n            formData: {},\n            totalProductCount: 0,\n            totalDisabledProducts: 0,\n            totalNotVisibleProducts: 0,\n            previousConditions: false,\n            listens: {\n                conditionOption: 'updateProductTotals',\n                conditionValue: 'updateProductTotals',\n                '${ $.provider }:data.modalClosed': 'abortRunningRequest'\n            },\n            imports: {\n                formData: '${ $.provider }:data'\n            },\n            links: {\n                value: false\n            },\n            url: null,\n            valuePlaceholder: $t('of %1 total'),\n            disabledPlaceholder: $t('%1 disabled'),\n            notVisiblePlaceholder: $t('%1 not visible'),\n            showSpinner: true,\n            loading: false,\n            jqXHR: null\n        },\n\n        /**\n         * Abort running Ajax request\n         */\n        abortRunningRequest: function () {\n            if (this.jqXHR && this.jqXHR.readyState !== 4) {\n                this.jqXHR.abort();\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            return this._super()\n                .observe('value totalProductCount totalDisabledProducts totalNotVisibleProducts loading');\n        },\n\n        /**\n         * If we haven't aborted the request, continue and display the error\n         *\n         * @param {Object} jqXHR\n         */\n        callSuperError: function (jqXHR) {\n            // eslint-disable-next-line jquery-no-bind-unbind\n            var superError = $.ajaxSettings.error.bind(window, jqXHR);\n\n            superError();\n        },\n\n        /**\n         * Update product count.\n         */\n        updateProductTotals: _.debounce(function () {\n            var totalText,\n                negativeTotals = [];\n\n            if (!this.conditionOption || _.isEmpty(this.formData)) {\n                return;\n            }\n\n            if (this.conditionOption === 'category_ids' && typeof this.formData['category_ids'] !== 'string') {\n                this.formData['category_ids'] = '';\n            }\n\n            _.extend(this.formData, this.conditionValue);\n            conditionsDataProcessor(this.formData, this.conditionOption + '_source');\n\n            // Store the previous conditions so we don't update the totals when nothing has changed\n            if (this.previousConditions === this.formData['conditions_encoded']) {\n                return;\n            }\n            this.previousConditions = this.formData['conditions_encoded'];\n\n            this.loading(true);\n            this.abortRunningRequest();\n            this.jqXHR = $.ajax({\n                url: this.url,\n                method: 'POST',\n                data: {\n                    conditionValue: this.formData['conditions_encoded']\n                },\n                error: function (jqXHR) {\n                    if (jqXHR.statusText !== 'abort') {\n                        this.callSuperError(jqXHR);\n                    }\n                }.bind(this)\n            }).done(function (response) {\n                this.totalProductCount(parseInt(response.total, 10));\n                this.totalDisabledProducts(parseInt(response.disabled, 10));\n                this.totalNotVisibleProducts(parseInt(response.notVisible, 10));\n                totalText = this.valuePlaceholder\n                    .replace('%1', parseInt(response.total, 10));\n\n                if (parseInt(response.disabled, 10) > 0) {\n                    negativeTotals.push(this.disabledPlaceholder.replace('%1', parseInt(response.disabled, 10)));\n                }\n\n                if (parseInt(response.notVisible, 10) > 0) {\n                    negativeTotals.push(this.notVisiblePlaceholder.replace('%1', parseInt(response.notVisible, 10)));\n                }\n\n                if (negativeTotals.length > 0) {\n                    totalText += ' (' + negativeTotals.join(', ') + ')';\n                }\n\n                this.value(totalText);\n                this.loading(false);\n            }.bind(this)).fail(function () {\n                if (this.jqXHR.statusText !== 'abort') {\n                    this.value($t('An unknown error occurred. Please try again.'));\n                }\n                this.loading(false);\n            }.bind(this));\n        }, 10)\n    });\n});\n","Magento_PageBuilder/js/form/element/select-filtered-options.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/form/element/select'\n], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n\n        defaults: {\n            excludeOptions: []\n        },\n\n        /** @inheritdoc */\n        onUpdate: function () {\n            if (!this.updatedByFilter) {\n                this.transferredValue = null;\n            } else {\n                this.updatedByFilter = false;\n            }\n\n            return this._super();\n        },\n\n        /**\n         * Excluding options according excludeOptions configuration based on the passed value\n         *\n         * @param {String} value\n         */\n        filter: function (value) {\n            var source = this.initialOptions,\n                initialValue = this.value(),\n                result,\n                excludeOptions =  this.excludeOptions[value],\n                excludedOptionsArray = excludeOptions ? excludeOptions.split(',') : [];\n\n            result = _.filter(source, function (item) {\n                return !excludeOptions || excludedOptionsArray.indexOf(item.value) === -1;\n            });\n\n            this.updatedByFilter = true;\n            this.setOptions(result);\n\n            this.value(this.transferredValue ? this.transferredValue : initialValue);\n\n            if (excludedOptionsArray.indexOf(initialValue) !== -1) {\n                this.transferredValue = initialValue;\n            } else {\n                this.transferredValue = null;\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/validator-rules-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/lib/validation/utils'\n], function ($, _, utils) {\n    'use strict';\n\n    /**\n     * Validate the number is between the min and max provided\n     *\n     * @param {Number} value\n     * @param {Number} min\n     * @param {Number} max\n     * @return {Boolean}\n     */\n    function validateNumberBetween(value, min, max) {\n        var numValue;\n\n        if ($.mage.isEmptyNoTrim(value)) {\n            return true;\n        }\n\n        numValue = $.mage.parseNumber(value);\n\n        if (isNaN(numValue)) {\n            return false;\n        }\n\n        return $.mage.isBetween(numValue, min, max);\n    }\n\n    /**\n     * Validate that string is url\n     * @param {String} href\n     * @return {Boolean}\n     */\n    function validateIsUrl(href) {\n        return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(href);//eslint-disable-line max-len\n    }\n\n    /**\n     * Validate that string has an anchor tag\n     * @param {String} str\n     * @return {Boolean}\n     */\n    function validateWysiwygHasAnchorTags(str) {\n        return (/<a[\\s]+([^>]+)>|<a>|<\\/a>/igm).test(str);\n    }\n\n    /**\n     * Validate that string has a widget\n     * @param {String} str\n     * @return {Boolean}\n     */\n    function validateWysiwygHasWidget(str) {\n        return (/\\{\\{widget(.*?)\\}\\}/ig).test(str);\n    }\n\n    /**\n     * Validate that string is a proper css-class\n     * @param {String} str\n     * @return {Boolean}\n     */\n    function validateCssClass(str) {\n        return (/^[a-zA-Z _\\-\\d]+$/i).test(str);\n    }\n\n    /**\n     * Validate message field and url field anchor tag is used exclusively by one field\n     * @param {String} message\n     * @param {Object} url\n     * @return {Boolean}\n     */\n    function validateOneAnchorTagField(message, url) {\n        return !(validateWysiwygHasAnchorTags(message) &&\n            ['page', 'product', 'category', 'default'].indexOf(url.type) !== -1 &&\n            url[url.type] &&\n            url[url.type].length > 0);\n    }\n\n    /**\n     * Validate message field and url field html standards, nested widget\n     * @param {String} message\n     * @param {Object} url\n     * @return {Boolean}\n     */\n    function validateNestedWidgetElement(message, url) {\n        return !(validateWysiwygHasWidget(message) &&\n            ['page', 'product', 'category', 'default'].indexOf(url.type) !== -1 &&\n            url[url.type] &&\n            url[url.type].length > 0);\n    }\n\n    /**\n     * Validate a field with an expected data value of type object, like margins_and_padding field\n     * @param {Function} validator\n     * @param {String} ruleName\n     */\n    function validateObjectField(validator, ruleName) {\n        var rule = validator.getRule(ruleName);\n\n        validator.addRule(\n            ruleName,\n            function (value, params) {\n                var allNumbers = true,\n                    handler = rule.handler.bind(this);\n\n                if (typeof value !== 'object') {\n                    return handler(value, params);\n                }\n\n                _.flatten(_.map(value, _.values)).forEach(function (val) {\n                    if (!handler(val, params)) {\n                        allNumbers = false;\n\n                        return allNumbers;\n                    }\n                });\n\n                return allNumbers;\n            },\n            $.mage.__(rule.message)\n        );\n    }\n\n    /**\n     * Validate calc value.\n     *\n     * @param {String} value\n     * @returns {Boolean}\n     */\n    function validateCalc(value) {\n        var el = document.createElement('div'),\n            style = el.style;\n\n        if (!value.trim().length) {\n            return true;\n        }\n\n        style.width = 'calc(' + value + ')';\n\n        return !!style.width.length;\n    }\n\n    return function (validator) {\n        var requiredInputRule = validator.getRule('required-entry');\n\n        validator.addRule(\n            'required-entry-location-name',\n            requiredInputRule.handler,\n            $.mage.__('Please enter the location name.')\n        );\n\n        validator.addRule(\n            'required-entry-latitude',\n            requiredInputRule.handler,\n            $.mage.__('Enter latitude')\n        );\n\n        validator.addRule(\n            'required-entry-longitude',\n            requiredInputRule.handler,\n            $.mage.__('Enter longitude')\n        );\n\n        validator.addRule(\n            'validate-latitude',\n            function (value) {\n                return validateNumberBetween(value, -85, 85);\n            },\n            $.mage.__('Please enter a number between -85 and 85')\n        );\n\n        validator.addRule(\n            'validate-longitude',\n            function (value) {\n                return validateNumberBetween(value, -180, 180);\n            },\n            $.mage.__('Please enter a number between -180 and 180')\n        );\n\n        validator.addRule(\n            'validate-video-url',\n            function (href) {\n                if (utils.isEmptyNoTrim(href)) {\n                    return true;\n                }\n\n                href = (href || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n                return validateIsUrl(href) && (href.match(/youtube\\.com|youtu\\.be/) || href.match(/vimeo\\.com/));\n            },\n            $.mage.__('Please enter a valid video URL.')\n        );\n\n        validator.addRule(\n            'validate-video-source',\n            function (href) {\n                if (utils.isEmptyNoTrim(href)) {\n                    return true;\n                }\n\n                href = (href || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n                return validateIsUrl(href) && (\n                    href.match(/youtube\\.com|youtu\\.be/) ||\n                    href.match(/vimeo\\.com/) ||\n                    href.match(/\\.(mp4|ogv|webm)(?!\\w)/)\n                );\n            },\n            $.mage.__('Please enter a valid video URL. Valid URLs have a video file extension (.mp4, .webm, .ogv) or links to videos on YouTube or Vimeo.')//eslint-disable-line max-len\n        );\n\n        validator.addRule(\n            'validate-css-class',\n            function (value) {\n                if (utils.isEmptyNoTrim(value)) {\n                    return true;\n                }\n\n                return validateCssClass(value);\n            },\n            $.mage.__('Please enter a valid CSS class.')\n        );\n\n        validator.addRule(\n            'required-entry',\n            function (value) {\n                var allFilled;\n\n                // Validation only for margins and paddings\n                if (typeof value === 'object' && !!(value.padding || value.margin)) {\n                    allFilled = true;\n\n                    _.flatten(_.map(value, _.values)).forEach(function (val) {\n                        if (utils.isEmpty(val)) {\n                            allFilled = false;\n\n                            return allFilled;\n                        }\n                    });\n\n                    return allFilled;\n                }\n\n                return requiredInputRule.handler(value);\n            },\n            $.mage.__(requiredInputRule.message)\n        );\n\n        validator.addRule(\n            'validate-message-no-link',\n            function (url, message) {\n                return validateOneAnchorTagField(message, url);\n            },\n            $.mage.__('Adding link in both content and outer element is not allowed.')\n        );\n\n        validator.addRule(\n            'validate-no-url',\n            function (message, url) {\n                return validateOneAnchorTagField(message, url);\n            },\n            $.mage.__('Adding link in both content and outer element is not allowed.')\n        );\n\n        validator.addRule(\n            'validate-message-no-widget',\n            function (url, message) {\n                return validateNestedWidgetElement(message, url);\n            },\n            $.mage.__('Adding link in outer element and widget in content is not allowed.')\n        );\n\n        validator.addRule(\n            'validate-no-widget',\n            function (message, url) {\n                return validateNestedWidgetElement(message, url);\n            },\n            $.mage.__('Adding widget in content and link in outer element is not allowed.')\n        );\n\n        validator.addRule(\n            'validate-calc',\n            function (value) {\n                return validateCalc(value);\n            },\n            $.mage.__('Please enter a valid number or calculation: Valid numbers must have an extension (px, %, pt, vh). Calculations must have white space around the + and - operators and cannot divide by zero.')//eslint-disable-line max-len\n        );\n\n        validator.addRule(\n            'validate-grid-size',\n            function (value, params, additionalParams) {\n                if (value < additionalParams.non_empty_column_count) {\n                    return false;\n                }\n\n                return true;\n            },\n            $.mage.__('Grid size cannot be smaller than the current total amount of columns, minus any empty columns.')\n        );\n\n        validator.addRule(\n            'validate-max-grid-size',\n            function (value, params, additionalParams) {\n                if (value > additionalParams.max_grid_size) {\n                    return false;\n                }\n\n                return true;\n            },\n            $.mage.__('Please enter a value less than or equal to the Maximum Column Grid Size configuration.')\n        );\n\n        validateObjectField(validator, 'validate-number');\n        validateObjectField(validator, 'less-than-equals-to');\n        validateObjectField(validator, 'greater-than-equals-to');\n\n        return validator;\n    };\n});\n","Magento_PageBuilder/js/form/element/visual-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/form/element/select'\n], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            noticeMessage: '',\n            listens: {\n                value: 'setNoticeMessage'\n            }\n        },\n\n        /**\n         * Initializes observable properties of instance\n         *\n         * @returns {Abstract} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n            this.observe('noticeMessage');\n\n            return this;\n        },\n\n        /**\n         * Parses incoming options, considers options with undefined value property\n         *     as caption\n         *\n         * @param  {Array} nodes\n         * @param {Object} captionValue\n         * @return {Object} captionValue\n         */\n        parseOptions: function (nodes, captionValue) {\n            var caption,\n                value;\n\n            nodes = _.map(nodes, function (node) {\n                value = node.value;\n\n                if ((value === null || value === captionValue) && _.isUndefined(caption)) {\n                    caption = node.label;\n                }\n\n                return node;\n            });\n\n            return {\n                options: _.compact(nodes),\n                caption: _.isString(caption) ? caption : false\n            };\n        },\n\n        /**\n         * Recursively set to object item like value and item.value like key.\n         *\n         * @param {Array} data\n         * @param {Object} result\n         * @returns {Object}\n         */\n        indexOptions: function (data, result) {\n            var value;\n\n            result = result || {};\n\n            data.forEach(function (item) {\n                value = item.value;\n\n                if (Array.isArray(value)) {\n                    this.indexOptions(value, result);\n                } else {\n                    result[value] = item;\n                }\n            });\n\n            return result;\n        },\n\n        /**\n         * Sets 'data' to 'options' observable array, if instance has\n         * 'customEntry' property set to true, calls 'setHidden' method\n         *  passing !options.length as a parameter\n         *\n         * @param {Array} data\n         * @returns {Object} Chainable\n         */\n        setOptions: function (data) {\n            var captionValue = this.captionValue || '',\n                result = this.parseOptions(data, captionValue),\n                isVisible;\n\n            this.indexedOptions = this.indexOptions(result.options);\n\n            this.options(result.options);\n\n            if (!this.caption()) {\n                this.caption(result.caption);\n            }\n\n            if (this.customEntry) {\n                isVisible = !!result.options.length;\n\n                this.setVisible(isVisible);\n                this.toggleInput(!isVisible);\n            }\n\n            return this;\n        },\n\n        /**\n         * Set the notice message on value change\n         *\n         * @param {any} value\n         * @returns {exports}\n         */\n        setNoticeMessage: function (value) {\n            var noticeMessage = '',\n                selectedOption = _.find(this.options(), function (option) {\n                    return option.value === value;\n                });\n\n            if (selectedOption && typeof selectedOption.noticeMessage !== 'undefined') {\n                noticeMessage = selectedOption.noticeMessage;\n            }\n\n            this.noticeMessage(noticeMessage);\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/form/element/wysiwyg.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/form/element/wysiwyg',\n    'mage/translate',\n    'Magento_PageBuilder/js/events',\n    'Magento_Ui/js/lib/view/utils/dom-observer',\n    'Magento_PageBuilder/js/page-builder',\n    'Magento_Ui/js/lib/view/utils/async'\n], function ($, _, Wysiwyg, $t, events, domObserver, PageBuilder) {\n    'use strict';\n\n    /**\n     * Extend the original WYSIWYG with added PageBuilder functionality\n     */\n    return Wysiwyg.extend({\n        defaults: {\n            transition: false,\n            transitionOut: false,\n            elementSelector: '> textarea',\n            stageSelector: '.pagebuilder-stage-wrapper',\n            fieldsetSelector: 'fieldset.admin__fieldset',\n            overlaySelector: '.pagebuilder-wysiwyg-overlay',\n            overlayMouseover: false,\n            pageBuilder: false,\n            visiblePageBuilder: false,\n            isComponentInitialized: false,\n            wysiwygConfigData: {\n                isFullScreen: false\n            },\n            pageBuilderEditButtonText: $t('Edit with Page Builder'),\n            isWithinModal: false,\n            modal: false\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super();\n\n            if (!this.wysiwygConfigData()['pagebuilder_button'] ||\n                this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                this.initPageBuilder();\n            }\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            this._super()\n                .observe('isComponentInitialized visiblePageBuilder wysiwygConfigData loading transition ' +\n                    'transitionOut overlayMouseover');\n\n            return this;\n        },\n\n        /**\n         * Handle button click, init the Page Builder application\n         */\n        pageBuilderEditButtonClick: function (context, event) {\n            this.determineIfWithinModal(event.currentTarget);\n            this.transition(false);\n\n            if (!this.isComponentInitialized()) {\n                this.disableDomObserver($(event.currentTarget).parent()[0]);\n            }\n\n            this.initPageBuilder();\n            this.toggleFullScreen();\n        },\n\n        /**\n         * Init Page Builder\n         */\n        initPageBuilder: function () {\n            if (!this.isComponentInitialized()) {\n                this.loading(true);\n                this.pageBuilder = new PageBuilder(\n                  this.wysiwygConfigData(),\n                  this.initialValue\n                );\n                events.trigger('pagebuilder:register', {\n                    ns: this.ns,\n                    instance: this.pageBuilder\n                });\n                this.initPageBuilderListeners();\n                this.isComponentInitialized(true);\n\n                // Disable the domObserver for the entire stage\n                $.async({\n                    component: this,\n                    selector: this.stageSelector\n                }, this.disableDomObserver.bind(this));\n\n                if (!this.wysiwygConfigData()['pagebuilder_button'] ||\n                    this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                    this.visiblePageBuilder(true);\n                }\n            }\n        },\n\n        /**\n         * Disable the domObserver on the PageBuilder stage to improve performance\n         *\n         * @param {HTMLElement} node\n         */\n        disableDomObserver: function (node) {\n            this.determineIfWithinModal(node);\n            domObserver.disableNode(node);\n            domObserver.disableNode($(node).parents(this.fieldsetSelector)[0]);\n        },\n\n        /**\n         * Changes tabindex and content editable on stage elements\n         */\n        toggleFocusableElements: function () {\n            var pageBuilderSelector = '#' + this.pageBuilder.id,\n                editable = $(pageBuilderSelector).find('[contenteditable]:not(.mceNonEditable)'),\n                focusableSelector = ' :focusable:not(' + this.overlaySelector + ')',\n                mediaSelector = pageBuilderSelector + ' iframe,' + pageBuilderSelector + ' video',\n                tabIndexValue = this.pageBuilder.isFullScreen() ? '0' : '-1',\n                editableValue = this.pageBuilder.isFullScreen();\n\n            editable.attr('contenteditable', editableValue);\n            $(pageBuilderSelector + focusableSelector).attr('tabindex', tabIndexValue);\n            $(mediaSelector).attr('tabindex', tabIndexValue);\n        },\n\n        /**\n         * Determine if the current instance is within a modal\n         *\n         * @param {HTMLElement} element\n         */\n        determineIfWithinModal: function (element) {\n            var modalInnerWrap = $(element).parents('.modal-inner-wrap');\n\n            // Determine if the Page Builder instance is within a modal\n            this.isWithinModal = modalInnerWrap.length === 1;\n\n            if (this.isWithinModal) {\n                this.modal = modalInnerWrap;\n            }\n        },\n\n        /**\n         * Press Enter key on Overlay\n         */\n        onOverlayKeyDown: function (context, event) {\n            if (event.which === 13 || event.keyCode === 13) {\n                this.pageBuilderEditButtonClick(context, event);\n            }\n\n            return true;\n        },\n\n        /**\n         * Toggle Page Builder full screen mode\n         */\n        toggleFullScreen: function () {\n            events.trigger('stage:' + this.pageBuilder.id + ':toggleFullscreen', {\n                animate: !!this.wysiwygConfigData()['pagebuilder_content_snapshot']\n            });\n        },\n\n        /**\n         * Init various listeners on the stage\n         */\n        initPageBuilderListeners: function () {\n            var id = this.pageBuilder.id,\n                renderDeferred = $.Deferred(),\n                fullScreenDeferred = $.Deferred(),\n                rendered = false;\n\n            events.on('stage:' + id + ':readyAfter', function () {\n                this.loading(false);\n            }.bind(this));\n\n            events.on('stage:' + id + ':renderAfter', function () {\n                renderDeferred.resolve();\n                rendered = true;\n            });\n\n            events.on('stage:' + id + ':masterFormatRenderAfter', function (args) {\n                this.value(args.value);\n\n                if (this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                    this.toggleFocusableElements();\n                }\n            }.bind(this));\n\n            events.on('stage:' + id + ':fullScreenModeChangeAfter', function (args) {\n                if (!args.fullScreen) {\n                    if (this.isWithinModal && this.modal) {\n                        _.delay(function () {\n                            this.modal.css({\n                                transform: '',\n                                transition: ''\n                            });\n                        }.bind(this), 350);\n                    }\n\n                    if (this.wysiwygConfigData()['pagebuilder_button'] &&\n                        !this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                        // Force full screen mode whilst the animation occurs\n                        this.transitionOut(true);\n                        // Trigger animation out\n                        this.transition(false);\n\n                        // Reset the transition out class and hide the stage\n                        _.delay(function () {\n                            this.transitionOut(false);\n                            this.visiblePageBuilder(false);\n                        }.bind(this), 185);\n                    }\n                } else if (args.fullScreen) {\n                    if (this.isWithinModal && this.modal) {\n                        this.modal.css({\n                            transform: 'none',\n                            transition: 'none'\n                        });\n                    }\n\n                    if (this.wysiwygConfigData()['pagebuilder_button'] &&\n                        !this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                        this.visiblePageBuilder(true);\n\n                        fullScreenDeferred.resolve();\n\n                        /* eslint-disable max-depth */\n                        // If the stage has already rendered once we don't need to wait until animating the stage in\n                        if (rendered) {\n                            _.defer(function () {\n                                this.transition(true);\n                            }.bind(this));\n                        }\n                        /* eslint-enable max-depth */\n                    }\n                }\n\n                if (this.wysiwygConfigData()['pagebuilder_content_snapshot']) {\n                    this.toggleFocusableElements();\n                }\n            }.bind(this));\n\n            // Wait until the stage is rendered and full screen mode is activated\n            $.when(renderDeferred, fullScreenDeferred).done(function () {\n                _.defer(function () {\n                    this.transition(true);\n                }.bind(this));\n            }.bind(this));\n        },\n\n        /** @inheritdoc */\n        destroy: function () {\n            this.pageBuilder && this.pageBuilder.destroy();\n            this._super();\n        }\n    });\n});\n","Magento_PageBuilder/js/form/provider/conditions-data-processor.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'mage/utils/objects',\n    'Magento_Rule/conditions-data-normalizer'\n], function (_, objectUtils, ConditionsDataNormalizer) {\n    'use strict';\n\n    var serializer = new ConditionsDataNormalizer();\n\n    return function (data, attribute) {\n        var pairs = {},\n            conditions = '';\n\n        /*\n         * The Condition Rule Tree is not a UI component and doesn't provide good data.\n         * The best solution is to implement the tree as a UI component that can provide good data but\n         * that is outside of the scope of the feature for now.\n         */\n        _.each(data, function (element, key) {\n            // parameters is hardcoded in the Magento\\Rule model that creates the HTML forms.\n            if (key.indexOf('parameters[' + attribute + ']') === 0) {\n                // Remove the bad, un-normalized data.\n                delete data[key];\n                pairs[key] = element;\n            }\n        });\n\n        /*\n         * The Combine Condition rule needs to have children,\n         * if does not have, we cannot parse the rule in the backend.\n         */\n        _.each(pairs, function (element, key) {\n            var keyIds = key.match(/[\\d?-]+/g),\n              combineElement = 'Magento\\\\CatalogWidget\\\\Model\\\\Rule\\\\Condition\\\\Combine',\n              nextPairsFirstKey = 'parameters[condition_source][NEXT_ITEM--1][type]',\n              nextPairsSecondKey = 'parameters[condition_source][NEXT_ITEM--2][type]';\n\n            if (keyIds !== null && element === combineElement) {\n                if (pairs[nextPairsFirstKey.replace('NEXT_ITEM', keyIds[0])] === undefined ||\n                    pairs[nextPairsFirstKey.replace('NEXT_ITEM', keyIds[0])] === combineElement &&\n                    pairs[nextPairsSecondKey.replace('NEXT_ITEM', keyIds[0])] === undefined) {\n                    pairs[key] = '';\n                }\n            }\n        });\n\n        /*\n         * Add pairs in case conditions source is not rules configurator\n         */\n        if (data['condition_option'] !== 'condition') {\n            pairs['parameters[' + attribute + '][1--1][operator]'] =\n                data[data['condition_option'] + '-condition_operator'] ?\n                data[data['condition_option'] + '-condition_operator'] :\n                '==';\n            pairs['parameters[' + attribute + '][1--1][type]'] =\n                'Magento\\\\CatalogWidget\\\\Model\\\\Rule\\\\Condition\\\\Product';\n            pairs['parameters[' + attribute + '][1][aggregator]'] = 'all';\n            pairs['parameters[' + attribute + '][1][new_child]'] = '';\n            pairs['parameters[' + attribute + '][1][type]'] = 'Magento\\\\CatalogWidget\\\\Model\\\\Rule\\\\Condition\\\\Combine';\n            pairs['parameters[' + attribute + '][1][value]'] = '1';\n            pairs['parameters[' + attribute + '][1--1][attribute]'] = data['condition_option'];\n            pairs['parameters[' + attribute + '][1--1][value]'] = _.isString(data[data['condition_option']]) ?\n                data[data['condition_option']].trim() :\n                '';\n        }\n\n        if (!_.isEmpty(pairs)) {\n            conditions = JSON.stringify(serializer.normalize(pairs).parameters[attribute]);\n            data['conditions_encoded'] = conditions;\n            objectUtils.nested(data, attribute, conditions);\n        }\n    };\n});\n","Magento_PageBuilder/js/grid/cells/single-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/multiselect',\n    'underscore'\n], function (Select, _) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/text',\n            bodyTmpl: 'Magento_PageBuilder/grid/cells/single-select',\n            label: '',\n            extendedSelections: [],\n            lastSelected: null,\n            listens: {\n                selected: 'onSelectedChange setExtendedSelections'\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('extendedSelections lastSelected');\n\n            return this;\n        },\n\n        /**\n         * Getter for extended selections.\n         *\n         * @returns {Array}\n         */\n        getExtendedSelections: function () {\n            return this.extendedSelections();\n        },\n\n        /**\n         * Setter for extended selections.\n         *\n         * @param {Array} selected\n         */\n        setExtendedSelections: function (selected) {\n            var item = {},\n                extended = [];\n\n            _.each(selected, function (id) {\n                item[this.indexField] = id;\n                extended.push(_.findWhere(this.rows(), item));\n            }, this);\n\n            this.set('extendedSelections', extended);\n        },\n\n        /** @inheritdoc */\n        isSelected: function (id, isIndex) {\n            id = this.getId(id, isIndex);\n\n            return this.selected()[0] === id;\n        },\n\n        /** @inheritdoc **/\n        select: function (id) {\n            this._super();\n            this.lastSelected(id);\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        _setSelection: function (id, isIndex, select) {\n            var selected = this.selected;\n\n            id = this.getId(id, isIndex);\n\n            if (!select && this.isSelected(id)) {\n                selected([]);\n            } else if (select) {\n                selected([id]);\n            }\n\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/grid/cells/template-apply.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/multiselect',\n    'Magento_PageBuilder/js/modal/dismissible-confirm',\n    'mage/translate'\n], function (Select, confirm, $t) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/text',\n            bodyTmpl: 'Magento_PageBuilder/grid/cells/template-apply',\n            label: '',\n            lastSelected: null\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('lastSelected');\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        isSelected: function () {\n            return false;\n        },\n\n        /** @inheritdoc **/\n        select: function (id) {\n            var self = this,\n                superCall = this._super.bind(this);\n\n            self.lastSelected(null);\n\n            confirm({\n                title: $t('Apply Template'),\n                content: $t('Are you sure you want to apply this template? This will overwrite any existing content.'),\n                dismissKey: 'pagebuilder_template_apply_confirm',\n                dismissible: true,\n                actions: {\n                    /**\n                     * Confirm action\n                     */\n                    confirm: function () {\n                        superCall();\n                        self.lastSelected(id);\n                    }\n                },\n                buttons: [{\n                    text: $t('Cancel'),\n                    class: 'action-secondary action-dismiss action-pagebuilder-cancel',\n\n                    /**\n                     * Close modal and trigger 'cancel' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                }, {\n                    text: $t('Apply'),\n                    class: 'action-primary action-accept',\n\n                    /**\n                     * Close modal and trigger 'confirm' action on click\n                     */\n                    click: function (event) {\n                        superCall();\n                        self.lastSelected(id);\n                        this.closeModal(event);\n                    }\n                }]\n            });\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        _setSelection: function () {\n            return this;\n        }\n    });\n});\n","Magento_PageBuilder/js/grid/columns/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/actions'\n], function (Actions) {\n    'use strict';\n\n    return Actions.extend({\n        defaults: {\n        },\n\n        /**\n         * Callback after click on element.\n         *\n         * @public\n         */\n        applyAction: function () {\n            switch (this.type) {\n                case 'edit-user':\n                    $(this).userEdit(this.options)\n                        .trigger('editUser');\n                    break;\n\n                case 'delete-user':\n                    $(this).userDelete(this.options)\n                        .trigger('deleteUser');\n                    break;\n\n                case 'delete-role':\n                    $(this).roleDelete(this.options)\n                        .trigger('deleteRole');\n                    break;\n\n                default:\n                    return true;\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/grid/columns/preview-image.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column',\n    'jquery',\n    'mage/template',\n    'text!Magento_PageBuilder/template/grid/cells/preview-image/preview.html',\n    'underscore',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function (Column, $, mageTemplate, thumbnailPreviewTemplate, _) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'ui/grid/cells/thumbnail',\n            fieldClass: {\n                'data-grid-preview-image-cell': true\n            }\n        },\n\n        /**\n         * Get image source data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getSrc: function (row) {\n            return row[this.index + '_src'];\n        },\n\n        /**\n         * Retrieve the original images src to be displayed at full size in the modal\n         *\n         * @param {Object} row\n         * @returns {*}\n         */\n        getOrigSrc: function (row) {\n            return row[this.index + '_orig_src'];\n        },\n\n        /**\n         * Get alternative text data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getAlt: function (row) {\n            return _.escape(row[this.index + '_alt']);\n        },\n\n        /**\n         * Check if preview available.\n         *\n         * @returns {Boolean}\n         */\n        isPreviewAvailable: function () {\n            return this['has_preview'] || false;\n        },\n\n        /**\n         * Build preview.\n         *\n         * @param {Object} row\n         */\n        preview: function (row) {\n            var modalHtml = mageTemplate(\n                thumbnailPreviewTemplate,\n                {\n                    src: this.getOrigSrc(row),\n                    alt: this.getAlt(row)\n                }\n            ),\n                previewPopup = $('<div/>').html(modalHtml);\n\n            previewPopup.modal({\n                title: this.getAlt(row),\n                innerScroll: true,\n                modalClass: '_image-box',\n                buttons: []\n            }).trigger('openModal');\n        },\n\n        /**\n         * Get field handler per row.\n         *\n         * @param {Object} row\n         * @returns {Function}\n         */\n        getFieldHandler: function (row) {\n            if (this.isPreviewAvailable()) {\n                return this.preview.bind(this, row);\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/mass-converter/background-images.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/image\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _image, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var BackgroundImages = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BackgroundImages() {}\n\n    var _proto = BackgroundImages.prototype;\n\n    /**\n     * Process data after it's read and converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {object}\n     */\n    _proto.fromDom = function fromDom(data, config) {\n      var directive = (0, _object.get)(data, config.attribute_name);\n\n      if (directive) {\n        var images = JSON.parse(directive.replace(/\\\\(.)/mg, \"$1\")) || {};\n\n        if (!_underscore.isUndefined(images.desktop_image)) {\n          (0, _object.set)(data, config.desktop_image_variable, (0, _image.decodeUrl)(images.desktop_image));\n        }\n\n        if (!_underscore.isUndefined(images.mobile_image)) {\n          (0, _object.set)(data, config.mobile_image_variable, (0, _image.decodeUrl)(images.mobile_image));\n        }\n\n        delete data[config.attribute_name];\n      }\n\n      return data;\n    }\n    /**\n     * Process data before it's converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {object}\n     */\n    ;\n\n    _proto.toDom = function toDom(data, config) {\n      var desktopImage = (0, _object.get)(data, config.desktop_image_variable);\n      var mobileImage = (0, _object.get)(data, config.mobile_image_variable);\n      var directiveData = {};\n\n      if (!_underscore.isUndefined(desktopImage) && desktopImage && !_underscore.isUndefined(desktopImage[0])) {\n        directiveData.desktop_image = (0, _image.urlToDirective)(desktopImage[0].url);\n      }\n\n      if (!_underscore.isUndefined(mobileImage) && mobileImage && !_underscore.isUndefined(mobileImage[0])) {\n        directiveData.mobile_image = (0, _image.urlToDirective)(mobileImage[0].url);\n      } // Add the directive data, ensuring we escape double quotes\n\n\n      (0, _object.set)(data, config.attribute_name, JSON.stringify(directiveData).replace(/[\\\\\"']/g, \"\\\\$&\").replace(/\\u0000/g, \"\\\\0\"));\n      return data;\n    };\n\n    return BackgroundImages;\n  }();\n\n  return BackgroundImages;\n});\n//# sourceMappingURL=background-images.js.map","Magento_PageBuilder/js/mass-converter/background-type.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var BackgroundType = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function BackgroundType() {}\n\n    var _proto = BackgroundType.prototype;\n\n    /**\n     * Process data after it's read and converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {object}\n     */\n    _proto.fromDom = function fromDom(data, config) {\n      return data;\n    }\n    /**\n     * Process data before it's converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {object}\n     */\n    ;\n\n    _proto.toDom = function toDom(data, config) {\n      var backgroundType = (0, _object.get)(data, config.attribute_name);\n\n      if (backgroundType === \"video\") {\n        (0, _object.set)(data, config.desktop_image_variable, []);\n        (0, _object.set)(data, config.mobile_image_variable, []);\n      } else if (backgroundType === \"image\") {\n        (0, _object.set)(data, config.video_source_variable, null);\n        (0, _object.set)(data, config.video_fallback_image_variable, []);\n        (0, _object.set)(data, config.video_overlay_color_variable, \"\");\n      }\n\n      return data;\n    };\n\n    return BackgroundType;\n  }();\n\n  return BackgroundType;\n});\n//# sourceMappingURL=background-type.js.map","Magento_PageBuilder/js/mass-converter/converter-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=converter-interface.js.map","Magento_PageBuilder/js/mass-converter/converter-pool-factory.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/utils/loader\", \"Magento_PageBuilder/js/mass-converter/converter-pool\"], function (_config, _loader, _converterPool) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Create a new instance of converter pool\n   */\n  function create(contentType) {\n    var config = _config.getContentTypeConfig(contentType);\n\n    var converters = [];\n    var appearanceName;\n\n    for (var _i = 0, _Object$keys = Object.keys(config.appearances); _i < _Object$keys.length; _i++) {\n      appearanceName = _Object$keys[_i];\n      var appearance = config.appearances[appearanceName];\n\n      if (undefined !== appearance && undefined !== appearance.converters) {\n        for (var _iterator = _createForOfIteratorHelperLoose(appearance.converters), _step; !(_step = _iterator()).done;) {\n          var converterConfig = _step.value;\n\n          if (!!converterConfig.component && !_converterPool.get(converterConfig.component)) {\n            converters.push(converterConfig.component);\n          }\n        }\n      }\n    }\n\n    return new Promise(function (resolve) {\n      (0, _loader)(converters, function () {\n        for (var _len = arguments.length, loadedConverters = new Array(_len), _key = 0; _key < _len; _key++) {\n          loadedConverters[_key] = arguments[_key];\n        }\n\n        for (var i = 0; i < converters.length; i++) {\n          _converterPool.register(converters[i], new loadedConverters[i]());\n        }\n\n        resolve(_converterPool);\n      });\n    });\n  }\n\n  return create;\n});\n//# sourceMappingURL=converter-pool-factory.js.map","Magento_PageBuilder/js/mass-converter/converter-pool.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var DataConverterPool = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function DataConverterPool() {\n      this.converters = {};\n    }\n\n    var _proto = DataConverterPool.prototype;\n\n    /**\n     * Retrieve a data converter instance from the pool\n     *\n     * @param {string} name\n     * @returns {ConverterInterface}\n     */\n    _proto.get = function get(name) {\n      return this.converters[name] !== undefined ? this.converters[name] : null;\n    }\n    /**\n     * Register a new data converter into the pool\n     *\n     * @param {string} name\n     * @param {ConverterInterface} converter\n     */\n    ;\n\n    _proto.register = function register(name, converter) {\n      this.converters[name] = converter;\n    };\n\n    return DataConverterPool;\n  }();\n\n  var _default = new DataConverterPool();\n\n  return _default;\n});\n//# sourceMappingURL=converter-pool.js.map","Magento_PageBuilder/js/mass-converter/empty-mobile-image.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/object\"], function (_object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var EmptyMobileImage = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function EmptyMobileImage() {}\n\n    var _proto = EmptyMobileImage.prototype;\n\n    /**\n     * Process data after it's read and converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {object} config\n     * @returns {object}\n     */\n    _proto.fromDom = function fromDom(data, config) {\n      var desktopImage = (0, _object.get)(data, config.desktop_image_variable);\n      var mobileImage = (0, _object.get)(data, config.mobile_image_variable);\n\n      if (mobileImage && desktopImage && mobileImage[0] !== undefined && desktopImage[0] !== undefined && mobileImage[0].url === desktopImage[0].url) {\n        delete data[config.mobile_image_variable];\n      }\n\n      return data;\n    }\n    /**\n     * Process data before it's converted by element converters\n     *\n     * @param {ConverterDataInterface} data\n     * @param {object} config\n     * @returns {object}\n     */\n    ;\n\n    _proto.toDom = function toDom(data, config) {\n      var mobileImage = (0, _object.get)(data, config.mobile_image_variable);\n\n      if (mobileImage === undefined || mobileImage[0] === undefined) {\n        (0, _object.set)(data, config.mobile_image_variable, (0, _object.get)(data, config.desktop_image_variable));\n      }\n\n      return data;\n    };\n\n    return EmptyMobileImage;\n  }();\n\n  return EmptyMobileImage;\n});\n//# sourceMappingURL=empty-mobile-image.js.map","Magento_PageBuilder/js/mass-converter/widget-directive-abstract.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"underscore\", \"Magento_PageBuilder/js/utils/object\"], function (_underscore, _object) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var WidgetDirectiveAbstract = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function WidgetDirectiveAbstract() {}\n\n    var _proto = WidgetDirectiveAbstract.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {WidgetDirectiveAttributes}\n     */\n    _proto.fromDom = function fromDom(data, config) {\n      var _this = this;\n\n      var attributes = {};\n      (0, _object.get)(data, config.html_variable).replace(/\\{\\{widget([\\S\\s]*?)\\}\\}/i, function (match, attributeString) {\n        attributes = _this.parseAttributesString(attributeString);\n      }.bind(this));\n      return attributes;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {ConverterDataInterface} data\n     * @param {ConverterConfigInterface} config\n     * @returns {object}\n     */\n    ;\n\n    _proto.toDom = function toDom(data, config) {\n      (0, _object.set)(data, config.html_variable, this.buildDirective(data));\n      return data;\n    }\n    /**\n     * Build the directive string using the supplies attributes\n     *\n     * @param {object} attributes\n     * @returns {string}\n     */\n    ;\n\n    _proto.buildDirective = function buildDirective(attributes) {\n      return \"{{widget \" + this.createAttributesString(attributes) + \"}}\";\n    }\n    /**\n     * @param {string} attributes\n     * @return {Object}\n     */\n    ;\n\n    _proto.parseAttributesString = function parseAttributesString(attributes) {\n      var result = {};\n      attributes.replace(/(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g, function (match, key, value) {\n        result[key] = value.replace(/&quote;/g, \"\\\"\");\n        return \"\";\n      });\n      return result;\n    }\n    /**\n     * @param {Object} attributes\n     * @return {string}\n     */\n    ;\n\n    _proto.createAttributesString = function createAttributesString(attributes) {\n      var result = \"\";\n\n      _underscore.each(attributes, function (value, name) {\n        result += name + \"=\\\"\" + String(value).replace(/\"/g, \"&quote;\") + \"\\\" \";\n      });\n\n      return result.substr(0, result.length - 1);\n    };\n\n    return WidgetDirectiveAbstract;\n  }();\n\n  return WidgetDirectiveAbstract;\n});\n//# sourceMappingURL=widget-directive-abstract.js.map","Magento_PageBuilder/js/master-format/filter-html.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\"], function (_jquery) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Filter the HTML output to only include necessary attributes & nodes\n   *\n   * @param {JQuery} element\n   * @returns {JQuery}\n   */\n  function filterHtml(element) {\n    var isWhiteSpaceOrComment = function isWhiteSpaceOrComment() {\n      return this.nodeType === Node.COMMENT_NODE || this.nodeType === Node.TEXT_NODE && this.data.match(/^\\s+$/);\n    };\n\n    element.find(\"[data-bind]\").each(function (index, value) {\n      (0, _jquery)(value).removeAttr(\"data-bind\");\n    });\n    element.contents().filter(isWhiteSpaceOrComment).remove();\n    element.find(\"*\").filter(function (index, descendentEl) {\n      // filter out elements that are iframes or have .bypass-html-filter ancestor\n      var isIframe = descendentEl.tagName === \"IFRAME\";\n      var isBeingBypassedByThisFilter = !!(0, _jquery)(descendentEl).closest(\".bypass-html-filter\").length;\n      return !isIframe && !isBeingBypassedByThisFilter;\n    }).each(function (index, descendentEl) {\n      (0, _jquery)(descendentEl).contents().filter(isWhiteSpaceOrComment).remove();\n    });\n    element.find(\"[data-wrapper]\").each(function (index, value) {\n      (0, _jquery)(value).parent().append((0, _jquery)(value).children());\n      (0, _jquery)(value).remove();\n    });\n    element.find(\".bypass-html-filter\").each(function (index, value) {\n      (0, _jquery)(value).removeClass(\"bypass-html-filter\").filter('[class=\"\"]').removeAttr(\"class\");\n    });\n    return element;\n  }\n\n  return filterHtml;\n});\n//# sourceMappingURL=filter-html.js.map","Magento_PageBuilder/js/master-format/read-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=read-interface.js.map","Magento_PageBuilder/js/master-format/render.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/master-format/render/serialize\"], function (_jquery, _config, _serialize) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var MasterFormatRenderer = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * @param stageId\n     */\n    function MasterFormatRenderer(stageId) {\n      this.ready = false;\n      this.readyDeferred = _jquery.Deferred();\n      this.stageId = stageId;\n    }\n    /**\n     * Render the root container into a string utilising our sandboxed iframe\n     *\n     * @param {ContentTypeCollection} rootContainer\n     * @returns {Promise<string>}\n     */\n\n\n    var _proto = MasterFormatRenderer.prototype;\n\n    _proto.applyBindings = function applyBindings(rootContainer) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this.getRenderFrame()) {\n          // If the stage exists we should also have a frame\n          if (document.getElementById(_this.stageId)) {\n            return reject(\"No render frame present for Page Builder instance.\");\n          } // Otherwise the instance of Page Builder has been removed from the DOM and this is an old instance.\n\n\n          return reject();\n        }\n\n        if (_this.ready) {\n          _this.channel.port1.postMessage({\n            type: \"render\",\n            message: {\n              stageId: _this.stageId,\n              tree: (0, _serialize.getSerializedTree)(rootContainer)\n            }\n          });\n\n          _this.channel.port1.onmessage = function (event) {\n            if (event.isTrusted) {\n              if (event.data.type === \"render\") {\n                resolve(event.data.message);\n              }\n\n              if (event.data.type === \"template\") {\n                _this.loadTemplate(event.data.message);\n              }\n            } else {\n              reject(\"Render event was not trusted.\");\n            }\n          };\n        } else {\n          _this.readyDeferred.then(function () {\n            _this.applyBindings(rootContainer).then(function (rendered) {\n              resolve(rendered);\n            }).catch(function (error) {\n              reject(error);\n            });\n          });\n        }\n      });\n    }\n    /**\n     * Create a channel to communicate with our sandboxed iframe. Firstly add a listener to the current window and then\n     * set the src of the iframe. Listening for a specific message event with a predefined term and then hand over the\n     * MessageChannel port to allow communication between the main window and iframe.\n     */\n    ;\n\n    _proto.setupChannel = function setupChannel() {\n      var _this2 = this;\n\n      this.channel = new MessageChannel();\n      var frame = this.getRenderFrame();\n      window.addEventListener(\"message\", function (event) {\n        if (!_this2.ready && event.data.name === \"PB_RENDER_READY\" && _this2.stageId === event.data.stageId) {\n          frame.contentWindow.postMessage(\"PB_RENDER_PORT\", \"*\", [_this2.channel.port2]);\n          _this2.ready = true;\n\n          _this2.readyDeferred.resolve();\n        }\n      });\n      frame.src = _config.getConfig(\"render_url\") + \"?stageId=\" + this.stageId;\n    }\n    /**\n     * Use the text! RequireJS plugin to load a template and send it back to the child render iframe\n     *\n     * @param name\n     */\n    ;\n\n    _proto.loadTemplate = function loadTemplate(name) {\n      var _this3 = this;\n\n      require([\"text!\" + name], function (template) {\n        _this3.channel.port1.postMessage({\n          type: \"template\",\n          message: {\n            name: name,\n            template: template\n          }\n        });\n      });\n    }\n    /**\n     * Retrieve the render frame\n     *\n     * @returns {HTMLIFrameElement}\n     */\n    ;\n\n    _proto.getRenderFrame = function getRenderFrame() {\n      return document.getElementById(\"render_frame_\" + this.stageId);\n    };\n\n    return MasterFormatRenderer;\n  }();\n\n  return MasterFormatRenderer;\n});\n//# sourceMappingURL=render.js.map","Magento_PageBuilder/js/master-format/validator.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/config\"], function (_config) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Validate if content has page builder format by checking for any data-content-type attributes\n   *\n   * @param {string} content\n   * @returns {boolean}\n   */\n  function validate(content) {\n    var stageDocument = new DOMParser().parseFromString(content, \"text/html\");\n    return !!stageDocument.querySelector(\"[\" + _config.getConfig(\"dataContentTypeAttributeName\") + \"]\");\n  }\n\n  return validate;\n});\n//# sourceMappingURL=validator.js.map","Magento_PageBuilder/js/master-format/read/configurable.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndefine([\"jquery\", \"mageUtils\", \"underscore\", \"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/content-type/appearance-config\", \"Magento_PageBuilder/js/converter/converter-pool-factory\", \"Magento_PageBuilder/js/mass-converter/converter-pool-factory\", \"Magento_PageBuilder/js/property/property-reader-pool-factory\"], function (_jquery, _mageUtils, _underscore, _config, _appearanceConfig, _converterPoolFactory, _converterPoolFactory2, _propertyReaderPoolFactory) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Configurable = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Configurable() {}\n\n    var _proto = Configurable.prototype;\n\n    /**\n     * Read data from the dom based on configuration\n     *\n     * @param element HTMLElement\n     * @returns {Promise<any>}\n     */\n    _proto.read = function read(element) {\n      var _this = this;\n\n      var role = element.getAttribute(_config.getConfig(\"dataContentTypeAttributeName\"));\n      var config = (0, _appearanceConfig)(role, element.getAttribute(\"data-appearance\"));\n      var componentsPromise = [(0, _propertyReaderPoolFactory)(role), (0, _converterPoolFactory)(role), (0, _converterPoolFactory2)(role)];\n      return new Promise(function (resolve) {\n        Promise.all(componentsPromise).then(function (loadedComponents) {\n          var propertyReaderPool = loadedComponents[0],\n              converterPool = loadedComponents[1],\n              massConverterPool = loadedComponents[2];\n\n          var viewports = _config.getConfig(\"viewports\");\n\n          var data = {};\n\n          _underscore.each(viewports, function (viewport, name) {\n            return data[name] = {};\n          });\n\n          var _loop = function _loop() {\n            var elementName = _Object$keys[_i];\n            var elementConfig = config.elements[elementName];\n\n            var currentElement = _this.findElementByName(element, elementName); // If we cannot locate the current element skip trying to read any attributes from it\n\n\n            if (currentElement === null || currentElement === undefined) {\n              return \"continue\";\n            }\n\n            _underscore.each(viewports, function (viewportObj, viewport) {\n              currentElement.setAttribute(\"style\", currentElement.getAttribute(\"data-\" + viewport + \"-style\"));\n\n              if (elementConfig.style.length) {\n                data[viewport] = _this.readStyle(elementConfig.style, currentElement, data[viewport], propertyReaderPool, converterPool);\n              }\n\n              if (elementConfig.attributes.length) {\n                data[viewport] = _this.readAttributes(elementConfig.attributes, currentElement, data[viewport], propertyReaderPool, converterPool);\n              }\n\n              if (undefined !== elementConfig.html.var) {\n                data[viewport] = _this.readHtml(elementConfig, currentElement, data[viewport], converterPool);\n              }\n\n              if (undefined !== elementConfig.tag.var) {\n                data[viewport] = _this.readHtmlTag(elementConfig, currentElement, data[viewport]);\n              }\n\n              if (undefined !== elementConfig.css.var) {\n                data[viewport] = _this.readCss(elementConfig, currentElement, data[viewport]);\n              }\n            });\n          };\n\n          for (var _i = 0, _Object$keys = Object.keys(config.elements); _i < _Object$keys.length; _i++) {\n            var _ret = _loop();\n\n            if (_ret === \"continue\") continue;\n          }\n\n          _underscore.each(viewports, function (viewportObj, viewport) {\n            data[viewport] = _this.convertData(config, data[viewport], massConverterPool);\n          });\n\n          resolve(data);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    }\n    /**\n     * Find the element for the current content type by it's name, avoiding searching in other content types by\n     * removing any other element which contains it's own data-content-type.\n     *\n     * @param {HTMLElement} element\n     * @param {string} name\n     * @returns {HTMLElement}\n     */\n    ;\n\n    _proto.findElementByName = function findElementByName(element, name) {\n      // Create a clone of the element to avoid modifying the source\n      var currentElement = (0, _jquery)(element).clone();\n\n      if (currentElement.attr(\"data-element\") === name) {\n        return currentElement[0];\n      } // Attempt to find the element in the children of the data-content-type\n\n\n      var searchInChildren = currentElement.find(\"[data-element=\\\"\" + name + \"\\\"]\"); // Ensure the element is within the current content type\n\n      if (searchInChildren.length > 0 && searchInChildren.closest(\"[data-content-type]\")[0] === currentElement[0]) {\n        return searchInChildren[0];\n      }\n\n      return null;\n    }\n    /**\n     * Read attributes for element\n     *\n     * @param {DataMappingAttributesInterface[]} config\n     * @param {HTMLElement} element\n     * @param {object} data\n     * @param {typeof PropertyReaderPool} propertyReaderPool\n     * @param {typeof ConverterPool} converterPool\n     * @returns {any}\n     */\n    ;\n\n    _proto.readAttributes = function readAttributes(config, element, data, propertyReaderPool, converterPool) {\n      var result = {};\n\n      for (var _iterator = _createForOfIteratorHelperLoose(config), _step; !(_step = _iterator()).done;) {\n        var attributeConfig = _step.value;\n\n        if (\"write\" === attributeConfig.persistence_mode) {\n          continue;\n        }\n\n        var value = !!attributeConfig.static ? attributeConfig.value : propertyReaderPool.get(attributeConfig.reader).read(element, attributeConfig.name);\n\n        if (converterPool.get(attributeConfig.converter)) {\n          value = converterPool.get(attributeConfig.converter).fromDom(value);\n        }\n\n        if (_jquery.type(result[attributeConfig.var]) === \"object\") {\n          var _mageUtils$extend;\n\n          value = _mageUtils.extend((_mageUtils$extend = {}, _mageUtils$extend[attributeConfig.name] = value, _mageUtils$extend), result[attributeConfig.var]);\n        }\n\n        result[attributeConfig.var] = value;\n      }\n\n      return _underscore.extend(data, result);\n    }\n    /**\n     * Read style properties for element\n     *\n     * @param {DataMappingStyleInterface[]} config\n     * @param {HTMLElement} element\n     * @param {object} data\n     * @param {typeof PropertyReaderPool} propertyReaderPool\n     * @param {typeof ConverterPool} converterPool\n     * @returns {{[p: string]: string}}\n     */\n    ;\n\n    _proto.readStyle = function readStyle(config, element, data, propertyReaderPool, converterPool) {\n      var result = _underscore.extend({}, data);\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(config), _step2; !(_step2 = _iterator2()).done;) {\n        var propertyConfig = _step2.value;\n\n        if (\"write\" === propertyConfig.persistence_mode) {\n          continue;\n        }\n\n        var value = !!propertyConfig.static ? propertyConfig.value : propertyReaderPool.get(propertyConfig.reader).read(element, propertyConfig.name);\n\n        if (converterPool.get(propertyConfig.converter)) {\n          value = converterPool.get(propertyConfig.converter).fromDom(value);\n        }\n\n        if (_jquery.type(result[propertyConfig.var]) === \"object\") {\n          value = _mageUtils.extend(result[propertyConfig.var], value);\n        }\n\n        result[propertyConfig.var] = value;\n      }\n\n      return result;\n    }\n    /**\n     * Read element's tag\n     *\n     * @param {object} config\n     * @param {HTMLElement} element\n     * @param {object} data\n     * @returns {object}\n     */\n    ;\n\n    _proto.readHtmlTag = function readHtmlTag(config, element, data) {\n      var result = {};\n      result[config.tag.var] = element.nodeName.toLowerCase();\n      return _underscore.extend(data, result);\n    }\n    /**\n     * Read element's css\n     *\n     * @param {ContentTypeConfigAppearanceElementInterface} config\n     * @param {HTMLElement} element\n     * @param {object} data\n     * @returns {any}\n     */\n    ;\n\n    _proto.readCss = function readCss(config, element, data) {\n      var result = {};\n      var css = element.getAttribute(\"class\") !== null ? element.getAttribute(\"class\") : \"\";\n\n      if (config.css !== undefined && config.css.filter !== undefined && config.css.filter.length) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(config.css.filter), _step3; !(_step3 = _iterator3()).done;) {\n          var filterClass = _step3.value;\n          css = css.replace(filterClass, \"\");\n        }\n      }\n\n      result[config.css.var] = css.replace(/\\s{2,}/g, \" \").trim();\n      return _underscore.extend(data, result);\n    }\n    /**\n     * Read element's content\n     *\n     * @param {ContentTypeConfigAppearanceElementInterface} config\n     * @param {HTMLElement} element\n     * @param {object} data\n     * @param {typeof ConverterPool} converterPool\n     * @returns {any}\n     */\n    ;\n\n    _proto.readHtml = function readHtml(config, element, data, converterPool) {\n      var result = {};\n      var value = element.innerHTML;\n\n      if (converterPool.get(config.html.converter)) {\n        value = converterPool.get(config.html.converter).fromDom(value);\n      }\n\n      result[config.html.var] = value;\n      return _underscore.extend(data, result);\n    }\n    /**\n     * Convert data after it's read for all elements\n     *\n     * @param config\n     * @param {object} data\n     * @param {typeof MassConverterPool} massConverterPool\n     * @returns {object}\n     */\n    ;\n\n    _proto.convertData = function convertData(config, data, massConverterPool) {\n      for (var _iterator4 = _createForOfIteratorHelperLoose(config.converters), _step4; !(_step4 = _iterator4()).done;) {\n        var converterConfig = _step4.value;\n\n        if (massConverterPool.get(converterConfig.component)) {\n          data = massConverterPool.get(converterConfig.component).fromDom(data, converterConfig.config);\n        }\n      }\n\n      return data;\n    };\n\n    return Configurable;\n  }();\n\n  return Configurable;\n});\n//# sourceMappingURL=configurable.js.map","Magento_PageBuilder/js/master-format/render/events.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * The frame does not need to create or observe events, however the app will naturally attempt to. So let's stop that!\n   */\n  var _default = {\n    on: function on() {\n      return this;\n    },\n    off: function off() {\n      return this;\n    },\n    trigger: function trigger() {\n      return this;\n    }\n  };\n  return _default;\n});\n//# sourceMappingURL=events.js.map","Magento_PageBuilder/js/master-format/render/frame.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"csso\", \"jquery\", \"knockout\", \"Magento_Ui/js/lib/knockout/template/engine\", \"mageUtils\", \"underscore\", \"Magento_PageBuilder/js/binding/master-style\", \"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/content-type-factory\", \"Magento_PageBuilder/js/content-type/style-registry\", \"Magento_PageBuilder/js/utils/directives\", \"Magento_PageBuilder/js/master-format/filter-html\"], function (_csso, _jquery, _knockout, _engine, _mageUtils, _underscore, _masterStyle, _config, _contentTypeFactory, _styleRegistry, _directives, _filterHtml) {\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var port = null;\n\n  var portDeferred = _jquery.Deferred();\n\n  var deferredTemplates = {};\n  var lastRenderId;\n  /**\n   * Debounce the render call, so we don't render until the final request\n   */\n\n  var debounceRender = _underscore.debounce(function (message, renderId) {\n    render(message, renderId).then(function (output) {\n      // Only post the most recent render back to the parent\n      if (lastRenderId === renderId) {\n        port.postMessage({\n          type: \"render\",\n          message: output\n        });\n      }\n    });\n  }, 50);\n  /**\n   * Listen for requests from the parent window for a render\n   */\n\n\n  function listen(config) {\n    var stageId = window.location.href.split(\"?\")[1].split(\"=\")[1];\n\n    _config.setConfig(config);\n\n    _config.setMode(\"Master\"); // Override assign with extend to prevent deep object overriding.\n\n\n    Object.assign = _mageUtils.extend;\n    /**\n     * Create a listener within our iframe so we can observe messages from the parent, once we receive a port on the\n     * MessageChannel we utilise that for all communication.\n     */\n\n    window.addEventListener(\"message\", function (event) {\n      if (event.ports && event.ports.length) {\n        port = event.ports[0];\n        portDeferred.resolve(port);\n\n        port.onmessage = function (messageEvent) {\n          if (messageEvent.data.type === \"render\") {\n            var renderId = _mageUtils.uniqueid();\n\n            lastRenderId = renderId;\n            debounceRender(messageEvent.data.message, renderId);\n          }\n\n          if (messageEvent.data.type === \"template\") {\n            var message = messageEvent.data.message;\n\n            if (message.name in deferredTemplates) {\n              deferredTemplates[message.name].resolve(message.template);\n              delete deferredTemplates[message.name];\n            }\n          }\n        };\n      }\n    }, false); // Inform the parent iframe that we're ready to receive the port\n\n    window.parent.postMessage({\n      name: \"PB_RENDER_READY\",\n      stageId: stageId\n    }, \"*\");\n  }\n  /**\n   * Use our MessageChannel to load a template from the parent window, this is required as the iframe isn't allowed to\n   * make same origin XHR requests.\n   *\n   * @param name\n   */\n\n\n  function loadTemplate(name) {\n    return new Promise(function (resolve) {\n      if (!(name in deferredTemplates)) {\n        deferredTemplates[name] = _jquery.Deferred();\n      }\n\n      deferredTemplates[name].then(function (template) {\n        resolve(template);\n      });\n\n      if (port) {\n        port.postMessage({\n          type: \"template\",\n          message: name\n        });\n      } else {\n        portDeferred.then(function (messagePort) {\n          messagePort.postMessage({\n            type: \"template\",\n            message: name\n          });\n        });\n      }\n    });\n  }\n  /**\n   * Assert if the render has finished\n   */\n\n\n  var assertRenderFinished = _underscore.debounce(function (element, expectedCount, callback) {\n    if (element.querySelectorAll(\"[data-content-type]\").length === expectedCount) {\n      callback();\n    }\n  }, 50);\n  /**\n   * Iterate over the root container and count all content types\n   *\n   * @param rootContainer\n   * @param count\n   */\n\n\n  function countContentTypes(rootContainer, count) {\n    count = count || 0;\n    rootContainer.getChildren()().forEach(function (child) {\n      ++count;\n\n      if (typeof child.getChildren !== \"undefined\" && child.getChildren()().length > 0) {\n        count = countContentTypes(child, count);\n      }\n    });\n    return count;\n  }\n  /**\n   * Perform a render of the provided data\n   *\n   * @param message\n   * @param renderId\n   */\n\n\n  function render(message, renderId) {\n    var styleRegistries = {};\n\n    _underscore.each(_config.getConfig(\"viewports\"), function (viewport, name) {\n      styleRegistries[name] = new _styleRegistry(name + renderId);\n    });\n\n    return new Promise(function (resolve, reject) {\n      createRenderTree(message.stageId, message.tree).then(function (rootContainer) {\n        var element = document.createElement(\"div\");\n        /**\n         * Setup an event on the element to observe changes and count the expected amount of content types are\n         * present within the content.\n         */\n\n        var renderFinished = _jquery.Deferred();\n\n        var observer = new MutationObserver(function () {\n          assertRenderFinished(element, countContentTypes(rootContainer), renderFinished.resolve);\n        });\n        observer.observe(element, {\n          attributes: true,\n          childList: true,\n          subtree: true\n        }); // Combine this event with our engine waitForRenderFinish to ensure rendering is completed\n\n        _jquery.when(_engine.waitForFinishRender(), renderFinished).then(function () {\n          observer.disconnect();\n\n          _knockout.cleanNode(element);\n\n          var styles = generateMasterCssForViewports(styleRegistries);\n\n          if (styles) {\n            (0, _jquery)(element).append((0, _jquery)(\"<style/>\").html(styles));\n          }\n\n          _underscore.each(styleRegistries, function (value, name) {\n            return (0, _styleRegistry.deleteStyleRegistry)(name + renderId);\n          });\n\n          var filtered = (0, _filterHtml)((0, _jquery)(element));\n          var output = (0, _directives.replaceWithSrc)((0, _directives)(filtered.html()));\n          resolve(output);\n        });\n\n        _knockout.applyBindingsToNode(element, {\n          template: {\n            data: rootContainer.content,\n            name: rootContainer.content.template\n          }\n        }, {\n          id: renderId\n        });\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Rebuild the content type tree using their original data and configuration\n   *\n   * @param stageId\n   * @param tree\n   * @param parent\n   */\n\n\n  function createRenderTree(stageId, tree, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    return new Promise(function (resolve, reject) {\n      (0, _contentTypeFactory)(_config.getContentTypeConfig(tree.name), parent, stageId, tree.data, parent !== null ? tree.children.length : 0, tree.viewportsData).then(function (contentType) {\n        // Ensure  we retain the original tree ID's\n        contentType.id = tree.id;\n\n        if (tree.children.length > 0) {\n          var childPromises = [];\n          tree.children.forEach(function (child) {\n            childPromises.push(createRenderTree(stageId, child, contentType));\n          });\n          Promise.all(childPromises).then(function (children) {\n            children.forEach(function (child) {\n              contentType.addChild(child);\n            });\n            resolve(contentType);\n          });\n        } else {\n          resolve(contentType);\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Generate the master format CSS\n   *\n   * @param registry\n   */\n\n\n  function generateMasterCss(registry) {\n    var scopes = Object.keys(registry.getAllStyles()).map(function (selector) {\n      return [selector];\n    });\n    return _csso.minify((0, _styleRegistry.generateCss)(registry.getAllStyles()), {\n      usage: {\n        scopes: scopes\n      }\n    }).css;\n  }\n\n  function generateMasterCssForViewports(registries) {\n    var result = \"\";\n\n    _underscore.each(registries, function (registry, name) {\n      var css = generateMasterCss(registry);\n\n      var media = _config.getConfig(\"viewports\")[name].media;\n\n      if (media && css) {\n        result += \"@media \" + media + \" { \" + css + \" }\";\n      } else {\n        result += css;\n      }\n    });\n\n    return result;\n  }\n\n  return Object.assign(listen, {\n    loadTemplate: loadTemplate\n  });\n});\n//# sourceMappingURL=frame.js.map","Magento_PageBuilder/js/master-format/render/serialize.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/content-type-collection\"], function (_config, _contentTypeCollection) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Serialize the tree as a simplified object for rendering\n   *\n   * @param contentType\n   */\n  function buildTree(contentType) {\n    var data = getData(contentType);\n    var viewportsData = getViewportsData(contentType);\n    var tree = {\n      name: contentType.config.name,\n      id: contentType.id,\n      data: data,\n      children: [],\n      viewportsData: viewportsData\n    };\n\n    if (contentType instanceof _contentTypeCollection && contentType.getChildren()().length > 0) {\n      contentType.getChildren()().forEach(function (child) {\n        tree.children.push(buildTree(child));\n      });\n    }\n\n    return tree;\n  }\n  /**\n   * Get a serialized version of the tree\n   *\n   * @param contentType\n   */\n\n\n  function getSerializedTree(contentType) {\n    return buildTree(contentType);\n  }\n  /**\n   * Retrieve the master data from the content types instance\n   *\n   * @param contentType\n   */\n\n\n  function getData(contentType) {\n    /**\n     * Flip flop to JSON and back again to ensure all data is serializable. Magento by default adds functions into\n     * some basic types which cannot be serialized when calling PostMessage.\n     */\n    return JSON.parse(JSON.stringify(contentType.dataStores[_config.getConfig(\"defaultViewport\")].getState())) || {};\n  }\n  /**\n   * Retrieve the master data from the content types instance\n   *\n   * @param contentType\n   */\n\n\n  function getViewportsData(contentType) {\n    /**\n     * Flip flop to JSON and back again to ensure all data is serializable. Magento by default adds functions into\n     * some basic types which cannot be serialized when calling PostMessage.\n     */\n    var result = {};\n    Object.keys(contentType.dataStores).forEach(function (name) {\n      result[name] = JSON.parse(JSON.stringify(contentType.dataStores[name].getState())) || {};\n    });\n    return result;\n  }\n\n  return {\n    buildTree: buildTree,\n    getSerializedTree: getSerializedTree\n  };\n});\n//# sourceMappingURL=serialize.js.map","Magento_PageBuilder/js/master-format/render/requirejs/text.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"mage/requirejs/text\", \"Magento_PageBuilder/js/master-format/render/frame\"], function (_text, _frame) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Within our render frame we override the RequireJS text! plugin, this is originally implemented within\n   * lib/web/mage/requirejs/text.js. The override uses the MessageChannel to communicate with the parent frame to\n   * retrieve any requested HTML knockout template. We do this due to the sandbox restrictions on the iframe disallow\n   * XHR requests to the same origin domain.\n   */\n\n  /**\n   * Load a template\n   *\n   * @param name\n   * @param req\n   * @param onLoad\n   */\n  function load(name, req, onLoad) {\n    (0, _frame.loadTemplate)(name).then(function (template) {\n      onLoad(template);\n    }).catch(function (error) {\n      onLoad.error(error);\n    });\n  }\n  /**\n   * Retrieve a template\n   *\n   * @param url\n   * @param callback\n   * @param fail\n   * @param headers\n   */\n\n\n  function get(url, callback, fail, headers) {\n    _text.get.apply(_text, arguments);\n  }\n\n  return {\n    load: load,\n    get: get\n  };\n});\n//# sourceMappingURL=text.js.map","Magento_PageBuilder/js/modal/confirm-alert.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget',\n    'Magento_Ui/js/modal/alert',\n    'jquery/z-index'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.confirmAlert', $.mage.alert, {\n        /**\n         * Fix issue with zIndex when removing the alert from the screen\n         * @private\n         */\n        _unsetActive: function () {\n            this._super();\n\n            if (this.overlay) {\n                this.overlay.zIndex('');\n            }\n        }\n    });\n\n    return function (config) {\n        return $('<div></div>').html(config.content).confirmAlert(config);\n    };\n});\n","Magento_PageBuilder/js/modal/dismissible-confirm.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Extend the confirmation prompt to allow for an additional checkbox to be displayed. The checkbox enables the user to\n * dismiss subsequent prompts of the same type based on their dismissKey.\n *\n * Once a type is dismissed a cookie is set and all future instances of that prompt are bypassed. This cookie is\n * cleared once the user logs out and back in via an observer.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'text!Magento_PageBuilder/template/modal/dismissible-modal-content.html',\n    'mage/translate',\n    'Magento_Ui/js/modal/prompt',\n    'mage/cookies'\n], function ($, _, promptContentTmpl, $t) {\n    'use strict';\n\n    /**\n     * Create buttons array for modal options\n     *\n     * @param {Boolean} haveCancelButton\n     * @return {Object}\n     */\n    function buttonsConfig(haveCancelButton) {\n        var cancelButton = {\n            text: $.mage.__('Cancel'),\n            class: 'action-secondary action-dismiss',\n\n            /**\n             * Click handler.\n             */\n            click: function () {\n                this.closeModal(false);\n            }\n        },\n            confirmButton = {\n            text: $.mage.__('OK'),\n            class: 'action-primary action-accept',\n\n            /**\n             * Click handler.\n             */\n            click: function () {\n                this.closeModal(true);\n            }\n        },\n            buttons = [];\n\n        if (haveCancelButton !== false) {\n            buttons.push(cancelButton);\n        }\n        buttons.push(confirmButton);\n\n        return buttons;\n    }\n\n    $.widget('mage.dismissibleConfirm', $.mage.prompt, {\n        options: {\n            promptContentTmpl: promptContentTmpl,\n            dismissible: false, // Can the modal be dismissed?\n            dismissKey: 'default', // The key we'll check to see if the modal has already been dismissed\n            dismissMessage: $t('Do not show this again'), // Message to display next to the dismiss checkbox\n            dismissCheckbox: '[name=\"modal-dnsa\"]' // Selector to retrieve dismiss checkbox\n        },\n\n        /**\n         * Open the modal window, if the modal has been dismissed, then run the confirm & always actions and don't\n         * don't open the modal\n         *\n         * @returns {*}\n         */\n        openModal: function () {\n            if ($.mage.cookies.get(this.options.dismissKey) === 'true') {\n                this.options.actions.confirm();\n\n                return this.options.actions.always(); // Always runs after confirm in confirm.js\n            }\n\n            return this._super();\n        },\n\n        /**\n         * Close modal window.\n         *\n         * @param {Boolean} result\n         */\n        closeModal: function (result) {\n            this._super(result);\n\n            if (result && this._isDismissed()) {\n                $.mage.cookies.set(this.options.dismissKey, 'true', {});\n            }\n        },\n\n        /**\n         * Is the dismissed checkbox checked?\n         *\n         * @private\n         */\n        _isDismissed: function () {\n            return this.modal.find(this.options.dismissCheckbox).is(':checked');\n        }\n    });\n\n    return function (config) {\n        config.buttons = buttonsConfig(config.haveCancelButton);\n        delete config.haveCancelButton;\n\n        return $('<div></div>').html(config.content).dismissibleConfirm(config);\n    };\n});\n","Magento_PageBuilder/js/modal/modal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/modal/modal-component',\n    'Magento_PageBuilder/js/events'\n], function (ModalComponent, events) {\n    'use strict';\n\n    return ModalComponent.extend({\n        defaults: {\n            titlePrefix: '${ $.options.title }',\n            modules: {\n                insertForm: '${ $.insertFormProvider }'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            events.on('form:renderAfter', function (params) {\n                this.openModal();\n                this.setTitle(this.titlePrefix + ' ' + params.title);\n                this.startListen(params.id);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Listen for from save.\n         *\n         * @param {String} id\n         */\n        startListen: function (id) {\n            events.on('form:' + id + ':saveAfter', function () {\n                this.closeModal();\n            }.bind(this));\n\n        },\n\n        /**\n         * Trigger modalClosed event on external provider\n         *\n         * @returns {any}\n         */\n        closeModal: function () {\n            this.insertForm() &&\n            this.insertForm().externalSource() &&\n            this.insertForm().externalSource().trigger('data.modalClosed');\n\n            return this._super();\n        }\n    });\n});\n","Magento_PageBuilder/js/modal/template-manager-modal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal-component',\n    'Magento_PageBuilder/js/events',\n    'underscore',\n    'Magento_PageBuilder/js/stage-builder'\n], function ($, ModalComponent, events, _, stageBuilder) {\n    'use strict';\n\n    return ModalComponent.extend({\n        defaults: {\n            stage: null,\n            modules: {\n                messageContainer: '${ $.messageContainerProvider }',\n                listing: '${ $.listingProvider }'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            _.bindAll(this, 'closeModal');\n\n            events.on('stage:templateManager:open', function (params) {\n                this.openModal();\n                this.stage = params.stage;\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Apply selected template\n         *\n         * @param {String} template\n         */\n        applySelected: function (template) {\n            if (template) {\n                // Destroy the old content in the stage\n                this.stage.pageBuilder.destroy();\n                $('body').trigger('processStart');\n\n                stageBuilder(this.stage, template).then(function () {\n                    $('body').trigger('processStop');\n                    this.closeModal();\n                }.bind(this));\n            }\n        }\n    });\n});\n","Magento_PageBuilder/js/modal/template-manager-save.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'mage/translate',\n    'Magento_Ui/js/modal/prompt'\n], function ($, _, $t) {\n    'use strict';\n\n    $.widget('mage.templateManagerSave', $.mage.prompt, {\n        options: {\n            createdForField: '[data-role=\"createdForField\"]',\n            previewImage: '[data-role=\"preview-image\"]',\n            previewImageSpinner: '[data-role=\"preview-image-spinner\"]',\n            saveButton: '[data-role=\"action\"].action-save',\n            form: 'form',\n            buttons: [{\n                text: $.mage.__('Cancel'),\n                class: 'action-secondary action-dismiss',\n\n                /**\n                 * Click handler.\n                 */\n                click: function () {\n                    this.closeModal();\n                }\n            }, {\n                text: $.mage.__('Save'),\n                class: 'action-primary action-save',\n\n                /**\n                 * Click handler.\n                 */\n                click: function () {\n                    this.submit();\n                }\n            }]\n        },\n\n        /**\n         * Create widget\n         *\n         * @private\n         */\n        _create: function () {\n            this._super();\n\n            this.modal.find(this.options.saveButton).prop('disabled', 'disabled');\n            // Ensure if the form is submitted through hitting enter we handle it correctly\n            this.modal.find(this.options.form).on('submit', function (event) {\n                event.preventDefault();\n                this.submit();\n            }.bind(this));\n        },\n\n        /**\n         * Validate prompt contains a template name\n         *\n         * @returns {Boolean}\n         */\n        validate: function () {\n            return this.modal.find(this.options.promptField) &&\n                !_.isEmpty(this.modal.find(this.options.promptField).val());\n        },\n\n        /**\n         * Save the values within the prompt\n         */\n        submit: function () {\n            var name,\n                createdFor;\n\n            if (this.options.validation && !this.validate()) {\n                return false;\n            }\n\n            $('body').trigger('processStart');\n\n            name = this.modal.find(this.options.promptField).val();\n            createdFor = this.modal.find(this.options.createdForField).val();\n\n            this.options.actions.confirm.call(this, name, createdFor).then(function () {\n                this.closeModal(true);\n                $('body').trigger('processStop');\n            }.bind(this)).catch(function () {\n                $('body').trigger('processStop');\n            });\n        },\n\n        /**\n         * Set the preview image\n         *\n         * @param {String} image\n         */\n        setPreviewImage: function (image) {\n            var previewImage = this.modal.find(this.options.previewImage),\n                previewImageSpinner = this.modal.find(this.options.previewImageSpinner);\n\n            // Update the preview image within the modal\n            previewImageSpinner.hide();\n            previewImage.append(\n                $('<img />').prop('src', image).prop('alt', $t('Template Preview'))\n            ).show();\n\n            // Enable the button so the user can save\n            this.modal.find(this.options.saveButton).prop('disabled', false);\n        },\n\n        /**\n         * Close modal window\n         */\n        closeModal: function (saved) {\n            if (!saved) {\n                this.options.actions.cancel.call(this, saved);\n            }\n\n            this.options.actions.always();\n            this.element.on('promptclosed', _.bind(this._remove, this));\n\n            return this._super();\n        }\n    });\n\n    return function (config) {\n        return $('<div class=\"prompt-message\"></div>').html(config.content).templateManagerSave(config);\n    };\n});\n","Magento_PageBuilder/js/panel/menu.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\"], function (_knockout) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var Menu = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * Menu constructor\n     *\n     * @param id\n     * @param menu\n     * @param contentTypes\n     * @param stageId\n     */\n    function Menu(id, menu, contentTypes, stageId) {\n      if (contentTypes === void 0) {\n        contentTypes = [];\n      }\n\n      this.hidden = _knockout.observable(false);\n      this.id = _knockout.observable();\n      this.code = _knockout.observable(\"\");\n      this.label = _knockout.observable(\"\");\n      this.icon = _knockout.observable(\"\");\n      this.sort = _knockout.observable();\n      this.contentTypes = _knockout.observableArray([]);\n      this.active = _knockout.observable(false);\n      this.id(id);\n      this.code(menu.code);\n      this.label(menu.label);\n      this.icon(menu.icon);\n      this.sort(menu.sort);\n      this.contentTypes(contentTypes);\n      this.stageId = stageId;\n    }\n    /**\n     * Toggle the menu\n     */\n\n\n    var _proto = Menu.prototype;\n\n    _proto.toggle = function toggle() {\n      this.active(!this.active());\n    };\n\n    return Menu;\n  }();\n\n  return {\n    Menu: Menu\n  };\n});\n//# sourceMappingURL=menu.js.map","Magento_PageBuilder/js/panel/menu/content-type.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"knockout\", \"Magento_PageBuilder/js/drag-drop/matrix\"], function (_knockout, _matrix) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var ContentType = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * @param {string} identifier\n     * @param {ContentTypeConfigInterface} config\n     * @param {string} stageId\n     */\n    function ContentType(identifier, config, stageId) {\n      this.droppable = true;\n      this.icon = _knockout.observable(\"\");\n      this.identifier = _knockout.observable(\"\");\n      this.label = _knockout.observable(\"\");\n      this.config = config;\n      this.identifier(identifier);\n      this.label(config.label);\n      this.icon(config.icon);\n      this.stageId = stageId;\n    }\n    /**\n     * Retrieve the config object\n     *\n     * @returns {ContentTypeConfigInterface}\n     */\n\n\n    var _proto = ContentType.prototype;\n\n    _proto.getConfig = function getConfig() {\n      return this.config;\n    }\n    /**\n     * Only connect to container sortable instances that the current content type is accepted into\n     *\n     * @returns {string}\n     */\n    ;\n\n    _proto.getDraggableOptions = function getDraggableOptions() {\n      return {\n        connectToSortable: (0, _matrix.getAllowedContainersClasses)(this.config.name, this.stageId)\n      };\n    };\n\n    return ContentType;\n  }();\n\n  return {\n    ContentType: ContentType\n  };\n});\n//# sourceMappingURL=content-type.js.map","Magento_PageBuilder/js/property/attribute-reader.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var AttributeReader = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function AttributeReader() {}\n\n    var _proto = AttributeReader.prototype;\n\n    /**\n     * Read attribute from element\n     *\n     * @param {HTMLElement} element\n     * @param {string} source\n     * @returns {string | object}\n     */\n    _proto.read = function read(element, source) {\n      return element.getAttribute(source);\n    };\n\n    return AttributeReader;\n  }();\n\n  return AttributeReader;\n});\n//# sourceMappingURL=attribute-reader.js.map","Magento_PageBuilder/js/property/link.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Link = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Link() {\n      this.regexpByLinkType = {\n        category: new RegExp(/id_path=['\"]category\\/(\\d+)/),\n        product: new RegExp(/id_path=['\"]product\\/(\\d+)/),\n        page: new RegExp(/page_id=['\"](\\d+)/)\n      };\n    }\n\n    var _proto = Link.prototype;\n\n    /**\n     * Read link from element\n     *\n     * @param {HTMLElement} element\n     * @returns {string | object}\n     */\n    _proto.read = function read(element) {\n      var _ref;\n\n      var href = element.getAttribute(\"href\");\n      var attributeLinkType = element.getAttribute(\"data-link-type\");\n\n      if (typeof href === \"string\" && attributeLinkType !== \"default\") {\n        href = this.getIdFromWidgetSyntax(href, this.regexpByLinkType[attributeLinkType]);\n      }\n\n      return _ref = {}, _ref[attributeLinkType] = href, _ref.setting = element.getAttribute(\"target\") === \"_blank\", _ref.type = attributeLinkType, _ref;\n    }\n    /**\n     * Returns link value from widget string\n     *\n     * @param {string} href\n     * @param {RegExp} regexp\n     * @return {string}\n     */\n    ;\n\n    _proto.getIdFromWidgetSyntax = function getIdFromWidgetSyntax(href, regexp) {\n      var attributeIdMatches = href.match(regexp);\n\n      if (!attributeIdMatches) {\n        return href;\n      }\n\n      return attributeIdMatches[1];\n    };\n\n    return Link;\n  }();\n\n  return Link;\n});\n//# sourceMappingURL=link.js.map","Magento_PageBuilder/js/property/margins.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Margins = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Margins() {}\n\n    var _proto = Margins.prototype;\n\n    /**\n     * Read margins from element\n     *\n     * @param {HTMLElement} element\n     * @returns {string | object}\n     */\n    _proto.read = function read(element) {\n      return {\n        margin: {\n          left: element.style.marginLeft,\n          top: element.style.marginTop,\n          right: element.style.marginRight,\n          bottom: element.style.marginBottom\n        }\n      };\n    };\n\n    return Margins;\n  }();\n\n  return Margins;\n});\n//# sourceMappingURL=margins.js.map","Magento_PageBuilder/js/property/paddings.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Paddings = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function Paddings() {}\n\n    var _proto = Paddings.prototype;\n\n    /**\n     * Read paddings from element\n     *\n     * @param {HTMLElement} element\n     * @returns {string | object}\n     */\n    _proto.read = function read(element) {\n      return {\n        padding: {\n          left: element.style.paddingLeft,\n          top: element.style.paddingTop,\n          right: element.style.paddingRight,\n          bottom: element.style.paddingBottom\n        }\n      };\n    };\n\n    return Paddings;\n  }();\n\n  return Paddings;\n});\n//# sourceMappingURL=paddings.js.map","Magento_PageBuilder/js/property/property-reader-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=property-reader-interface.js.map","Magento_PageBuilder/js/property/property-reader-pool-factory.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndefine([\"Magento_PageBuilder/js/config\", \"Magento_PageBuilder/js/utils/loader\", \"Magento_PageBuilder/js/property/property-reader-pool\"], function (_config, _loader, _propertyReaderPool) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Create a new instance of property reader pool\n   */\n  function create(contentType) {\n    var config = _config.getContentTypeConfig(contentType);\n\n    var propertyReaders = [];\n    var appearanceName;\n\n    for (var _i = 0, _Object$keys = Object.keys(config.appearances); _i < _Object$keys.length; _i++) {\n      appearanceName = _Object$keys[_i];\n      var appearance = config.appearances[appearanceName];\n\n      if (appearance !== undefined && appearance.elements !== undefined) {\n        var elementName = void 0;\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(appearance.elements); _i2 < _Object$keys2.length; _i2++) {\n          elementName = _Object$keys2[_i2];\n          var element = appearance.elements[elementName];\n\n          if (element.style !== undefined) {\n            for (var _iterator = _createForOfIteratorHelperLoose(element.style), _step; !(_step = _iterator()).done;) {\n              var propertyConfig = _step.value;\n\n              if (propertyConfig.reader && propertyReaders.indexOf(propertyConfig.reader) === -1 && !_propertyReaderPool.get(propertyConfig.reader)) {\n                propertyReaders.push(propertyConfig.reader);\n              }\n            }\n          }\n\n          if (element.attributes !== undefined) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(element.attributes), _step2; !(_step2 = _iterator2()).done;) {\n              var attributeConfig = _step2.value;\n\n              if (attributeConfig.reader && propertyReaders.indexOf(attributeConfig.reader) === -1 && !_propertyReaderPool.get(attributeConfig.reader)) {\n                propertyReaders.push(attributeConfig.reader);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return new Promise(function (resolve) {\n      (0, _loader)(propertyReaders, function () {\n        for (var _len = arguments.length, loadedPropertyReaders = new Array(_len), _key = 0; _key < _len; _key++) {\n          loadedPropertyReaders[_key] = arguments[_key];\n        }\n\n        for (var i = 0; i < propertyReaders.length; i++) {\n          _propertyReaderPool.register(propertyReaders[i], new loadedPropertyReaders[i]());\n        }\n\n        resolve(_propertyReaderPool);\n      });\n    });\n  }\n\n  return create;\n});\n//# sourceMappingURL=property-reader-pool-factory.js.map","Magento_PageBuilder/js/property/property-reader-pool.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n  var PropertyReaderPool = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function PropertyReaderPool() {\n      this.propertyReaders = {};\n    }\n\n    var _proto = PropertyReaderPool.prototype;\n\n    /**\n     * Retrieve a property reader from the pool\n     *\n     * @param {string} name\n     * @returns {PropertyReaderInterface}\n     */\n    _proto.get = function get(name) {\n      return this.propertyReaders[name] !== undefined ? this.propertyReaders[name] : null;\n    }\n    /**\n     * Register a new property reader into the pool\n     *\n     * @param {string} name\n     * @param {PropertyReaderInterface} property\n     */\n    ;\n\n    _proto.register = function register(name, property) {\n      this.propertyReaders[name] = property;\n    };\n\n    return PropertyReaderPool;\n  }();\n\n  var _default = new PropertyReaderPool();\n\n  return Object.assign(_default, {\n    PropertyReaderPool: PropertyReaderPool\n  });\n});\n//# sourceMappingURL=property-reader-pool.js.map","Magento_PageBuilder/js/property/style-property-reader.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"Magento_PageBuilder/js/utils/string\"], function (_string) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var StylePropertyReader = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function StylePropertyReader() {}\n\n    var _proto = StylePropertyReader.prototype;\n\n    /**\n     * Read style property from element\n     *\n     * @param {HTMLElement} element\n     * @param {string} source\n     * @returns {string | object}\n     */\n    _proto.read = function read(element, source) {\n      var camelCasedSource = (0, _string.fromSnakeToCamelCase)(source);\n      return element.style[camelCasedSource];\n    };\n\n    return StylePropertyReader;\n  }();\n\n  return StylePropertyReader;\n});\n//# sourceMappingURL=style-property-reader.js.map","Magento_PageBuilder/js/system/config/enable-field.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/confirm',\n    'domReady!'\n], function ($, $t, confirm) {\n    'use strict';\n\n    return function (config, enableSelectEl) {\n\n        var $enableSelectEl = $(enableSelectEl),\n            isEnabledInDatabase = !!parseInt($enableSelectEl.val(), 10);\n\n        $enableSelectEl.on('change', function () {\n            var userIsDisabling = !parseInt($enableSelectEl.val(), 10);\n\n            if (!isEnabledInDatabase || !userIsDisabling) {\n                return;\n            }\n\n            confirm({\n                title: $t(config.modalTitleText),\n                content: $t(config.modalContentBody),\n                buttons: [{\n                    text: $t('Cancel'),\n                    class: 'action-secondary action-dismiss action-pagebuilder-cancel',\n\n                    /**\n                     * Close modal and trigger 'cancel' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                }, {\n                    text: $t('Turn Off'),\n                    class: 'action-primary action-accept',\n\n                    /**\n                     * Close modal and trigger 'confirm' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event, true);\n                    }\n                }],\n                actions: {\n\n                    /**\n                     * Revert back to original Enabled setting\n                     */\n                    cancel: function () {\n                        $enableSelectEl.val(Number(true));\n                    }\n                }\n            });\n        });\n    };\n});\n","Magento_PageBuilder/js/system/config/google-maps-api-key-validator.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['jquery'], function ($) {\n    'use strict';\n\n    /**\n     * Initialize click and input events to handle validation\n     *\n     * @param {Object} config\n     * @param {HTMLElement} el\n     */\n    var GoogleMapsApiKeyValidator = function (config, el) {\n        var sourceElement = $('#' + config.sourceField),\n            initialValue = sourceElement.val(),\n            resultElement = $('#' + config.elementId + ' > .result');\n\n        if (initialValue) {\n            $(el).attr('disabled', false);\n        }\n\n        $(el).on('click', function () {\n            var resultText = config.invalidLabel,\n                resultIcon = 'icon-admin-pagebuilder-error',\n                resultHtml;\n\n            $.ajax({\n                url: config.validateUrl,\n                showLoader: true,\n                data: {\n                    googleMapsApiKey: sourceElement.val()\n                }\n            }).done(function (data) {\n                if (data.success) {\n                    resultText = config.validLabel;\n                    resultIcon = 'icon-admin-pagebuilder-success';\n                }\n\n                resultHtml = '<i class=\"' + resultIcon + '\"></i> ' + resultText;\n                resultElement.html(resultHtml);\n            });\n        });\n\n        sourceElement.on('keyup', function (event) {\n            var elementValue = event.currentTarget.value,\n                buttonText = config.buttonLabel;\n\n            $(el).attr('disabled', !elementValue);\n            resultElement.html(buttonText);\n        });\n    };\n\n    return GoogleMapsApiKeyValidator;\n});\n","Magento_PageBuilder/js/system/config/switch-attribute-type.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/confirm',\n    'domReady!'\n], function ($, $t, confirm) {\n    'use strict';\n\n    return function (config, attributeDropDownEl) {\n\n        var $attributeDropDownEl = $(attributeDropDownEl),\n            previousOption = '';\n\n        $attributeDropDownEl.on('focus', function () {\n            // Store the current value on focus and on change\n            previousOption = this.value;\n        });\n\n        $attributeDropDownEl.on('change', function () {\n\n            if (attributeDropDownEl.options.length > 3 ||\n                this.value === 'pagebuilder' ||\n                previousOption !== 'pagebuilder'\n            ) {\n                return;\n            }\n\n            confirm({\n                title: $t(config.modalTitleText),\n                content: $t(config.modalContentBody),\n                buttons: [{\n                    text: $t('Cancel'),\n                    class: 'action-secondary action-dismiss action-pagebuilder-cancel',\n\n                    /**\n                     * Close modal and trigger 'cancel' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                }, {\n                    text: $t('Change Input Type'),\n                    class: 'action-primary action-accept',\n\n                    /**\n                     * Close modal and trigger 'confirm' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event, true);\n                    }\n                }],\n                actions: {\n\n                    /**\n                     * Revert back to 'pagebuilder' setting\n                     */\n                    cancel: function () {\n                        $attributeDropDownEl.val('pagebuilder');\n                        $attributeDropDownEl.trigger('change');\n                    }\n                }\n            });\n        });\n    };\n});\n","Magento_PageBuilder/js/system/config/validator-rules-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (target) {\n        $.validator.addMethod(\n            'validate-google-map-style',\n            function (value) {\n                if ($.mage.isEmptyNoTrim(value)) {\n                    return true;\n                }\n\n                try {\n                    JSON.parse(value);\n                } catch (e) {\n                    return false;\n                }\n\n                return true;\n            },\n            $.mage.__('Google Maps Style JSON is invalid. Please paste the valid JSON style.')\n        );\n\n        $.validator.addMethod(\n            'validate-greater-than-one',\n            function (value) {\n                return !(value <= 1);\n            },\n            $.mage.__('Please enter a number 2 or greater in this field.')\n        );\n\n        $.validator.addMethod(\n            'validate-default-grid-size',\n            function (value) {\n                return !(parseInt(value, 10) >\n                    parseInt($('[name=\"groups[pagebuilder][fields][column_grid_max][value]\"]').val(), 10)\n                );\n            },\n            $.mage.__('Default grid size must be less than the maximum grid size.')\n        );\n\n        return target;\n    };\n});\n","Magento_PageBuilder/js/types/text.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=text.js.map","Magento_PageBuilder/js/wysiwyg/component-initializer-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=component-initializer-interface.js.map","Magento_PageBuilder/js/wysiwyg/config-modifier-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=config-modifier-interface.js.map","Magento_PageBuilder/js/wysiwyg/factory.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([\"jquery\", \"Magento_PageBuilder/js/utils/loader\"], function (_jquery, _loader) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @param {String} contentTypeId The ID in the registry of the content type.\n   * @param {String} elementId The ID of the editor element in the DOM.\n   * @param {String} contentTypeName The type of content type this editor will be used in. E.g. \"banner\".\n   * @param {AdditionalDataConfigInterface} config The configuration for the wysiwyg.\n   * @param {DataStore} dataStore The datastore to store the content in.\n   * @param {String} fieldName The key in the provided datastore to set the data.\n   * @param {String} stageId The ID in the registry of the stage containing the content type.\n   * @returns {Wysiwyg}\n   */\n  function create(contentTypeId, elementId, contentTypeName, config, dataStore, fieldName, stageId) {\n    config = _jquery.extend(true, {}, config);\n    return new Promise(function (resolve) {\n      (0, _loader)([config.adapter_config.component], function (WysiwygInstance) {\n        new Promise(function (configResolve) {\n          if (config.adapter_config.config_modifiers && config.adapter_config.config_modifiers[contentTypeName]) {\n            (0, _loader)([config.adapter_config.config_modifiers[contentTypeName]], function (ConfigModifierType) {\n              var modifier = new ConfigModifierType(); // Allow dynamic settings to be set before editor is initialized\n\n              modifier.modify(contentTypeId, config);\n              configResolve();\n            });\n          } else {\n            configResolve();\n          }\n        }).then(function () {\n          // Instantiate the component\n          var wysiwyg = new WysiwygInstance(contentTypeId, elementId, config, dataStore, fieldName, stageId);\n\n          if (config.adapter_config.component_initializers && config.adapter_config.component_initializers[contentTypeName]) {\n            (0, _loader)([config.adapter_config.component_initializers[contentTypeName]], function (InitializerType) {\n              var initializer = new InitializerType(); // Allow dynamic bindings from configuration such as events from the editor\n\n              initializer.initialize(wysiwyg);\n              resolve(wysiwyg);\n            });\n          } else {\n            resolve(wysiwyg);\n          }\n        });\n      });\n    });\n  }\n\n  return create;\n});\n//# sourceMappingURL=factory.js.map","Magento_PageBuilder/js/wysiwyg/tinymce.js":"/*eslint-disable */\n/* jscs:disable */\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\ndefine([\"jquery\", \"mage/adminhtml/wysiwyg/events\", \"mage/adminhtml/wysiwyg/tiny_mce/setup\", \"Magento_PageBuilder/js/events\", \"underscore\", \"Magento_PageBuilder/js/utils/check-stage-full-screen\", \"Magento_PageBuilder/js/utils/delay-until\", \"Magento_PageBuilder/js/utils/pagebuilder-header-height\"], function (_jquery, _events, _setup, _events2, _underscore, _checkStageFullScreen, _delayUntil, _pagebuilderHeaderHeight) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Inline editing wysiwyg component\n   *\n   * @api\n   */\n  var Wysiwyg = /*#__PURE__*/function () {\n    \"use strict\";\n\n    /**\n     * The id of the editor element\n     */\n\n    /**\n     * The supplied wysiwyg configuration\n     */\n\n    /**\n     * Id of content type\n     */\n\n    /**\n     * Id of the stage\n     */\n\n    /**\n     * Wysiwyg adapter instance\n     */\n\n    /**\n     * Content type's data store\n     */\n\n    /**\n     * Field name in data store reflecting value held in wysiwyg\n     */\n\n    /**\n     * Create a debounce to save the content into the data store\n     */\n\n    /**\n     * @param {String} contentTypeId The ID in the registry of the content type.\n     * @param {String} elementId The ID of the editor element in the DOM.\n     * @param {AdditionalDataConfigInterface} config The configuration for the wysiwyg.\n     * @param {DataStore} dataStore The datastore to store the content in.\n     * @param {String} fieldName The key in the provided datastore to set the data.\n     * @param {String} stageId The ID in the registry of the stage containing the content type.\n     */\n    function Wysiwyg(contentTypeId, elementId, config, dataStore, fieldName, stageId) {\n      this.saveContentDebounce = _underscore.debounce(this.saveContentFromWysiwygToDataStore.bind(this), 500);\n      this.contentTypeId = contentTypeId;\n      this.elementId = elementId;\n      this.fieldName = fieldName;\n      this.config = config;\n      this.dataStore = dataStore;\n      this.stageId = stageId;\n\n      if (this.config.adapter_config.mode === \"inline\") {\n        /**\n         * Don't include content_css within the inline mode of TinyMCE, if any stylesheets are included here they're\n         * appended to the head of the main page, and thus cause other styles to be modified.\n         *\n         * The styles for typography in the inline editor are scoped within _typography.less\n         */\n        this.config.adapter.tinymce.content_css = [];\n      }\n\n      var wysiwygSetup = new _setup(this.elementId, this.config.adapter);\n      wysiwygSetup.setup(this.config.adapter_config.mode);\n      this.wysiwygAdapter = wysiwygSetup.wysiwygInstance;\n\n      if (this.config.adapter_config.mode === \"inline\") {\n        this.wysiwygAdapter.eventBus.attachEventHandler(_events.afterFocus, this.onFocus.bind(this));\n        this.wysiwygAdapter.eventBus.attachEventHandler(_events.afterBlur, this.onBlur.bind(this));\n      } // Update content in our data store after our stage preview wysiwyg gets updated\n\n\n      this.wysiwygAdapter.eventBus.attachEventHandler(_events.afterChangeContent, this.onChangeContent.bind(this)); // Update content in our stage preview wysiwyg after its slideout counterpart gets updated\n\n      _events2.on(\"form:\" + this.contentTypeId + \":saveAfter\", this.setContentFromDataStoreToWysiwyg.bind(this));\n\n      _events2.on(\"stage:\" + this.stageId + \":fullScreenModeChangeAfter\", this.toggleFullScreen.bind(this));\n    }\n    /**\n     * Hide TinyMce inline toolbar options after fullscreen exit\n     */\n\n\n    var _proto = Wysiwyg.prototype;\n\n    _proto.toggleFullScreen = function toggleFullScreen() {\n      var _this = this;\n\n      var $editor = (0, _jquery)(\"#\" + this.elementId); // wait for fullscreen to close\n\n      _underscore.defer(function () {\n        if (!(0, _checkStageFullScreen)(_this.stageId) && _this.config.adapter_config.mode === \"inline\" && $editor.hasClass(\"mce-edit-focus\")) {\n          $editor.removeClass(\"mce-edit-focus\");\n\n          _this.onBlur();\n        }\n      });\n    }\n    /**\n     * @returns {WysiwygInstanceInterface}\n     */\n    ;\n\n    _proto.getAdapter = function getAdapter() {\n      return this.wysiwygAdapter;\n    }\n    /**\n     * Called for the onFocus event\n     */\n    ;\n\n    _proto.onFocus = function onFocus() {\n      var _this2 = this;\n\n      this.getFixedToolbarContainer().addClass(\"pagebuilder-toolbar-active\");\n\n      _events2.trigger(\"stage:interactionStart\");\n\n      var element = document.querySelector(\"#\" + this.elementId);\n\n      if (!element) {\n        return;\n      } // Wait for everything else to finish\n\n\n      _underscore.defer(function () {\n        return (0, _delayUntil)(function () {\n          var $inlineToolbar = _this2.getFixedToolbarContainer().find(\".tox-tinymce-inline\");\n\n          var self = _this2;\n          $inlineToolbar.css(\"min-width\", _this2.config.adapter_config.minToolbarWidth + \"px\");\n\n          _this2.invertInlineEditorToAccommodateOffscreenToolbar(); // Update toolbar when the height changes\n\n\n          _this2.toolbarHeight = $inlineToolbar.height();\n\n          if ($inlineToolbar.length) {\n            _this2.resizeObserver = new ResizeObserver(function (entries) {\n              for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {\n                var entry = _step.value;\n\n                if (entry.target === $inlineToolbar.get(0) && entry.target.clientHeight !== self.toolbarHeight) {\n                  self.invertInlineEditorToAccommodateOffscreenToolbar();\n                  self.toolbarHeight = entry.target.clientHeight;\n                }\n              }\n            });\n\n            _this2.resizeObserver.observe($inlineToolbar.get(0));\n          }\n\n          var dialogContainer = document.querySelector(\"#\" + _this2.elementId + \" ~ .tox-tinymce-aux\");\n\n          if (!!dialogContainer) {\n            dialogContainer.setAttribute(\"data-editor-aux\", _this2.elementId);\n            document.body.appendChild(dialogContainer);\n          }\n        }, function () {\n          return element.classList.contains(\"mce-edit-focus\");\n        }, 10);\n      });\n    }\n    /**\n     * Called for the onChangeContent event\n     */\n    ;\n\n    _proto.onChangeContent = function onChangeContent() {\n      this.saveContentDebounce();\n      this.invertInlineEditorToAccommodateOffscreenToolbar();\n    }\n    /**\n     * Called for the onBlur events\n     */\n    ;\n\n    _proto.onBlur = function onBlur() {\n      this.getFixedToolbarContainer().removeClass(\"pagebuilder-toolbar-active\").find(\".tox-tinymce-inline\").css(\"top\", \"\");\n\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(this.getFixedToolbarContainer().find(\".tox-tinymce-inline\").get(0));\n      }\n\n      this.toolbarHeight = 0;\n      var dialogContainer = document.querySelector(\"[data-editor-aux=\" + this.elementId + \"]\");\n\n      if (!!dialogContainer) {\n        dialogContainer.removeAttribute(\"data-editor-aux\");\n        document.querySelector(\"#\" + this.elementId).parentNode.appendChild(dialogContainer);\n      }\n\n      _events2.trigger(\"stage:interactionStop\");\n    }\n    /**\n     * Update content in our data store after our stage preview wysiwyg gets updated\n     */\n    ;\n\n    _proto.saveContentFromWysiwygToDataStore = function saveContentFromWysiwygToDataStore() {\n      this.dataStore.set(this.fieldName, this.getAdapter().getContent());\n    }\n    /**\n     * Update content in our stage wysiwyg after our data store gets updated\n     */\n    ;\n\n    _proto.setContentFromDataStoreToWysiwyg = function setContentFromDataStoreToWysiwyg() {\n      this.getAdapter().setContent(this.dataStore.get(this.fieldName));\n    }\n    /**\n     * Adjust padding on stage if in fullscreen mode to accommodate inline wysiwyg toolbar overflowing fixed viewport\n     */\n    ;\n\n    _proto.invertInlineEditorToAccommodateOffscreenToolbar = function invertInlineEditorToAccommodateOffscreenToolbar() {\n      if (this.config.adapter_config.mode !== \"inline\") {\n        return;\n      }\n\n      var $inlineToolbar = this.getFixedToolbarContainer().find(\".tox-tinymce-inline\");\n\n      if (!$inlineToolbar.length) {\n        return;\n      }\n\n      var inlineWysiwygClientRectTop = this.getFixedToolbarContainer().get(0).getBoundingClientRect().top - (0, _pagebuilderHeaderHeight)(this.stageId);\n\n      if (!(0, _checkStageFullScreen)(this.stageId) || $inlineToolbar.height() < inlineWysiwygClientRectTop) {\n        var extraHeight = 0;\n\n        if ($inlineToolbar.parents(\".pagebuilder-slide[data-appearance='collage-left']\").length || $inlineToolbar.parents(\".pagebuilder-slide[data-appearance='collage-right']\").length || $inlineToolbar.parents(\".pagebuilder-slide[data-appearance='collage-centered']\").length) {\n          extraHeight = 29;\n        }\n\n        $inlineToolbar.css(\"top\", ($inlineToolbar.height() - extraHeight) * -1);\n        return;\n      }\n\n      $inlineToolbar.css(\"top\", \"\");\n    }\n    /**\n     * Get fixed toolbar container element referenced as selector in wysiwyg adapter settings\n     *\n     * @returns {jQuery}\n     */\n    ;\n\n    _proto.getFixedToolbarContainer = function getFixedToolbarContainer() {\n      return (0, _jquery)(\"#\" + this.elementId).closest(\"\" + this.config.adapter.settings.fixed_toolbar_container);\n    };\n\n    return Wysiwyg;\n  }();\n\n  return Wysiwyg;\n});\n//# sourceMappingURL=tinymce.js.map","Magento_PageBuilder/js/wysiwyg/wysiwyg-interface.js":"/*eslint-disable */\n/* jscs:disable */\ndefine([], function () {\n  \"use strict\";\n});\n//# sourceMappingURL=wysiwyg-interface.js.map","Magento_PageBuilder/ts/babel/plugin-amd-to-magento-amd/ast-utils.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.extractDependencyAndFactory = extractDependencyAndFactory;\nexports.findAmdModule = findAmdModule;\nexports.extractDependencyMap = extractDependencyMap;\nexports.removeExportsDependency = removeExportsDependency;\nexports.isEsModulePropertyDefinition = isEsModulePropertyDefinition;\nexports.isObjectAssignment = isObjectAssignment;\nexports.isVoidExpression = isVoidExpression;\nexports.isInteropRequireCall = isInteropRequireCall;\nexports.isInteropRequireDefinition = isInteropRequireDefinition;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar INTEROP_FUNCTION_NAME = '_interopRequire';\n\nvar findExpression = function findExpression(path) {\n    if (!t.isExpressionStatement(path.node)) {\n        return false;\n    }\n\n    return path.get('expression');\n};\n\nvar isObjectProperty = function isObjectProperty(path, objectName, propertyName) {\n    return t.isMemberExpression(path) && path.get('object').isIdentifier(t.identifier(objectName)) && path.get('property').isIdentifier(t.identifier(propertyName));\n};\n\nfunction extractDependencyAndFactory(path) {\n    var args = path.node.arguments;\n    var dependencies = path.get(\"arguments.\" + (args.length - 2));\n    var factory = path.get(\"arguments.\" + (args.length - 1));\n    return {\n        dependencies: dependencies,\n        factory: factory\n    };\n}\n\nfunction findAmdModule(path) {\n    if (!path.parentPath.isProgram()) {\n        return false;\n    }\n\n    var expression = findExpression(path);\n\n    if (!expression || !t.isCallExpression(expression) || !t.isIdentifier(expression.node.callee, {\n        name: 'define'\n    })) {\n        return false;\n    }\n\n    var _extractDependencyAnd = extractDependencyAndFactory(expression),\n        dependencies = _extractDependencyAnd.dependencies,\n        factory = _extractDependencyAnd.factory;\n\n    if (dependencies && factory) {\n        return expression;\n    }\n\n    return false;\n}\n\nfunction extractDependencyMap(path) {\n    var dependencyMap = {};\n\n    var _extractDependencyAnd2 = extractDependencyAndFactory(path),\n        dependencies = _extractDependencyAnd2.dependencies,\n        factory = _extractDependencyAnd2.factory;\n\n    var dependencyList = dependencies.node.elements;\n    var factoryParams = factory.node.params;\n    dependencyList.forEach(function (dependency, index) {\n        if (factoryParams[index]) {\n            dependencyMap[dependency.value] = factoryParams[index];\n        }\n    });\n    return dependencyMap;\n}\n\nfunction removeExportsDependency(path) {\n    var _extractDependencyAnd3 = extractDependencyAndFactory(path),\n        dependencies = _extractDependencyAnd3.dependencies,\n        factory = _extractDependencyAnd3.factory;\n\n    var dependencyMap = extractDependencyMap(path);\n\n    if (!dependencyMap.exports) {\n        return;\n    }\n\n    dependencies.node.elements = dependencies.node.elements.filter(function (item) {\n        return !t.isStringLiteral(item, {\n            value: 'exports'\n        });\n    });\n    factory.node.params = factory.node.params.filter(function (item) {\n        return !t.isIdentifier(item, dependencyMap.exports);\n    });\n}\n\nfunction isEsModulePropertyDefinition(path, scope) {\n    var callExpression = findExpression(path);\n    var callee = callExpression.get('callee');\n    var callArguments = callExpression.node.arguments;\n    var isObjectDefinePropertyCall = isObjectProperty(callee, 'Object', 'defineProperty');\n\n    if (isObjectDefinePropertyCall) {\n        var isEsModulePropertyInArguments = t.isStringLiteral(callArguments[1], {\n            value: '__esModule'\n        });\n        var isInScope = t.isIdentifier(callArguments[0], scope);\n        return isEsModulePropertyInArguments && isInScope;\n    }\n\n    return false;\n}\n\nfunction isObjectAssignment(path, objectId) {\n    var expression = t.isAssignmentExpression(path) ? path : findExpression(path);\n    var isMemberAssignment = t.isAssignmentExpression(expression) && t.isMemberExpression(expression.get('left'));\n\n    if (isMemberAssignment) {\n        return t.isNodesEquivalent(expression.get('left.object').node, objectId);\n    }\n\n    return false;\n}\n\nfunction isVoidExpression(path) {\n    return t.isUnaryExpression(path) && path.node.operator === 'void';\n}\n\nfunction isInteropRequireCall(path) {\n    var expression = findExpression(path);\n    var isAssignmentCall = t.isAssignmentExpression(expression) && t.isCallExpression(expression.get('right'));\n\n    if (isAssignmentCall) {\n        var callee = expression.get('right.callee');\n        return callee.isIdentifier() && callee.node.name.indexOf(INTEROP_FUNCTION_NAME) === 0;\n    }\n\n    return false;\n}\n\nfunction isInteropRequireDefinition(path) {\n    if (t.isFunction(path) && path.node.id) {\n        return path.node.id.name.indexOf(INTEROP_FUNCTION_NAME) === 0;\n    }\n\n    return false;\n}","Magento_PageBuilder/ts/babel/plugin-amd-to-magento-amd/index.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = _default;\n\nvar _astUtils = require(\"./ast-utils\");\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar replaceExportAssignment = function replaceExportAssignment(path, state) {\n    var property = path.get('left.property');\n    var expression = path.get('right');\n    path.remove();\n\n    if ((0, _astUtils.isVoidExpression)(expression)) {\n        return;\n    }\n\n    if (property.isIdentifier({\n        name: 'default'\n    })) {\n        state.defaultExport = expression.node;\n        return;\n    }\n\n    state.exports.push(t.objectProperty(property.node, expression.node));\n};\n\nvar memberExpressionVisitor = {\n    MemberExpression: function MemberExpression(path, state) {\n        var matchedDependencies = state.dependencies.filter(function (item) {\n            return path.get('object').isIdentifier({\n                name: item.name\n            });\n        });\n        var isDefaultDependency = matchedDependencies.length === 1 && path.get('property').isIdentifier({\n            name: 'default'\n        });\n\n        if (isDefaultDependency) {\n            path.replaceWith(matchedDependencies[0]);\n        }\n    }\n};\nvar functionBodyVisitor = {\n    ExpressionStatement: function ExpressionStatement(path, state) {\n        if ((0, _astUtils.isEsModulePropertyDefinition)(path, state.scope)) {\n            path.remove();\n        }\n\n        if ((0, _astUtils.isObjectAssignment)(path, state.scope)) {\n            replaceExportAssignment(path.get('expression'), state);\n        }\n\n        if ((0, _astUtils.isInteropRequireCall)(path)) {\n            path.remove();\n        }\n    },\n    Function: function Function(path, state) {\n        if ((0, _astUtils.isInteropRequireDefinition)(path)) {\n            path.remove();\n        }\n\n        path.traverse(memberExpressionVisitor, state);\n    },\n    ClassMethod: function ClassMethod(path, state) {\n        path.traverse(memberExpressionVisitor, state);\n    },\n    DirectiveLiteral: function DirectiveLiteral(path) {\n        if (path.node.value === 'use strict') {\n            path.parentPath.remove();\n        }\n    },\n    MemberExpression: memberExpressionVisitor.MemberExpression\n};\n\nvar processAmdDefinition = function processAmdDefinition(path) {\n    var _extractDependencyAnd = (0, _astUtils.extractDependencyAndFactory)(path),\n        factory = _extractDependencyAnd.factory;\n\n    var dependencyMap = (0, _astUtils.extractDependencyMap)(path);\n\n    if (dependencyMap.exports) {\n        (0, _astUtils.removeExportsDependency)(path);\n        var state = {\n            scope: dependencyMap.exports,\n            dependencies: Object.values(dependencyMap),\n            exports: []\n        };\n        factory.traverse(functionBodyVisitor, state);\n        var returnStatement = t.objectExpression(state.exports);\n\n        if (state.defaultExport) {\n            returnStatement = state.defaultExport;\n\n            if (state.exports.length > 0) {\n                returnStatement = t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('assign')), [state.defaultExport, t.objectExpression(state.exports)]);\n            }\n        }\n\n        factory.get('body').pushContainer('body', t.returnStatement(returnStatement));\n    }\n};\n\nvar programVisitor = {\n    ExpressionStatement: function ExpressionStatement(path) {\n        var amdModule = (0, _astUtils.findAmdModule)(path);\n\n        if (amdModule) {\n            processAmdDefinition(amdModule);\n        }\n    }\n};\n\nfunction _default() {\n    return {\n        visitor: {\n            Program: {\n                exit: function exit(path) {\n                    path.traverse(programVisitor);\n                }\n            }\n        }\n    };\n}","Magento_PageBuilder/ts/babel/plugin-resolve-magento-imports/index.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nvar path = require('path');\n\n/**\n * Convert the relative path imports within TypeScript into absolute paths with pre-fixed module name\n *\n * @returns {{visitor: {ImportDeclaration: visitor.ImportDeclaration}}}\n */\nmodule.exports = function () {\n    'use strict';\n\n    return {\n        visitor: {\n            /**\n             * Convert ../../utils/util import into Magento_Module/js/utils/util\n             *\n             * @param {Object} importPath\n             * @param {Object} state\n             * @constructor\n             */\n            ImportDeclaration: function (importPath, state) {\n                var importExpression = importPath.node.source.value;\n\n                if (!state.opts.prefix) {\n                    throw Error('Prefix must be defined');\n                }\n\n                // Is the file being imported from another directory?\n                if (!path.isAbsolute(importExpression) && importExpression.includes('./')) {\n                    importPath.node.source.value = path.resolve(\n                        path.dirname(state.file.opts.filename.replace(\n                            state.opts.path,\n                            \"\"\n                        )),\n                        importExpression\n                    ).replace(\n                        process.cwd(),\n                        state.opts.prefix.replace(/\\/+$/, '')\n                    );\n                }\n            }\n        }\n    };\n};\n","Magento_SalesRule/js/form/element/coupon-type.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/select'\n], function (_, uiRegistry, select) {\n    'use strict';\n\n    return select.extend({\n\n        /**\n         * Hide fields on coupon tab\n         */\n        onUpdate: function () {\n\n            /* eslint-disable eqeqeq */\n            if (this.value() != this.displayOnlyForCouponType) {\n                uiRegistry.get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation').checked(false);\n            }\n\n            this.enableDisableFields();\n        },\n\n        /**\n         * Enable/disable fields on Coupons tab\n         */\n        enableDisableFields: function () {\n            var selector,\n                isUseAutoGenerationChecked,\n                couponType,\n                disableAuto;\n\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\n                    '[id=sales-rule-form-tab-coupons] button';\n            isUseAutoGenerationChecked = uiRegistry\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\n                    .checked();\n            couponType = uiRegistry\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\n                .value();\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\n            _.each(\n                document.querySelectorAll(selector),\n                function (element) {\n                    element.disabled = !disableAuto;\n                }\n            );\n        }\n    });\n});\n","Magento_SalesRule/js/form/element/manage-coupon-codes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/components/fieldset',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (_, uiRegistry, fieldset, async) {\n    'use strict';\n\n    return fieldset.extend({\n\n        /*eslint-disable no-unused-vars*/\n        /**\n         * Initialize element\n         *\n         * @returns {Abstract} Chainable\n         */\n        initialize: function (elems, position) {\n            var obj = this;\n\n            this._super();\n\n            async.async('#sales-rule-form-tab-coupons', document.getElementById('container'), function (node) {\n                var useAutoGeneration = uiRegistry.get(\n                    'sales_rule_form.sales_rule_form.rule_information.use_auto_generation'\n                );\n\n                useAutoGeneration.on('checked', function () {\n                    obj.enableDisableFields();\n                });\n                obj.enableDisableFields();\n            });\n\n            return this;\n        },\n\n        /*eslint-enable no-unused-vars*/\n        /*eslint-disable lines-around-comment*/\n\n        /**\n         * Enable/disable fields on Coupons tab\n         */\n        enableDisableFields: function () {\n            var selector,\n                isUseAutoGenerationChecked,\n                couponType,\n                disableAuto;\n\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\n                    '[id=sales-rule-form-tab-coupons] button';\n            isUseAutoGenerationChecked = uiRegistry\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\n                    .checked();\n            couponType = uiRegistry\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\n                .value();\n            /**\n             * \\Magento\\Rule\\Model\\AbstractModel::COUPON_TYPE_AUTO\n             */\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\n            _.each(\n                document.querySelectorAll(selector),\n                function (element) {\n                    element.disabled = !disableAuto;\n                }\n            );\n        }\n    });\n});\n","Magento_SalesRule/js/form/element/apply_to_shipping.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox-toggle-notice'\n], function (Checkbox) {\n    'use strict';\n\n    return Checkbox.extend({\n        defaults: {\n            imports: {\n                toggleDisabled: '${ $.parentName }.simple_action:value'\n            }\n        },\n\n        /**\n         * Toggle element disabled state according to simple action value.\n         *\n         * @param {String} action\n         */\n        toggleDisabled: function (action) {\n            switch (action) {\n                default:\n                    this.disabled(false);\n            }\n\n            if (this.disabled()) {\n                this.checked(false);\n            }\n        }\n    });\n});\n","Amasty_RequestQuote/order/create/scripts-mixin.js":"define([\n    'prototype'\n], function () {\n    'use strict';\n\n    return function () {\n        /**\n         * Loads shipping options according to address data.\n         *\n         * @return {Boolean}\n         */\n        window.AdminOrder.prototype.loadShippingRates = function () {\n            var addressContainer = this.shippingAsBilling\n                    ? 'billingAddressContainer'\n                    : 'shippingAddressContainer',\n                data = this.serializeData(this[addressContainer]).toObject();\n\n            data['shipping_as_billing'] = +this.shippingAsBilling; // add to fix shipping method choosing\n            data['collect_shipping_rates'] = 1;\n            this.isShippingMethodReseted = false;\n            this.loadArea(['shipping_method', 'totals'], true, data);\n\n            return false;\n        };\n    };\n});\n","Amasty_RequestQuote/quote/create/form.js":"define([\n    'jquery',\n    'Amasty_RequestQuote/quote/edit/scripts'\n], function (jQuery) {\n    'use strict';\n\n    var $el = jQuery('#edit_form'),\n        config,\n        baseUrl,\n        order;\n\n    if (!$el.length || !$el.data('order-config')) {\n        return;\n    }\n\n    config = $el.data('order-config');\n    baseUrl = $el.data('load-base-url');\n\n    var quote = new AmAdminQuote(config);\n    quote.setLoadBaseUrl(baseUrl);\n    window.quote = quote;\n});\n","Amasty_RequestQuote/quote/edit/message.js":"\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.orderEditDialog', {\n        options: {\n            url:     null,\n            message: null,\n            modal:  null\n        },\n\n        /**\n         * @protected\n         */\n        _create: function () {\n            this._prepareDialog();\n        },\n\n        /**\n         * Show modal\n         */\n        showDialog: function () {\n            this.options.dialog.html(this.options.message).modal('openModal');\n        },\n\n        /**\n         * Redirect to edit page\n         */\n        redirect: function () {\n            window.location = this.options.url;\n        },\n\n        /**\n         * Prepare modal\n         * @protected\n         */\n        _prepareDialog: function () {\n            var self = this;\n\n            this.options.dialog = $('<div class=\"ui-dialog-content ui-widget-content\"></div>').modal({\n                type: 'popup',\n                modalClass: 'edit-order-popup',\n                title: $.mage.__('Edit Order'),\n                buttons: [{\n                    text: $.mage.__('Ok'),\n                    'class': 'action-primary',\n\n                    /** @inheritdoc */\n                    click: function () {\n                        self.redirect();\n                    }\n                }]\n            });\n        }\n    });\n\n    return $.mage.orderEditDialog;\n});\n","Amasty_RequestQuote/quote/edit/form.js":"define([\n    'jquery',\n    'Amasty_RequestQuote/quote/edit/scripts'\n], function (jQuery) {\n    'use strict';\n\n    var $el = jQuery('#quote-config'),\n        config,\n        baseUrl,\n        order,\n        payment;\n\n    if (!$el.length || !$el.val()) {\n        return;\n    }\n\n    config = JSON.parse($el.val());\n    var quote = new AmAdminQuote(config);\n    quote.setLoadBaseUrl(jQuery('#base-url').val());\n    window.quote = quote;\n\n});\n","Amasty_RequestQuote/quote/edit/scripts.js":"define([\n    \"jquery\",\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/modal/alert',\n    'mage/template',\n    'text!Amasty_RequestQuote/templates/quote/create/shipping/reload.html',\n    \"mage/translate\",\n    \"prototype\",\n    \"Magento_Catalog/catalog/product/composite/configure\",\n    'Magento_Ui/js/lib/view/utils/async'\n], function(jQuery, confirm, alert, template, shippingTemplate){\n\n    window.AmAdminQuote = new Class.create();\n\n    AmAdminQuote.prototype = {\n        priceModificators: [\n            'discount',\n            'surcharge'\n        ],\n        canShippingModified: false,\n        customMethodAllowed: false,\n        customFee: 0,\n\n        initialize : function(data){\n            if (!data) {\n                data = {};\n            }\n            this.shippingTemplate = template(shippingTemplate, {\n                data: {\n                    title: jQuery.mage.__('Shipping Method'),\n                    linkText: jQuery.mage.__('Get shipping methods and rates')\n                }\n            });\n            this.loadBaseUrl    = false;\n            this.customerId     = data.customer_id ? data.customer_id : false;\n            this.storeId        = data.store_id ? data.store_id : false;\n            this.currencyId     = false;\n            this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\n            this.gridProducts   = $H({});\n            this.overlayData = $H({});\n            this.productConfigureAddFields = {};\n            this.productPriceBase = {};\n            this.collectElementsValue = true;\n            this.isOnlyVirtualProduct = false;\n            this.summarizePrice = true;\n            this.canShippingModified = typeof data['can_shipping_modified'] !== 'undefined'\n                ? data['can_shipping_modified']\n                : true;\n            this.customMethodAllowed = typeof data['custom_method_allowed'] !== 'undefined'\n                ? data['custom_method_allowed']\n                : false;\n            this.customFee = typeof data['custom_fee'] !== 'undefined' ? data['custom_fee'] : 0;\n            this.configureShipping(data['shipping_configured']);\n            this.disableCustomMethod(!this.customMethodAllowed);\n            jQuery.async('#quote-items', (function(){\n                this.dataArea = new OrderFormArea('data', $(this.getAreaId('data')), this);\n                this.itemsArea = Object.extend(new OrderFormArea('items', $(this.getAreaId('items')), this), {\n                    addControlButton: function(button){\n                        var controlButtonArea = $(this.node).select('.actions')[0];\n                        if (typeof controlButtonArea != 'undefined') {\n                            var buttons = controlButtonArea.childElements();\n                            for (var i = 0; i < buttons.length; i++) {\n                                if (buttons[i].innerHTML.include(button.label)) {\n                                    return ;\n                                }\n                            }\n                            button.insertIn(controlButtonArea, 'top');\n                        }\n                    }\n                });\n\n                var searchButtonId = 'add_products',\n                    searchButton = new ControlButton(jQuery.mage.__('Add Products'), searchButtonId),\n                    searchAreaId = this.getAreaId('search');\n                searchButton.onClick = function() {\n                    $(searchAreaId).show();\n                    var el = this;\n                    window.setTimeout(function () {\n                        el.remove();\n                    }, 10);\n                };\n\n\n                    this.dataArea.onLoad = this.dataArea.onLoad.wrap(function(proceed) {\n                        proceed();\n                        this._parent.itemsArea.setNode($(this._parent.getAreaId('items')));\n                        this._parent.itemsArea.onLoad();\n                    });\n\n                    this.itemsArea.onLoad = this.itemsArea.onLoad.wrap(function(proceed) {\n                        proceed();\n                        if ($(searchAreaId) && !$(searchAreaId).visible() && !$(searchButtonId)) {\n                            this.addControlButton(searchButton);\n                        }\n                    });\n                if (jQuery('#' + this.getAreaId('items')).length) {\n                    this.itemsArea.onLoad();\n                }\n            }).bind(this));\n            this.priceModificatorsInit();\n        },\n\n        areasLoaded: function(){\n        },\n\n        itemsLoaded: function(){\n        },\n\n        dataLoaded: function(){\n            this.dataShow();\n        },\n\n        setLoadBaseUrl : function(url){\n            this.loadBaseUrl = url;\n        },\n\n        setAddresses : function(addresses){\n            this.addresses = addresses;\n        },\n\n        setCustomerId : function(id){\n            this.customerId = id;\n            this.loadArea(['header', 'store'], true);\n            $(this.getAreaId('header')).callback = 'setCustomerAfter';\n            $('back_order_top_button').hide();\n            $('reset_order_top_button').show();\n        },\n\n        setCustomerAfter : function () {\n            this.customerSelectorHide();\n            if (this.storeId) {\n                $(this.getAreaId('data')).callback = 'dataLoaded';\n                this.loadArea(['data'], true);\n            }\n            else {\n                this.storeSelectorShow();\n            }\n        },\n\n        setStoreId : function(id){\n            this.storeId = id;\n            this.storeSelectorHide();\n            //this.loadArea(['header', 'sidebar','data'], true);\n            this.dataShow();\n            this.loadArea(['header', 'data'], true);\n        },\n\n        setCurrencyId : function(id){\n            this.currencyId = id;\n            //this.loadArea(['sidebar', 'data'], true);\n            this.loadArea(['data'], true);\n        },\n\n        setCurrencySymbol : function(symbol){\n            this.currencySymbol = symbol;\n        },\n\n        selectAddress : function(el, container){\n            const saveInAddressBook = $(container.replace('fields', '') + 'save_in_address_book');\n\n            id = el.value;\n            if (id.length == 0) {\n                id = '0';\n            }\n\n            this.selectAddressEvent = true;\n            if (this.addresses[id]) {\n                this.fillAddressFields(container, this.addresses[id]);\n            } else {\n                this.fillAddressFields(container, {});\n            }\n\n            if (saveInAddressBook) {\n                if (!+id) {\n                    saveInAddressBook.checked = true;\n                } else {\n                    saveInAddressBook.checked = false;\n                }\n            }\n\n            this.selectAddressEvent = false;\n\n            var data = this.serializeData(container);\n            data[el.name] = id;\n\n            if (!(this.isShippingField(container) && !this.isShippingMethodReseted)) {\n                this.saveData(data);\n            }\n\n        },\n\n        /**\n         * Checks if the field belongs to the shipping address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isShippingField: function (fieldId) {\n            if (this.shippingAsBilling) {\n                return fieldId.include('billing');\n            }\n\n            return fieldId.include('shipping');\n        },\n\n        /**\n         * Checks if the field belongs to the billing address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isBillingField: function (fieldId) {\n            return fieldId.include('billing');\n        },\n\n        /**\n         * Binds events on container form fields.\n         *\n         * @param {String} container\n         */\n        bindAddressFields: function (container) {\n            var fields = $(container).select('input', 'select', 'textarea'),\n                i;\n\n            for (i = 0; i < fields.length; i++) {\n                jQuery(fields[i]).change(this.changeAddressField.bind(this));\n            }\n        },\n\n        /**\n         * Triggers on each form's element changes.\n         *\n         * @param {Event} event\n         */\n        changeAddressField: function (event) {\n            var field = Event.element(event),\n                re = /[^\\[]*\\[([^\\]]*)_address\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/,\n                matchRes = field.name.match(re),\n                type,\n                name,\n                data,\n                resetShipping = false;\n\n            if (!matchRes) {\n                return;\n            }\n\n            type = matchRes[1];\n            name = matchRes[2];\n\n            if (this.isBillingField(field.id)) {\n                data = this.serializeData(this.billingAddressContainer);\n            } else {\n                data = this.serializeData(this.shippingAddressContainer);\n            }\n            data = data.toObject();\n\n            if (type === 'billing' && this.shippingAsBilling) {\n                this.syncAddressField(this.shippingAddressContainer, field.name, field);\n                resetShipping = true;\n            }\n\n            if (type === 'shipping' && !this.shippingAsBilling) {\n                resetShipping = true;\n            }\n\n            if (resetShipping) {\n                data['reset_shipping'] = true;\n            }\n\n            data['order[' + type + '_address][customer_address_id]'] = null;\n            data['shipping_as_billing'] = +this.shippingAsBilling;\n\n            if (name === 'customer_address_id') {\n                data['order[' + type + '_address][customer_address_id]'] =\n                    $('quote-' + type + '_address_customer_address_id').value;\n            }\n\n            if (name === 'country_id' && this.selectAddressEvent === false) {\n                $('quote-' + type + '_address_customer_address_id').value = '';\n            }\n\n            if (data['reset_shipping']) {\n                this.resetShippingMethod();\n            } else {\n                this.saveData(data);\n\n                if (name === 'country_id' || name === 'customer_address_id') {\n                    this.loadArea(['shipping_method', 'billing_method', 'totals', 'items'], true, data);\n                }\n            }\n        },\n\n        /**\n         * Set address container form field value.\n         *\n         * @param {String} container - container ID\n         * @param {String} fieldName - form field name\n         * @param {*} fieldValue - form field value\n         */\n        syncAddressField: function (container, fieldName, fieldValue) {\n            var syncName;\n\n            if (this.isBillingField(fieldName)) {\n                syncName = fieldName.replace('billing', 'shipping');\n            }\n\n            $(container).select('[name=\"' + syncName + '\"]').each(function (element) {\n                if (~['input', 'textarea', 'select'].indexOf(element.tagName.toLowerCase())) {\n                    if (element.type === \"checkbox\") {\n                        element.checked = fieldValue.checked;\n                    } else {\n                        element.value = fieldValue.value;\n                    }\n                }\n            });\n        },\n\n        fillAddressFields: function(container, data){\n            var regionIdElem = false;\n            var regionIdElemValue = false;\n\n            var fields = $(container).select('input', 'select', 'textarea');\n            var re = /[^\\[]*\\[[^\\]]*\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/;\n            for(var i=0;i<fields.length;i++){\n                // skip input type file @Security error code: 1000\n                if (fields[i].tagName.toLowerCase() == 'input' && fields[i].type.toLowerCase() == 'file') {\n                    continue;\n                }\n                var matchRes = fields[i].name.match(re);\n                if (matchRes === null) {\n                    continue;\n                }\n                var name = matchRes[1];\n                var index = matchRes[3];\n\n                if (index){\n                    // multiply line\n                    if (data[name]){\n                        var values = data[name].split(\"\\n\");\n                        fields[i].value = values[index] ? values[index] : '';\n                    } else {\n                        fields[i].value = '';\n                    }\n                } else if (fields[i].tagName.toLowerCase() == 'select' && fields[i].multiple) {\n                    // multiselect\n                    if (data[name]) {\n                        values = [''];\n                        if (Object.isString(data[name])) {\n                            values = data[name].split(',');\n                        } else if (Object.isArray(data[name])) {\n                            values = data[name];\n                        }\n                        fields[i].setValue(values);\n                    }\n                } else {\n                    fields[i].setValue(data[name] ? data[name] : '');\n                }\n\n                if (fields[i].changeUpdater) {\n                    fields[i].changeUpdater();\n                }\n\n                if (name == 'region' && data['region_id'] && !data['region']){\n                    fields[i].value = data['region_id'];\n                }\n\n                jQuery(fields[i]).trigger('change');\n            }\n        },\n\n        disableShippingAddress : function(flag) {\n            this.shippingAsBilling = flag;\n            if ($('quote-shipping_address_customer_address_id')) {\n                $('quote-shipping_address_customer_address_id').disabled = flag;\n            }\n            if ($(this.shippingAddressContainer)) {\n                var dataFields = $(this.shippingAddressContainer).select('input', 'select', 'textarea');\n                for (var i = 0; i < dataFields.length; i++) {\n                    dataFields[i].disabled = flag;\n\n                    if(this.isOnlyVirtualProduct) {\n                        dataFields[i].setValue('');\n                    }\n                }\n                var buttons = $(this.shippingAddressContainer).select('button');\n                // Add corresponding class to buttons while disabling them\n                for (i = 0; i < buttons.length; i++) {\n                    buttons[i].disabled = flag;\n                    if (flag) {\n                        buttons[i].addClassName('disabled');\n                    } else {\n                        buttons[i].removeClassName('disabled');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Equals shipping and billing addresses.\n         *\n         * @param {Boolean} flag\n         */\n        setShippingAsBilling: function (flag) {\n            var data,\n                areasToLoad = ['billing_method', 'shipping_address', 'shipping_method', 'totals', 'giftmessage'];\n\n            this.disableShippingAddress(flag);\n            data = this.serializeData(flag ? this.billingAddressContainer : this.shippingAddressContainer);\n            data = data.toObject();\n            data['shipping_as_billing'] = flag ? 1 : 0;\n            data['reset_shipping'] = 1;\n            this.loadArea(areasToLoad, true, data);\n        },\n\n        /**\n         * Loads shipping options according to address data.\n         *\n         * @return {Boolean}\n         */\n        loadShippingRates: function () {\n            var addressContainer = this.shippingAsBilling ?\n                'billingAddressContainer' :\n                'shippingAddressContainer',\n                data = this.serializeData(this[addressContainer]).toObject();\n\n            data['collect_shipping_rates'] = 1;\n\n            this.isShippingMethodReseted = false;\n            this.loadArea(['shipping_method', 'totals'], true, data);\n\n            return false;\n        },\n\n        setShippingMethod: function(method) {\n            var data = {};\n\n            data['quote[shipping_method]'] = method;\n            this.loadArea([\n                'shipping_method',\n                'totals',\n                // 'billing_method'\n            ], true, data);\n        },\n\n        /**\n         * Replace shipping method area.\n         */\n        resetShippingMethod: function () {\n            if (!this.isOnlyVirtualProduct) {\n                $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\n            }\n        },\n\n        changeShippingModified: function (element) {\n            this.canShippingModified = element.checked;\n        },\n\n        changeCustomMethodAllowed: function (element) {\n            this.customMethodAllowed = element.checked;\n            this.disableCustomMethod(!this.customMethodAllowed);\n        },\n\n        disableCustomMethod: function (disabled) {\n            var customMethodFields = jQuery('[data-amquote-js=\"custom-method\"]');\n            if (disabled) {\n                customMethodFields.attr('disabled', true);\n                customMethodFields.removeAttr('checked')\n            } else {\n                customMethodFields.removeAttr('disabled');\n            }\n        },\n\n        configureShipping: function (visible) {\n            if ($('quote-addresses')) {\n                var addresses = $('quote-addresses'),\n                    addressesInputs = jQuery('[data-amquote-js=\"quote_addresses\"] input, [data-amquote-js=\"quote_addresses\"] select'),\n                    methods = $('quote-methods'),\n                    methodsInputs = jQuery('[data-amquote-js=\"shipping_methods\"] input, [data-amquote-js=\"shipping_methods\"] select');\n\n                if (visible) {\n                    addresses.show();\n                    methods.show();\n                    addressesInputs.removeAttr('disabled');\n                    methodsInputs.removeAttr('disabled');\n                } else {\n                    addresses.hide();\n                    methods.hide();\n                    addressesInputs.attr('disabled', true);\n                    methodsInputs.attr('disabled', true);\n                }\n\n                this.disableShippingAddress($('quote-shipping_same_as_billing').checked);\n                this.disableCustomMethod(!this.customMethodAllowed);\n                this.disableCustomMethod(!this.customMethodAllowed);\n            }\n        },\n\n        changeCustomFee: function (customFee) {\n            this.customFee = customFee;\n        },\n\n        getCollectShippingRates: function () {\n            return $('shipping_configured').checked;\n        },\n\n        addProduct : function(id){\n            this.loadArea(['items', 'totals', 'shipping_method'], true, {add_product:id});\n        },\n\n        removeQuoteItem : function(id){\n            this.loadArea(['items', 'totals', 'shipping_method'], true,\n                {remove_item:id, from:'quote'});\n        },\n\n        moveQuoteItem : function(id, to){\n            this.loadArea(['items', 'totals', 'shipping_method'], this.getAreaId('items'),\n                {move_item:id, to:to});\n        },\n\n        productGridShow : function(buttonElement){\n            this.productGridShowButton = buttonElement;\n            Element.hide(buttonElement);\n            this.showArea('search');\n        },\n\n        productGridRowInit : function(grid, row){\n            var checkbox = $(row).select('.checkbox')[0];\n            var inputs = $(row).select('.input-text');\n            if (checkbox && inputs.length > 0) {\n                checkbox.inputElements = inputs;\n                for (var i = 0; i < inputs.length; i++) {\n                    var input = inputs[i];\n                    input.checkboxElement = checkbox;\n\n                    var product = this.gridProducts.get(checkbox.value);\n                    if (product) {\n                        var defaultValue = product[input.name];\n                        if (defaultValue) {\n                            if (input.name == 'giftmessage') {\n                                input.checked = true;\n                            } else {\n                                input.value = defaultValue;\n                            }\n                        }\n                    }\n\n                    input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\n\n                    Event.observe(input,'keyup', this.productGridRowInputChange.bind(this));\n                    Event.observe(input,'change',this.productGridRowInputChange.bind(this));\n                }\n            }\n        },\n\n        productGridRowInputChange : function(event){\n            var element = Event.element(event);\n            if (element && element.checkboxElement && element.checkboxElement.checked){\n                if (element.name!='giftmessage' || element.checked) {\n                    this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\n                } else if (element.name=='giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\n                    delete(this.gridProducts.get(element.checkboxElement.value)[element.name]);\n                }\n            }\n        },\n\n        productGridRowClick : function(grid, event){\n            var trElement = Event.findElement(event, 'tr');\n            var qtyElement = trElement.select('input[name=\"qty\"]')[0];\n            var eventElement = Event.element(event);\n            var isInputCheckbox = eventElement.tagName == 'INPUT' && eventElement.type == 'checkbox';\n            var isInputQty = eventElement.tagName == 'INPUT' && eventElement.name == 'qty';\n            if (trElement && !isInputQty) {\n                var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\n                var qtyInput = Element.select(trElement, 'input[name=\"qty\"]')[0];\n                var confLink = Element.select(trElement, 'a')[0];\n                var priceColl = Element.select(trElement, '.price')[0];\n                if (checkbox) {\n                    // processing non composite product\n                    if (typeof confLink == 'undefined' || confLink.readAttribute('disabled')) {\n                        var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\n                        grid.setCheckboxChecked(checkbox, checked);\n                        // processing composite product\n                    } else if (isInputCheckbox && !checkbox.checked) {\n                        grid.setCheckboxChecked(checkbox, false);\n                        // processing composite product\n                    } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\n                        var listType = confLink.readAttribute('list_type');\n                        var productId = confLink.readAttribute('product_id');\n                        if (typeof this.productPriceBase[productId] == 'undefined') {\n                            var priceBase = priceColl.innerHTML.match(/.*?([\\d,]+\\.?\\d*)/);\n                            if (!priceBase) {\n                                this.productPriceBase[productId] = 0;\n                            } else {\n                                this.productPriceBase[productId] = parseFloat(priceBase[1].replace(/,/g,''));\n                            }\n                        }\n                        productConfigure.setConfirmCallback(listType, function() {\n                            // sync qty of popup and qty of grid\n                            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                                qtyElement.value = confirmedCurrentQty.value;\n                            }\n                            // calc and set product price\n                            var productPrice = this._calcProductPrice();\n                            if (this._isSummarizePrice()) {\n                                productPrice += this.productPriceBase[productId];\n                            }\n                            productPrice = parseFloat(Math.round(productPrice + \"e+2\") + \"e-2\");\n                            priceColl.innerHTML = this.currencySymbol + productPrice.toFixed(2);\n                            // and set checkbox checked\n                            grid.setCheckboxChecked(checkbox, true);\n                        }.bind(this));\n                        productConfigure.setCancelCallback(listType, function() {\n                            if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\n                                grid.setCheckboxChecked(checkbox, false);\n                            }\n                        });\n                        productConfigure.setShowWindowCallback(listType, function() {\n                            // sync qty of grid and qty of popup\n                            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                                formCurrentQty.value = qtyElement.value;\n                            }\n                        }.bind(this));\n                        productConfigure.showItemConfiguration(listType, productId);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Is need to summarize price\n         */\n        _isSummarizePrice: function(elm) {\n            if (elm && elm.hasAttribute('summarizePrice')) {\n                this.summarizePrice = parseInt(elm.readAttribute('summarizePrice'));\n            }\n            return this.summarizePrice;\n        },\n        /**\n         * Calc product price through its options\n         */\n        _calcProductPrice: function () {\n            var productPrice = 0;\n            var getPriceFields = function (elms) {\n                var productPrice = 0;\n                var getPrice = function (elm) {\n                    var optQty = 1;\n                    if (elm.hasAttribute('qtyId')) {\n                        if (!$(elm.getAttribute('qtyId')).value) {\n                            return 0;\n                        } else {\n                            optQty = parseFloat($(elm.getAttribute('qtyId')).value);\n                        }\n                    }\n                    if (elm.hasAttribute('price') && !elm.disabled) {\n                        return parseFloat(elm.readAttribute('price')) * optQty;\n                    }\n                    return 0;\n                };\n                for(var i = 0; i < elms.length; i++) {\n                    if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\n                        for(var ii = 0; ii < elms[i].options.length; ii++) {\n                            if (elms[i].options[ii].selected) {\n                                if (this._isSummarizePrice(elms[i].options[ii])) {\n                                    productPrice += getPrice(elms[i].options[ii]);\n                                } else {\n                                    productPrice = getPrice(elms[i].options[ii]);\n                                }\n                            }\n                        }\n                    }\n                    else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\n                        && Form.Element.getValue(elms[i]))\n                    ) {\n                        if (this._isSummarizePrice(elms[i])) {\n                            productPrice += getPrice(elms[i]);\n                        } else {\n                            productPrice = getPrice(elms[i]);\n                        }\n                    }\n                }\n                return productPrice;\n            }.bind(this);\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\n            return productPrice;\n        },\n\n        productGridCheckboxCheck : function(grid, element, checked){\n            if (checked) {\n                if(element.inputElements) {\n                    this.gridProducts.set(element.value, {});\n                    var product = this.gridProducts.get(element.value);\n                    for (var i = 0; i < element.inputElements.length; i++) {\n                        var input = element.inputElements[i];\n                        if (!input.hasClassName('input-inactive')) {\n                            input.disabled = false;\n                            if (input.name == 'qty' && !input.value) {\n                                input.value = 1;\n                            }\n                        }\n\n                        if (input.checked || input.name != 'giftmessage') {\n                            product[input.name] = input.value;\n                        } else if (product[input.name]) {\n                            delete(product[input.name]);\n                        }\n                    }\n                }\n            } else {\n                if(element.inputElements){\n                    for(var i = 0; i < element.inputElements.length; i++) {\n                        element.inputElements[i].disabled = true;\n                    }\n                }\n                this.gridProducts.unset(element.value);\n            }\n            grid.reloadParams = {'products[]':this.gridProducts.keys()};\n        },\n\n        /**\n         * Submit configured products to quote\n         */\n        productGridAddSelected : function(){\n            if(this.productGridShowButton) Element.show(this.productGridShowButton);\n            var area = ['search', 'items', 'shipping_method', 'totals', 'giftmessage','billing_method'];\n            // prepare additional fields and filtered items of products\n            var fieldsPrepare = {};\n            if ($('quote_id')) {\n                fieldsPrepare.quote_id = $('quote_id').value;\n            }\n            this.priceModificators.each(function (value) {\n                var modificatorInput = jQuery('[data-price-modificator=\"' + value + '\"]');\n                if (!modificatorInput.attr('disabled')) {\n                    fieldsPrepare[modificatorInput.attr('name')] = parseFloat(modificatorInput.val());\n                }\n            });\n            var itemsFilter = [];\n            var products = this.gridProducts.toObject();\n            for (var productId in products) {\n                itemsFilter.push(productId);\n                var paramKey = 'item['+productId+']';\n                for (var productParamKey in products[productId]) {\n                    paramKey += '['+productParamKey+']';\n                    fieldsPrepare[paramKey] = products[productId][productParamKey];\n                }\n            }\n            this.productConfigureSubmit('product_to_add', area, fieldsPrepare, itemsFilter);\n            productConfigure.clean('quote_items');\n            this.hideArea('search');\n            this.gridProducts = $H({});\n        },\n\n        selectCustomer : function(grid, event){\n            var element = Event.findElement(event, 'tr');\n            if (element.title){\n                this.setCustomerId(element.title);\n            }\n        },\n\n        customerSelectorHide : function(){\n            this.hideArea('customer-selector');\n        },\n\n        customerSelectorShow : function(){\n            this.showArea('customer-selector');\n        },\n\n        storeSelectorHide : function(){\n            this.hideArea('store');\n        },\n\n        storeSelectorShow : function(){\n            this.showArea('store');\n        },\n\n        dataHide : function(){\n            this.hideArea('data');\n        },\n\n        dataShow : function(){\n            if ($('submit_order_top_button')) {\n                $('submit_order_top_button').show();\n            }\n            this.showArea('data');\n        },\n\n        itemsUpdate : function (additionalData) {\n            var editForm = jQuery('#edit_form');\n            if (editForm.validate().element(jQuery('#discount'))\n                && editForm.validate().element(jQuery('#surcharge'))\n            ) {\n                var area = ['items', 'totals', 'shipping_method'];\n                // prepare additional fields\n                var fieldsPrepare = {update_items: 1};\n                if ($('quote_id')) {\n                    fieldsPrepare.quote_id = $('quote_id').value;\n                }\n                this.priceModificators.each(function (value) {\n                    var modificatorInput = jQuery('[data-price-modificator=\"' + value + '\"]');\n                    if (!modificatorInput.attr('disabled')) {\n                        fieldsPrepare[modificatorInput.attr('name')] = parseFloat(modificatorInput.val());\n                        if (fieldsPrepare[modificatorInput.attr('name')]) {\n                            jQuery('.custom-price').attr('disabled', false);\n                        }\n                    }\n                });\n                var info = $('order-items_grid').select('input', 'select', 'textarea');\n                for (var i = 0; i < info.length; i++) {\n                    if (!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\n                        fieldsPrepare[info[i].name] = info[i].getValue();\n                    }\n                }\n                fieldsPrepare = Object.extend(fieldsPrepare, this.productConfigureAddFields);\n                fieldsPrepare = Object.extend(fieldsPrepare, additionalData);\n                fieldsPrepare['quote[shipping_can_modified]'] = this.canShippingModified ? 1 : 0;\n                fieldsPrepare['quote[shipping_configured]'] = $('shipping_configured').checked ? 1 : 0;\n                fieldsPrepare['quote[custom_fee]'] = this.customFee;\n                fieldsPrepare['quote[custom_method_enabled]'] = this.customMethodAllowed ? 1 : 0;\n                if (this.getCollectShippingRates()) {\n                    fieldsPrepare['collect_shipping_rates'] = 1;\n                }\n\n                this.productConfigureSubmit('quote_items', area, fieldsPrepare);\n                this.orderItemChanged = false;\n            }\n        },\n\n        itemsOnchangeBind : function(){\n            var elems = $('order-items_grid').select('input', 'select', 'textarea');\n            for(var i=0; i<elems.length; i++){\n                if(!elems[i].bindOnchange){\n                    elems[i].bindOnchange = true;\n                    elems[i].observe('change', this.itemChange.bind(this))\n                }\n            }\n        },\n\n        itemChange : function(event){\n            this.orderItemChanged = true;\n        },\n\n        /**\n         * Submit batch of configured products\n         *\n         * @param listType\n         * @param area\n         * @param fieldsPrepare\n         * @param itemsFilter\n         */\n        productConfigureSubmit : function(listType, area, fieldsPrepare, itemsFilter) {\n            // prepare loading areas and build url\n            area = this.prepareArea(area);\n            this.loadingAreas = area;\n            var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\n\n            // prepare additional fields\n            fieldsPrepare = this.prepareParams(fieldsPrepare);\n            fieldsPrepare.reset_shipping = 1;\n            fieldsPrepare.json = 1;\n\n            // create fields\n            var fields = [];\n            for (var name in fieldsPrepare) {\n                fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\n            }\n            productConfigure.addFields(fields);\n\n            // filter items\n            if (itemsFilter) {\n                productConfigure.addItemsFilter(listType, itemsFilter);\n            }\n\n            // prepare and do submit\n            productConfigure.addListType(listType, {urlSubmit: url});\n            productConfigure.setOnLoadIFrameCallback(listType, function(response){\n                this.loadAreaResponseHandler(response);\n            }.bind(this));\n            productConfigure.submit(listType);\n            // clean\n            this.productConfigureAddFields = {};\n        },\n\n        /**\n         * Show configuration of quote item\n         *\n         * @param itemId\n         */\n        showQuoteItemConfiguration: function(itemId){\n            var listType = 'quote_items';\n            var qtyElement = $('order-items_grid').select('input[name=\"item\\['+itemId+'\\]\\[qty\\]\"]')[0];\n            productConfigure.setConfirmCallback(listType, function() {\n                // sync qty of popup and qty of grid\n                var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                    qtyElement.value = confirmedCurrentQty.value;\n                }\n                this.productConfigureAddFields['item['+itemId+'][configured]'] = 1;\n                this.itemsUpdate();\n            }.bind(this));\n            productConfigure.setShowWindowCallback(listType, function() {\n                // sync qty of grid and qty of popup\n                var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                    formCurrentQty.value = qtyElement.value;\n                }\n            }.bind(this));\n            productConfigure.showItemConfiguration(listType, itemId);\n        },\n\n        accountFieldsBind : function(container){\n            if($(container)){\n                var fields = $(container).select('input', 'select', 'textarea');\n                for(var i=0; i<fields.length; i++){\n                    if(fields[i].id == 'group_id'){\n                        fields[i].observe('change', this.accountGroupChange.bind(this))\n                    }\n                    else{\n                        fields[i].observe('change', this.accountFieldChange.bind(this))\n                    }\n                }\n            }\n        },\n\n        accountGroupChange : function(){\n            this.loadArea(['data'], true, this.serializeData('order-form_account').toObject());\n        },\n\n        accountFieldChange : function(){\n            this.saveData(this.serializeData('order-form_account'));\n        },\n\n        commentFieldsBind : function(container){\n            if($(container)){\n                var fields = $(container).select('input', 'textarea');\n                for(var i=0; i<fields.length; i++)\n                    fields[i].observe('change', this.commentFieldChange.bind(this))\n            }\n        },\n\n        commentFieldChange : function(){\n            this.saveData(this.serializeData('order-comment'));\n        },\n\n        loadArea : function(area, indicator, params){\n            var deferred = new jQuery.Deferred();\n            var url = this.loadBaseUrl;\n            if (area) {\n                area = this.prepareArea(area);\n                url += 'block/' + area;\n            }\n            if (indicator === true) indicator = 'html-body';\n            params = this.prepareParams(params);\n            this.priceModificators.each(function (value) {\n                var modificatorInput = jQuery('[data-price-modificator=\"' + value + '\"]');\n                if (!modificatorInput.attr('disabled')) {\n                    params[modificatorInput.attr('name')] = parseFloat(modificatorInput.val());\n                }\n            });\n            params.json = true;\n            if ($('quote_id')) {\n                params.quote_id = $('quote_id').value;\n            }\n            if (!this.loadingAreas) this.loadingAreas = [];\n            if (indicator) {\n                this.loadingAreas = area;\n                new Ajax.Request(url, {\n                    parameters:params,\n                    loaderArea: indicator,\n                    onSuccess: function(transport) {\n                        var response = transport.responseText.evalJSON();\n                        this.loadAreaResponseHandler(response);\n                        deferred.resolve();\n                    }.bind(this)\n                });\n            }\n            else {\n                new Ajax.Request(url, {\n                    parameters:params,\n                    loaderArea: indicator,\n                    onSuccess: function(transport) {\n                        deferred.resolve();\n                    }\n                });\n            }\n            if (typeof productConfigure != 'undefined' && area instanceof Array && area.indexOf('items') != -1) {\n                productConfigure.clean('quote_items');\n            }\n            return deferred.promise();\n        },\n\n        loadAreaResponseHandler : function (response) {\n            if (response.error) {\n                alert({\n                    content: response.message\n                });\n            }\n            if (response.ajaxExpired && response.ajaxRedirect) {\n                setLocation(response.ajaxRedirect);\n            }\n            if (!this.loadingAreas) {\n                this.loadingAreas = [];\n            }\n            if (typeof this.loadingAreas == 'string') {\n                this.loadingAreas = [this.loadingAreas];\n            }\n            if (this.loadingAreas.indexOf('message') == -1) {\n                this.loadingAreas.push('message');\n            }\n            if (response.header) {\n                jQuery('.page-actions-inner').attr('data-title', response.header);\n            }\n\n            for (var i = 0; i < this.loadingAreas.length; i++) {\n                var id = this.loadingAreas[i];\n                if ($(this.getAreaId(id))) {\n                    if ('message' != id || response[id]) {\n                        var area = $(this.getAreaId(id)).update(response[id]);\n                        jQuery(area).trigger('contentUpdated');\n                    }\n                    if ($(this.getAreaId(id)).callback && (typeof this[$(this.getAreaId(id)).callback] == 'function')) {\n                        this[$(this.getAreaId(id)).callback]();\n                    }\n                }\n            }\n\n            if (this.loadingAreas.indexOf('items') != -1) {\n                this.priceModificatorsInit();\n            }\n\n            this.configureShipping($('shipping_configured').checked);\n        },\n\n        prepareArea : function(area) {\n            if (this.giftMessageDataChanged) {\n                return area.without('giftmessage');\n            }\n            return area;\n        },\n\n        saveData : function(data) {\n            this.loadArea(false, false, data);\n        },\n\n        showArea : function(area) {\n            var id = this.getAreaId(area);\n            if($(id)) {\n                $(id).show();\n                this.areaOverlay();\n            }\n        },\n\n        hideArea : function(area) {\n            var id = this.getAreaId(area);\n            if($(id)) {\n                $(id).hide();\n                this.areaOverlay();\n            }\n        },\n\n        areaOverlay : function() {\n            $H(quote.overlayData).each(function(e) {\n                e.value.fx();\n            });\n        },\n\n        getAreaId : function(area){\n            return 'quote-'+area;\n        },\n\n        prepareParams : function(params) {\n            if (!params) {\n                params = {};\n            }\n            if (!params.customer_id) {\n                params.customer_id = this.customerId;\n            }\n            if (!params.store_id) {\n                params.store_id = this.storeId;\n            }\n            if (!params.currency_id) {\n                params.currency_id = this.currencyId;\n            }\n            if (!params.form_key) {\n                params.form_key = FORM_KEY;\n            }\n            if (!params.shipping_can_modified) {\n                params['quote[shipping_can_modified]'] = this.canShippingModified ? 1 : 0;\n            }\n            if (!params.shipping_configured) {\n                params['quote[shipping_configured]'] = $('shipping_configured').checked ? 1 : 0;\n            }\n            params['quote[custom_fee]'] = this.customFee;\n            params['quote[custom_method_enabled]'] = this.customMethodAllowed ? 1 : 0;\n            if (this.getCollectShippingRates()) {\n                params['collect_shipping_rates'] = 1;\n            }\n\n            return params;\n        },\n\n\n        serializeData : function(container) {\n            var fields = $(container).select('input', 'select', 'textarea');\n            var data = Form.serializeElements(fields, true);\n\n            return $H(data);\n        },\n\n        toggleCustomPrice: function(checkbox, elemId) {\n            if (checkbox.checked) {\n                $(elemId).disabled = false;\n                $(elemId).show();\n            }\n            else {\n                $(elemId).disabled = true;\n                $(elemId).hide();\n            }\n        },\n\n        submit: function() {\n            jQuery('#edit_form').submit();\n        },\n\n        _realSubmit: function () {\n            var disableAndSave = function() {\n                disableElements('save');\n                jQuery('#edit_form').on('invalid-form.validate', function() {\n                    enableElements('save');\n                    jQuery('#edit_form').trigger('processStop');\n                    jQuery('#edit_form').off('invalid-form.validate');\n                });\n                jQuery('#edit_form').triggerHandler('save');\n            }\n            if (this.orderItemChanged) {\n                var self = this;\n\n                jQuery('#edit_form').trigger('processStop');\n\n                confirm({\n                    content: jQuery.mage.__('You have item changes'),\n                    actions: {\n                        confirm: function() {\n                            jQuery('#edit_form').trigger('processStart');\n                            disableAndSave();\n                        },\n                        cancel: function() {\n                            self.itemsUpdate();\n                        }\n                    }\n                });\n            } else {\n                disableAndSave();\n            }\n        },\n\n        overlay : function(elId, show, observe) {\n            if (typeof(show) == 'undefined') { show = true; }\n\n            var orderObj = this;\n            var obj = this.overlayData.get(elId);\n            if (!obj) {\n                obj = {\n                    show: show,\n                    el: elId,\n                    order: orderObj,\n                    fx: function(event) {\n                        this.order.processOverlay(this.el, this.show);\n                    }\n                };\n                obj.bfx = obj.fx.bindAsEventListener(obj);\n                this.overlayData.set(elId, obj);\n            } else {\n                obj.show = show;\n                Event.stopObserving(window, 'resize', obj.bfx);\n            }\n\n            Event.observe(window, 'resize', obj.bfx);\n\n            this.processOverlay(elId, show);\n        },\n\n        processOverlay : function(elId, show) {\n            var el = $(elId);\n\n            if (!el) {\n                return;\n            }\n\n            var parentEl = el.up(1);\n            if (show) {\n                parentEl.removeClassName('ignore-validate');\n            } else {\n                parentEl.addClassName('ignore-validate');\n            }\n\n            if (Prototype.Browser.IE) {\n                parentEl.select('select').each(function (elem) {\n                    if (show) {\n                        elem.needShowOnSuccess = false;\n                        elem.style.visibility = '';\n                    } else {\n                        elem.style.visibility = 'hidden';\n                        elem.needShowOnSuccess = true;\n                    }\n                });\n            }\n\n            parentEl.setStyle({position: 'relative'});\n            el.setStyle({\n                display: show ? 'none' : ''\n            });\n        },\n\n        validateVat: function(parameters)\n        {\n            var params = {\n                country: $(parameters.countryElementId).value,\n                vat: $(parameters.vatElementId).value\n            };\n\n            if (this.storeId !== false) {\n                params.store_id = this.storeId;\n            }\n\n            var currentCustomerGroupId = $(parameters.groupIdHtmlId)\n                ? $(parameters.groupIdHtmlId).value : '';\n\n            new Ajax.Request(parameters.validateUrl, {\n                parameters: params,\n                onSuccess: function(response) {\n                    var message = '';\n                    var groupActionRequired = null;\n                    try {\n                        response = response.responseText.evalJSON();\n\n                        if (null === response.group) {\n                            if (true === response.valid) {\n                                message = parameters.vatValidMessage;\n                            } else if (true === response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                            }\n                        } else {\n                            if (true === response.valid) {\n                                message = parameters.vatValidAndGroupValidMessage;\n                                if (0 === response.group) {\n                                    message = parameters.vatValidAndGroupInvalidMessage;\n                                    groupActionRequired = 'inform';\n                                } else if (currentCustomerGroupId != response.group) {\n                                    message = parameters.vatValidAndGroupChangeMessage;\n                                    groupActionRequired = 'change';\n                                }\n                            } else if (response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                                groupActionRequired = 'inform';\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                                groupActionRequired = 'inform';\n                            }\n                        }\n                    } catch (e) {\n                        message = parameters.vatValidationFailedMessage;\n                    }\n                    if (null === groupActionRequired) {\n                        alert({\n                            content: message\n                        });\n                    }\n                    else {\n                        this.processCustomerGroupChange(\n                            parameters.groupIdHtmlId,\n                            message,\n                            parameters.vatCustomerGroupMessage,\n                            parameters.vatGroupErrorMessage,\n                            response.group,\n                            groupActionRequired\n                        );\n                    }\n                }.bind(this)\n            });\n        },\n\n        processCustomerGroupChange: function(groupIdHtmlId, message, customerGroupMessage, errorMessage, groupId, action)\n        {\n            var groupMessage = '';\n            try {\n                var currentCustomerGroupId = $(groupIdHtmlId).value;\n                var currentCustomerGroupTitle =\n                    $$('#' + groupIdHtmlId + ' > option[value=' + currentCustomerGroupId + ']')[0].text;\n                var customerGroupOption = $$('#' + groupIdHtmlId + ' > option[value=' + groupId + ']')[0];\n                groupMessage = customerGroupMessage.replace(/%s/, customerGroupOption.text);\n            } catch (e) {\n                groupMessage = errorMessage;\n                if (action === 'change') {\n                    message = '';\n                    action = 'inform';\n                }\n            }\n\n            if (action === 'change') {\n                var confirmText = message.replace(/%s/, customerGroupOption.text);\n                confirmText = confirmText.replace(/%s/, currentCustomerGroupTitle);\n                if (confirm(confirmText)) {\n                    $$('#' + groupIdHtmlId + ' option').each(function (o) {\n                        o.selected = o.readAttribute('value') == groupId;\n                    });\n                    this.accountGroupChange();\n                }\n            } else if (action === 'inform') {\n                alert({\n                    content: message + '\\n' + groupMessage\n                });\n            }\n        },\n\n        removeModificators: function () {\n            this.priceModificators.each(function (modificator) {\n                var modificator = jQuery('[data-price-modificator=\"' + modificator + '\"]');\n                modificator.val(0);\n                modificator.attr('disabled', false);\n            });\n            this.itemsUpdate({'reset_price_modificators': 1});\n        },\n\n        priceModificatorsInit: function () {\n            var self = this;\n            jQuery('[data-price-modificator]').on('keyup change', function (event) {\n                var changedInput = event.currentTarget;\n                self.priceModificators.each(function (modificator) {\n                    var modificatorSelector = '[data-price-modificator=\"' + modificator + '\"]';\n                    if (!jQuery(changedInput).is(modificatorSelector)) {\n                        jQuery(modificatorSelector).attr('disabled', !!parseFloat(changedInput.value));\n                    }\n                });\n            });\n        }\n    };\n\n    window.OrderFormArea = Class.create();\n    OrderFormArea.prototype = {\n        _name: null,\n        _node: null,\n        _parent: null,\n        _callbackName: null,\n\n        initialize: function(name, node, parent){\n            if(!node)\n                return;\n            this._name = name;\n            this._parent = parent;\n            this._callbackName = node.callback;\n            if (typeof this._callbackName == 'undefined') {\n                this._callbackName = name + 'Loaded';\n                node.callback = this._callbackName;\n            }\n            if (typeof parent[this._callbackName] != 'undefined') {\n                parent[this._callbackName] = parent[this._callbackName].wrap((function (proceed){\n                    proceed();\n                    this.onLoad();\n                }).bind(this));\n            }\n\n            this.setNode(node);\n        },\n\n        setNode: function(node){\n            if (!node.callback) {\n                node.callback = this._callbackName;\n            }\n            this.node = node;\n        },\n\n        onLoad: function(){\n        }\n    };\n\n    window.ControlButton = Class.create();\n\n    ControlButton.prototype = {\n        _label: '',\n        _node: null,\n\n        initialize: function(label, id){\n            this._label = label;\n            this._node = new Element('button', {\n                'class': 'action-secondary action-add',\n                'type':  'button'\n            });\n            if (typeof id !== 'undefined') {\n                this._node.setAttribute('id', id)\n            }\n        },\n\n        onClick: function(){\n        },\n\n        insertIn: function(element, position){\n            var node = Object.extend(this._node),\n                content = {};\n            node.observe('click', this.onClick);\n            node.update('<span>' + this._label + '</span>');\n            content[position] = node;\n            Element.insert(element, content);\n        }\n    };\n\n\n\n    /**\n     * @param {String} url\n     * @returns {Object}\n     */\n    function getForm(url) {\n        return jQuery('<form>', {\n            'action': url,\n            'method': 'POST'\n        }).append(jQuery('<input>', {\n            'name': 'form_key',\n            'value': window.FORM_KEY,\n            'type': 'hidden'\n        }));\n    }\n\n    function validateQuoteItems() {\n        if (jQuery('[data-amquote-js=\"quote-item\"]').length === 0) {\n            if (jQuery('.quote-items-validation').length === 0) {\n                jQuery('.page-main-actions').after(jQuery('<div class=\"messages\"><div class=\"quote-items-validation message message-error error\">'\n                    + jQuery.mage.__('Please specify quote items.')\n                    + '</div></div>'\n                ));\n            }\n            window.scrollTo(0, 0);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    jQuery('body').on('click', '.quote-action-button', function () {\n        var button = jQuery(this),\n            url = button.data('url');\n\n        if (button.data('amquote-js') === 'approve' && !validateQuoteItems()) {\n            return false;\n        }\n\n        getForm(url).appendTo('body').submit();\n\n        return false;\n    });\n\n    jQuery('.add-note-quote-item').click(function() {\n        jQuery(this).parent().find('.textarea-control').show();\n        jQuery(this).hide();\n    });\n\n});\n\n","Amasty_RequestQuote/js/mixin-validator-url-key.js":"/**\n * Custom route name validation rule.\n */\ndefine([\n    'jquery',\n    'mage/translate',\n    'jquery/validate'\n], function ($) {\n    'use strict';\n\n    return function (validator) {\n        $.validator.addMethod(\n            'amasty-validate-url-key',\n            function (value) {\n                return $.mage.isEmptyNoTrim(value) || /^[a-zA-Z0-9][a-zA-Z0-9_-]+?$/.test(value);\n            },\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\").')\n        );\n\n        return validator;\n    };\n});\n","PayPal_Braintree/js/form-builder.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine(\n    [\n        'jquery',\n        'underscore',\n        'mage/template'\n    ],\n    function ($, _, mageTemplate) {\n        'use strict';\n\n        return {\n\n            /**\n             * @param {Object} formData\n             * @returns {*|jQuery}\n             */\n            build: function (formData) {\n                var formTmpl = mageTemplate('<form action=\"<%= data.action %>\"' +\n                    ' method=\"POST\" hidden enctype=\"application/x-www-form-urlencoded\">' +\n                        '<% _.each(data.fields, function(val, key){ %>' +\n                            '<input value=\\'<%= val %>\\' name=\"<%= key %>\" type=\"hidden\">' +\n                        '<% }); %>' +\n                    '</form>');\n\n                return $(formTmpl({\n                    data: {\n                        action: formData.action,\n                        fields: formData.fields\n                    }\n                })).appendTo($('[data-container=\"body\"]'));\n            }\n        };\n    }\n);\n","PayPal_Braintree/js/validator.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/*global define*/\ndefine([\n    'underscore'\n], function (_) {\n    'use strict';\n\n    return {\n        config: {},\n\n        /**\n         * Set configuration\n         * @param {Object} config\n         */\n        setConfig: function (config) {\n            this.config = config;\n        },\n\n        /**\n         * Get List of available card types\n         * @returns {*|exports.defaults.availableCardTypes|{}}\n         */\n        getAvailableCardTypes: function () {\n            return this.config.availableCardTypes;\n        },\n\n        /**\n         * Get list of card types\n         * @returns {Object}\n         */\n        getCcTypesMapper: function () {\n            return this.config.ccTypesMapper;\n        },\n\n        /**\n         * Find mage card type by Braintree type\n         * @param {String} type\n         * @param {Object} availableTypes\n         * @returns {*}\n         */\n        getMageCardType: function (type, availableTypes) {\n            var storedCardType = null,\n                mapper = this.getCcTypesMapper();\n\n            if (type && typeof mapper[type] !== 'undefined') {\n                storedCardType = mapper[type];\n\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\n                    return storedCardType;\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * Filter list of available card types\n         * @param {Object} availableTypes\n         * @param {Object} countrySpecificCardTypes\n         * @returns {Object}\n         */\n        collectTypes: function (availableTypes, countrySpecificCardTypes) {\n            var key,\n                filteredTypes = [];\n\n            for (key in availableTypes) {\n                if (_.indexOf(countrySpecificCardTypes, availableTypes[key]) !== -1) {\n                    filteredTypes.push(availableTypes[key]);\n                }\n            }\n\n            return filteredTypes;\n        },\n\n        /**\n         * Get list of card types for country\n         * @param {String} countryId\n         * @returns {*}\n         */\n        getCountrySpecificCardTypes: function (countryId) {\n            if (typeof this.config.countrySpecificCardTypes[countryId] !== 'undefined') {\n                return this.config.countrySpecificCardTypes[countryId];\n            }\n\n            return false;\n        }\n    };\n});\n","PayPal_Braintree/js/braintree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/*global define*/\ndefine([\n    'jquery',\n    'uiComponent',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/lib/view/utils/dom-observer',\n    'mage/translate',\n    'PayPal_Braintree/js/validator',\n    'braintree',\n    'braintreeHostedFields'\n], function ($, Class, alert, domObserver, $t, validator, client, hostedFields) {\n    'use strict';\n\n    return Class.extend({\n\n        defaults: {\n            $selector: null,\n            selector: 'edit_form',\n            container: 'payment_form_braintree',\n            active: false,\n            scriptLoaded: false,\n            braintree: null,\n            selectedCardType: null,\n            imports: {\n                onActiveChange: 'active'\n            },\n            hostedFieldsInstance: null\n        },\n\n        /**\n         * Set list of observable attributes\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            var self = this;\n\n            validator.setConfig(this);\n\n            self.$selector = $('#' + self.selector);\n            this._super()\n                .observe([\n                    'active',\n                    'scriptLoaded',\n                    'selectedCardType'\n                ]);\n\n            // re-init payment method events\n            self.$selector.off('changePaymentMethod.' + this.code)\n                .on('changePaymentMethod.' + this.code, this.changePaymentMethod.bind(this));\n\n            // listen block changes\n            domObserver.get('#' + self.container, function () {\n                if (self.scriptLoaded()) {\n                    self.$selector.off('submit');\n                    self.initBraintree();\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * Enable/disable current payment method\n         * @param {Object} event\n         * @param {String} method\n         * @returns {exports.changePaymentMethod}\n         */\n        changePaymentMethod: function (event, method) {\n            this.active(method === this.code);\n            return this;\n        },\n\n        /**\n         * Triggered when payment changed\n         * @param {Boolean} isActive\n         */\n        onActiveChange: function (isActive) {\n            if (!isActive) {\n                this.$selector.off('submitOrder.braintree');\n                this.$selector.on('submitOrder', function () {\n                    $('#payment_form_braintree').find('[type=\"submit\"]').trigger('click');\n                    $('#edit_form').trigger('realOrder');\n                });\n\n                return;\n            }\n            this.disableEventListeners();\n\n            if (typeof window.order !== 'undefined') {\n                window.order.addExcludedPaymentMethod(this.code);\n            }\n\n            if (!this.clientToken) {\n                this.error($.mage.__('This payment is not available'));\n\n                return;\n            }\n\n            this.enableEventListeners();\n\n            if (!this.scriptLoaded()) {\n                this.initBraintree();\n            }\n        },\n\n        /**\n         * Setup Braintree SDK\n         */\n        initBraintree: function () {\n            var self = this;\n            this.scriptLoaded(true);\n\n            self.disableEventListeners();\n\n            try {\n                $('body').trigger('processStart');\n\n                client.create({\n                    authorization: self.clientToken\n                }, function (clientErr, clientInstance) {\n                    if (clientErr) {\n                        console.error('Error!', clientErr);\n                        return self.error(response.clientErr);\n                    }\n\n                    hostedFields.create({\n                        client: clientInstance,\n                        fields: self.getHostedFields()\n                    }, function (createErr, hostedFieldsInstance) {\n                        if (createErr) {\n                            self.error($t(createErr));\n                            console.error('Error!', createErr);\n                            return;\n                        }\n\n                        self.hostedFieldsInstance = hostedFieldsInstance;\n                        self.enableEventListeners();\n\n                        $('body').trigger('processStop');\n                    }.bind(this));\n                }.bind(this));\n            } catch (e) {\n                $('body').trigger('processStop');\n                self.error(e.message);\n                console.log(e);\n            }\n        },\n\n        /**\n         * Get hosted fields configuration\n         * @returns {Object}\n         */\n        getHostedFields: function () {\n            var self = this,\n                fields = {\n                    number: {\n                        selector: self.getSelector('cc_number'),\n                        placeholder: $t('4111 1111 1111 1111')\n                    },\n                    expirationMonth: {\n                        selector: self.getSelector('cc_exp_month'),\n                        placeholder: $t('MM')\n                    },\n                    expirationYear: {\n                        selector: self.getSelector('cc_exp_year'),\n                        placeholder: $t('YY')\n                    }\n                };\n\n            if (self.useCvv) {\n                fields.cvv = {\n                    selector: self.getSelector('cc_cid'),\n                    placeholder: $t('123')\n                };\n            }\n\n            return fields;\n        },\n\n        /**\n         * Show alert message\n         * @param {String} message\n         */\n        error: function (message) {\n            alert({\n                content: message\n            });\n        },\n\n        /**\n         * Enable form event listeners\n         */\n        enableEventListeners: function () {\n            this.$selector.on('submitOrder.braintree', this.submitOrder.bind(this));\n        },\n\n        /**\n         * Disable form event listeners\n         */\n        disableEventListeners: function () {\n            this.$selector.off('submitOrder');\n            this.$selector.off('submit');\n        },\n\n        /**\n         * Store payment details\n         * @param {String} nonce\n         */\n        setPaymentDetails: function (nonce) {\n            var $container = $('#' + this.container);\n\n            $container.find('[name=\"payment[payment_method_nonce]\"]').val(nonce);\n        },\n\n        /**\n         * Trigger order submit\n         */\n        submitOrder: function () {\n            this.$selector.validate().form();\n            this.$selector.trigger('afterValidate.beforeSubmit');\n            $('body').trigger('processStop');\n\n            // validate parent form\n            if (this.$selector.validate().errorList.length) {\n                return false;\n            }\n\n            $('body').trigger('processStart');\n            this.tokenizeHostedFields();\n        },\n\n        /**\n         * Place order\n         */\n        placeOrder: function () {\n            $('#' + this.selector).trigger('realOrder');\n        },\n\n        /**\n         * Get list of currently available card types\n         * @returns {Array}\n         */\n        getCcAvailableTypes: function () {\n            var types = [],\n                $options = $(this.getSelector('cc_type')).find('option');\n\n            $.map($options, function (option) {\n                types.push($(option).val());\n            });\n\n            return types;\n        },\n\n        /**\n         * Get jQuery selector\n         * @param {String} field\n         * @returns {String}\n         */\n        getSelector: function (field) {\n            return '#' + this.code + '_' + field;\n        },\n\n        tokenizeHostedFields: function () {\n            this.hostedFieldsInstance.tokenize({\n                vault: false // vault or no?\n            }, function (tokenizeErr, payload) {\n                if (tokenizeErr) {\n                    $('body').trigger('processStop');\n                    switch (tokenizeErr.code) {\n                        case 'HOSTED_FIELDS_FIELDS_EMPTY':\n                            // occurs when none of the fields are filled in\n                            this.error($t('Please enter a card number, expiration date and CVV'));\n                            break;\n                        case 'HOSTED_FIELDS_FIELDS_INVALID':\n                            // occurs when certain fields do not pass client side validation\n                            this.error($t('Please correct the problems with the Credit Card fields.'));\n                            console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\n                            // occurs when:\n                            //   * the client token used for client authorization was generated\n                            //     with a customer ID and the fail on duplicate payment method\n                            //     option is set to true\n                            //   * the card being tokenized has previously been vaulted (with any customer)\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\n                            this.error($t('The payment method used, already exists in the user\\'s vault. Please use the vault option instead.'));\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\n                            // occurs when:\n                            //   * the client token used for client authorization was generated\n                            //     with a customer ID and the verify card option is set to true\n                            //     and you have credit card verification turned on in the Braintree\n                            //     control panel\n                            //   * the cvv does not pass verfication (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\n                            this.error($t('CVV did not pass verification'));\n                            break;\n                        case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\n                            // occurs for any other tokenization error on the server\n                            this.error($t('There was an issue tokenizing the card. Please check the card is valid.'));\n                            console.error('Tokenization failed server side. Is the card valid?');\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\n                            // occurs when the Braintree gateway cannot be contacted\n                            this.error($t('There was an error connecting to Braintree. Please try again.'));\n                            break;\n                        default:\n                            this.error($t('There was an issue processing the payment. Please try again.'));\n                            console.error('Braintree error', tokenizeErr);\n                            break;\n                    }\n                } else {\n                    this.setPaymentDetails(payload.nonce);\n                    $('#' + this.container).find('[type=\"submit\"]').trigger('click');\n                }\n            }.bind(this));\n        }\n    });\n});\n","PayPal_Braintree/js/paypalButtonPreview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'jquery',\n    'braintree',\n    'braintreePayPalCheckout',\n    'domReady!'\n], function (_, $, braintree, paypalCheckout) {\n    'use strict';\n    let buttonIds = [];\n\n    return {\n        events: {\n            onClick: null\n        },\n\n        /**\n         * @param token\n         * @param currency\n         * @param env\n         * @param local\n         */\n        init: function (token, currency, env, local) {\n            buttonIds = [];\n            $('.action-braintree-paypal-logo').each(function () {\n                if (!$(this).hasClass(\"button-loaded\")) {\n                    $(this).addClass('button-loaded');\n                    buttonIds.push($(this).attr('id'));\n                }\n            });\n\n            if (buttonIds.length > 0) {\n                this.loadSDK(token, currency, env, local);\n            }\n        },\n\n        /**\n         * Load Braintree PayPal SDK\n         * @param token\n         * @param currency\n         * @param env\n         * @param local\n         */\n        loadSDK: function (token, currency, env, local) {\n            braintree.create({\n                authorization: token\n            }, function (clientErr, clientInstance) {\n                if (clientErr) {\n                    console.error('paypalCheckout error', clientErr);\n                    return this.showError(\"PayPal Checkout could not be initialized. Please contact the store owner.\");\n                }\n                paypalCheckout.create({\n                    client: clientInstance\n                }, function (err, paypalCheckoutInstance) {\n                    if (typeof paypal !== 'undefined' ) {\n                        this.renderPayPalButtons(buttonIds);\n                        this.renderPayPalMessages();\n                    } else {\n                        var configSDK = {\n                            components: 'buttons,messages,funding-eligibility',\n                            \"enable-funding\": \"paylater\",\n                            currency: currency\n                        };\n                        if (env === 'sandbox' && (local !== '' || local !== 'undefined')) {\n                            configSDK[\"buyer-country\"] = local;\n                        }\n                        paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\n                            this.renderPayPalButtons(buttonIds);\n                            this.renderPayPalMessages();\n                        }.bind(this));\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        /**\n         * Render PayPal buttons\n         * @param ids\n         */\n        renderPayPalButtons: function (ids) {\n            _.each(ids, function (id) {\n                this.payPalButton(id);\n            }.bind(this));\n        },\n\n        /**\n         * Render PayPal messages\n         */\n        renderPayPalMessages: function () {\n            $('.action-braintree-paypal-message').each(function () {\n                let messages = paypal.Messages({\n                    amount: $(this).data('pp-amount'),\n                    pageType: $(this).data('pp-type'),\n                    style: {\n                        layout: $(this).data('messaging-layout'),\n                        text: {\n                            color:   $(this).data('messaging-text-color')\n                        },\n                        logo: {\n                            type: $(this).data('messaging-logo'),\n                            position: $(this).data('messaging-logo-position')\n                        }\n                    }\n                });\n\n                if ($('#' + $(this).attr('id')).length && $(this).data('messaging-show')) {\n                    messages.render('#' + $(this).attr('id'));\n                }\n            });\n        },\n\n        /**\n         * @param id\n         */\n        payPalButton: function (id) {\n            let data = $('#' + id);\n            let style = {\n                color: data.data('color'),\n                shape: data.data('shape'),\n                size: data.data('size'),\n                label: data.data('label')\n            };\n\n            if (data.data('fundingicons')) {\n                style.fundingicons = data.data('fundingicons');\n            }\n\n            // Render\n            var button = paypal.Buttons({\n                fundingSource: data.data('funding'),\n                style: style,\n\n                onInit: function (data, actions) {\n                    actions.disable();\n                }\n            });\n            if (!button.isEligible()) {\n                console.log('PayPal button is not elligible');\n                data.parent().remove();\n                return;\n            }\n            if ($('#' + data.attr('id')).length && data.data('show')) {\n                button.render('#' + data.attr('id'));\n            }\n        },\n    }\n});\n","PayPal_Braintree/js/paypalStylingPreview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nrequire([\n    'underscore',\n    'jquery',\n    'domReady!'\n], function (_, $) {\n    'use strict';\n    let buttonIds = [], currentButtonId = '';\n    let location = '', buttonType = '', buttonShow = '', buttonLabel = '', buttonColor = '', buttonShape = '', buttonSize = '';\n    let messagingShow = '', messagingLayout = '', messagingLogo = '', messagingLogoPosition = '', messagingTextColor = '';\n\n    function getCurrentLocationAndButtonType()\n    {\n        location = $('.payment-location').val();\n        buttonType = $('.' + location + '-button-type').val();\n    }\n\n    $(document).ready(function () {\n        getCurrentLocationAndButtonType();\n\n        $('.payment-location').on('change', function (customEvent) {\n            location = $(this).val();\n            buttonType = $('.' + location + '-button-type').val();\n            buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n            buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n            buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n            buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n            buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n            updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n\n            // render pay later messages when location changed\n            messagingShow = $('.' + location + '-messaging-show').val();\n            messagingLayout = $('.' + location + '-messaging-layout').val();\n            messagingLogo = $('.' + location + '-messaging-logo').val();\n            messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n            messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n            renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n            customEvent.stopImmediatePropagation();\n        });\n\n        $(\"select\").change(function () {\n            $(document).on('change', '.' + location + '-button-type', function (customEvent) {\n                buttonType = $(this).val();\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n                buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-' + buttonType + '-show', function (customEvent) {\n                buttonShow = $(this).val();\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n                buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n\n            $(document).on('change', '.' + location + '-' + buttonType + '-label', function (customEvent) {\n                buttonLabel = $(this).val();\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n                buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-' + buttonType + '-color', function (customEvent) {\n                buttonColor = $(this).val();\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n                buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-' + buttonType + '-shape', function (customEvent) {\n                buttonShape = $(this).val();\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n                buttonSize = $('.' + location + '-' + buttonType + '-size').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-' + buttonType + '-size', function (customEvent) {\n                buttonSize = $(this).val();\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\n\n                updatePayPalButtonStyling(location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-messaging-show', function (customEvent) {\n                messagingShow = $(this).val();\n                messagingLayout = $('.' + location + '-messaging-layout').val();\n                messagingLogo = $('.' + location + '-messaging-logo').val();\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n                renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-messaging-layout', function (customEvent) {\n                messagingShow = $('.' + location + '-messaging-show').val();\n                messagingLayout = $(this).val();\n                messagingLogo = $('.' + location + '-messaging-logo').val();\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n                renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-messaging-logo', function (customEvent) {\n                messagingShow = $('.' + location + '-messaging-show').val();\n                messagingLayout = $('.' + location + '-messaging-layout').val();\n                messagingLogo = $(this).val();\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n                renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-messaging-logo-position', function (customEvent) {\n                messagingShow = $('.' + location + '-messaging-show').val();\n                messagingLayout = $('.' + location + '-messaging-layout').val();\n                messagingLogo = $('.' + location + '-messaging-logo').val();\n                messagingLogoPosition = $(this).val();\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n                renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n                customEvent.stopImmediatePropagation();\n            });\n\n            $(document).on('change', '.' + location + '-messaging-text-color', function (customEvent) {\n                messagingShow = $('.' + location + '-messaging-show').val();\n                messagingLayout = $('.' + location + '-messaging-layout').val();\n                messagingLogo = $('.' + location + '-messaging-logo').val();\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n                messagingTextColor = $(this).val();\n\n                renderPayLaterMessages(location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor);\n                customEvent.stopImmediatePropagation();\n            });\n        });\n    });\n\n    /**\n     * Update PayPal, Credit and Pay Later button styling if applicable\n     * @param location\n     * @param buttonType\n     * @param buttonShow\n     * @param buttonLabel\n     * @param buttonColor\n     * @param buttonShape\n     * @param buttonSize\n     */\n    let updatePayPalButtonStyling = function (location, buttonType, buttonShow, buttonLabel, buttonColor, buttonShape, buttonSize) {\n        $('.action-braintree-paypal-logo').each(function () {\n            if ($.inArray($(this).attr('id'), buttonIds) === -1) {\n                buttonIds.push($(this).attr('id'));\n            }\n        });\n\n        buttonIds.each(function (id) {\n            let result = id.startsWith(buttonType);\n            if (result === true) {\n                currentButtonId = id;\n            }\n        });\n\n        let currentButtonElement = $('#' + currentButtonId);\n        if (currentButtonElement.length) {\n            let style = {\n                color: buttonColor,\n                shape: buttonShape,\n                size: buttonSize,\n                label: buttonLabel\n            };\n            style.fundingicons = true;\n            let fundingSource = buttonType;\n\n            // Render\n            let button = paypal.Buttons({\n                fundingSource: fundingSource,\n                style: style,\n\n                onInit: function (data, actions) {\n                    actions.disable();\n                }\n            });\n            if (!button.isEligible()) {\n                console.log('PayPal button is not eligible');\n                currentButtonElement.parent().remove();\n                return;\n            }\n            if (currentButtonElement.length) {\n                currentButtonElement.empty();\n                if (buttonShow === '1') {\n                    button.render('#' + currentButtonElement.attr('id'));\n                }\n            }\n        }\n    };\n\n    /**\n     * Render and update Pay Later messaging style\n     * @param location\n     * @param messagingShow\n     * @param messagingLayout\n     * @param messagingLogo\n     * @param messagingLogoPosition\n     * @param messagingTextColor\n     */\n    let renderPayLaterMessages = function (location, messagingShow, messagingLayout, messagingLogo, messagingLogoPosition, messagingTextColor) {\n        $('.action-braintree-paypal-message').each(function () {\n            let messageElement = $('#' + $(this).attr('id'));\n\n            let payLaterMessageStyle = {\n                layout: messagingLayout,\n                text: {\n                    color: messagingTextColor\n                },\n                logo: {\n                    type: messagingLogo,\n                    position: messagingLogoPosition\n                }\n            };\n\n            let messageElementId = $(messageElement).attr('id');\n            let messageAmount = $(messageElement).data('pp-amount');\n            let parentElementId = messageElement.closest('tr').attr('id');\n\n            let messages = paypal.Messages({\n                amount: $(messageElement).data('pp-amount'),\n                pageType: location,\n                style: payLaterMessageStyle\n            });\n\n            if (messageElement.length) {\n                if (messagingShow === '1') {\n                    messageElement.remove();\n                    $('#' + parentElementId + ' td.value').append('<div class=\"action-braintree-paypal-message\" id=\"' + messageElementId + '\" data-pp-amount=\"' + messageAmount + '\" data-pp-type=\"' + location + '\" data-messaging-show=\"' + messagingShow + '\" data-messaging-layout=\"' + messagingLayout + '\" data-messaging-logo=\"' + messagingLogo + '\" data-messaging-logo-position=\"' + messagingLogoPosition + '\" data-messaging-text-color=\"' + messagingTextColor + '\"></div>');\n                    messages.render('#' + messageElementId);\n                } else {\n                    messageElement.hide();\n                }\n            }\n        });\n    };\n});\n","PayPal_Braintree/js/system.js":"require(['jquery', 'Magento_Ui/js/modal/alert', 'mage/translate', 'domReady!'], function ($, alert, $t) {\n    function disablePayLaterMessages()\n    {\n        let merchantCountry = $('[data-ui-id=\"adminhtml-system-config-field-country-0-select-groups-account-fields-merchant-country-value\"]').val();\n        let payPalCredit = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-fields-braintree-paypal-credit-active-value\"]').val();\n        let cart = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-cart-fields-message-cart-enable-value\"]');\n        let product = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-checkout-fields-message-checkout-enable-value\"]')\n        let checkout = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-productpage-fields-message-productpage-enable-value\"]')\n        let allowedCountries = ['GB', 'FR', 'US', 'DE', 'AU'];\n\n        if($.inArray(merchantCountry, allowedCountries) === -1 || payPalCredit === 1){\n            //hide pay later message\n            cart.val(0).attr('readonly',true).click();\n            product.val(0).attr('readonly',true).click();\n            checkout.val(0).attr('readonly',true).click();\n        }\n        if (merchantCountry) {\n            if ( merchantCountry === 'GB') {\n                merchantCountry = 'UK'\n            }\n            cart.next().find('a').attr('href', cart.next().find('a').attr('href') + merchantCountry.toLowerCase());\n            product.next().find('a').attr('href', product.next().find('a').attr('href') + merchantCountry.toLowerCase());\n            checkout.next().find('a').attr('href', checkout.next().find('a').attr('href') + merchantCountry.toLowerCase());\n        }\n\n    }\n\n    window.braintreeValidator = function (endpoint, environmentId, skip = false) {\n        environmentId = $('[data-ui-id=\"' + environmentId + '\"]').val();\n\n        let merchantId = '', publicId = '', privateId = '';\n\n        if (environmentId === 'sandbox') {\n            merchantId = $('[data-ui-id=\"text-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-merchant-id-value\"]').val();\n            publicId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-public-key-value\"]').val();\n            privateId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-private-key-value\"]').val();\n        } else {\n            merchantId = $('[data-ui-id=\"text-groups-braintree-section-groups-braintree-groups-braintree-required-fields-merchant-id-value\"]').val();\n            publicId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-public-key-value\"]').val();\n            privateId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-private-key-value\"]').val();\n        }\n\n        /* Remove previous success message if present */\n        if ($(\".braintree-credentials-success-message\")) {\n            $(\".braintree-credentials-success-message\").remove();\n        }\n\n        /* Basic field validation */\n        var errors = [];\n\n        if (!environmentId || environmentId !== 'sandbox' && environmentId !== 'production') {\n            errors.push($t(\"Please select an Environment\"));\n        }\n\n        if (!merchantId) {\n            errors.push($t(\"Please enter a Merchant ID\"));\n        }\n\n        if (!publicId) {\n            errors.push($t('Please enter a Public Key'));\n        }\n\n        if (!privateId) {\n            errors.push($t('Please enter a Private Key'));\n        }\n\n        if (errors.length > 0) {\n            alert({\n                title: $t('Braintree Credential Validation Failed'),\n                content:  errors.join('<br />')\n            });\n            return false;\n        }\n\n        $(this).text($t(\"We're validating your credentials...\")).attr('disabled', true);\n\n        var self = this;\n        $.ajax({\n            type: 'POST',\n            url: endpoint,\n            data: {\n                environment: environmentId,\n                merchant_id: merchantId,\n                public_key: publicId,\n                private_key: privateId\n            },\n            showLoader: true,\n            success: function (result) {\n                if (result.success === 'true') {\n                    if (skip === true) {\n                        $('<div class=\"message message-success braintree-credentials-success-message\">' + $t(\"Your credentials are valid.\") + '</div>').insertAfter($('.paypal-styling-buttons'));\n                    } else {\n                        $('<div class=\"message message-success braintree-credentials-success-message\">' + $t(\"Your credentials are valid.\") + '</div>').insertAfter(self);\n                    }\n                } else {\n                    alert({\n                        title: $t('Braintree Credential Validation Failed'),\n                        content: $t('Your Braintree Credentials could not be validated. Please ensure you have selected the correct environment and entered a valid Merchant ID, Public Key and Private Key.')\n                    });\n                }\n            }\n        }).always(function () {\n            $(self).text($t(\"Validate Credentials\")).attr('disabled', false);\n        });\n    };\n\n    window.applyForAll = function () {\n        let buttonShowStatus = '', buttonLabel = '', buttonColor = '', buttonShape = '', buttonSize = '';\n        let locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\n\n        let location = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-fields-payment-location-value\"]').val();\n        let buttonType = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-fields-paypal-location-' + location + '-button-type-value\"]').val();\n        buttonShowStatus = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-show-value\"]').val();\n        buttonLabel = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-label-value\"]').val();\n        buttonColor = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-color-value\"]').val();\n        buttonShape = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-shape-value\"]').val();\n        buttonSize = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-size-value\"]').val();\n\n        // pay later messaging styling field values\n        let messagingShow = $('.' + location + '-messaging-show').val();\n        let messagingLayout = $('.' + location + '-messaging-layout').val();\n        let messagingLogo = $('.' + location + '-messaging-logo').val();\n        let messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\n        let messagingTextColor = $('.' + location + '-messaging-text-color').val();\n\n        locations.each(function (loc) {\n            buttonTypes.each(function (type) {\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').val(buttonShowStatus).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').val(buttonLabel).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').val(buttonColor).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').val(buttonShape).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-size-value\"]').val(buttonSize).click();\n            });\n\n            // apply pay later messaging styling for all locations\n            $('.' + loc + '-messaging-show').val(messagingShow).click();\n            $('.' + loc + '-messaging-layout').val(messagingLayout).click();\n            $('.' + loc + '-messaging-logo').val(messagingLogo).click();\n            $('.' + loc + '-messaging-logo-position').val(messagingLogoPosition).click();\n            $('.' + loc + '-messaging-text-color').val(messagingTextColor).click();\n        });\n        $('#save').click();\n    };\n\n    window.resetAll = function () {\n        let locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\n        let buttonShowStatus = 1, buttonLabel = 'paypal', buttonColor = 'gold', buttonShape = 'rect', buttonSize = 'responsive';\n\n        locations.each(function (loc) {\n            buttonTypes.each(function (type) {\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').val(buttonShowStatus).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').val(buttonLabel).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').val(buttonColor).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').val(buttonShape).click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-size-value\"]').val(buttonSize).click();\n            });\n\n            // reset pay later messaging styling to recommended defaults\n            $('.' + loc + '-messaging-show').val(1).click();\n            $('.' + loc + '-messaging-layout').val('text').click();\n            $('.' + loc + '-messaging-logo').val('inline').click();\n            $('.' + loc + '-messaging-logo-position').val('left').click();\n            $('.' + loc + '-messaging-text-color').val('black').click();\n        });\n        $('#save').click();\n    };\n\n    window.applyButton = function () {\n        let locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\n\n        locations.each(function (loc) {\n            buttonTypes.each(function (type) {\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').click();\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-size-value\"]').click();\n            });\n\n            // apply pay later messaging styling to current location\n            $('.' + loc + '-messaging-show').click();\n            $('.' + loc + '-messaging-layout').click();\n            $('.' + loc + '-messaging-logo').click();\n            $('.' + loc + '-messaging-logo-position').click();\n            $('.' + loc + '-messaging-text-color').click();\n        });\n        $('#save').click();\n    };\n\n    var locations = ['checkout', 'productpage', 'cart'];\n    hidePaypalSections();\n    $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-fields-payment-location-value\"]').change(function () {\n        hidePaypalSections();\n    });\n    locations.each(function (loc) {\n        $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-'+loc+'-fields-paypal-location-'+loc+'-button-type-value\"]').change(function () {\n            hidePaypalSections();\n        });\n    });\n\n    function hidePaypalSections() {\n        var mainLocation, merchantCountryIndex, mainType;\n        var locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\n        mainLocation = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-fields-payment-location-value\"]');\n        if (mainLocation.length < 1) {\n            return false;\n        }\n        merchantCountryIndex = mainLocation.attr('id').split('_')[1];\n        mainType = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-'+mainLocation.val()+'-fields-paypal-location-'+mainLocation.val()+'-button-type-value\"]');\n        locations.each(function (loc) {\n            $('#row_payment_' + merchantCountryIndex + '_braintree_section_braintree_braintree_paypal_styling_button_' + loc).hide();\n            buttonTypes.each(function (type) {\n                $('#row_payment_'+merchantCountryIndex+'_braintree_section_braintree_braintree_paypal_styling_button_'+loc+'_button_location_'+loc+'_type_' + type).hide();\n            });\n        });\n        $('#row_payment_'+merchantCountryIndex+'_braintree_section_braintree_braintree_paypal_styling_button_'+mainLocation.val()+'_button_location_'+mainLocation.val()+'_type_' + mainType.val()).show();\n        $('#row_payment_'+merchantCountryIndex+'_braintree_section_braintree_braintree_paypal_styling_button_' + mainLocation.val()).show();\n    }\n    disablePayLaterMessages();\n});\n","PayPal_Braintree/js/vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/*global define*/\ndefine([\n    'jquery',\n    'uiComponent',\n    'Magento_Ui/js/modal/alert'\n], function ($, Class, alert) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n            $selector: null,\n            selector: 'edit_form',\n            $container: null\n        },\n\n        /**\n         * Set list of observable attributes\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            var self = this;\n\n            self.$selector = $('#' + self.selector);\n            self.$container =  $('#' + self.container);\n            self.$selector.on(\n                'setVaultNotActive.' + self.getCode(),\n                function () {\n                    self.$selector.off('submitOrder.' + self.getCode());\n                }\n            );\n            self._super();\n\n            self.initEventHandlers();\n\n            return self;\n        },\n\n        /**\n         * Get payment code\n         * @returns {String}\n         */\n        getCode: function () {\n            return this.code;\n        },\n\n        /**\n         * Init event handlers\n         */\n        initEventHandlers: function () {\n            $(this.$container).find('[name=\"payment[token_switcher]\"]')\n                .on('click', this.selectPaymentMethod.bind(this));\n        },\n\n        /**\n         * Select current payment token\n         */\n        selectPaymentMethod: function () {\n            this.disableEventListeners();\n            this.enableEventListeners();\n        },\n\n        /**\n         * Enable form event listeners\n         */\n        enableEventListeners: function () {\n            this.$selector.on('submitOrder.' + this.getCode(), this.submitOrder.bind(this));\n        },\n\n        /**\n         * Disable form event listeners\n         */\n        disableEventListeners: function () {\n            this.$selector.off('submitOrder');\n        },\n\n        /**\n         * Pre submit for order\n         * @returns {Boolean}\n         */\n        submitOrder: function () {\n            this.$selector.validate().form();\n            this.$selector.trigger('afterValidate.beforeSubmit');\n            $('body').trigger('processStop');\n\n            // validate parent form\n            if (this.$selector.validate().errorList.length) {\n                return false;\n            }\n            this.getPaymentMethodNonce();\n        },\n\n        /**\n         * Place order\n         */\n        placeOrder: function () {\n            this.$selector.trigger('realOrder');\n        },\n\n        /**\n         * Send request to get payment method nonce\n         */\n        getPaymentMethodNonce: function () {\n            var self = this;\n\n            $('body').trigger('processStart');\n\n            $.getJSON(self.nonceUrl, {\n                'public_hash': self.publicHash\n            }).done(function (response) {\n                self.setPaymentDetails(response.paymentMethodNonce);\n                self.placeOrder();\n            }).fail(function (response) {\n                var failed = JSON.parse(response.responseText);\n\n                self.error(failed.message);\n            }).always(function () {\n                $('body').trigger('processStop');\n            });\n        },\n\n        /**\n         * Store payment details\n         * @param {String} nonce\n         */\n        setPaymentDetails: function (nonce) {\n            this.createPublicHashSelector();\n\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\n            this.$selector.find('[name=\"payment[payment_method_nonce]\"]').val(nonce).prop('disabled', false);\n        },\n\n        /**\n         * Creates public hash selector\n         */\n        createPublicHashSelector: function () {\n            var $input;\n\n            if (this.$selector.find('[name=\"payment[payment_method_nonce]\"]').length === 0) {\n                $input = $('<input>').attr(\n                    {\n                        type: 'hidden',\n                        id: this.getNonceSelectorName(),\n                        name: 'payment[payment_method_nonce]'\n                    }\n                );\n\n                $input.appendTo(this.$selector);\n                $input.prop('disabled', false);\n            }\n        },\n\n        /**\n         * Show alert message\n         * @param {String} message\n         */\n        error: function (message) {\n            alert({\n                content: message\n            });\n        },\n\n        /**\n         * Get selector name for nonce input\n         * @returns {String}\n         */\n        getNonceSelectorName: function () {\n            return 'nonce_' + this.getCode();\n        }\n    });\n});\n","PayPal_Braintree/js/virtual.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/*global define*/\ndefine([\n    'jquery',\n    'uiComponent',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/lib/view/utils/dom-observer',\n    'mage/translate',\n    'PayPal_Braintree/js/validator',\n    'braintree',\n    'braintreeHostedFields'\n], function ($, Class, alert, domObserver, $t, validator, client, hostedFields) {\n    'use strict';\n\n    return Class.extend({\n\n        defaults: {\n            $container: null,\n            container: 'payment_form_braintree',\n            braintree: null,\n            selectedCardType: null,\n            hostedFieldsInstance: null\n        },\n\n        /**\n         * Set list of observable attributes\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            var self = this;\n\n            validator.setConfig(this);\n\n            self.$container = $('#' + self.container);\n            this._super()\n                .observe([\n                    'selectedCardType'\n                ]);\n\n            domObserver.get('#' + self.container, function () {\n                self.initBraintree();\n            });\n\n            return this;\n        },\n\n        /**\n         * Setup Braintree SDK\n         */\n        initBraintree: function () {\n            var self = this;\n\n            try {\n                $('body').trigger('processStart');\n\n                client.create({\n                    authorization: self.clientToken\n                }, function (clientErr, clientInstance) {\n                    if (clientErr) {\n                        alert({\n                            content: $t('Please configure your Braintree Payments account in order to use the virtual terminal.')\n                        });\n                        console.error('Error!', clientErr);\n                        return self.error(response.clientErr);\n                    }\n\n                    hostedFields.create({\n                        client: clientInstance,\n                        fields: self.getHostedFields()\n                    }, function (createErr, hostedFieldsInstance) {\n                        if (createErr) {\n                            self.error($t(createErr));\n                            console.error('Error!', createErr);\n                            return;\n                        }\n\n                        self.hostedFieldsInstance = hostedFieldsInstance;\n                        self.$container.on('takePayment', self.submitOrder.bind(self));\n\n                        $('body').trigger('processStop');\n                    }.bind(this));\n                }.bind(this));\n            } catch (e) {\n                $('body').trigger('processStop');\n                self.error(e.message);\n                console.log(e);\n            }\n        },\n\n        /**\n         * Get hosted fields configuration\n         * @returns {Object}\n         */\n        getHostedFields: function () {\n            return {\n                number: {\n                    selector: this.getSelector('cc_number'),\n                    placeholder: $t('4111 1111 1111 1111')\n                },\n                expirationMonth: {\n                    selector: this.getSelector('cc_exp_month'),\n                    placeholder: $t('MM')\n                },\n                expirationYear: {\n                    selector: this.getSelector('cc_exp_year'),\n                    placeholder: $t('YY')\n                },\n                cvv: {\n                    selector: this.getSelector('cc_cid'),\n                    placeholder: $t('123')\n                }\n            };\n        },\n\n        /**\n         * Show alert message\n         * @param {String} message\n         */\n        error: function (message) {\n            alert({\n                content: message\n            });\n        },\n\n        /**\n         * Store payment details\n         * @param {String} nonce\n         */\n        setPaymentDetails: function (nonce) {\n            var $container = $('#' + this.container);\n            $container.find('[name=\"payment_method_nonce\"]').val(nonce);\n        },\n\n        /**\n         * Trigger order submit\n         */\n        submitOrder: function (event) {\n            event.preventDefault();\n\n            this.$container.validate().form();\n            this.$container.trigger('afterValidate.beforeSubmit');\n            $('body').trigger('processStop');\n\n            // validate parent form\n            if (this.$container.validate().errorList.length) {\n                return false;\n            }\n\n            $('body').trigger('processStart');\n            this.tokenizeHostedFields();\n        },\n\n        /**\n         * Place order\n         */\n        placeOrder: function () {\n            this.$container.submit();\n        },\n\n        /**\n         * Get list of currently available card types\n         * @returns {Array}\n         */\n        getCcAvailableTypes: function () {\n            var types = [],\n                $options = $(this.getSelector('cc_type')).find('option');\n\n            $.map($options, function (option) {\n                types.push($(option).val());\n            });\n\n            return types;\n        },\n\n        /**\n         * Get jQuery selector\n         * @param {String} field\n         * @returns {String}\n         */\n        getSelector: function (field) {\n            return '#' + this.code + '_' + field;\n        },\n\n        tokenizeHostedFields: function () {\n            this.hostedFieldsInstance.tokenize({\n                vault: false // vault or no?\n            }, function (tokenizeErr, payload) {\n                if (tokenizeErr) {\n                    $('body').trigger('processStop');\n                    switch (tokenizeErr.code) {\n                        case 'HOSTED_FIELDS_FIELDS_EMPTY':\n                            // occurs when none of the fields are filled in\n                            this.error($t('Please enter a card number, expiration date and CVV'));\n                            break;\n                        case 'HOSTED_FIELDS_FIELDS_INVALID':\n                            // occurs when certain fields do not pass client side validation\n                            this.error($t('Please correct the problems with the Credit Card fields.'));\n                            console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\n                            // occurs when:\n                            //   * the client token used for client authorization was generated\n                            //     with a customer ID and the fail on duplicate payment method\n                            //     option is set to true\n                            //   * the card being tokenized has previously been vaulted (with any customer)\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\n                            this.error($t('The payment method used, already exists in the user\\'s vault. Please use the vault option instead.'));\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\n                            // occurs when:\n                            //   * the client token used for client authorization was generated\n                            //     with a customer ID and the verify card option is set to true\n                            //     and you have credit card verification turned on in the Braintree\n                            //     control panel\n                            //   * the cvv does not pass verfication (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\n                            this.error($t('CVV did not pass verification'));\n                            break;\n                        case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\n                            // occurs for any other tokenization error on the server\n                            this.error($t('There was an issue tokenizing the card. Please check the card is valid.'));\n                            console.error('Tokenization failed server side. Is the card valid?');\n                            break;\n                        case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\n                            // occurs when the Braintree gateway cannot be contacted\n                            this.error($t('There was an error connecting to Braintree. Please try again.'));\n                            break;\n                        default:\n                            this.error($t('There was an issue processing the payment. Please try again.'));\n                            console.error('Braintree error', tokenizeErr);\n                            break;\n                    }\n                } else {\n                    this.setPaymentDetails(payload.nonce);\n                    this.placeOrder();\n                }\n            }.bind(this));\n        }\n    });\n});\n","PayPal_Braintree/js/grid/provider.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/grid/provider'\n], function (_, Provider) {\n    'use strict';\n\n    return Provider.extend({\n\n        /**\n         * Reload grid\n         * @returns {exports}\n         */\n        reload: function () {\n            if (this.hasFilters()) {\n                this._super();\n\n                return this;\n            }\n\n            this.trigger('reload');\n\n            this.onReload({\n                items: [],\n                totalRecords: 0\n            });\n\n            return this;\n        },\n\n        /**\n         * Has filters checker\n         * @returns {Boolean}\n         */\n        hasFilters: function () {\n            var params = this.params,\n                filters = params.filters || {};\n\n            return _.keys(filters).length > 1;\n        }\n    });\n});\n","Amasty_Customform/js/form-init.js":"define([\n    'jquery',\n    'jquery-ui-modules/tabs',\n    'jquery/validate'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.amFormInit', {\n        options: {\n            formSelector: '[data-amcform-js=\"multi-page\"]',\n            nextButton: '[data-amcform-js=\"next-button\"]',\n            prevButton: '[data-amcform-js=\"prev-button\"]',\n            pageTitles: '[data-amcform-js=\"page-titles\"]'\n        },\n\n        _create: function () {\n            var self = this;\n\n            // Call initialization for Ajax events\n            $(document).on('amcform-init-multipage', function (e, form) {\n                var $form = form.find('[data-amcform-js=\"multi-page\"]');\n\n                if ($form.length) {\n                    self.initialization($form);\n                }\n            });\n\n            self.initialization(self.element);\n        },\n\n        initialization: function (element) {\n            var self = this,\n                stepsWrap = element.find(self.options.pageTitles);\n\n            $.ui.tabs({active: 0}, element);\n\n            if (stepsWrap.children().length === 1) {\n                stepsWrap.remove();\n            }\n\n            $(self.options.pageTitles).children().each(function (index) {\n                if (index !== 0) {\n                    $(this).addClass('-disabled');\n                }\n            });\n\n            self.nextButtonBehavior();\n            self.prevButtonBehavior();\n            self.navigatePageForm();\n        },\n\n        /**\n         *  Behavior for next button: go to the next page\n         */\n\n        nextButtonBehavior: function () {\n            var self = this;\n\n            $(self.options.nextButton).off().on('click', function () {\n                var pageId = $(this).parents('.amcform-page-wrap').attr('id'),\n                    title = $(this)\n                        .parents(self.options.formSelector)\n                        .find('[href=\"#' + pageId + '\"]')\n                        .parent();\n\n                if ($(this).parents('form').valid()) {\n                    self.checkFormScrolling(this);\n                    title.addClass('-done');\n                    title.removeClass('-error');\n                    title.next().removeClass('-disabled').find('a').trigger('click');\n                } else {\n                    title.addClass('-error');\n                }\n            });\n        },\n\n        /**\n         *  Behavior for prev button: go to the prev page\n         */\n\n        prevButtonBehavior: function () {\n            var self = this;\n\n            $(self.options.prevButton).off().on('click', function () {\n                self.checkFormScrolling(this);\n                var pageId = $(this).parents('.amcform-page-wrap').attr('id'),\n                    title = $(this)\n                        .parents(self.options.formSelector)\n                        .find('[href=\"#' + pageId + '\"]')\n                        .parent();\n                title.prev().find('a').trigger('click');\n            });\n        },\n\n        /**\n         *  Style behavior of page headers\n         */\n\n        navigatePageForm: function () {\n            var self = this;\n\n            $(self.options.pageTitles).find('li').off().on('click', function () {\n                if ($(this).hasClass('-disabled')) {\n                    return\n                }\n\n                if ($(this).hasClass('-done')) {\n                    $(this).removeClass('-done').addClass('-active');\n                }\n\n                if ($(this).prevUntil().hasClass('-active')) {\n                    $(this).prevUntil().removeClass('-active').addClass('-done');\n                }\n\n                self.updatePages(\n                    $(this).parents(self.options.formSelector),\n                    $(this).find('a')\n                );\n            });\n        },\n\n        /**\n         * Fix default scrolling in the browser\n         * @param page - DOM element\n         */\n\n        checkFormScrolling: function (page) {\n            var form = $(page).parents('[data-amcform-js=\"multi-page\"]'),\n                docViewTop = $(window).scrollTop(),\n                elemTop = form.offset().top,\n                isPopup = form.parents('.amform-popup').length;\n\n            if (docViewTop > elemTop && !isPopup) {\n                $('html, body').animate({\n                    scrollTop: (form.offset().top) - 50\n                },0);\n            }\n        },\n\n        /**\n         * Set class for not current pages for ignore jquery validate\n         * @param form\n         * @param pageTitle\n         */\n\n        updatePages: function (form, pageTitle) {\n            form.find('input, textarea').addClass('amcform-hidden-page');\n            form\n                .find(pageTitle.attr('href') + ' input, ' + pageTitle.attr('href') + ' textarea')\n                .removeClass('amcform-hidden-page');\n        }\n    });\n\n    return $.mage.amFormInit;\n});\n","Amasty_Customform/js/form-data.js":"define([\n    \"jquery\",\n    'Amasty_Customform/js/form-builder',\n    'Amasty_Customform/js/form-render',\n    'Amasty_Customform/js/am-google-map'\n], function ($, customFormBuilder) {\n    'use strict';\n\n    $.widget('mage.amformData', {\n        _create: function () {\n            var self = this;\n\n            self.options.formWrapper = $('[data-amcform-js=\"form-builder-wrap\"]');\n            self.options.formEditor = $('[data-amcform-js=\"fb-editor\"]');\n            self.options.addNewPage = $('[data-amcform-js=\"add-new-page\"]');\n            self.options.deletePage = '[data-amcform-js=\"delete-tab\"]';\n\n            self.generateEventsListener();\n\n            self.options.formEditor.customFormBuilder(self.options);\n        },\n\n        /**\n         * Set events listeners on form builder\n         */\n\n        generateEventsListener: function () {\n            var self = this,\n                tabsWrap = '[data-amcform-js=\"tabs-wrap\"]',\n                tab = '[data-amcform-role=\"page-link\"]',\n                tabForKeyboard = tab + ', [data-amcform-role=\"page\"], [data-amcform-js=\"add-new-page\"]',\n                formJson = '[name=\"form_json\"]',\n                keyCodes = [$.ui.keyCode.RIGHT, $.ui.keyCode.DOWN, $.ui.keyCode.LEFT, $.ui.keyCode.UP];\n\n            // jQ UI tabs\n            self.options.formWrapper.tabs({\n                beforeActivate: function (event, ui) {\n                    if (ui.newPanel.selector === \"#new-page\") {\n                        return false;\n                    }\n                }\n            });\n\n            // Save form config\n            $('#edit_form').on('beforeSubmit', function (event, submitData, handlerName) {\n                if (['saveAndContinueEdit', 'save'].indexOf(handlerName) != -1) {\n                    self.options.formEditor.customFormBuilder('generateSaveEvent', event);\n                }\n            });\n\n            // Switch between page tabs\n            $(tabsWrap).on('click', tab, function () {\n                self.options.formEditor.customFormBuilder('navigatePageForm', this);\n            });\n\n            // Switch between tpage tabs via keyboard\n            $(tabsWrap).on('keydown', tabForKeyboard, function (event) {\n                if (keyCodes.indexOf(event.keyCode) != -1) {\n                    self.options.formEditor.customFormBuilder('navigateKeyboard', this);\n                }\n            });\n\n            // Delete page\n            $(tabsWrap).on('click', self.options.deletePage, function (e) {\n                self.options.formEditor.customFormBuilder('deleteCurentPage', this, e);\n            });\n\n            // Add new page\n            self.options.addNewPage.on('click', function () {\n                $(formJson).val('[]');\n                self.options.formEditor.customFormBuilder('createNewPage');\n            });\n        }\n    });\n\n    return $.mage.amformData;\n});\n","Amasty_Customform/js/form-builder-helper.js":"/* eslint-disable one-var, vars-on-top, max-depth, no-shadow */\n\ndefine([\n    'jquery',\n    'underscore',\n    'mage/adminhtml/events',\n    'mage/adminhtml/wysiwyg/tiny_mce/setup',\n    'Magento_Ui/js/modal/modal'\n], function ($, _) {\n    'use strict';\n\n    // compatibility for M244\n    var tinymce = window.tinymce;\n\n    if (_.isUndefined(tinymce)) {\n        return;\n    }\n\n    if (!('remove' in Element.prototype)) {\n        Element.prototype.remove = function () {\n            if (this.parentNode) {\n                this.parentNode.removeChild(this);\n            }\n        };\n    }\n\n    // Event polyfill\n    if (typeof Event !== 'function') {\n        (function () {\n            window.Event = function (evt) {\n                var event = document.createEvent('Event');\n\n                event.initEvent(evt, true, true);\n                return event;\n            };\n        })();\n    }\n\n    // Object.assign polyfill\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target) {\n            'use strict';\n\n            if (target === null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            target = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var source = arguments[index];\n\n                if (source !== null) {\n                    for (var key in source) {\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n            }\n            return target;\n        };\n    }\n\n    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol\n            && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n    },\n\n     fbUtils = {};\n\n    // cleaner syntax for testing indexOf element\n    fbUtils.inArray = function (needle, haystack) {\n        return haystack.indexOf(needle) !== -1;\n    };\n\n    /**\n     * Remove null or undefined values\n     * @param  {Object} attrs {attrName: attrValue}\n     * @return {Object} Object trimmed of null or undefined values\n     */\n    fbUtils.trimObj = function (attrs) {\n        var xmlRemove = [null, undefined, false, 'false'];\n\n        for (var attr in attrs) {\n            if (fbUtils.inArray(attrs[attr], xmlRemove)) {\n                delete attrs[attr];\n            } else if (Array.isArray(attrs[attr])) {\n                if (!attrs[attr].length) {\n                    delete attrs[attr];\n                }\n            }\n        }\n\n        return attrs;\n    };\n\n    /**\n     * Test if attribute is a valid HTML attribute\n     * @param  {String} attr\n     * @return {Boolean}\n     */\n    fbUtils.validAttr = function (attr) {\n        var invalid = [\n            'values',\n            'enableOther',\n            'other',\n            'label',\n            // 'style',\n            'subtype'\n        ];\n\n        return !fbUtils.inArray(attr, invalid);\n    };\n\n    /**\n     * Convert an attrs object into a string\n     *\n     * @param  {Object} attrs object of attributes for markup\n     * @return {string}\n     */\n    fbUtils.attrString = function (attrs) {\n        var attributes = [];\n\n        for (var attr in attrs) {\n            if (attr === 'map_position' || attr === 'zoom') {\n                continue;\n            }\n\n            if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n                attr = fbUtils.safeAttr(attr, attrs[attr]);\n                attributes.push(attr.name + attr.value);\n            }\n        }\n        return attributes.join(' ');\n    };\n\n    /**\n     * Convert attributes to markup safe strings\n     * @param  {String} name  attribute name\n     * @param  {String} value attribute value\n     * @return {Object} {attrName: attrValue}\n     */\n    fbUtils.safeAttr = function (name, value) {\n        name = fbUtils.safeAttrName(name);\n\n        if (value) {\n            if (Array.isArray(value)) {\n                value = value.join(' ');\n            } else if (typeof value === 'boolean') {\n                value = value.toString();\n            }\n        }\n\n        value = value ? '=\"' + value + '\"' : '';\n\n        return {\n            name: name,\n            value: value\n        };\n    };\n\n    fbUtils.safeAttrName = function (name) {\n        var safeAttr = {\n            className: 'class'\n        };\n\n        return safeAttr[name] || fbUtils.hyphenCase(name);\n    };\n\n    /**\n     * Convert strings into lowercase-hyphen\n     *\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.hyphenCase = function (str) {\n        str = str.replace(/[^\\w\\s\\-]/gi, '');\n        str = str.replace(/([A-Z])/g, function ($1) {\n            return '-' + $1.toLowerCase();\n        });\n\n        return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n    };\n\n    /**\n     * convert a hyphenated string to camelCase\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.camelCase = function (str) {\n        return str.replace(/-([a-z])/g, function (m, w) {\n            return w.toUpperCase();\n        });\n    };\n\n    /**\n     * Generate markup wrapper where needed\n     *\n     * @param  {string} tag\n     * @return {String}\n     */\n    fbUtils.markup = function (tag) {\n        var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '',\n         attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n\n         contentType = void 0,\n            field = document.createElement(tag),\n\n            getContentType = function getContentType(content) {\n                return Array.isArray(content)\n                    ? 'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n            },\n\n            appendContent = {\n                string: function string(content) {\n                    field.innerHTML = content;\n                },\n                object: function object(content) {\n                    return field.appendChild(content);\n                },\n                array: function array(content) {\n                    for (var i = 0; i < content.length; i++) {\n                        contentType = getContentType(content[i]);\n                        appendContent[contentType](content[i]);\n                    }\n                }\n            };\n\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                var name = fbUtils.safeAttrName(attr);\n\n                field.setAttribute(name, attrs[attr]);\n            }\n        }\n\n        contentType = getContentType(content);\n\n        if (content) {\n            appendContent[contentType].call(this, content);\n        }\n\n        return field;\n    };\n\n    /**\n     * Convert html element attributes to key/value object\n     * @return {Object} ex: {attrName: attrValue}\n     * @param {Object} elem\n     */\n    fbUtils.parseAttrs = function (elem) {\n        var attrs = elem.attributes,\n         data = {};\n\n        fbUtils.forEach(attrs, function (attr) {\n            var attrVal = attrs[attr].value;\n\n            if (attrVal.match(/false|true/g)) {\n                attrVal = attrVal === 'true';\n            } else if (attrVal.match(/undefined/g)) {\n                attrVal = undefined;\n            }\n\n            if (attrVal) {\n                data[attrs[attr].name] = attrVal;\n            }\n        });\n\n        return data;\n    };\n\n    /**\n     * Convert field options to optionData\n     * @return {Array} optionData array\n     * @param {Object} field\n     */\n    fbUtils.parseOptions = function (field) {\n        var options = field.getElementsByTagName('option'),\n            optionData = {},\n            data = [];\n\n        if (options.length) {\n            for (var i = 0; i < options.length; i++) {\n                optionData = fbUtils.parseAttrs(options[i]);\n                optionData.label = options[i].textContent;\n                data.push(optionData);\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Parse XML formData\n     * @param  {String} xmlString\n     * @return {Array} formData array\n     */\n    fbUtils.parseXML = function (xmlString) {\n        var parser = new window.DOMParser(),\n            xml = parser.parseFromString(xmlString, 'text/xml'),\n            formData = [];\n\n        if (xml) {\n            var fields = xml.getElementsByTagName('field');\n\n            for (var i = 0; i < fields.length; i++) {\n                var fieldData = fbUtils.parseAttrs(fields[i]);\n\n                if (fields[i].children.length) {\n                    fieldData.values = fbUtils.parseOptions(fields[i]);\n                }\n\n                formData.push(fieldData);\n            }\n        }\n\n        return formData;\n    };\n\n    /**\n     * Escape markup, so it can be displayed rather than rendered\n     * @param  {String} html markup\n     * @return {String} escaped html\n     */\n    fbUtils.escapeHtml = function (html) {\n        var escapeElement = document.createElement('textarea');\n\n        escapeElement.textContent = html;\n\n        return escapeElement.innerHTML;\n    };\n\n    // Escape an attribute\n    fbUtils.escapeAttr = function (str) {\n        var match = {\n            '\"': '&quot;',\n          //  '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        function replaceTag(tag) {\n            return match[tag] || tag;\n        }\n\n        return typeof str === 'string' ? str.replace(/[\"&<>]/g, replaceTag) : str;\n    };\n\n    // Escape attributes\n    fbUtils.escapeAttrs = function (attrs) {\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n            }\n        }\n\n        return attrs;\n    };\n\n    // forEach that can be used on nodeList\n    fbUtils.forEach = function (array, callback, scope) {\n        for (var i = 0; i < array.length; i++) {\n            callback.call(scope, i, array[i]); // passes back stuff we need\n        }\n    };\n\n    /**\n     * Remove duplicates from an array of elements\n     * @return {Array} array with only unique values\n     * @param {Array} array\n     */\n    fbUtils.unique = function (array) {\n        return array.filter(function (elem, pos, arr) {\n            return arr.indexOf(elem) === pos;\n        });\n    };\n\n    /**\n     * Generate preview markup\n     * @param {object} fieldData\n     * @param {object} opts\n     * @return {string} preview markup for field\n     */\n    fbUtils.fieldRender = function (fieldData, opts) {\n        var preview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false,\n            utils = fbUtils;\n\n        fieldData.placeholder = fieldData.placeholder\n            ? fbUtils.cutJs(utils.escapeAttr(fieldData.placeholder))\n            : '';\n        fieldData.label = fieldData.label\n            ? fbUtils.cutJs(utils.escapeAttr(fieldData.label))\n            : '';\n\n        var fieldMarkup = '',\n            fieldLabel = '',\n            optionsMarkup = '',\n            fieldLabelText = fieldData.label || '',\n            fieldDesc = fieldData.description || '',\n            fieldRequired = '',\n            fieldValue = fieldData.value,\n            fieldOptions = fieldData.values;\n\n        fieldData.name = preview ? fieldData.name + '-preview' : fieldData.name;\n        fieldData.id = fieldData.name;\n        fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n        if (utils.inArray(\n            fieldData.type,\n            ['textinput', 'number', 'file', 'dropdown', 'listbox', 'textarea']\n        ) && fieldData.className !== 'form-control'\n        ) {\n            fieldData.className += ' form-control';\n        }\n\n        fieldData.type = fieldData.subtype || fieldData.type;\n        if (fieldData.type === 'datetime') {\n            fieldData.type = 'datetime-local';\n        }\n\n        if (fieldData.required) {\n            fieldData.required = null;\n            fieldData['aria-required'] = 'true';\n            fieldRequired = '<span class=\"required\">*</span>';\n        }\n\n        if (fieldData.type !== 'hidden') {\n            if (fieldDesc) {\n                fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n            }\n\n            fieldLabel = '<label for=\"' + fieldData.id + '\" class=\"fb-' + fieldData.type + '-label\">'\n                + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n        }\n\n        var fieldLabelVal = fieldData.label;\n\n        delete fieldData.label;\n        delete fieldData.description;\n\n        if (fieldData.type === 'wysiwyg'\n            || fieldData.type === 'textarea'\n            || fieldData.type === 'rich-text'\n        ) {\n            delete fieldData.value;\n        }\n\n        var fieldDataString = fbUtils.attrString(fieldData),\n\n        /* rendering text fields*/\n         withBr = true;\n\n        switch (fieldData.type) {\n            case 'text':\n                fieldData.type = 'div';\n                break;\n            case 'hone':\n                fieldData.type = 'h1';\n                break;\n            case 'htwo':\n                fieldData.type = 'h2';\n                break;\n            case 'hthree':\n                fieldData.type = 'h3';\n                break;\n            case 'checkboxtwo':\n                fieldData.type = 'checkbox';\n                withBr = false;\n                break;\n            case 'radiotwo':\n                fieldData.type = 'radio';\n            // eslint-disable-next-line no-fallthrough\n            case 'rating':\n                withBr = false;\n                break;\n            case 'listbox':\n                fieldData.type = 'dropdown';\n                fieldData.multiple = true;\n                break;\n            case 'wysiwyg':\n                fieldData.type = 'wysiwyg';\n                break;\n        }\n\n        switch (fieldData.type) {\n            case 'wysiwyg':\n                fieldMarkup = '<textarea ' + fieldDataString + '>' + (fieldValue || '') + '</textarea>';\n                break;\n            case 'textarea':\n            case 'rich-text':\n                delete fieldData.type;\n                var fieldVal = fieldValue || '';\n\n                fieldMarkup = fieldLabel + '<textarea ' + fieldDataString + '>' + fieldVal + '</textarea>';\n                break;\n            case 'dropdown':\n                var optionAttrsString;\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldOptions) {\n\n                    if (fieldData.placeholder) {\n                        optionsMarkup += '<option disabled selected>' + fieldData.placeholder + '</option>';\n                    }\n\n                    for (var i = 0; i < fieldOptions.length; i++) {\n                        if (!fieldOptions[i].selected || fieldData.placeholder) {\n                            delete fieldOptions[i].selected;\n                        }\n\n                        var optionLabel = fieldOptions[i].label\n                            ? fbUtils.cutJs(fieldOptions[i].label)\n                            : '';\n\n                        optionAttrsString = fbUtils.attrString(fieldOptions[i]);\n                        optionsMarkup += '<option ' + optionAttrsString + '>' + optionLabel + '</option>';\n                    }\n                }\n\n                fieldMarkup = fieldLabel + '<select ' + fieldDataString + '>' + optionsMarkup + '</select>';\n                break;\n            case 'checkbox':\n            case 'radio':\n            case 'rating':\n                var optionAttrs = void 0,\n                    ratingClass = '';\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldData.type === 'rating') {\n                    fieldData.type = 'radio';\n                    ratingClass = 'amform-rating-container ';\n                    fieldOptions = fieldOptions.reverse();\n                }\n\n                if (fieldData.type === 'checkbox' || fieldData.type === 'checkboxtwo') {\n                    fieldData.name += '[]';\n                }\n\n                if (fieldOptions) {\n                    var _optionAttrsString = void 0;\n\n                    for (var _i = 0; _i < fieldOptions.length; _i++) {\n                        optionAttrs = Object.assign({value: '', label: ''}, fieldData, fieldOptions[_i]);\n\n                        if (optionAttrs.value) {\n                            if (optionAttrs.selected) {\n                                delete optionAttrs.selected;\n                                optionAttrs.checked = null;\n                            }\n\n                            optionAttrs.id = fieldData.id + '-' + _i;\n                            _optionAttrsString = fbUtils.attrString(optionAttrs);\n\n                            var br = '',\n                             classNameLabel = ' class=\"amform-versiontwo-label\"';\n\n                            if (withBr) {\n                                br = '<br>';\n                                // eslint-disable-next-line no-use-before-define\n                                className = '';\n                            }\n\n                            var labelText = ratingClass ? '' : optionAttrs.label;\n                            let inputAsString = '<input ' + _optionAttrsString + '/' + '> <label for=\"'\n                                + optionAttrs.id + '\" ' + classNameLabel + '>'\n                                + fbUtils.cutJs(labelText) + '</label>' + br;\n\n                            if (optionAttrs.name.startsWith('checkboxtwo') || optionAttrs.name.startsWith('radiotwo')) {\n                                inputAsString = `<div class=\"amform-groupv2\">${inputAsString}</div>`;\n                            }\n\n                            optionsMarkup += inputAsString;\n                        }\n\n                    }\n\n                    if (fieldData.other) {\n                        var otherOptionAttrs = {\n                            id: fieldData.id + '-' + 'other',\n                            className: fieldData.className + ' other-option',\n                            onclick: 'fbUtils.otherOptionCB(\\'' + fieldData.id + '-other\\')'\n                        };\n\n                        _optionAttrsString = fbUtils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n                        // eslint-disable-next-line max-len\n                        optionsMarkup += '<input ' + _optionAttrsString + '/' + '>'\n                            + '<label for=\"' + otherOptionAttrs.id + '\">'\n                            + opts.messages.other + '</label> <input type=\"text\" name=\"'\n                            + fieldData.name + '\" id=\"' + otherOptionAttrs.id\n                            + '-value\" class=\"amform-no-display\"' + '/' + '>';\n                    }\n                }\n\n                fieldMarkup = fieldLabel + '<div class=\"' + ratingClass + fieldData.type + '-group\">'\n                    + optionsMarkup + '</div>';\n                break;\n            case 'textinput':\n            case 'password':\n            case 'email':\n            case 'number':\n            case 'file':\n            case 'hidden':\n            case 'date':\n            case 'time':\n            case 'datetime-local':\n            case 'daterange':\n            case 'tel':\n            case 'autocomplete':\n                fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '>';\n                break;\n            case 'color':\n                fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '> ' + opts.messages.selectColor;\n                break;\n            case 'button':\n            case 'submit':\n                fieldMarkup = '<button ' + fieldDataString + '>' + fieldLabelVal + '</button>';\n                break;\n            case 'googlemap':\n                fieldMarkup = fieldLabel + ' <input ' + fieldDataString + '><div class=\"map\"></div>';\n                break;\n            default:\n                fieldMarkup = '<' + fieldData.type + ' ' + fieldDataString + '>' + fieldLabelVal + '</' + fieldData.type + '>';\n        }\n\n        if (fieldData.type !== 'hidden') {\n            var className = fieldData.id ? 'fb-' + fieldData.type + ' form-group field-' + fieldData.id : '';\n\n            className += ' amform-layout-' + fieldData.layout;\n            fieldMarkup = fbUtils.markup('div', fieldMarkup, {\n                className: className\n            });\n        } else {\n            fieldMarkup = fbUtils.markup('input', null, fieldData);\n        }\n\n        if (fieldData.type === 'googlemap') {\n            var position = null,\n                zoom = 1,\n                oldMapSelector = '.' + fieldMarkup.className.replace(/\\s+/g, '.'),\n                oldMap = $(oldMapSelector);\n\n            if (oldMap.length > 0\n                && $.data(oldMap[0], 'mage-amGoogleMap')\n            ) {\n                position = oldMap.amGoogleMap('getPosition');\n                zoom = oldMap.amGoogleMap('getZoom');\n            } else if (fieldData.map_position) {\n                var lat = _.isUndefined(fieldData.map_position.lat) ? 0 : parseFloat(fieldData.map_position.lat),\n                    lng = _.isUndefined(fieldData.map_position.lng) ? 0 : parseFloat(fieldData.map_position.lng);\n\n                position = {\n                    'lat': lat,\n                    'lng': lng\n                };\n                zoom = fieldData.zoom;\n            }\n            $(fieldMarkup).amGoogleMap({\n                'position': position,\n                'zoom': zoom\n            });\n        }\n\n        return fieldMarkup;\n    };\n\n    /**\n     * Listen to create or init wysiwyg editor\n     *\n     * @param  {String} selector - css selector of the target type='wysiwyg'\n     * @param  {String} html - wysiwyg content\n     * @param  {Object} wysiwygConfig - wysiwyg config\n     * @returns {void}\n     */\n    fbUtils.wysiwygListener = function (selector, html, wysiwygConfig) {\n        var editors = Object.keys(tinymce.EditorManager.editors);\n\n        if (tinymce.EditorManager.editors.length && editors.includes(selector)) {\n            fbUtils.setWysiwygContent(selector, html);\n            fbUtils.refreshWysiwyg(selector);\n        } else {\n            fbUtils.createWysiwyg(selector, html, wysiwygConfig);\n        }\n    };\n\n    /**\n     * @param  {String} selector - css selector of the target type='wysiwyg'\n     * @param  {String} html - wysiwyg content\n     * @param  {Object} wysiwygConfig - wysiwyg config\n     * @returns {void}\n     */\n    fbUtils.createWysiwyg = function (selector, html, wysiwygConfig) {\n        // eslint-disable-next-line new-cap,no-undef\n        var wysiwyg = new wysiwygSetup(selector, _.extend(wysiwygConfig, {\n            'width': '100%',\n            'height': '200px'\n        }));\n\n        wysiwyg.setup('exact');\n        fbUtils.setWysiwygContent(selector, html);\n    };\n\n    /**\n     * @param  {String} selector - css selector of the target type='wysiwyg'\n     * @returns {void}\n     */\n    fbUtils.refreshWysiwyg = function (selector) {\n        tinymce.EditorManager.execCommand('mceRemoveEditor', true, selector);\n        tinymce.EditorManager.execCommand('mceAddEditor', true, selector);\n    };\n\n    /**\n     * @param  {String} selector - css selector of the target type='wysiwyg'\n     * @param  {String} html - wysiwyg content\n     * @returns {void}\n     */\n    fbUtils.setWysiwygContent = function (selector, html) {\n        $('.amform-wysiwyg#' + selector).html(html);\n    };\n\n    /**\n     * Callback for other option.\n     * Toggles the hidden text area for \"other\" option.\n     * @param  {String} otherId id of the \"other\" option input\n     */\n    fbUtils.otherOptionCB = function (otherId) {\n        var otherInput = document.getElementById(otherId),\n            otherInputValue = document.getElementById(otherId + '-value');\n\n        if (otherInput.checked) {\n            otherInput.style.display = 'none';\n            otherInputValue.style.display = 'inline-block';\n        } else {\n            otherInput.style.display = 'inline-block';\n            otherInputValue.style.display = 'none';\n        }\n    };\n\n    /**\n     * Capitalizes a string\n     * @param  {String} str uncapitalized string\n     * @return {String} str capitalized string\n     */\n    fbUtils.capitalize = function (str) {\n        return str.replace(/\\b\\w/g, function (m) {\n            return m.toUpperCase();\n        });\n    };\n\n    fbUtils.cutJs = function (str) {\n        return str.replace(/<\\/?script.*?>/ig, '');\n    };\n\n    'use strict';\n\n    function formBuilderHelpersFn(opts, formBuilder) {\n\n\n        var _helpers = {\n            doCancel: false\n        },\n         utils = fbUtils;\n\n        // eslint-disable-next-line no-use-before-define\n        formBuilder.events = formBuilderEventsFn();\n\n        _helpers.wysiwygHtmlCache = {};\n\n        /**\n         * Convert converts messy `cl#ssNames` into valid `class-names`\n         *\n         * @param  {string} str\n         * @return {string}\n         */\n        _helpers.makeClassName = function (str) {\n            str = str.replace(/[^\\w\\s\\-]/gi, '');\n            return utils.hyphenCase(str);\n        };\n\n        /**\n         * Add a mobile class\n         *\n         * @return {string}\n         */\n        _helpers.mobileClass = function () {\n            var mobileClass = '';\n\n            (function (a) {\n                // eslint-disable-next-line max-len\n                if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) {\n                    mobileClass = ' fb-mobile';\n                }\n            })(navigator.userAgent || navigator.vendor || window.opera);\n            return mobileClass;\n        };\n\n        /**\n         * Callback for when a drag begins\n         *\n         * @param  {Object} event\n         * @param  {Object} ui\n         */\n        _helpers.startMoving = function (event, ui) {\n            ui.item.show().addClass('moving');\n            _helpers.startIndex = $('li', this).index(ui.item);\n        };\n\n        /**\n         * Callback for when a drag ends\n         *\n         * @param  {Object} event\n         * @param  {Object} ui\n         */\n        _helpers.stopMoving = function (event, ui) {\n            var wysiwygElement = ui.item.find('.amform-wysiwyg[type=\"wysiwyg\"]');\n\n            if (wysiwygElement.length) {\n                fbUtils.refreshWysiwyg(wysiwygElement.attr('id'));\n            }\n\n            ui.item.removeClass('moving');\n\n            if (_helpers.doCancel || $(event.target).hasClass('frmb-control')) {\n                $(ui.sender).sortable('cancel');\n                $(this).sortable('cancel');\n            }\n\n            _helpers.save();\n            _helpers.doCancel = false;\n        };\n\n        /**\n         * Callback for when the user stopped sorting\n         *\n         * @param  {Object} event\n         * @param  {Object} ui\n         */\n        _helpers.update = function (event, ui) {\n            if (_helpers.doCancel) {\n                return false;\n            }\n\n            if (ui.item.parent()[0] === formBuilder.sortableFields[0]) {\n                formBuilder.processControl(ui.item);\n                _helpers.doCancel = true;\n            } else {\n                _helpers.setFieldOrder(event.target);\n                _helpers.doCancel = !opts.sortableControls;\n            }\n        };\n\n        /**\n         * jQuery UI sortable beforeStop callback used for both lists.\n         * Logic for canceling the sort or drop.\n         */\n        _helpers.beforeStop = function (event, ui) {\n            var form = document.getElementById(opts.formID),\n                lastIndex = form.children.length - 1,\n                cancelArray = [];\n\n            _helpers.stopIndex = ui.placeholder.index() - 1;\n\n            if (!opts.sortableControls && ui.item.parent().hasClass('frmb-control')) {\n                cancelArray.push(true);\n            }\n\n            if (opts.prepend) {\n                cancelArray.push(_helpers.stopIndex === 0);\n            }\n\n            if (opts.append) {\n                cancelArray.push(_helpers.stopIndex + 1 === lastIndex);\n            }\n\n            _helpers.doCancel = cancelArray.some(function (elem) {\n                return elem === true;\n            });\n        };\n\n        /**\n         * Make strings safe to be used as classes\n         *\n         * @param  {string} str string to be converted\n         * @return {string}     converter string\n         */\n        _helpers.safename = function (str) {\n            return str.replace(/\\s/g, '-')\n                .replace(/[^a-zA-Z0-9\\-]/g, '')\n                .toLowerCase();\n        };\n\n        /**\n         * Strips non-numbers from a number only input\n         *\n         * @param  {string} str string with possible number\n         * @return {string}     string without numbers\n         */\n        _helpers.forceNumber = function (str) {\n            return str.replace(/[^0-9]/g, '');\n        };\n\n        /**\n         * hide and show mouse tracking tooltips, only used for disabled\n         * fields in the editor.\n         *\n         * @todo   remove or refactor to make better use\n         * @param  {Object} tt jQuery option with nexted tooltip\n         * @return {void}\n         */\n        _helpers.initTooltip = function (tt) {\n            var tooltip = tt.find('.tooltip');\n\n            tt.mouseenter(function () {\n                if (tooltip.outerWidth() > 200) {\n                    tooltip.addClass('max-width');\n                }\n                tooltip.css('left', tt.width() + 14);\n                tooltip.stop(true, true).fadeIn('fast');\n            }).mouseleave(function () {\n                tt.find('.tooltip').stop(true, true).fadeOut('fast');\n            });\n\n            tooltip.hide();\n        };\n\n        /**\n         * Attempts to get element type and subtype\n         *\n         * @param  {Object} $field\n         * @return {Object}\n         */\n        _helpers.getTypes = function ($field) {\n            var types = {\n                    type: $field.attr('type')\n                },\n                subtype = $('.fld-subtype', $field).val();\n\n            if (subtype !== types.type) {\n                types.subtype = subtype;\n            }\n\n            return types;\n        };\n\n        /**\n         * Get option data for a field\n         * @param  {Object} field jQuery field object\n         * @return {Array}        Array of option values\n         */\n        _helpers.fieldOptionData = function (field) {\n            var options = [];\n\n            $('.sortable-options li', field).each(function () {\n                var $option = $(this),\n                    selected = $('.option-selected', $option).is(':checked'),\n                    attrs = {\n                        label: $('.option-label', $option).val(),\n                        value: $('.option-value', $option).val()\n                    };\n\n                if (selected) {\n                    attrs.selected = selected;\n                }\n                if (attrs.value) {\n                    options.push(attrs);\n                }\n            });\n\n            return options;\n        };\n\n        /**\n         * XML save\n         *\n         * @param  {Object} form sortableFields node\n         */\n        _helpers.xmlSave = function (form) {\n            var formData = _helpers.prepData(form),\n                xml = ['<form-template>\\n\\t<fields>'];\n\n            utils.forEach(formData, function (fieldIndex, field) {\n                var fieldContent = null;\n\n                // Handle options\n                if (field.type.match(/(select|checkbox-group|radio-group)/)) {\n                    var optionData = field.values,\n                        options = [];\n\n                    for (var i = 0; i < optionData.length; i++) {\n                        var option = utils.markup('option', optionData[i].label, optionData[i]).outerHTML;\n\n                        options.push('\\n\\t\\t\\t' + option);\n                    }\n\n                    options.push('\\n\\t\\t');\n                    fieldContent = options.join('');\n                    delete field.values;\n                }\n\n                var xmlField = utils.markup('field', fieldContent, field);\n\n                xml.push('\\n\\t\\t' + xmlField.outerHTML);\n            });\n\n            xml.push('\\n\\t</fields>\\n</form-template>');\n\n            return xml.join('');\n        };\n\n        _helpers.prepData = function (form) {\n            var formData = [];\n\n            if (form.childNodes.length !== 0) {\n                // build data object\n                utils.forEach(form.childNodes, function (index, field) {\n                    var $field = $(field);\n\n                    if (!$field.hasClass('disabled')) {\n                        var match,\n                            multipleField;\n\n                        (function () {\n                            var fieldData = _helpers.getTypes($field),\n                                roleVals = $('.roles-field:checked', field).map(function () {\n                                    return this.value;\n                                }).get();\n\n                            $('[class*=\"fld-\"]', field).each(function () {\n                                var name = utils.camelCase(this.name);\n\n                                fieldData[name] = this.type === 'checkbox' ? this.checked : this.value;\n                            });\n\n                            if (roleVals.length) {\n                                fieldData.role = roleVals.join(',');\n                            }\n\n                            fieldData.className = fieldData.className || fieldData.class; // backwards compatibility\n\n\n                            match = /(?:^|\\s)btn-(.*?)(?:\\s|$)/g.exec(fieldData.className);\n\n                            if (match) {\n                                fieldData.style = match[1];\n                            }\n\n                            fieldData = utils.trimObj(fieldData);\n\n                            multipleField = fieldData.type\n                                // eslint-disable-next-line max-len\n                                .match(/(select|dropdown|listbox|radio|radiotwo|checkbox|checkboxtwo|radio-group|rating)/);\n\n\n                            if (multipleField) {\n                                fieldData.values = _helpers.fieldOptionData($field);\n                            }\n\n                            if (fieldData.type === 'googlemap') {\n                                var fbGoogleMap = $(field).find('.fb-googlemap');\n\n                                fieldData.map_position = fbGoogleMap.amGoogleMap('getPosition');\n                                fieldData.zoom = fbGoogleMap.amGoogleMap('getZoom');\n                            }\n                            if (fieldData.type === 'date') {\n                                fieldData.value = $field.find('.amform-date._has-datepicker').val();\n                                fieldData.format = $field.attr('date-format');\n                            }\n\n                            if (fieldData.type === 'wysiwyg') {\n                                fieldData.value = $field.find('[type=' + fieldData.type + ']').val();\n                            }\n\n                            fieldData.dependency = _helpers.fieldDependencyData($field);\n\n                            formData.push(fieldData);\n                        })();\n                    }\n                });\n            }\n\n            return formData;\n        };\n\n        _helpers.jsonSave = function (form) {\n            return window.JSON.stringify(_helpers.prepData(form), null, '\\t');\n        };\n\n        _helpers.getData = function (formData) {\n            var data = formData || opts.formData;\n\n            if (!data) {\n                return false;\n            }\n\n            var setData = {\n                xml: function xml(formData) {\n                    return utils.parseXML(formData);\n                },\n                json: function json(formData) {\n                    return window.JSON.parse(formData);\n                }\n            };\n\n            formBuilder.formData = setData[opts.dataType](data) || [];\n\n            return formBuilder.formData;\n        };\n\n        /**\n         * Saves and returns formData\n         * @return {XML|JSON}\n         */\n        _helpers.save = function () {\n            var form = document.getElementById(opts.formID),\n                 doSave = {\n                    xml: _helpers.xmlSave,\n                    json: _helpers.jsonSave\n                };\n\n            // save action for current `dataType`\n            formBuilder.formData = doSave[opts.dataType](form);\n\n            //trigger formSaved event\n            document.dispatchEvent(formBuilder.events.formSaved);\n            return formBuilder.formData;\n        };\n\n        /**\n         * increments the field ids with support for multiple editors\n         * @param  {String} id field ID\n         * @return {String}    incremented field ID\n         */\n        _helpers.incrementId = function (id) {\n            var split = id.lastIndexOf('-'),\n                newFieldNumber = parseInt(id.substring(split + 1), 10) + 1,\n                baseString = id.substring(0, split);\n\n            return baseString + '-' + newFieldNumber;\n        };\n\n        /**\n         * Collect field attribute values and call fieldPreview to generate preview\n         * @param  {Object} field jQuery wrapped dom object @todo, remove jQuery dependency\n         * @param {Object} orig jQuery saved original when creating clone\n         */\n        _helpers.updatePreview = function (field, orig) {\n            var fieldClass = field.attr('class');\n\n            if (fieldClass && fieldClass.indexOf('ui-sortable-handle') !== -1) {\n                return;\n            }\n\n            var fieldType = $(field).attr('type'),\n                $prevHolder = $('.prev-holder', field),\n                previewData = {\n                    type: fieldType\n                },\n                preview;\n\n            $('[class*=\"fld-\"]', field).each(function () {\n                var name = utils.camelCase(this.name);\n\n                previewData[name] = this.type === 'checkbox' ? this.checked : fbUtils.escapeAttr(this.value);\n            });\n\n            var style = $('.btn-style', field).val();\n\n            if (style) {\n                previewData.style = style;\n            }\n\n            if (fieldType === 'wysiwyg') {\n                _helpers.setWysiwygHtml($prevHolder, previewData, orig);\n            }\n\n            if (fieldType.match(/(select|dropdown|listbox|radio|radiotwo|checkbox|checkboxtwo|radio-group|rating)/)) {\n                previewData.values = [];\n                previewData.multiple = fieldType === 'listbox';\n\n                $('.sortable-options li', field).each(function () {\n                    var option = {};\n\n                    option.selected = $('.option-selected', this).is(':checked');\n                    option.value = $('.option-value', this).val();\n                    option.label = $('.option-label', this).val();\n                    previewData.values.push(option);\n                });\n            }\n            if (fieldType === 'date') {\n                var value = field.data('fieldData').attrs ?\n                        field.data('fieldData').attrs.value :\n                        field.data('fieldData').value;\n\n                previewData.value = value;\n            }\n\n            previewData = utils.trimObj(previewData);\n\n            previewData.className = _helpers.classNames(field, previewData);\n            $('.fld-className', field).val(previewData.className);\n\n            if (fieldType === 'googlemap') {\n                var fieldData = field.data('fieldData');\n\n                if (fieldData) {\n                    // first load\n                    if (fieldData.attrs) {\n                        previewData.map_position = fieldData.attrs.map_position;\n                        previewData.zoom = fieldData.attrs.zoom;\n                    }\n                } else if (orig) {\n                    // for clone action\n                    var oldMap = orig.find('.fb-googlemap');\n\n                    if (oldMap.length > 0\n                        && $.data(oldMap[0], 'mage-amGoogleMap')\n                    ) {\n                        var latLng = oldMap.amGoogleMap('getPosition');\n\n                        previewData.map_position = {\n                            lat: latLng.lat(),\n                            lng: latLng.lng()\n                        };\n                        previewData.zoom = oldMap.amGoogleMap('getZoom');\n                    }\n                }\n            }\n\n            field.data('fieldData', previewData);\n            preview = utils.fieldRender(previewData, opts, true);\n\n            if (fieldType === 'date') {\n                this.updateDateField(preview, field.attr('date-format'), previewData.value);\n            }\n\n            $prevHolder.html(preview);\n\n            if ($prevHolder.find('.amform-layout-two').length) {\n                $prevHolder.find('.amform-layout-two').removeClass('amform-layout-two');\n                $prevHolder.parents('li.form-field').addClass('amform-layout-two');\n            }\n\n            if ($prevHolder.find('.amform-layout-three').length) {\n                $prevHolder.find('.amform-layout-three').removeClass('amform-layout-three');\n                $prevHolder.parents('li.form-field').addClass('amform-layout-three');\n            }\n\n            $('input[toggle]', $prevHolder).kcToggle();\n\n            if (fieldType === 'wysiwyg' && opts.wysiwygConfig.enabled) {\n                fbUtils.wysiwygListener(previewData.id, _helpers.getWysiwygHtml(previewData.name), opts.wysiwygConfig);\n            }\n        };\n\n        /**\n         * Set wysiwyg content to the wysiwygHtmlCache by it's name\n         *\n         * @param  {Object} $prevHolder\n         * @param  {Object} previewData - field data\n         * @param  {Object|Undefined} orig - not undefined means field is copied. orig - original field\n         * @returns {void}\n         */\n        _helpers.setWysiwygHtml = function ($prevHolder, previewData, orig) {\n            var html = _helpers.wysiwygHtmlCache,\n                value = $prevHolder.find('[type=' + previewData.type + ']').val();\n\n            if (typeof value === 'undefined') {\n                value = previewData.value;\n            }\n\n            if (!value) {\n                html[previewData.name + '-preview'] = '';\n\n                return;\n            }\n\n            if (typeof orig !== 'undefined' || value.length) {\n                html[previewData.name + '-preview'] = value;\n            }\n        };\n\n        /**\n         * @param  {String} name\n         * @returns {void}\n         */\n        _helpers.removeWysiwygHtml = function (name) {\n            delete _helpers.wysiwygHtmlCache[name];\n        };\n\n        /**\n         * @param  {String} name\n         * @returns {String} html\n         */\n        _helpers.getWysiwygHtml = function (name) {\n            return _helpers.wysiwygHtmlCache[name];\n        };\n\n        _helpers.updateDateField = function (fieldMarkup, format, value) {\n            var dateInput = $(fieldMarkup).find('input');\n\n            format = format.replaceAll('yy', 'y');\n            dateInput.removeAttr('type');\n            dateInput.attr('readonly', 'readonly');\n            dateInput.datepicker({\n                showOn: 'both',\n                changeYear: true,\n                yearRange: '1900:2100',\n                autoSize: true,\n                dateFormat: format\n            });\n\n            if (value) {\n                dateInput.datepicker('setDate', value);\n            }\n\n            dateInput.attr('placeholder', format);\n            dateInput.attr('size', 15);\n            $(fieldMarkup).find('button').html('');\n\n            var datepicker = $('#ui-datepicker-div');\n\n            if (!datepicker.hasClass('am-picker-year')) {\n                datepicker.addClass('am-picker-year');\n            }\n        };\n\n        _helpers.debounce = function (func) {\n            var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250,\n                immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false,\n                timeout;\n\n            return function () {\n                var context = this,\n                    args = arguments,\n                    later = function later() {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    },\n                    callNow = immediate && !timeout;\n\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n\n                if (callNow) {\n                    func.apply(context, args);\n                }\n            };\n        };\n\n        /**\n         * Display a custom tooltip for disabled fields.\n         *\n         * @param  {Object} field\n         */\n        _helpers.disabledTT = {\n            className: 'frmb-tt',\n            add: function add(field) {\n                var title = opts.messages.fieldNonEditable;\n\n                if (title) {\n                    var tt = utils.markup('p', title, {className: _helpers.disabledTT.className});\n\n                    field.append(tt);\n                }\n            },\n            remove: function remove(field) {\n                $('.frmb-tt', field).remove();\n            }\n        };\n\n        _helpers.classNames = function (field, previewData) {\n            var i = void 0,\n                type = previewData.type,\n                style = previewData.style,\n                className = field[0].querySelector('.fld-className').value,\n                classes = className.split(' '),\n                types = {\n                    button: 'btn',\n                    submit: 'btn'\n                },\n\n                primaryType = types[type];\n\n            if (primaryType) {\n                if (style) {\n                    for (i = 0; i < classes.length; i++) {\n                        var re = new RegExp('(?:^|\\s)' + primaryType + '-(.*?)(?:\\s|$)+', 'g'),\n                         match = classes[i].match(re);\n\n                        if (match) {\n                            classes.splice(i, 1);\n                        }\n                    }\n                    classes.push(primaryType + '-' + style);\n                }\n                classes.push(primaryType);\n            }\n\n            // reverse the array to put custom classes at end,\n            // remove any duplicates, convert to string, remove whitespace\n            return utils.unique(classes).join(' ').trim();\n        };\n\n        /**\n         * Closes and open dialog\n         *\n         * @param  {Object} overlay Existing overlay if there is one\n         * @param  {Object} dialog  Existing dialog\n         * @return {Event}          Triggers modalClosed event\n         */\n        _helpers.closeConfirm = function (overlay, dialog) {\n            overlay = overlay || document.getElementsByClassName('form-builder-overlay')[0];\n            dialog = dialog || document.getElementsByClassName('form-builder-dialog')[0];\n            overlay.classList.remove('visible');\n            dialog.remove();\n            overlay.remove();\n            document.dispatchEvent(formBuilder.events.modalClosed);\n        };\n\n        /**\n         * Returns the layout data based on controlPosition option\n         * @param  {String} controlPosition 'left' or 'right'\n         * @return {Object}\n         */\n        _helpers.editorLayout = function (controlPosition) {\n            var layoutMap = {\n                left: {\n                    stage: 'pull-right',\n                    controls: 'pull-left'\n                },\n                right: {\n                    stage: 'pull-left',\n                    controls: 'pull-right'\n                }\n            };\n\n            return layoutMap[controlPosition] ? layoutMap[controlPosition] : '';\n        };\n\n        /**\n         * Adds overlay to the page. Used for modals.\n         * @return {Object}\n         */\n        _helpers.showOverlay = function () {\n            var overlay = utils.markup('div', null, {\n                className: 'form-builder-overlay'\n            });\n\n            document.body.appendChild(overlay);\n            overlay.classList.add('visible');\n\n            overlay.onclick = function () {\n                _helpers.closeConfirm(overlay);\n            };\n\n            return overlay;\n        };\n\n        /**\n         * Custom confirmation dialog\n         *\n         * @param  {Object}  message   Content to be displayed in the dialog\n         * @param  {function} yesAction callback to fire if they confirm\n         * @param  {Boolean} coords    location to put the dialog\n         * @param  {String}  className Custom class to be added to the dialog\n         * @return {Object}            Reference to the modal\n         */\n        _helpers.confirm = function (message, yesAction) {\n            var coords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false,\n             className = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '',\n\n             overlay = _helpers.showOverlay(),\n             yes = utils.markup('button', opts.messages.yes, {className: 'yes btn btn-success btn-sm'}),\n                no = utils.markup('button', opts.messages.no, {className: 'no btn btn-danger btn-sm'});\n\n            no.onclick = function () {\n                _helpers.closeConfirm(overlay);\n            };\n\n            yes.onclick = function () {\n                yesAction();\n                _helpers.closeConfirm(overlay);\n            };\n\n            var btnWrap = utils.markup('div', [no, yes], {className: 'button-wrap'});\n\n            className = 'form-builder-dialog ' + className;\n\n            var miniModal = utils.markup('div', [message, btnWrap], {className: className});\n\n            if (!coords) {\n                coords = {\n                    pageX: Math.max(document.documentElement.clientWidth, window.innerWidth || 0) / 2,\n                    pageY: Math.max(document.documentElement.clientHeight, window.innerHeight || 0) / 2\n                };\n                miniModal.style.position = 'fixed';\n            } else {\n                miniModal.classList.add('positioned');\n            }\n\n            miniModal.style.left = coords.pageX + 'px';\n            miniModal.style.top = coords.pageY + 'px';\n\n            document.body.appendChild(miniModal);\n\n            yes.focus();\n            return miniModal;\n        };\n\n        /**\n         * Popup dialog the does not require confirmation.\n         * @param  {String|DOM|Array}  content\n         * @param  {Boolean} coords    false if no coords are provided. Without coordinates\n         *                             the popup will appear center screen.\n         * @param  {String}  className classname to be added to the dialog\n         * @return {Object}            dom\n         */\n        _helpers.dialog = function (content) {\n            var coords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false,\n             className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n            _helpers.showOverlay();\n\n            className = 'form-builder-dialog ' + className;\n\n            var miniModal = utils.markup('div', content, {className: className});\n\n            if (!coords) {\n                coords = {\n                    pageX: Math.max(document.documentElement.clientWidth, window.innerWidth || 0) / 2,\n                    pageY: Math.max(document.documentElement.clientHeight, window.innerHeight || 0) / 2\n                };\n                miniModal.style.position = 'fixed';\n            } else {\n                miniModal.classList.add('positioned');\n            }\n\n            miniModal.style.left = coords.pageX + 'px';\n            miniModal.style.top = coords.pageY + 'px';\n\n            document.body.appendChild(miniModal);\n\n            document.dispatchEvent(formBuilder.events.modalOpened);\n\n            if (className.indexOf('data-dialog') !== -1) {\n                document.dispatchEvent(formBuilder.events.viewData);\n            }\n\n            return miniModal;\n        };\n\n        /**\n         * Removes all fields from the form\n         */\n        _helpers.removeAllfields = function () {\n            var form = document.getElementById(opts.formID),\n             fields = form.querySelectorAll('li.form-field'),\n             $fields = $(fields),\n             markEmptyArray = [];\n\n            if (!fields.length) {\n                return false;\n            }\n\n            if (opts.prepend) {\n                markEmptyArray.push(true);\n            }\n\n            if (opts.append) {\n                markEmptyArray.push(true);\n            }\n\n            if (!markEmptyArray.some(function (elem) {return elem === true;})) {\n                form.parentElement.classList.add('empty');\n                form.parentElement.dataset.content = opts.messages.getStarted;\n            }\n\n            form.classList.add('removing');\n\n            var outerHeight = 0;\n\n            $fields.each(function () {\n                outerHeight += $(this).outerHeight() + 3;\n            });\n\n            fields[0].style.marginTop = -outerHeight + 'px';\n\n            setTimeout(function () {\n                $fields.remove();\n                document.getElementById(opts.formID).classList.remove('removing');\n                _helpers.save();\n            }, 400);\n        };\n\n        /**\n         * If user re-orders the elements their order should be saved.\n         *\n         * @param {Object} $cbUL our list of elements\n         */\n        _helpers.setFieldOrder = function ($cbUL) {\n            if (!opts.sortableControls) {\n                return false;\n            }\n            var fieldOrder = {};\n\n            $cbUL.children().each(function (index, element) {\n                fieldOrder[index] = $(element).data('attrs').type;\n            });\n\n            if (window.sessionStorage) {\n                window.sessionStorage.setItem('fieldOrder', window.JSON.stringify(fieldOrder));\n            }\n        };\n\n        /**\n         * Reorder the controls if the user has previously ordered them.\n         *\n         * @param  {Array} frmbFields\n         * @return {Array}\n         */\n        _helpers.orderFields = function (frmbFields) {\n            var fieldOrder = false;\n\n            if (window.sessionStorage) {\n                if (opts.sortableControls) {\n                    fieldOrder = window.sessionStorage.getItem('fieldOrder');\n                } else {\n                    window.sessionStorage.removeItem('fieldOrder');\n                }\n            }\n\n            if (!fieldOrder) {\n                var controlOrder = opts.controlOrder.concat(frmbFields.map(function (field) {\n                    return field.attrs.type;\n                }));\n\n                fieldOrder = utils.unique(controlOrder);\n            } else {\n                fieldOrder = window.JSON.parse(fieldOrder);\n                fieldOrder = Object.keys(fieldOrder).map(function (i) {\n                    return fieldOrder[i];\n                });\n            }\n\n            var newOrderFields = [];\n\n            fieldOrder.forEach(function (fieldType) {\n                var field = frmbFields.filter(function (field) {\n                    return field.attrs.type === fieldType;\n                })[0];\n\n                newOrderFields.push(field);\n            });\n\n            return newOrderFields.filter(Boolean);\n        };\n\n        /**\n         * Close fields being editing\n         * @param  {Object} stage\n         */\n        _helpers.closeAllEdit = function (stage) {\n            var fields = $('> li.editing', stage),\n                toggleBtns = $('.toggle-form', stage),\n                editModes = $('.frm-holder', fields);\n\n            toggleBtns.removeClass('open');\n            fields.removeClass('editing');\n            editModes.hide();\n            $('.prev-holder', fields).show();\n        };\n\n        /**\n         * Toggles the edit mode for the given field\n         * @param  {String} fieldId\n         */\n        _helpers.toggleEdit = function (fieldId) {\n            var field = document.getElementById(fieldId),\n                toggleBtn = $('.toggle-form', field),\n                editMode = $('.frm-holder', field);\n\n            field.classList.toggle('editing');\n            toggleBtn.toggleClass('open');\n            $('.prev-holder', field).slideToggle(250);\n            editMode.slideToggle(250);\n        };\n\n        /**\n         * Controls follow scroll to the bottom of the editor\n         * @param  {Object} $sortableFields\n         * @param  {Object} cbUL\n         */\n        _helpers.stickyControls = function ($sortableFields, cbUL) {\n            var $cbWrap = $(cbUL).parent(),\n                $stageWrap = $sortableFields.parent(),\n                cbWidth = $cbWrap.width(),\n                cbPosition = cbUL.getBoundingClientRect();\n\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            $(window).scroll(function () {\n                var scrollTop = $(this).scrollTop();\n\n                if (scrollTop > $stageWrap.offset().top) {\n                    var cbStyle = {\n                            position: 'fixed',\n                            width: cbWidth,\n                            top: 0,\n                            bottom: 'auto',\n                            right: 'auto',\n                            left: cbPosition.left\n                        },\n                        cbOffset = $cbWrap.offset(),\n                        stageOffset = $stageWrap.offset(),\n                        cbBottom = cbOffset.top + $cbWrap.height(),\n                        stageBottom = stageOffset.top + $stageWrap.height();\n\n                    if (cbBottom > stageBottom && cbOffset.top !== stageOffset.top) {\n                        $cbWrap.css({\n                            position: 'absolute',\n                            top: 'auto',\n                            bottom: 0,\n                            right: 0,\n                            left: 'auto'\n                        });\n                    }\n\n                    if (cbBottom < stageBottom || cbBottom === stageBottom && cbOffset.top > scrollTop) {\n                        $cbWrap.css(cbStyle);\n                    }\n                } else {\n                    cbUL.parentElement.removeAttribute('style');\n                }\n            });\n        };\n\n        /**\n         * Open a dialog with the form's data\n         */\n        _helpers.showData = function () {\n            var data = utils.escapeHtml(formBuilder.formData),\n                code = utils.markup('code', data, {className: 'formData-' + opts.dataType}),\n                pre = utils.markup('pre', code);\n\n            _helpers.dialog(pre, null, 'data-dialog');\n        };\n\n        /**\n         * Remove a field from the stage\n         * @param  {String}  fieldID ID of the field to be removed\n         * @return {Boolean} fieldRemoved returns true if field is removed\n         */\n        _helpers.removeField = function (fieldID) {\n            var fieldRemoved = false,\n                form = document.getElementById(opts.formID),\n                fields = form.getElementsByClassName('form-field');\n\n            if (!fields.length) {\n                console.warn('No fields to remove');\n\n                return false;\n            }\n\n            if (!fieldID) {\n                var availableIds = [].slice.call(fields).map(function (field) {\n                    return field.id;\n                });\n\n                console.warn('fieldID required to use `removeField` action.');\n                console.warn('Available IDs: ' + availableIds.join(', '));\n            }\n\n            var field = document.getElementById(fieldID),\n                $field = $(field);\n\n            if (!field) {\n                console.warn('Field not found');\n\n                return false;\n            }\n\n            $field.slideUp(250, function () {\n                $field.removeClass('deleting');\n                $field.remove();\n                fieldRemoved = true;\n                _helpers.save();\n\n                if (!form.childNodes.length) {\n                    var stageWrap = form.parentElement;\n\n                    stageWrap.classList.add('empty');\n                    stageWrap.dataset.content = opts.messages.getStarted;\n                }\n            });\n\n            document.dispatchEvent(formBuilder.events.fieldRemoved);\n\n            return fieldRemoved;\n        };\n\n        _helpers.fieldDependencyData = function (field) {\n            var options = [];\n\n            $('.sortable-options li.dependent-field', field).each(function () {\n                var $option = $(this),\n                    selected = $('.option-selected', $option).is(':checked'),\n                    attrs = {\n                        field: $option.find('select').first().val(),\n                        type: $option.find('select').first().find('[selected=\"selected\"]').attr('type'),\n                        value: $option.find('select').last().val()\n                    };\n\n                if (selected) {\n                    attrs.selected = selected;\n                }\n\n                if (attrs.value) {\n                    options.push(attrs);\n                }\n            });\n\n            return options;\n        };\n\n        return _helpers;\n    }\n\n    'use strict';\n\n    function formBuilderEventsFn() {\n        var events = {};\n\n        events.loaded = new Event('loaded');\n        events.viewData = new Event('viewData');\n        events.userDeclined = new Event('userDeclined');\n        events.modalClosed = new Event('modalClosed');\n        events.modalOpened = new Event('modalOpened');\n        events.formSaved = new Event('formSaved');\n        events.fieldAdded = new Event('fieldAdded');\n        events.fieldRemoved = new Event('fieldRemoved');\n\n        return events;\n    }\n\n    'use strict';\n\n    (function ($) {\n        var Toggle = function Toggle(element, options) {\n            var defaults = {\n                    theme: 'fresh',\n                    messages: {\n                        off: 'Off',\n                        on: 'On'\n                    }\n                },\n                opts = $.extend(defaults, options),\n                $kcToggle = $('<div class=\"kc-toggle\"></div>').insertAfter(element).append(element);\n\n            $kcToggle.toggleClass('on', element.is(':checked'));\n\n            var kctOn = '<div class=\"kct-on\">' + opts.messages.on + '</div>',\n                kctOff = '<div class=\"kct-off\">' + opts.messages.off + '</div>',\n                kctHandle = '<div class=\"kct-handle\"></div>',\n                kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n            $kcToggle.append(kctInner);\n\n            $kcToggle.click(function () {\n                element.attr('checked', !element.attr('checked'));\n                $(this).toggleClass('on');\n            });\n        };\n\n        $.fn.kcToggle = function (options) {\n            var toggle = this;\n\n            return toggle.each(function () {\n                var element = $(this);\n\n                if (element.data('kcToggle')) {\n                    return;\n                }\n\n                var kcToggle = new Toggle(element, options);\n\n                element.data('kcToggle', kcToggle);\n            });\n        };\n    })(jQuery);\n\n    return [fbUtils, formBuilderHelpersFn];\n});\n","Amasty_Customform/js/form-prompt.js":"define([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, confirm, $t) {\n    'use strict';\n\n    $.widget('mage.amcformPrompt', {\n        options: {\n            modalClass: 'amcform-popup-block -active',\n            responsive: true,\n            title: $t('This form can be submitted only once. Ready to proceed?'),\n            cancellationLink: '',\n            actions: {},\n            isShowed: false\n        },\n\n        _create: function () {\n            var self = this,\n                options = this.options,\n                form = $(this.element).closest('.amform-form');\n\n            self.options.actions = {\n                cancel: function () {\n                    self.options.isShowed = false;\n                }\n            };\n\n            options.buttons = [{\n                text: $t('No'),\n                class: 'amcform-button -error',\n                click: function () {\n                    this.closeModal();\n                }\n            }, {\n                text: $t('Yes'),\n                class: 'amcform-button -default',\n                click: function () {\n                    this.closeModal();\n                    form.submit();\n                }\n            }];\n\n            this.element.click(function (e) {\n                e.preventDefault();\n\n                if (!self.options.isShowed) {\n                    confirm(options);\n\n                    self.options.isShowed = true;\n                } else {\n                    form.submit();\n                }\n            });\n        }\n    });\n\n    return $.mage.amcformPrompt\n});\n","Amasty_Customform/js/form-builder.js":"define([\n    'jquery',\n    'underscore',\n    'Amasty_Customform/js/form-builder-helper',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal',\n    'mage/backend/tabs'\n], function ($, _, helper, alert) {\n    'use strict';\n\n    $.widget('mage.customFormBuilder', {\n        options: {\n            controlPosition: 'right',\n            controlOrder: ['autocomplete', 'button', 'checkbox', 'checkbox-group',\n                'date', 'file', 'header', 'hidden', 'paragraph', 'number', 'radio-group', 'select', 'text', 'textarea'],\n            dataType: 'json',\n            // Array of fields to disable\n            disableFields: [],\n            editOnAdd: false,\n            // Uneditable fields or other content you would like to appear before and after regular fields:\n            append: false,\n            prepend: false,\n            defaultFields: [],\n            inputSets: [],\n            fieldRemoveWarn: false,\n            messages: {},\n            frmbFields: [{\n                label: 'autocomplete',\n                attrs: {\n                    type: 'autocomplete',\n                    className: 'autocomplete',\n                    name: 'autocomplete'\n                }\n            }],\n            notify: {\n                error: function error(message) {\n                    return console.error(message);\n                },\n                success: function success(message) {\n                    return console.log(message);\n                },\n                warning: function warning(message) {\n                    return console.warn(message);\n                }\n            },\n            sortableControls: false,\n            stickyControls: false,\n            showActionButtons: true,\n            typeUserAttrs: {},\n            typeUserEvents: {},\n            prefix: 'form-builder-',\n            fbInstances: [],\n            savedValue: '[name=\"form_json\"]',\n            savedTitles: '[name=\"form_title\"]',\n            pageFormId: [],\n            pageTitles: []\n        },\n        classes: {\n            delete: 'deleting'\n        },\n        selectors: {\n            wysiwygField: '[type=wysiwyg]',\n            deleteButton: '.delete-confirm',\n            fieldFirst: '.form-field:eq(0)',\n            wysiwygContainer: '.wysiwyg-field#{id}'\n        },\n\n        _create: function () {\n            var self = this,\n                formbId,\n                savedValue,\n                formDataJSON = [],\n                savedTitles,\n                pageCount;\n\n            self.generateSubtypes();\n\n            formDataJSON = self.options.form_json;\n            savedTitles = $(self.options.savedTitles).val();\n            self.formTitle = savedTitles ? window.JSON.parse(savedTitles) : this.options.pageTitles;\n\n            if (formDataJSON.length && !Array.isArray(formDataJSON[0])) {\n                var createPage = [];\n                createPage.push(formDataJSON);\n                formDataJSON = createPage;\n            }\n\n            if (formDataJSON.length) {\n                pageCount = formDataJSON.length;\n\n                for (var i = 0; i < pageCount; i++) {\n                    self.formData = formDataJSON[i];\n                    formbId = 'frmb-' + i;\n\n                    if (i == 0) {\n                        self.initialization(formbId);\n                        self.setPageTitle(i);\n                    } else {\n                        self.createNewPage(formbId);\n                        self.setPageTitle(i);\n                    }\n                }\n                $('[data-amcform-role=\"page\"]:first-child').find('a').trigger('click');\n            } else {\n                formbId = 'frmb-' + $('ul[id^=frmb-].frmb').length++;\n                self.formData = formDataJSON;\n                self.initialization(formbId);\n                if ($('[data-amcform-role=\"page\"]').length == 1) {\n                    $('[data-amcform-role=\"page\"]').find('a').trigger('click');\n                }\n            }\n        },\n\n        initialization: function (formbId) {\n            var self = this,\n                $cbUL,\n                boxID = formbId + '-control-box';\n\n            this.lastID = formbId + '-fld-1';\n            this.options.formID = formbId;\n            this.options.pageFormId.push(formbId);\n\n            this.helpers = helper[1](this.options, this);\n            this.utils = helper[0];\n\n            this.layout = this.helpers.editorLayout(this.options.controlPosition);\n\n            // create array of field objects to cycle through\n            var frmbFields = this.options.frmbFields;\n            //frmbFields = this.helpers.orderFields(frmbFields);\n\n            if (this.options.disableFields) {\n                // remove disabledFields\n                frmbFields = frmbFields.filter(function (field) {\n                    return !self.utils.inArray(field.attrs.type, self.options.disableFields);\n                });\n            }\n\n            // Create draggable fields for this.options\n            var cbUl = this.utils.markup('ul', null, {id: boxID, className: 'frmb-control'});\n\n            if (this.options.sortableControls) {\n                cbUl.classList.add('sort-enabled');\n            }\n\n            $cbUL = $(cbUl);\n            this.generateFormFields(frmbFields, $cbUL);\n\n            if (this.options.inputSets.length) {\n                $('<li/>', {'class': 'fb-separator'}).html('<hr>').appendTo($cbUL);\n                this.options.inputSets.forEach(function (set) {\n                    set.name = set.name || this.helpers.makeClassName(set.label);\n                    var $set = $('<li/>', {'class': 'input-set-control', type: set.name});\n                    $set.html(set.label).appendTo($cbUL);\n                });\n            }\n\n            this.generateSortable(formbId, $cbUL);\n            this.generateWrapperContent(formbId, $cbUL);\n\n            $cbUL.prev('.amcustomform-element-tabs').find('li:first-child').click();\n\n            this.observeFields($cbUL, formbId);\n\n            this.helpers.getData();\n            this.loadFields();\n\n            this.sortableFields.css('min-height', $cbUL.height());\n\n            // If option set, controls will remain in view in editor\n            if (this.options.stickyControls) {\n                this.helpers.stickyControls(this.sortableFields, cbUl);\n            }\n\n            document.dispatchEvent(self.events.loaded);\n\n            // Make actions accessible\n            self.actions = {\n                clearFields: self.helpers.removeAllfields,\n                showData: self.helpers.showData,\n                save: self.helpers.save,\n                addField: function addField(field, index) {\n                    self.helpers.stopIndex = self.sortableFields[0].children.length ? index : undefined;\n                    self.prepFieldVars(field);\n                    document.dispatchEvent(self.events.fieldAdded);\n                },\n                removeField: self.helpers.removeField,\n                setData: function setData(formData) {\n                    self.helpers.removeAllfields();\n                    self.helpers.getData(formData);\n                    self.loadFields();\n                }\n            };\n        },\n\n        addCollapseDefaultValueVariables: function (element) {\n            $(element).find('.value-wrap .default-values-link').on('click', function (e) {\n                var variantsBlock = $(e.target).closest('.value-note-wrap').find('.default-value-variants');\n                variantsBlock.slideToggle();\n                e.preventDefault();\n            });\n        },\n\n        addValidateObserve: function ($element) {\n            var self = this,\n                select = $element.find('.fld-validation');\n            this.validateObserve(select);\n\n            select.change(function (e) {\n                self.validateObserve($(e.target));\n            });\n        },\n\n        validateObserve: function ($element) {\n            var regexpBlock = $element.parents('.form-group').next('.form-group.regexp-wrap'),\n                errorBlock = regexpBlock.next('.form-group.errorMessage-wrap');\n\n            if ($element.val() === 'pattern') {\n                regexpBlock.show();\n                errorBlock.show();\n            } else {\n                regexpBlock.hide();\n                errorBlock.hide();\n            }\n        },\n\n        /**\n         * Set page title for current page if there is a saved title\n         * @param page - (int) current page\n         */\n\n        setPageTitle: function (page) {\n            var self = this,\n                id = page + 1;\n\n            if (self.formTitle) {\n                $('#page-title-' + id).val(self.formTitle[page]);\n            }\n        },\n\n        /**\n         * Create new page\n         * @param formbId - (string) id for new form\n         */\n\n        createNewPage: function (formbId) {\n            var self = this,\n                tabCount = $('[data-amcform-js=\"tabs-wrap\"]').children().length,\n                tabId = \"page-\" + tabCount,\n                titleId = 'page-title-' + tabCount,\n                $newPageTemplate = $('[data-amcform-js=\"new-page\"]'),\n                $newPage = $newPageTemplate\n                    .clone()\n                    .removeAttr(\"data-amcform-js\")\n                    .attr(\"id\", tabId)\n                    .addClass(\"fb-editor\"),\n                $newTab = $('[data-amcform-js=\"add-new-page\"]')\n                    .clone()\n                    .removeAttr(\"data-amcform-js\")\n                    .attr('data-amcform-role', 'page')\n                    .removeClass('-new'),\n                $newTitle = $newPage.find('[data-amcform-js=\"title-edit-new\"]');\n\n            $(\"a\", $newTab)\n                .attr(\"href\", \"#\" + tabId)\n                .attr('data-amcform-role', 'page-link')\n                .attr(\"title\", $.mage.__('Page ') + tabCount)\n                .text($.mage.__('Page ') + tabCount);\n\n            $newTitle.attr('data-amcform-js', 'title-edit');\n            $newTitle.find('input').attr('id', titleId);\n            $newTitle.find('label').attr('for', titleId);\n\n            $newPage.insertBefore($newPageTemplate);\n            $newTab.insertBefore('[data-amcform-js=\"add-new-page\"]');\n\n            self.options.formWrapper.tabs(\"refresh\");\n            self.options.formWrapper.tabs(\"option\", \"active\", tabCount - 1);\n\n            self.element = $newPage;\n\n            $('[data-amcform-role=\"page\"]').removeClass('active');\n            $newTab.addClass('active');\n\n            if (!formbId) {\n                self.options.form_json = [];\n                self._create();\n                return;\n            }\n\n            self.initialization(formbId);\n        },\n\n        /**\n         * Delete current page\n         * @param page - DOM node\n         * @param e - event\n         */\n\n        deleteCurentPage: function (page, e) {\n            var self = this,\n                tab = $(page).parent(),\n                prevTab = tab.prev().find('a'),\n                pageId = $(page).prev().attr('href').split('-')[1];\n\n            e.stopPropagation();\n\n            self.downgradeTabNumber(tab);\n\n            tab.remove();\n            $('#page-' + pageId).remove();\n            prevTab.trigger('click');\n        },\n\n        /**\n         * Downgrade tabs number after deleting previos tab\n         * @param tab - DOM element\n         */\n        downgradeTabNumber: function (tab) {\n            var nextTabs = tab.nextAll().find('a');\n\n            nextTabs.each(function (index, page) {\n                if (index == nextTabs.length -1) {\n                    return;\n                }\n\n                var pageValue = $(page).text().split(' '),\n                    newPageId = pageValue[1] - 1,\n                    pageLabel = pageValue[0];\n\n                $(page).text(pageLabel + ' ' + newPageId);\n                $(page).attr('title', pageLabel + ' ' + newPageId);\n            });\n        },\n\n        /**\n         * Navigate between form pages\n         * @param page - DOM node\n         */\n\n        navigatePageForm: function (page) {\n            if ($(page).length > 0) {\n                var pageId = $(page).attr('href'),\n                    tab = $(page).parent(),\n                    tabId = pageId.split('-')[1] - 1,\n                    fields;\n\n                $('[data-amcform-role=\"page\"]').removeClass('active');\n                $(tab).addClass('active');\n                $(pageId).find('.amcustomform-element-tabs li:first-child').trigger('click');\n\n                // Set new settings\n                this.options.formID = 'frmb-' + tabId;\n                fields = $('#' + this.options.formID).children().length + 1;\n                this.lastID = this.options.formID + '-fld-' + fields;\n                this.sortableFields = $('ul#' + this.options.formID + '.frmb.ui-sortable');\n                this.stageWrap = $('div#' + this.options.formID + '-stage-wrap.stage-wrap.pull-left');\n            }\n        },\n\n        navigateKeyboard: function () {\n            this.navigatePageForm(\n                $('[data-amcform-role=\"page\"][aria-selected=\"true\"] a')\n            );\n        },\n\n        /**\n         * @return {array}\n         */\n        getPageTitles: function () {\n            var result = [];\n\n            $.each($('[data-amcform-js=\"title-edit\"] .amcform-input'), function (index, title) {\n                result.push($(title).val());\n            });\n\n            return result;\n        },\n\n        /**\n         * Set page titles in hidden input\n         */\n        savePageTitles: function () {\n            var self = this;\n\n            self.options.pageTitles = this.getPageTitles();\n\n            $('#form_form_title').val(window.JSON.stringify(self.options.pageTitles, null, '\\t'));\n\n            $('[data-amcform-js^=\"title-edit\"] .amcform-input').each(function (key, element) {\n                $(element).attr('disabled', 'disabled');\n            });\n        },\n\n        /**\n         * @return {array}\n         */\n        getSerializedFormConfig: function () {\n            var result = [];\n\n            $.each(this.options.pageFormId, function (index, id) {\n                var form = document.getElementById(id),\n                    json;\n\n                if (form) {\n                    json = this.helpers.prepData(form);\n\n                    if (json.length) {\n                        result.push(json);\n                    }\n                }\n            }.bind(this));\n\n            return result;\n        },\n\n        /**\n         * Save form configuration\n         */\n        generateSaveEvent: function (event) {\n            var self = this;\n\n            self.savePageTitles();\n\n            self.options.fbInstances = this.getSerializedFormConfig();\n\n            var formFields = 'input, textarea, select',\n                formContent = window.JSON.stringify(self.options.fbInstances, null, '');\n            if (formContent.length < 65000) {\n                $('[name=\"form_json\"]').val(formContent);\n                $('.form-wrap').find(formFields).each(function (key, element) {\n                    $(element).removeAttr('required').attr('disabled', 'disabled');\n                });\n            } else {\n                event.preventDefault();\n                self.options.fbInstances = [];\n                self.options.pageTitles = [];\n                alert({\n                    title: $.mage.__('Error'),\n                    content: $.mage.__('You have exceeded the maximum allowed number of fields. Please try to create several forms instead of this one.')\n                });\n            }\n        },\n\n        generateSubtypes: function () {\n            this.options.messages.subtypes = function () {\n                var subtypeDefault = function subtypeDefault(subtype) {\n                    return {\n                        label: subtype,\n                        value: subtype\n                    };\n                };\n\n                return {\n                    text: ['text', 'password', 'email', 'color', 'tel'].map(subtypeDefault),\n                    header: ['h1', 'h2', 'h3'].map(subtypeDefault)\n                };\n            }();\n        },\n\n        generateWrapperContent: function (formbId, $cbUL) {\n            var $formWrap = $('<div/>', {\n                id: formbId + '-form-wrap',\n                'class': 'form-wrap form-builder' + this.helpers.mobileClass()\n            });\n\n            this.stageWrap = $('<div/>', {\n                id: formbId + '-stage-wrap',\n                'class': 'stage-wrap ' + this.layout.stage\n            });\n\n            var controlbWrap = $('<div/>', {\n                id: formbId + '-cb-wrap',\n                'class': 'cb-wrap ' + this.layout.controls\n            });\n\n            /*show type controls*/\n            var typesWrap = $('<ul/>', {\n                'class': 'type-wrap amcform-tabs-wrap -second amcustomform-element-tabs'\n            });\n\n            var fieldsTypes = this.options.fieldsTypes;\n            this.utils.forEach(fieldsTypes, function (i) {\n                var $field = $('<li/>', {\n                    'id': 'amcustomform-type-' + fieldsTypes[i].type,\n                    'type': fieldsTypes[i].type,\n                    'text': fieldsTypes[i].title,\n                    'class': 'amcform-tab'\n                }).appendTo(typesWrap);\n\n                $field.on('click', function () {\n                    $('.amelement-container').hide();\n                    $('.amcustomform-element-tabs li').removeClass('active');\n                    $(this).addClass('active');\n                    var type = $(this).attr('type');\n                    $('.amelement-container[parenttype=\"' + type + '\"]').fadeIn();\n                });\n            });\n\n            controlbWrap.append(typesWrap);\n            controlbWrap.append($cbUL[0]);\n\n            if (this.options.showActionButtons) {\n                // Build our headers and action links\n                var viewDataText = this.options.dataType === 'xml' ? this.options.messages.viewXML : this.options.messages.viewJSON,\n\n                    clearAll = this.utils.markup('button', this.options.messages.clearAll, {\n                        id: formbId + '-clear-all',\n                        type: 'button',\n                        className: 'clear-all btn btn-default'\n                    });\n                var formActions = this.utils.markup('div', [clearAll], {\n                    className: 'form-actions btn-group'\n                });\n\n                controlbWrap.append(formActions);\n            }\n\n            this.stageWrap.append($(this.element).find('[data-amcform-js=\"title-edit\"]'));\n            this.stageWrap.append(this.sortableFields, controlbWrap);\n            this.stageWrap.before($formWrap);\n            $formWrap.append(this.stageWrap, controlbWrap);\n            $(this.element).append($formWrap);\n        },\n\n        generateSortable: function (formbId, $cbUL) {\n            // Sortable fields\n            this.sortableFields = $('<ul/>').attr('id', formbId).addClass('frmb');\n            this.sortableFields.sortable({\n                cursor: 'move',\n                opacity: 0.9,\n                revert: 150,\n                beforeStop: this.helpers.beforeStop,\n                start: this.helpers.startMoving,\n                stop: this.helpers.stopMoving,\n                cancel: 'input, select, .disabled, .form-group, .btn',\n                placeholder: 'frmb-placeholder'\n            });\n\n            // ControlBox with different fields\n            var self = this;\n            $cbUL.sortable({\n                helper: 'clone',\n                opacity: 0.9,\n                connectWith: this.sortableFields,\n                cancel: '.fb-separator',\n                cursor: 'move',\n                scroll: false,\n                placeholder: 'ui-state-highlight',\n                start: this.helpers.startMoving,\n                stop: this.helpers.stopMoving,\n                revert: 150,\n                beforeStop: this.helpers.beforeStop,\n                distance: 3,\n                update: this.helpers.update\n            });\n        },\n\n        generateFormFields: function (frmbFields, $cbUL) {\n            var self = this;\n            this.utils.forEach(frmbFields, function (i) {\n                var $field = $('<li/>', {\n                    'class': 'amelement-container icon-' + frmbFields[i].attrs.className,\n                    'type': frmbFields[i].attrs.type,\n                    'parentType': frmbFields[i].attrs.parentType,\n                    'name': frmbFields[i].className,\n                    'label': frmbFields[i].attrs.label\n                });\n\n                var $title = $('<div/>', {\n                    'class': 'amelement-title',\n                    'html': frmbFields[i].label\n                }).appendTo($field);\n\n                var $contentContainer = $('<div/>', {\n                    'class': 'amelement-content',\n                    'html': frmbFields[i].content\n                }).appendTo($field);\n\n                $field.data('newFieldData', frmbFields[i]);\n\n                $field.appendTo($cbUL);\n\n                if (frmbFields[i].attrs.type == 'date') {\n                    self.helpers.updateDateField($field, frmbFields[i].attrs.format);\n                }\n            });\n        },\n\n        saveAndUpdate: function () {\n            var self = this;\n            return this.helpers.debounce(function (evt) {\n                if (evt) {\n                    if (evt.type === 'keyup' && this.name === 'className') {\n                        return false;\n                    }\n                }\n\n                var $field = $(this).parents('.form-field:eq(0)');\n                self.helpers.updatePreview($field);\n                self.helpers.save();\n            });\n        },\n\n        processControl: function (control) {\n            if (control[0].classList.contains('input-set-control')) {\n                var inputSet = this.options.inputSets.filter(function (set) {\n                    return set.name === control[0].type;\n                })[0];\n                if (inputSet.showHeader) {\n                    var header = {\n                        type: 'header',\n                        subtype: 'h2',\n                        id: inputSet.name,\n                        label: inputSet.label\n                    };\n                    this.prepFieldVars(header, true);\n                }\n                inputSet.fields.forEach(function (field) {\n                    //TODO Check this\n                    this.prepFieldVars(field, true);\n                }).bind(this);\n            } else {\n                this.prepFieldVars(control, true);\n            }\n        },\n\n        prepFieldVars: function ($field) {\n            var isNew = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false,\n                self = this;\n\n            var field = {};\n            if ($field instanceof jQuery) {\n                var fieldData = $field.data('newFieldData');\n                if (fieldData) {\n                    field = fieldData.attrs;\n                    field.label = fieldData.label;\n                    field.options = fieldData.options;\n                    if (fieldData.childs) {\n                        $(fieldData.childs).each(function (i, child) {\n                            var element = $('.amelement-container[type=\"' + child.type + '\"]');\n                            if (element) {\n                                var childData = element.data('newFieldData');\n                                if (childData) {\n                                    var childField = childData.attrs;\n                                    childField.label = childData.label;\n                                    childField.options = childData.options;\n                                    childField = Object.assign(childField, child.data);\n                                    self.prepFieldVars(childField, true);\n                                }\n                            }\n                        });\n                        return;\n                    }\n                } else {\n                    var attrs = $field[0].attributes;\n                    if (!isNew) {\n                        field.values = $field.children().map(function (index, elem) {\n                            return {\n                                label: $(elem).text(),\n                                value: $(elem).attr('value'),\n                                selected: Boolean($(elem).attr('selected'))\n                            };\n                        });\n                    }\n\n                    for (var i = attrs.length - 1; i >= 0; i--) {\n                        field[attrs[i].name] = attrs[i].value;\n                    }\n                }\n            } else {\n                field = Object.assign({}, $field);\n            }\n\n            field.name = isNew ? this.nameAttr(field) : field.name || this.nameAttr(field);\n\n            switch (field.type) {\n                case 'country' :\n                    field.type = 'dropdown';\n                    break;\n            }\n\n            if (isNew && this.utils.inArray(\n                field.type,\n                ['textinput', 'number', 'file', 'dropdown', 'listbox', 'textarea']\n            )\n            ) {\n                field.className = 'form-control'; // backwards compatibility\n            } else {\n                field.className = field.class || field.className; // backwards compatibility\n            }\n\n            var match = /(?:^|\\s)btn-(.*?)(?:\\s|$)/g.exec(field.className);\n            if (match) {\n                field.style = match[1];\n            }\n\n            this.utils.escapeAttrs(field);\n\n            this.appendNewField(field);\n            if (isNew) {\n                document.dispatchEvent(this.events.fieldAdded);\n            }\n            this.stageWrap.removeClass('empty');\n        },\n\n        appendNewField: function (values) {\n            var self = this,\n                type = values.type || 'text',\n                label = values.label\n                    || this.options.messages[type]\n                    || (values.type === 'wysiwyg' ? $.mage.__('Wysiwyg') : this.options.messages.label),\n                delBtn = this.utils.markup('a', this.options.messages.remove, {\n                    id: 'del_' + this.lastID,\n                    className: 'del-button btn delete-confirm',\n                    title: this.options.messages.removeMessage\n                }),\n                toggleBtn = this.utils.markup('a', null, {\n                    id: this.lastID + '-edit',\n                    className: 'toggle-form btn icon-pencil',\n                    title: this.options.messages.hide\n                }),\n                copyBtn = this.utils.markup('a', this.options.messages.copyButton, {\n                    id: this.lastID + '-copy',\n                    className: 'copy-button btn icon-copy',\n                    title: this.options.messages.copyButtonTooltip\n                }),\n                liContents = this.utils.markup(\n                    'div',\n                    [toggleBtn, copyBtn, delBtn],\n                    { className: 'field-actions' }\n                ).outerHTML;\n\n            // Field preview Label\n            if (['hone', 'text', 'htwo', 'hthree'].indexOf(type) != -1) {\n                label = ''; //do not show label for text elements\n            }\n            liContents += '<label class=\"field-label\">' + label + '</label>';\n            var requiredDisplay = values.required ? 'style=\"display:inline\"' : '';\n            liContents += '<span class=\"required-asterisk\" ' + requiredDisplay + '> *</span>';\n            liContents += this.utils.markup('a', 'x', {className: 'close-field top-close-field'}).outerHTML;\n            if (values.description) {\n                liContents += '<span class=\"tooltip-element\" tooltip=\"' + values.description + '\">?</span>';\n            }\n\n            liContents = '<div class=\"field-label-container\">' + liContents + '</div>';\n\n            liContents += this.utils.markup('div', '', {className: 'prev-holder'}).outerHTML;\n            liContents += '<div id=\"' + this.lastID + '-holder\" class=\"frm-holder\">';\n            liContents += '<div class=\"form-elements\">';\n\n            liContents += this.advFields(values);\n            liContents += this.utils.markup('a', this.options.messages.close, {className: 'close-field'}).outerHTML;\n\n            liContents += '</div>';\n            liContents += '</div>';\n\n            var field = this.utils.markup('li', liContents, {\n                    'class': type + '-field form-field',\n                    'type': type,\n                    id: this.lastID\n                }),\n                $li = $(field);\n\n            $li.data('fieldData', {attrs: values});\n            if (typeof this.helpers.stopIndex !== 'undefined') {\n                $('> li', this.sortableFields).eq(this.helpers.stopIndex).before($li);\n            } else {\n                this.sortableFields.append($li);\n            }\n\n            $('.sortable-options', $li).sortable({\n                update: function update() {\n                    self.helpers.updatePreview($li);\n                }\n            }); // make dynamically added option fields sortable if they exist.\n\n            if (values.type == 'date') {\n                $li.attr('date-format', this.options.format);\n            }\n            this.helpers.updatePreview($li);\n\n            if (this.options.editOnAdd) {\n                this.helpers.closeAllEdit(this.sortableFields);\n                this.helpers.toggleEdit(this.lastID);\n            }\n\n            if (this.options.typeUserEvents[type] && this.options.typeUserEvents[type].onadd) {\n                this.options.typeUserEvents[type].onadd(field);\n            }\n\n            this.lastID = this.helpers.incrementId(this.lastID);\n            this.addCollapseDefaultValueVariables(field);\n            this.addValidateObserve($li);\n        },\n\n        // Add append and prepend options if necessary\n        nonEditableFields: function () {\n            var cancelArray = [];\n\n            if (this.options.prepend && !$('.disabled.prepend', this.sortableFields).length) {\n                var prependedField = this.utils.markup('li', this.options.prepend, {className: 'disabled prepend'});\n                cancelArray.push(true);\n                this.sortableFields.prepend(prependedField);\n            }\n\n            if (this.options.append && !$('.disabled.append', this.sortableFields).length) {\n                var appendedField = this.utils.markup('li', this.options.append, {className: 'disabled append'});\n                cancelArray.push(true);\n                this.sortableFields.append(appendedField);\n            }\n\n            if (cancelArray.some(function (elem) {\n                return elem === true;\n            })) {\n                this.stageWrap.removeClass('empty');\n            }\n        },\n\n        // Parse saved XML template data\n        loadFields: function () {\n            var self = this;\n            var formData = this.formData;\n            if (formData && formData.length) {\n                for (var i = 0; i < formData.length; i++) {\n                    this.prepFieldVars(formData[i]);\n                }\n                this.stageWrap.removeClass('empty');\n            } else if (this.options.defaultFields && this.options.defaultFields.length) {\n                // Load default fields if none are set\n                this.options.defaultFields.forEach(function (field) {\n                    return self.prepFieldVars(field);\n                });\n                this.stageWrap.removeClass('empty');\n            } else if (!this.options.prepend && !this.options.append) {\n                this.stageWrap.addClass('empty').attr('data-content', this.options.messages.getStarted);\n            }\n            this.helpers.save();\n\n            $('li.form-field:not(.disabled)', this.sortableFields).each(function () {\n                self.helpers.updatePreview($(this));\n            });\n\n            this.nonEditableFields();\n        },\n\n        nameAttr: function (field) {\n            var epoch = new Date().getTime();\n            return field.type + '-' + epoch;\n        },\n\n        /**\n         * Add data for field with options [select, checkbox-group, radio-group]\n         *\n         * @todo   refactor this nasty ~crap~ code, its actually painful to look at\n         * @param  {object} values\n         */\n        fieldOptions: function (values) {\n            var self = this;\n            var optionActions = [this.utils.markup('a', this.options.messages.addOption, {className: 'add add-opt'})],\n                fieldOptions = ['<label class=\"false-label\">' + this.options.messages.selectOptions + '</label>'],\n                isMultiple = values.multiple || values.type.match(/(listbox|checkbox|checkboxtwo|checkbox-group)/);\n\n            if (!values.values || !values.values.length) {\n                var counter = [1, 2, 3],\n                    optionLabel = self.options.messages.option;\n\n                if (values.type === 'rating') {\n                    counter = [1, 2, 3, 4, 5];\n                    optionLabel = self.options.messages.star;\n                }\n\n                if (values.options) {\n                    values.values = values.options;\n                } else {\n                    values.values = counter.map(function (index) {\n                        var label = optionLabel + ' ' + index,\n                            option = {\n                                selected: false,\n                                label: label,\n                                value: self.utils.hyphenCase(label)\n                            };\n                        return option;\n                    });\n                }\n\n                values.values[0].selected = true;\n            }\n\n            fieldOptions.push('<div class=\"sortable-options-wrap\">');\n\n            fieldOptions.push('<ol class=\"sortable-options\">');\n\n            var emptyFieldSelected = ' checked=\"true\"',\n                valuesOptions = [];\n            this.utils.forEach(values.values, function (i) {\n                if (values.values[i].selected) {\n                    emptyFieldSelected = '';\n                }\n                valuesOptions.push(self.selectFieldOptions(values.name, values.values[i], isMultiple));\n            });\n\n            fieldOptions = fieldOptions.concat(valuesOptions);\n\n            fieldOptions.push('</ol>');\n            fieldOptions.push(this.utils.markup('div', optionActions, {className: 'option-actions'}).outerHTML);\n            fieldOptions.push('</div>');\n\n            return this.utils.markup('div', fieldOptions.join(''), {className: 'form-group field-options'}).outerHTML;\n        },\n\n        /**\n         * Build the editable properties for the field\n         * @param  {object} values configuration object for advanced fields\n         * @return {String}        markup for advanced fields\n         */\n        advFields: function (values) {\n            var advFields = [],\n                optionFields = ['dropdown', 'listbox', 'checkbox', 'radio', 'checkboxtwo', 'radiotwo', 'rating', 'country'],\n                isOptionField = function () {\n                    return optionFields.indexOf(values.type) !== -1;\n                }(),\n                valueField = !this.utils.inArray(values.type, ['header', 'paragraph', 'file'].concat(optionFields));\n\n            advFields.push(this.textAttribute('name', values));\n            advFields.push(this.hiddenAttribute('entity_id', values));\n\n            if (values.type !== 'wysiwyg') {\n                advFields.push(this.textAttribute('label', values));\n            } else {\n                advFields.push(this.hiddenAttribute('value', values));\n            }\n\n            // Class\n            advFields.push(this.textAttribute('className', values));\n            advFields.push(this.textAttribute('style', values));\n\n            if (values.parentType !== 'other' || isOptionField) {\n\n                advFields.push(this.textAttribute('placeholder', values));\n                advFields.push(this.requiredField(values));\n                advFields.push(this.textAttribute('description', values));\n\n                if (values.type === 'checkbox' || values.type === 'checkboxtwo') {\n                    advFields.push(this.boolAttribute('toggle', values, {first: this.options.messages.toggle}));\n                }\n\n                values.size = values.size || 'm';\n                values.style = values.style || 'default';\n\n                //Help Text / Description Field\n                /* if (!this.utils.inArray(values.type, ['header', 'paragraph', 'button'])) {\n\n                 }*/\n\n                if (this.options.messages.subtypes[values.type]) {\n                    var optionData = this.options.messages.subtypes[values.type];\n                    advFields.push(this.selectAttribute('subtype', values, optionData));\n                }\n\n                if (values.type === 'number') {\n                    advFields.push(this.numberAttribute('min', values));\n                    advFields.push(this.numberAttribute('max', values));\n                    advFields.push(this.numberAttribute('step', values));\n                }\n\n                if (values.type === 'textinput') {\n                    advFields.push(this.selectAttribute('validation', values, this.options.messages.validations));\n                    advFields.push(this.textAttribute('regexp', values));\n                    advFields.push(this.textAttribute('errorMessage', values));\n                }\n\n                if (values.type === 'date') {\n                    values.validation = 'validate-date';\n                    advFields.push(this.hiddenAttribute('validation', values));\n                }\n\n                //TextArea Rows Attribute\n                if (values.type === 'textarea') {\n                    advFields.push(this.numberAttribute('rows', values));\n                }\n\n                if (valueField && values.type != 'googlemap') {\n                    advFields.push(this.textAttribute('value', values));\n                } else if (values.type == 'googlemap') {\n                    advFields.push(this.hiddenAttribute('value', values));\n                }\n\n                if (values.type === 'file') {\n                    advFields.push(this.textAttribute('allowed_extension', values));\n                    advFields.push(this.textAttribute('max_file_size', values));\n\n                    var labels = {\n                        first: this.options.messages.multipleFiles,\n                        second: this.options.messages.allowMultipleFiles\n                    };\n                    advFields.push(this.boolAttribute('multiple', values, labels));\n                }\n                /* other feature for future\n                if (values.type === 'checkbox' || values.type === 'radio') {\n                    advFields.push(this.boolAttribute('other', values, {\n                        first: this.options.messages.enableOther,\n                        second: this.options.messages.enableOtherMsg\n                    }));\n                }*/\n\n                if (isOptionField) {\n                    advFields.push(this.fieldOptions(values));\n                }\n\n                if (this.utils.inArray(values.type, ['textinput', 'textarea'])) {\n                    advFields.push(this.numberAttribute('maxlength', values));\n                }\n\n                // Append custom attributes as defined in typeUserAttrs option\n                if (this.options.typeUserAttrs[values.type]) {\n                    advFields.push(this.processTypeUserAttrs(this.options.typeUserAttrs[values.type], values));\n                }\n            }\n            var dependency = [];\n            if (values.dependency) {\n                dependency = values.dependency;\n            }\n            advFields.push(this.fieldDependencyArea(dependency, values.name));\n\n            advFields.push(this.selectAttribute('layout', values, this.options.messages.layouts));\n\n            advFields.push(this.hiddenAttribute('parentType', values));\n\n            return advFields.join('');\n        },\n\n\n        processTypeUserAttrs: function (typeUserAttr, values) {\n            var advField = [];\n\n            for (var attribute in typeUserAttr) {\n                if (typeUserAttr.hasOwnProperty(attribute)) {\n                    var orig = this.options.messages[attribute];\n                    var origValue = typeUserAttr[attribute].value;\n                    typeUserAttr[attribute].value = values[attribute] || typeUserAttr[attribute].value || '';\n\n                    if (typeUserAttr[attribute].label) {\n                        this.options.messages[attribute] = typeUserAttr[attribute].label;\n                    }\n\n                    if (typeUserAttr[attribute].options) {\n                        advField.push(selectUserAttrs(attribute, typeUserAttr[attribute]));\n                    } else {\n                        advField.push(inputUserAttrs(attribute, typeUserAttr[attribute]));\n                    }\n\n                    this.options.messages[attribute] = orig;\n                    typeUserAttr[attribute].value = origValue;\n                }\n            }\n\n            return advField.join('');\n        },\n\n        inputUserAttrs: function (name, attrs) {\n            var textAttrs = {\n                    id: name + '-' + this.lastID,\n                    title: attrs.description || attrs.label || name.toUpperCase(),\n                    name: name,\n                    type: attrs.type || 'text',\n                    className: ['fld-' + name]\n                },\n                label = '<label for=\"' + textAttrs.id + '\">' + this.options.messages[name] + '</label>';\n\n            if (!this.utils.inArray(textAttrs.type, ['checkbox', 'radio', 'checkboxtwo', 'radiotwo'])) {\n                textAttrs.className.push('form-control');\n            }\n\n            if (attrs.type === 'datetime') {\n                attrs.type = 'datetime-local';\n            }\n\n            textAttrs = Object.assign({}, attrs, textAttrs);\n            var textInput = '<input ' + this.utils.attrString(textAttrs) + '>',\n                inputWrap = '<div class=\"input-wrap\">' + textInput + '</div>';\n\n            return '<div class=\"form-group ' + name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        selectUserAttrs: function (name, options) {\n            var optis = Object.keys(options.options).map(function (val) {\n                    var attrs = {value: val};\n                    if (val === options.value) {\n                        attrs.selected = null;\n                    }\n                    return '<option ' + this.utils.attrString(attrs) + '>' + options.options[val] + '</option>';\n                }),\n                selectAttrs = {\n                    id: name + '-' + this.lastID,\n                    title: options.description || options.label || name.toUpperCase(),\n                    name: name,\n                    className: 'fld-' + name + ' form-control'\n                },\n                label = '<label for=\"' + selectAttrs.id + '\">' + this.options.messages[name] + '</label>';\n\n            Object.keys(options).filter(function (prop) {\n                return !utils.inArray(prop, ['value', 'options', 'label']);\n            }).forEach(function (attr) {\n                selectAttrs[attr] = options[attr];\n            });\n\n            var select = '<select ' + this.utils.attrString(selectAttrs) + '>' + optis.join('') + '</select>',\n                inputWrap = '<div class=\"input-wrap\">' + select + '</div>';\n            return '<div class=\"form-group ' + name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        boolAttribute: function (name, values, labels) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][name]) {\n                return;\n            }\n\n            var checked = values[name] !== undefined ? 'checked' : '',\n                input = '<input type=\"checkbox\" class=\"fld-' + name + '\" name=\"' + name + '\" value=\"true\" ' + checked + ' id=\"' + name + '-' + this.lastID + '\"/> ',\n                left = [],\n                right = [input];\n\n            if (labels.first) {\n                left.unshift(this.label(labels.first));\n            }\n\n            if (labels.second) {\n                right.push(this.label(labels.second));\n            }\n\n            if (labels.content) {\n                right.push(labels.content);\n            }\n\n            right.unshift('<div class=\"input-wrap\">');\n            right.push('</div>');\n\n            return '<div class=\"form-group ' + name + '-wrap\">' + left.concat(right).join('') + '</div>';\n        },\n\n        label: function (txt) {\n            return '<label for=\"' + name + '-' + this.lastID + '\">' + txt + '</label>';\n        },\n\n        btnStyles: function (style, type) {\n            var tags = {\n                    button: 'btn'\n                },\n                styles = this.options.messages.styles[tags[type]],\n                styleField = '';\n\n            if (styles) {\n                var styleLabel = '<label>' + this.options.messages.style + '</label>';\n                styleField += '<input value=\"' + style + '\" name=\"style\" type=\"hidden\" class=\"btn-style\">';\n                styleField += '<div class=\"btn-group\" role=\"group\">';\n\n                Object.keys(this.options.messages.styles[tags[type]]).forEach(function (element) {\n                    var active = style === element ? 'active' : '';\n                    styleField += '<button value=\"' + element + '\" type=\"' + type + '\" class=\"' + active + ' btn-xs ' + tags[type] + ' ' + tags[type] + '-' + element + '\">' + this.options.messages.styles[tags[type]][element] + '</button>';\n                });\n\n                styleField += '</div>';\n\n                styleField = '<div class=\"form-group style-wrap\">' + styleLabel + ' ' + styleField + '</div>';\n            }\n\n            return styleField;\n        },\n\n        /**\n         * Add a number attribute to a field.\n         * @param  {String} attribute\n         * @param  {Object} values\n         * @return {String}\n         */\n        numberAttribute: function (attribute, values) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return '';\n            }\n\n            var attrVal = values[attribute],\n                attrLabel = this.options.messages[attribute] || attribute,\n                placeholder = this.options.messages.placeholders[attribute],\n                inputConfig = {\n                    type: 'number',\n                    value: attrVal,\n                    name: attribute,\n                    min: '0',\n                    placeholder: placeholder,\n                    className: 'fld-' + attribute + ' form-control',\n                    id: attribute + '-' + this.lastID\n                },\n                numberAttribute = '<input ' + this.utils.attrString(this.utils.trimObj(inputConfig)) + '>',\n                inputWrap = '<div class=\"input-wrap\">' + numberAttribute + '</div>';\n\n            return '<div class=\"form-group ' + attribute + '-wrap\"><label for=\"' + inputConfig.id + '\">'\n                + attrLabel + '</label> ' + inputWrap + '</div>';\n\n        },\n\n        selectAttribute: function (attribute, values, optionData) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return;\n            }\n            var self = this,\n                allowedTypes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            var selectOptions = optionData.map(function (option, i) {\n                    if (allowedTypes && allowedTypes.indexOf(option.type) === -1) {\n                        return false;\n                    }\n                    var optionAttrs = Object.assign({\n                        label: self.options.messages.option + ' ' + i,\n                        value: undefined\n                    }, option);\n\n                    if (values[attribute] != undefined) {\n                        try {\n                            var validationJson = JSON.parse(values[attribute].replace(/&quot;/g, '\"'));\n                        } catch (ex) {\n                            validationJson = {validation: values[attribute]};\n                        }\n\n                        if (validationJson.hasOwnProperty(\"validation\") && (option.value === validationJson.validation)) {\n                            optionAttrs.selected = true;\n                        }\n                    }\n\n                    return '<option ' + self.utils.attrString(self.utils.trimObj(optionAttrs)) + '>'\n                        + optionAttrs.label + '</option>';\n                }),\n                selectAttrs = {\n                    id: attribute + '-' + this.lastID,\n                    name: attribute,\n                    value: attribute,\n                    className: 'fld-' + attribute + ' form-control'\n                },\n\n                label = '<label for=\"' + selectAttrs.id + '\">' + (this.options.messages[attribute]\n                    || this.utils.capitalize(attribute)) + '</label>';\n\n\n            var select = '<select ' + this.utils.attrString(selectAttrs) + '>' + selectOptions.join('') + '</select>',\n                inputWrap = '<div class=\"input-wrap\">' + select + '</div>';\n\n            return '<div class=\"form-group ' + selectAttrs.name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        /**\n         * Generate some text inputs for field attributes, **will be replaced**\n         * @param  {String} attribute\n         * @param  {Object} values\n         * @return {String}\n         */\n        textAttribute: function (attribute, values) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return '';\n            }\n\n            var textArea = ['paragraph'];\n\n            var attrVal = values[attribute] || '',\n                attrLabel = this.options.messages[attribute];\n            if (attribute === 'label' && this.utils.inArray(values.type, textArea)) {\n                attrLabel = this.options.messages.content;\n            }\n\n            var placeholderFields = ['textinput', 'textarea', 'dropdown'];\n            var placeholders = this.options.messages.placeholders,\n                placeholder = placeholders[attribute] || '',\n                attributefield = '',\n                noMakeAttr = [];\n            // Field has placeholder attribute\n            if (attribute === 'placeholder' && !this.utils.inArray(values.type, placeholderFields)) {\n                noMakeAttr.push(true);\n            }\n\n            if (!noMakeAttr.some(function (elem) {\n                return elem === true;\n            })) {\n                var inputConfig = {\n                    name: attribute,\n                    placeholder: placeholder,\n                    className: 'fld-' + attribute + ' form-control',\n                    id: attribute + '-' + this.lastID\n                };\n                var attributeLabel = '<label for=\"' + inputConfig.id + '\">' + attrLabel + '</label>';\n\n                if (attribute === 'label' && this.utils.inArray(values.type, textArea)\n                    || attribute === 'value' && values.type === 'textarea') {\n                    attributefield += '<textarea ' + this.utils.attrString(inputConfig) + '>' + attrVal + '</textarea>';\n                } else if (attribute === 'value' && values.type === 'date') {\n                    inputConfig.value = attrVal;\n                    inputConfig.type = 'date';\n                    attributefield += '<input ' + this.utils.attrString(inputConfig) + '>';\n                } else {\n                    inputConfig.value = attrVal;\n                    inputConfig.type = 'text';\n                    attributefield += '<input ' + this.utils.attrString(inputConfig) + '>';\n                }\n                var note = this.getNote(attribute, values),\n                    inputWrap = '<div class=\"input-wrap\">' + attributefield + note +'</div>';\n\n                attributefield = '<div class=\"form-group ' + attribute + '-wrap\">' + attributeLabel + ' ' + inputWrap + '</div>';\n            }\n\n            return attributefield;\n        },\n\n        getNote: function (attribute, values) {\n            var allowTypes = ['textinput', 'textarea', 'number'],\n                note = '';\n\n            if (attribute === 'value' && allowTypes.includes(values.type)) {\n                $.each(this.options.messages['notes'][attribute], function (index, noteData) {\n                    var variables = '',\n                        noteVariant ='';\n\n                    if (typeof values.entityType === 'undefined' || values.entityType === noteData.allowedEntityType) {\n                        noteVariant = '<a class=\"default-values-link\" href=\"#\">'\n                            + noteData['label']\n                            + '</a>';\n\n                        noteData.values.forEach(function (value) {\n                            variables += '<div class=\"variable\">' + value + '</div>'\n                        });\n                        noteVariant += '<div class=\"default-value-variants\">' + variables + '</div>';\n                        note += '<div class=\"value-note-wrap\">' + noteVariant + '</div>';\n                    }\n                });\n            }\n\n            return note;\n        },\n\n        hiddenAttribute: function (attribute, values) {\n            var attrValue = values[attribute] || '',\n                attributeField = '<input class=\"fld-' + attribute + ' form-control\" type=\"hidden\" name=\"'\n                    + attribute + '\" value=\"' + attrValue + '\">';\n\n            return attributeField;\n        },\n\n        requiredField: function (values) {\n            var noRequire = ['header', 'paragraph', 'button'],\n                noMake = [],\n                requireField = '';\n\n            if (this.utils.inArray(values.type, noRequire)) {\n                noMake.push(true);\n            }\n            if (!noMake.some(function (elem) {\n                return elem === true;\n            })) {\n                requireField = this.boolAttribute('required', values, {first: this.options.messages.required});\n            }\n\n            return requireField;\n        },\n\n        // Select field html, since there may be multiple\n        selectFieldOptions: function (name, optionData, multipleSelect) {\n            var optionInputType = {\n                    selected: multipleSelect ? 'checkbox' : 'radio'\n                },\n                optionDataOrder = ['value', 'label', 'selected'],\n                optionInputs = [];\n\n            optionData = Object.assign({selected: false, label: '', value: ''}, optionData);\n\n            for (var i = optionDataOrder.length - 1; i >= 0; i--) {\n                var prop = optionDataOrder[i];\n                if (optionData.hasOwnProperty(prop)) {\n                    var attrs = {\n                        type: optionInputType[prop] || 'text',\n                        'class': 'option-' + prop,\n                        value: optionData[prop],\n                        name: name + '-option'\n                    };\n\n                    if (this.options.messages.placeholders[prop]) {\n                        attrs.placeholder = this.options.messages.placeholders[prop];\n                    }\n\n                    if (prop === 'selected'\n                        && (optionData.selected === \"1\" || optionData.selected === true)\n                    ) {\n                        attrs.checked = optionData.selected;\n                    }\n\n                    optionInputs.push(this.utils.markup('input', null, attrs));\n                }\n            }\n\n            var removeAttrs = {\n                className: 'remove btn',\n                title: this.options.messages.removeMessage\n            };\n\n            optionInputs.push(this.utils.markup('a', this.options.messages.remove, removeAttrs));\n            var field = this.utils.markup('li', optionInputs);\n\n            return field.outerHTML;\n        },\n\n\n        cloneItem: function (currentItem) {\n            var self = this;\n            var currentId = currentItem.attr('id'),\n                type = currentItem.attr('type'),\n                ts = new Date().getTime(),\n                cloneName = type + '-' + ts;\n\n            var $clone = currentItem.clone();\n\n            $clone.find('[id]').each(function () {\n                this.id = this.id.replace(currentId, self.lastID);\n            });\n\n            $clone.find('[for]').each(function () {\n                this.setAttribute('for', this.getAttribute('for').replace(currentId, self.lastID));\n            });\n\n            $clone.each(function () {\n                $('e:not(.form-elements)').each(function () {\n                    var newName = this.getAttribute('name');\n                    newName = newName.substring(0, newName.lastIndexOf('-') + 1);\n                    newName = newName + ts.toString();\n                    this.setAttribute('name', newName);\n                });\n            });\n\n            $clone.find('.form-elements').find(':input').each(function () {\n                if (this.getAttribute('name') === 'name') {\n                    var newVal = this.getAttribute('value');\n                    newVal = newVal.substring(0, newVal.lastIndexOf('-') + 1);\n                    newVal = newVal + ts.toString();\n                    this.setAttribute('value', newVal);\n                }\n            });\n\n            $clone.attr('id', this.lastID);\n            $clone.attr('name', cloneName);\n            $clone.addClass('cloned');\n            $('.sortable-options', $clone).sortable();\n\n            if (this.options.typeUserEvents[type] && this.options.typeUserEvents[type].onclone) {\n                this.options.typeUserEvents[type].onclone($clone[0]);\n            }\n\n            this.lastID = this.helpers.incrementId(this.lastID);\n            return $clone;\n        },\n\n        observeFields: function ($cbUL, formbId) {\n            var self = this;\n            // Save field on change\n            this.sortableFields.on(\n                'change blur keyup click', '.form-elements input, .form-elements select, .form-elements textarea, .toggle-form',\n                self.saveAndUpdate()\n            );\n\n            $('li', $cbUL).click(function (e) {\n                self.helpers.stopIndex = undefined;\n                self.processControl($(this));\n                self.helpers.save();\n                e.preventDefault();\n            });\n\n            // callback to track disabled tooltips\n            this.sortableFields.on('mousemove', 'li.disabled', function (e) {\n                $('.frmb-tt', this).css({\n                    left: e.offsetX - 16,\n                    top: e.offsetY - 34\n                });\n            });\n\n            // callback to call disabled tooltips\n            this.sortableFields.on('mouseenter', 'li.disabled', function () {\n                self.helpers.disabledTT.add($(this));\n            });\n\n            // callback to call disabled tooltips\n            this.sortableFields.on('mouseleave', 'li.disabled', function () {\n                self.helpers.disabledTT.remove($(this));\n            });\n\n            // ---------------------- UTILITIES ---------------------- //\n            // delete options\n            this.sortableFields.on('click touchstart', '.remove', function (e) {\n                var $field = $(this).parents('.form-field:eq(0)');\n                e.preventDefault();\n                var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\n                if (optionsCount <= 0) {\n                    self.options.notify.error('Error: ' + self.options.messages.minOptionMessage);\n                } else {\n                    $(this).parent('li').slideUp('250', function () {\n                        $(this).remove();\n                        self.helpers.updatePreview($field);\n                        self.helpers.save();\n                    });\n                }\n            });\n\n            // touch focus\n            this.sortableFields.on('touchstart', 'input', function (e) {\n                if (e.handled !== true) {\n                    if ($(this).attr('type') === 'checkbox') {\n                        $(this).trigger('click');\n                    } else {\n                        $(this).focus();\n                        var fieldVal = $(this).val();\n                        $(this).val(fieldVal);\n                    }\n                } else {\n                    return false;\n                }\n            });\n\n            // toggle fields\n            this.sortableFields.on('click touchstart', '.toggle-form, .close-field', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                if (e.handled !== true) {\n                    var targetID = $(this).parents('.form-field:eq(0)').attr('id');\n                    self.helpers.toggleEdit(targetID);\n                    e.handled = true;\n                } else {\n                    return false;\n                }\n            });\n\n            this.sortableFields.on('change', '.prev-holder input, .prev-holder select', function (e) {\n                if (e.target.classList.contains('other-option') || $(e.target).attr('type') == 'googlemap') {\n                    return;\n                }\n                var field = $(e.target).closest('li.form-field')[0];\n                if (self.utils.inArray(field.type, ['checkbox', 'checkboxtwo'])) {\n                    field.querySelector('[class=\"option-value\"][value=\"' + e.target.value + '\"]')\n                        .parentElement.childNodes[0].checked = field\n                        .querySelector('.prev-holder input[value=\"' + e.target.value + '\"]').checked;\n                } else if (self.utils.inArray(field.type, ['listbox'])) {\n                    $(field).find('[class=\"option-selected\"]').attr('checked', false);\n                    $.each($(field).find('.prev-holder select').val(), function (key, value) {\n                        field.querySelector('[class=\"option-value\"][value=\"' + value + '\"]')\n                            .parentElement.childNodes[0].checked = true;\n                    });\n                } else if (self.utils.inArray(field.type, ['dropdown', 'rating', 'radio', 'radiotwo'])) {\n                    field.querySelector('[class=\"option-value\"][value=\"' + e.target.value + '\"]')\n                        .parentElement.childNodes[0].checked = true;\n                } else {\n                    document.getElementById('value-' + field.id).value = e.target.value;\n                }\n\n                self.helpers.save();\n            });\n\n            // update preview to wysiwyg\n            this.sortableFields.on('change', '.prev-holder [type=wysiwyg]', _.debounce(function () {\n                self.helpers.save();\n            }, 1000));\n\n            // update preview to label\n            this.sortableFields.on('keyup change', '[name=\"label\"]', function () {\n                $('.field-label', $(this).closest('li:not(.hone-field):not(.text-field):not(.hthree-field):not(.htwo-field)')).text($(this).val());\n            });\n\n            // remove error styling when users tries to correct mistake\n            this.sortableFields.delegate('input.error', 'keyup', function () {\n                $(this).removeClass('error');\n            });\n\n            // update preview for description\n            this.sortableFields.on('keyup', 'input[name=\"description\"]', function () {\n                var $field = $(this).parents('.form-field:eq(0)');\n                var closestToolTip = $('.tooltip-element', $field);\n                var ttVal = $(this).val();\n                if (ttVal !== '') {\n                    if (!closestToolTip.length) {\n                        var tt = '<span class=\"tooltip-element\" tooltip=\"' + ttVal + '\">?</span>';\n                        $('.field-label', $field).after(tt);\n                    } else {\n                        closestToolTip.attr('tooltip', ttVal).css('display', 'inline-block');\n                    }\n                } else {\n                    if (closestToolTip.length) {\n                        closestToolTip.css('display', 'none');\n                    }\n                }\n            });\n\n            this.sortableFields.on('change', '.fld-multiple', function (e) {\n                var newType = e.target.checked ? 'checkbox' : 'radio';\n\n                $(e.target).parents('.form-elements:eq(0)')\n                    .find('.sortable-options input.option-selected').each(function () {\n                    this.type = newType;\n                });\n            });\n\n            // format name attribute\n            this.sortableFields.on('blur', 'input.fld-name', function () {\n                this.value = self.helpers.safename(this.value);\n                if (this.value === '') {\n                    $(this).addClass('field-error').attr('placeholder', self.options.messages.cannotBeEmpty);\n                } else {\n                    $(this).removeClass('field-error');\n                }\n            });\n\n            this.sortableFields.on('blur', 'input.fld-maxlength', function () {\n                this.value = self.helpers.forcenumber(this.value);\n            });\n\n            // Copy field\n            this.sortableFields.on('click touchstart', '.icon-copy', function (e) {\n                e.preventDefault();\n                var currentItem = $(this).parents('li');\n                var $clone = self.cloneItem(currentItem);\n                $clone.insertAfter(currentItem);\n                self.helpers.updatePreview($clone, currentItem);\n                self.helpers.save();\n            });\n\n            // Delete field\n            this.sortableFields.on('click touchstart', self.selectors.deleteButton, function (event) {\n                var buttonPosition = this.getBoundingClientRect(),\n                    bodyRect = document.body.getBoundingClientRect(),\n                    coords = {\n                        pageX: buttonPosition.left + buttonPosition.width / 2,\n                        pageY: buttonPosition.top - bodyRect.top - 12\n                    },\n                    deleteID = $(this).parents(self.selectors.fieldFirst).attr('id'),\n                    $field = $(document.getElementById(deleteID)),\n                    warnH3,\n                    warnMessage;\n\n                event.preventDefault();\n\n                self.removeWysiwygData(event.target);\n\n                document.addEventListener('modalClosed', function () {\n                    $field.removeClass(self.classes.delete);\n                }, false);\n\n                // Check if user is sure they want to remove the field\n                if (self.options.fieldRemoveWarn) {\n                    warnH3 = self.utils.markup('h3', self.options.messages.warning);\n                    warnMessage = self.utils.markup('p', self.options.messages.fieldRemoveWarning);\n\n                    self.helpers.confirm([warnH3, warnMessage], function () {\n                        return self.helpers.removeField(deleteID);\n                    }, coords);\n\n                    $field.addClass(self.classes.delete);\n                } else {\n                    self.helpers.removeField(deleteID);\n                }\n            });\n\n            // Update button style selection\n            this.sortableFields.on('click', '.style-wrap button', function () {\n                var styleVal = $(this).val(),\n                    $parent = $(this).parent(),\n                    $btnStyle = $parent.prev('.btn-style');\n                $btnStyle.val(styleVal);\n                $(this).siblings('.btn').removeClass('active');\n                $(this).addClass('active');\n                self.saveAndUpdate().call($parent);\n            });\n\n            // Attach a callback to toggle required asterisk\n            this.sortableFields.on('click', 'input.fld-required', function () {\n                var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\n                requiredAsterisk.toggle();\n            });\n\n            // Attach a callback to add new options\n            this.sortableFields.on('click', '.add-opt', function (e) {\n                e.preventDefault();\n                var $optionWrap = $(this).parents('.field-options:eq(0)'),\n                    $multiple = $('[name=\"multiple\"]', $optionWrap),\n                    $firstOption = $('.option-selected:eq(0)', $optionWrap),\n                    isMultiple = $multiple.length ? $multiple.prop('checked') : $firstOption.attr('type') === 'checkbox',\n                    name = $firstOption.attr('name') || $optionWrap.attr('name'),\n                    sortOptions = $('.sortable-options', $optionWrap);\n\n                if (sortOptions.attr('dependent')) {\n                    sortOptions.append(self.createDependencyRow(false, false, false, name, false));\n                } else {\n                    sortOptions.append(self.selectFieldOptions(name, false, isMultiple));\n                }\n            });\n\n            this.sortableFields.on('mouseover mouseout', '.remove, .del-button', function () {\n                $(this).parents('li:eq(0)').toggleClass('delete');\n            });\n\n            this.sortableFields.on('change', '[name=\"dependency-field\"]', function (e) {\n                var fieldName = this.value,\n                    field = self.findField(fieldName),\n                    values = [],\n                    selects = $(this).parent('li').find('select');\n\n                if (field && field.values) {\n                    values = field.values;\n                    values = self.createDependencyRow(fieldName, '', values, false, true);\n                    $(this).find('[selected=\"selected\"]').removeAttr('selected');\n                    $(this).find('[value=\"' + $(this).val() + '\"]').attr('selected', true);\n                    if (selects.length > 1) {\n                        selects.last().replaceWith(values);\n                    } else {\n                        selects.last().after(values);\n                    }\n                } else {\n                    $(this).parent('li').find('select').last().remove();\n                }\n            });\n\n            if (self.options.showActionButtons) {\n                // View XML\n                var xmlButton = $(document.getElementById(formbId + '-view-data'));\n                xmlButton.click(function (e) {\n                    e.preventDefault();\n                    self.helpers.showData();\n                });\n\n                // Clear all fields in form editor\n                var clearButton = $(document.getElementById(formbId + '-clear-all'));\n                clearButton.click(function () {\n                    var fields = $('li.form-field');\n                    var buttonPosition = this.getBoundingClientRect(),\n                        bodyRect = document.body.getBoundingClientRect(),\n                        coords = {\n                            pageX: buttonPosition.left + buttonPosition.width / 2,\n                            pageY: buttonPosition.top - bodyRect.top - 12\n                        };\n\n                    if (fields.length) {\n                        self.helpers.confirm(self.options.messages.clearAllMessage, function () {\n                            self.helpers.removeAllfields();\n                            self.options.notify.success(self.options.messages.allFieldsRemoved);\n                            self.helpers.save();\n                        }, coords);\n                    } else {\n                        self.helpers.dialog('There are no fields to clear', {pageX: coords.pageX, pageY: coords.pageY});\n                    }\n                });\n            }\n        },\n\n        /**\n         * Remove cached wysiwyg content by wysiwyg name\n         *\n         * @param  {Object} target - DOM element, target of an event\n         * @returns {void}\n         */\n        removeWysiwygData: function (target) {\n            var selector = this.selectors.wysiwygContainer.replace('{id}', target.id.replace('del_', '')),\n                name = $(target).closest(selector).find(this.selectors.wysiwygField).attr('name');\n\n            if (name) {\n                this.helpers.removeWysiwygHtml(name);\n            }\n        },\n\n        fieldDependencyArea: function (values, name) {\n            var self = this,\n                optionActions = [this.utils.markup('a', this.options.messages.addOption, {className: 'add add-opt'})],\n                fieldOptions = ['<label class=\"false-label\">' + this.options.messages.dependencyTitle + '</label>'];\n\n            fieldOptions.push('<div class=\"sortable-options-wrap\">');\n\n            fieldOptions.push('<ol class=\"sortable-options\" dependent=\"true\">');\n\n            this.utils.forEach(values, function (i, dependency) {\n                fieldOptions.push(self.createDependencyRow(dependency.field, dependency.value, false, false, false));\n            });\n\n            fieldOptions.push('</ol>');\n            fieldOptions.push(this.utils.markup('div', optionActions, {className: 'option-actions'}).outerHTML);\n            fieldOptions.push('</div>');\n\n            return this.utils.markup('div', fieldOptions.join(''), {\n                className: 'form-group field-options',\n                name: name\n            }).outerHTML;\n        },\n\n        createDependencyRow: function (selectedField, selectedValue, value, currentField, onlyValueSelect) {\n            var optionInputs = [],\n                formData = this.getParsedFormData(),\n                self = this,\n                allowedDependencyTypes = ['no-select', 'dropdown', 'checkbox', 'radio', 'checkboxtwo', 'radiotwo', 'listbox'],\n                updateValues = function (index) {\n                    var label = index.label\n                        ? self.utils.cutJs(index.label)\n                        : '';\n                    var option = {\n                        selected: false,\n                        label: label,\n                        value: index.name || index.value,\n                        type: index.type\n                    };\n\n                    if (currentField && option.value == currentField) {\n                        return false;\n                    }\n\n                    if (selectedField && option.value == selectedField) {\n                        option.selected = 'selected';\n                    }\n\n                    return option;\n                };\n\n            optionInputs.push(\n                $(this.selectAttribute(\n                    'dependency-field',\n                    '',\n                    [{\n                        name: 'empty',\n                        label: 'Choose an Option...',\n                        type: 'no-select'\n                    }].concat(formData.map(updateValues)),\n                    allowedDependencyTypes\n                )).find('select')[0]\n            );\n\n            if (selectedField) {\n                selectedField = self.findField(selectedField);\n                if (selectedField && selectedField.values) {\n                    value = selectedField.values;\n                    selectedField = selectedValue;\n                    value = value.map(updateValues);\n                }\n            }\n\n            if (typeof value != 'undefined' && value) {\n                optionInputs.push($(this.selectAttribute('dependency-value', '', value)).find('select')[0]);\n            }\n\n            var removeAttrs = {\n                className: 'remove btn',\n                title: this.options.messages.removeMessage\n            };\n\n            optionInputs.push(this.utils.markup('a', this.options.messages.remove, removeAttrs));\n            var field = this.utils.markup('li', optionInputs, {className: 'dependent-field'});\n            if (onlyValueSelect) {\n                field = $(field).find('select').last()[0];\n            }\n\n            return field.outerHTML;\n        },\n\n        getParsedFormData: function () {\n            var formData = null;\n\n            try {\n                formData = JSON.parse(this.formData);\n            } catch (e) {\n                formData = this.formData;\n            }\n\n            return formData;\n        },\n\n        findField: function (name) {\n            var field = null;\n\n            this.getParsedFormData().forEach(function (element) {\n                if (element.name == name) {\n                    field = element;\n                }\n            });\n\n            return field;\n        }\n    });\n    return $.mage.customFormBuilder;\n});\n","Amasty_Customform/js/am-google-map.js":"define([\n    'jquery',\n    'Magento_Ui/js/modal/modal'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.amGoogleMap', {\n        options: {\n            defaultPosition: {\n                lat: 0,\n                lng: 0\n            },\n            position: null,\n            enabledMarker: true,\n            showFormattedAddress: false,\n            styles: null\n        },\n        zoom: 1,\n        map: null,\n\n        _create: function () {\n            this.mapInput = this.element.find('input').hide();\n            if (typeof google != 'undefined' && google.maps) {\n                if (!this.options.position) {\n                    this.options.position = this.options.defaultPosition;\n                }\n                if (this.options.zoom) {\n                    this.zoom = parseInt(this.options.zoom);\n                }\n\n                if (this.element.find('.map').length == 0) {\n                    this.element.prepend($('<div>',\n                        {\n                            'class': 'map'\n                        }\n                    ));\n                }\n                var map = new google.maps.Map(\n                    this.element.find('.map')[0], {zoom: this.zoom, center: this.options.position}\n                );\n                this.map = map;\n                if (this.options.styles) {\n                    var previousStyles = $(this.map.getDiv()).attr('style');\n                    if (!previousStyles) {\n                        previousStyles = '';\n                    }\n                    $(this.map.getDiv()).attr(\n                        'style',\n                        previousStyles + ' ' + this.options.styles\n                    );\n                }\n                this.mapInput.val(this.options.position);\n\n                this.currentMarker = new google.maps.Marker({position: this.options.position, map: map});\n\n                if (this.options.enabledMarker) {\n                    google.maps.event.addListener(map, 'click', function (event) {\n                        this.moveMarker(event.latLng);\n                    }.bind(this));\n                }\n\n                this.map.addListener('zoom_changed', function () {\n                    this.element.find('input.amform-googlemap').trigger('change');\n                }.bind(this));\n\n                if (this.options.showFormattedAddress) {\n                    this.showAddress();\n                }\n\n                var searchbox = this.searchBox();\n\n                google.maps.event.addListenerOnce(this.map, 'tilesloaded', function () {\n                    searchbox.show();\n                });\n            }\n        },\n\n        getPosition: function () {\n            return this.currentMarker.getPosition();\n        },\n\n        searchBox: function () {\n            this.element.prepend($('<input>',\n                {\n                    'class': 'searchbox'\n                }\n            ).hide());\n\n            var self = this,\n                input = this.element.find('.searchbox'),\n                searchBox = new google.maps.places.SearchBox(input[0]);\n            this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(input[0]);\n\n            // disable submit from on search\n            input.onkeypress = function (e) {\n                var key = e.charCode || e.keyCode || 0;\n                if (key == 13) {\n                    e.preventDefault();\n                }\n            };\n            searchBox.addListener('places_changed', function (event) {\n                var places = searchBox.getPlaces();\n\n                if (places.length == 0) {\n                    return;\n                }\n\n                var bounds = new google.maps.LatLngBounds();\n                places.forEach(function (place) {\n                    if (!place.geometry) {\n                        return;\n                    }\n\n                    if (self.options.enabledMarker) {\n                        self.moveMarker(place.geometry.location);\n                    }\n\n                    if (place.geometry.viewport) {\n                        bounds.union(place.geometry.viewport);\n                    } else {\n                        bounds.extend(place.geometry.location);\n                    }\n                });\n                self.map.fitBounds(bounds);\n            });\n\n            return input;\n        },\n\n        moveMarker: function (location) {\n            if (this.currentMarker) {\n                this.currentMarker.setMap(null);\n            }\n            this.currentMarker = new google.maps.Marker({\n                position: location,\n                map: this.map\n            });\n            this.mapInput.val(location);\n            this.element.find('input.amform-googlemap').trigger('change');\n        },\n\n        showAddress: function () {\n            if (this.element.find('.am-address').length == 0) {\n                this.element.prepend($('<div>',\n                    {\n                        'class': 'am-address'\n                    }\n                ));\n            }\n            var geocoder = new google.maps.Geocoder(),\n                addressField = this.element.find('.am-address'),\n                position = this.getPosition();\n\n            geocoder.geocode({\n                'latLng': position\n            }, function (results, status) {\n                if (status == google.maps.GeocoderStatus.OK) {\n                    if (results[0]) {\n                        addressField.html(results[0].formatted_address);\n                    }\n                } else {\n                    addressField.html(position.toString());\n                }\n            });\n        },\n\n        getZoom: function () {\n            return this.map.getZoom();\n        }\n    });\n\n    return $.mage.amGoogleMap;\n});\n","Amasty_Customform/js/form-render.js":"// Element.remove() polyfill\n/* eslint-disable one-var, vars-on-top, max-depth, no-shadow */\n\ndefine([\n    'jquery',\n    'mage/url',\n    'mage/translate',\n    'mage/calendar',\n    'Magento_Ui/js/modal/modal'\n], function ($, urlBuilder) {\n    'use strict';\n\n    if (!('remove' in Element.prototype)) {\n        Element.prototype.remove = function () {\n            if (this.parentNode) {\n                this.parentNode.removeChild(this);\n            }\n        };\n    }\n\n    // Event polyfill\n    if (typeof Event !== 'function') {\n        (function () {\n            window.Event = function (evt) {\n                var event = document.createEvent('Event');\n\n                event.initEvent(evt, true, true);\n\n                return event;\n            };\n        })();\n    }\n\n    // Object.assign polyfill\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target) {\n            if (target == null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            target = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var source = arguments[index];\n\n                if (source !== null) {\n                    for (var key in source) {\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n            }\n\n            return target;\n        };\n    }\n\n    'use strict';\n\n\n    (function ($) {\n        var Toggle = function Toggle(element, options) {\n            var defaults = {\n                theme: 'fresh',\n                messages: {\n                    off: 'Off',\n                    on: 'On'\n                }\n            },\n            opts = $.extend(defaults, options),\n                $kcToggle = $('<div class=\"kc-toggle\"></div>').insertAfter(element).append(element);\n\n            $kcToggle.toggleClass('on', element.is(':checked'));\n\n            var kctOn = '<div class=\"kct-on\">' + opts.messages.on + '</div>',\n                kctOff = '<div class=\"kct-off\">' + opts.messages.off + '</div>',\n                kctHandle = '<div class=\"kct-handle\"></div>',\n                kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n            $kcToggle.append(kctInner);\n\n            $kcToggle.click(function () {\n                element.attr('checked', !element.attr('checked'));\n                $(this).toggleClass('on');\n            });\n        };\n\n        $.fn.kcToggle = function (options) {\n            var toggle = this;\n\n            return toggle.each(function () {\n                var element = $(this),\n                    kcToggle;\n\n                if (element.data('kcToggle')) {\n                    return;\n                }\n\n                kcToggle = new Toggle(element, options);\n                element.data('kcToggle', kcToggle);\n            });\n        };\n    })($);\n\n    'use strict';\n\n    // eslint-disable-next-line newline-after-var\n    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === 'function'\n            && obj.constructor === Symbol\n            && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n    },\n\n    fbUtils = {};\n    fbUtils.amProgressId = 'form_submit_loading';\n    fbUtils.amImageContainerId = 'loading_image_container';\n    fbUtils.formOptions = [];\n\n    // cleaner syntax for testing indexOf element\n    fbUtils.inArray = function (needle, haystack) {\n        return haystack.indexOf(needle) !== -1;\n    };\n\n    /**\n     * Remove null or undefined values\n     * @param  {Object} attrs {attrName: attrValue}\n     * @return {Object}       Object trimmed of null or undefined values\n     */\n    fbUtils.trimObj = function (attrs) {\n        var xmlRemove = [null, undefined, '', false, 'false'];\n\n        for (var attr in attrs) {\n            if (fbUtils.inArray(attrs[attr], xmlRemove)) {\n                delete attrs[attr];\n            } else if (Array.isArray(attrs[attr])) {\n                if (!attrs[attr].length) {\n                    delete attrs[attr];\n                }\n            }\n        }\n\n        return attrs;\n    };\n\n    /**\n     * Test if attribute is a valid HTML attribute\n     * @param  {String} attr\n     * @return {Boolean}\n     */\n    fbUtils.validAttr = function (attr) {\n        var invalid = [\n            'values', 'enableOther', 'other', 'label',\n            'validation_fields', 'subtype', 'dependency',\n            'map_position'\n        ];\n\n        return !fbUtils.inArray(attr, invalid);\n    };\n\n    /**\n     * Convert an attrs object into a string\n     *\n     * @param  {Object} attrs object of attributes for markup\n     * @return {string}\n     */\n    fbUtils.attrString = function (attrs) {\n        var attributes = [];\n\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n                if (attr === 'placeholder') {\n                    attributes.push(attr + '=\"' + attrs[attr] + '\"');\n                } else {\n                    attr = fbUtils.safeAttr(attr, attrs[attr]);\n                    attributes.push(attr.name + attr.value);\n                }\n            }\n        }\n\n        return attributes.join(' ');\n    };\n\n    /**\n     * Convert attributes to markup safe strings\n     * @param  {String} name  attribute name\n     * @param  {String} value attribute value\n     * @return {Object}       {attrName: attrValue}\n     */\n    fbUtils.safeAttr = function (name, value) {\n        var valString = void 0;\n\n        name = fbUtils.safeAttrName(name);\n\n        if (value) {\n            if (Array.isArray(value)) {\n                valString = fbUtils.escapeAttr(value.join(' '));\n            } else {\n                if (typeof value === 'boolean') {\n                    value = value.toString();\n                }\n\n                value = value.toString();\n\n                if (['regexp', 'data-validate'].includes(name)) {\n                    valString = fbUtils.escapeAttr(value);\n                } else {\n                    valString = fbUtils.escapeAttr(value.replace(',', ' ').trim());\n                }\n            }\n        }\n\n        value = value ? '=\"' + valString + '\"' : '';\n\n        return {\n            name: name,\n            value: value\n        };\n    };\n\n    fbUtils.safeAttrName = function (name) {\n        var safeAttr = {\n            className: 'class'\n        };\n\n        return safeAttr[name] || fbUtils.hyphenCase(name);\n    };\n\n    /**\n     * Convert strings into lowercase-hyphen\n     *\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.hyphenCase = function (str) {\n        str = str.replace(/[^\\w\\s\\-]/gi, '');\n        str = str.replace(/([A-Z])/g, function ($1) {\n            return '-' + $1.toLowerCase();\n        });\n\n        return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n    };\n\n    /**\n     * convert a hyphenated string to camelCase\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.camelCase = function (str) {\n        return str.replace(/-([a-z])/g, function (m, w) {\n            return w.toUpperCase();\n        });\n    };\n\n    /**\n     * Generate markup wrapper where needed\n     *\n     * @param  {string} tag\n     * @return {String}\n     */\n    fbUtils.markup = function (tag) {\n        var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '',\n            attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n            contentType = void 0,\n            field = document.createElement(tag),\n\n            getContentType = function getContentType(content) {\n                return Array.isArray(content) ?\n                    'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n            },\n\n            appendContent = {\n                string: function string(content) {\n                    field.innerHTML = content;\n                },\n                object: function object(content) {\n                    return field.appendChild(content);\n                },\n                array: function array(content) {\n                    for (var i = 0; i < content.length; i++) {\n                        contentType = getContentType(content[i]);\n                        appendContent[contentType](content[i]);\n                    }\n                }\n            };\n\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                var name = fbUtils.safeAttrName(attr);\n\n                field.setAttribute(name, attrs[attr]);\n            }\n        }\n\n        contentType = getContentType(content);\n\n        if (content) {\n            appendContent[contentType].call(this, content);\n        }\n\n        return field;\n    };\n\n    /**\n     * Convert html element attributes to key/value object\n     * @return {Object} ex: {attrName: attrValue}\n     * @param {object} elem\n     */\n    fbUtils.parseAttrs = function (elem) {\n        var attrs = elem.attributes,\n            data = {};\n\n        fbUtils.forEach(attrs, function (attr) {\n            var attrVal = attrs[attr].value;\n\n            if (attrVal.match(/false|true/g)) {\n                attrVal = attrVal === 'true';\n            } else if (attrVal.match(/undefined/g)) {\n                attrVal = undefined;\n            }\n\n            if (attrVal) {\n                data[attrs[attr].name] = attrVal;\n            }\n        });\n\n        return data;\n    };\n\n    /**\n     * Convert field options to optionData\n     * @return {Array} optionData array\n     * @param {object} field\n     */\n    fbUtils.parseOptions = function (field) {\n        var options = field.getElementsByTagName('option'),\n            optionData = {},\n            data = [];\n\n        if (options.length) {\n            for (var i = 0; i < options.length; i++) {\n                optionData = fbUtils.parseAttrs(options[i]);\n                optionData.label = options[i].textContent;\n                data.push(optionData);\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Parse XML formData\n     * @param  {String} xmlString\n     * @return {Array} formData array\n     */\n    fbUtils.parseXML = function (xmlString) {\n        var parser = new window.DOMParser(),\n            xml = parser.parseFromString(xmlString, 'text/xml'),\n            formData = [];\n\n        if (xml) {\n            var fields = xml.getElementsByTagName('field');\n\n            for (var i = 0; i < fields.length; i++) {\n                var fieldData = fbUtils.parseAttrs(fields[i]);\n\n                if (fields[i].children.length) {\n                    fieldData.values = fbUtils.parseOptions(fields[i]);\n                }\n\n                formData.push(fieldData);\n            }\n        }\n\n        return formData;\n    };\n\n    /**\n     * Escape markup, so it can be displayed rather than rendered\n     * @param  {String} html markup\n     * @return {String} escaped html\n     */\n    fbUtils.escapeHtml = function (html) {\n        var escapeElement = document.createElement('textarea');\n\n        escapeElement.textContent = html;\n\n        return escapeElement.innerHTML;\n    };\n\n    // Escape an attribute\n    fbUtils.escapeAttr = function (str) {\n        var match = {\n            '\"': '&quot;',\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        function replaceTag(tag) {\n            return match[tag] || tag;\n        }\n\n        return typeof str === 'string' ? str.replace(/[\"&<>]/g, replaceTag) : str;\n    };\n\n    // Escape attributes\n    fbUtils.escapeAttrs = function (attrs) {\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n            }\n        }\n\n        return attrs;\n    };\n\n    // forEach that can be used on nodeList\n    fbUtils.forEach = function (array, callback, scope) {\n        for (var i = 0; i < array.length; i++) {\n            callback.call(scope, i, array[i]); // passes back stuff we need\n        }\n    };\n\n    /**\n     * Remove duplicates from an array of elements\n     * @return {Array} array with only unique values\n     * @param {array} array\n     */\n    fbUtils.unique = function (array) {\n        return array.filter(function (elem, pos, arr) {\n            return arr.indexOf(elem) === pos;\n        });\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} fieldData\n     * @param {object} opts\n     * @return {string} preview markup for field\n     */\n    fbUtils.fieldRender = function (fieldData, opts) {\n        var preview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false,\n            utils = fbUtils,\n            fieldMarkup = '',\n            fieldLabel = '',\n            optionsMarkup = '',\n            fieldLabelText = fieldData.label || '',\n            fieldDesc = fieldData.description || '',\n            fieldRequired = '',\n            fieldOptions = fieldData.values;\n\n        fieldData.name = preview ? fieldData.name + '-preview' : fieldData.name;\n        fieldData.id = fieldData.name;\n\n        if (\n            utils.inArray(\n                fieldData.type,\n                ['textinput', 'number', 'file', 'dropdown', 'listbox', 'textarea']\n            ) && fieldData.className.indexOf('form-control') === -1\n        ) {\n            fieldData.className += ' form-control';\n        }\n\n        if (fieldData.type === 'listbox') {\n            fieldData.multiple = true;\n        }\n\n        fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n        fieldData.type = fieldData.subtype || fieldData.type;\n\n        var withoutLabel = false,\n            ratingClass = '',\n            withBr = true,\n            withoutMainLabel = false;\n\n        switch (fieldData.type) {\n            case 'textinput':\n                fieldData.type = 'text';\n                break;\n            case 'textarea':\n                fieldData.type = 'textarea';\n                break;\n            case 'hidden':\n                fieldData.type = 'hidden';\n                withoutLabel = true;\n                break;\n            case 'text':\n                fieldData.type = 'div';\n                withoutLabel = true;\n                break;\n            case 'hone':\n                fieldData.type = 'h1';\n                withoutLabel = true;\n                break;\n            case 'htwo':\n                fieldData.type = 'h2';\n                withoutLabel = true;\n                break;\n            case 'hthree':\n                fieldData.type = 'h3';\n                withoutLabel = true;\n                break;\n            case 'number':\n                fieldData.type = 'number';\n                break;\n            case 'rating':\n                ratingClass = 'amform-rating-container ';\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'radiotwo':\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'radio':\n                fieldData.type = 'radio-group';\n                break;\n            case 'checkboxtwo':\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'checkbox':\n                fieldData.type = 'checkbox-group';\n                break;\n            case 'single-checkbox':\n                fieldData.type = 'checkbox';\n                withoutMainLabel = true;\n                break;\n            case 'listbox':\n                fieldData.type = 'select';\n                break;\n            case 'dropdown':\n                fieldData.type = 'select';\n                break;\n            case 'daterange':\n                fieldData.type = 'date';\n                break;\n            case 'datetime':\n                fieldData.type = 'datetime-local';\n                break;\n            case 'wysiwyg':\n                fieldData.type = 'wysiwyg';\n                break;\n        }\n\n        fieldData['data-amcform-js'] = fieldData.id;\n\n        if (fieldData.required) {\n            delete fieldData.required;\n            fieldData['aria-required'] = 'true';\n            fieldData.className += ' required-entry';\n            fieldRequired = '<span class=\"required\">*</span>';\n        }\n\n        if (!withoutLabel) {\n            if (fieldDesc) {\n                fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n            }\n\n            fieldLabel = '<label for=\"' + fieldData.id + '\" class=\"fb-' + fieldData.type + '-label label\">'\n                + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc\n                + '</label>';\n        }\n\n        var fieldLabelVal = fieldData.label;\n\n        delete fieldData.label;\n        delete fieldData.description;\n\n        var fieldDataString = fbUtils.attrString(fieldData);\n\n        switch (fieldData.type) {\n            case 'wysiwyg':\n                fieldMarkup = '<div ' + fieldDataString + '>' + (fieldData.value || '') + '</div>';\n                break;\n            case 'textarea':\n            case 'rich-text':\n                delete fieldData.type;\n\n                var fieldVal = fieldData.value || '';\n\n                fieldMarkup = '<textarea ' + fieldDataString + '>' + fieldVal + '</textarea>';\n                break;\n            case 'select':\n                var optionAttrsString;\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldOptions) {\n                    if (fieldData.placeholder) {\n                        optionsMarkup += '<option disabled selected>' + fieldData.placeholder + '</option>';\n                    }\n\n                    for (var i = 0; i < fieldOptions.length; i++) {\n                        if (!fieldOptions[i].selected || fieldData.placeholder) {\n                            delete fieldOptions[i].selected;\n                        }\n\n                        if (!fieldOptions[i].label) {\n                            fieldOptions[i].label = '';\n                        }\n\n                        optionAttrsString = fbUtils.attrString(fieldOptions[i]);\n                        optionsMarkup += '<option ' + optionAttrsString + '>' + fieldOptions[i].label + '</option>';\n                    }\n                }\n\n                fieldMarkup = '<select ' + fieldDataString + '>' + optionsMarkup + '</select>';\n                break;\n            case 'checkbox-group':\n                if (fieldData.toggle === '1') {\n                    setTimeout(function () {\n                        $('[id^=\"' + fieldData.id + '\"]').kcToggle();\n                    }, 100);\n                }\n            // eslint-disable-next-line no-fallthrough\n            case 'rating':\n            case 'radio-group':\n                var optionAttrs = void 0;\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldData.type === 'checkbox') {\n                    fieldData.name += '[]';\n                }\n\n                if (ratingClass) {\n                    fieldOptions = fieldOptions.reverse();\n                }\n\n                if (fieldOptions) {\n                    var _optionAttrsString = void 0;\n\n                    for (var _i = 0; _i < fieldOptions.length; _i++) {\n                        optionAttrs = Object.assign({value: '', label: ''}, fieldData, fieldOptions[_i]);\n\n                        if (optionAttrs.selected) {\n                            delete optionAttrs.selected;\n                            optionAttrs.checked = null;\n                        }\n\n                        optionAttrs.id = fieldData.id + '-' + _i;\n                        _optionAttrsString = fbUtils.attrString(optionAttrs);\n\n                        var classNameLabel = ' class=\"amform-versiontwo-label\"',\n                            delimeter = '';\n\n                        if (withBr) {\n                            delimeter = '<br>';\n                            // eslint-disable-next-line no-use-before-define\n                            className = '';\n                        } else if (!ratingClass) {\n                            optionsMarkup += '<div class=\"amform-groupv2\">';\n                            delimeter = '</div>';\n                        }\n\n                        var labelText = ratingClass ? '' : optionAttrs.label;\n\n                        optionsMarkup += '<input ' + _optionAttrsString + ' /' + '> <label for=\"'\n                            + optionAttrs.id + '\" ' + classNameLabel + '>' + labelText + '</label>' + delimeter;\n                    }\n\n                    if (fieldData.other) {\n                        var otherOptionAttrs = {\n                            id: fieldData.id + '-' + 'other',\n                            className: fieldData.className + ' other-option',\n                            onclick: 'fbUtils.otherOptionCB(\\'' + fieldData.id + '-other\\')'\n                        };\n\n                        _optionAttrsString = fbUtils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n                        optionsMarkup += '<input ' + _optionAttrsString + ' /' + '>'\n                            + '<label for=\"' + otherOptionAttrs.id + '\">'\n                            + opts.messages.other + '</label> <input type=\"text\" name=\"'\n                            + fieldData.name + '\" id=\"' + otherOptionAttrs.id\n                            + '-value\" style=\"display:none;\"' + '/' + '>';\n                    }\n                }\n                fieldMarkup = '<div class=\"' + ratingClass + fieldData.type + '-group\">' + optionsMarkup + '</div>';\n                break;\n            case 'text':\n            case 'password':\n            case 'email':\n            case 'number':\n            case 'file':\n            case 'hidden':\n            case 'date':\n            case 'time':\n            case 'datetime-local':\n            case 'tel':\n            case 'autocomplete':\n                fieldMarkup = ' <input ' + fieldDataString + '>';\n                break;\n            case 'color':\n                fieldMarkup = ' <input ' + fieldDataString + '> ' + opts.messages.selectColor;\n                break;\n            case 'button':\n            case 'submit':\n                fieldMarkup = '<button ' + fieldDataString + '>' + fieldLabelVal + '</button>';\n                break;\n            case 'checkbox':\n                fieldMarkup = '<input ' + fieldDataString + '> ' + fieldLabel;\n            // eslint-disable-next-line no-fallthrough\n            case 'checkboxtwo':\n                if (fieldData.toggle) {\n                    setTimeout(function () {\n                        $('[id^=\"' + fieldData.id + '\"]').kcToggle();\n                    }, 100);\n                }\n                break;\n            case 'googlemap':\n                fieldMarkup = ' <input ' + fieldDataString + '><div class=\"map\"></div>';\n                break;\n            default:\n                fieldMarkup = '<' + fieldData.type + ' ' + fieldDataString + '>'\n                + fieldLabelVal + '</' + fieldData.type + '>';\n        }\n\n        fieldMarkup = '<div class=\"control\">' + fieldMarkup + '</div>';\n        if (!withoutMainLabel) {\n            fieldMarkup = fieldLabel + fieldMarkup;\n        }\n\n        if (fieldData.type !== 'hidden') {\n            var className = fieldData.id ?\n                'field fb-' + fieldData.type + ' form-group field-' + fieldData.id.replace(/\\)|\\(/g, '-') :\n                '';\n\n            className += fieldData.dependency ? ' am-customform-depend' : '';\n\n            if (fieldData.layout) {\n                className += ' amform-layout-' + fieldData.layout;\n            }\n\n            fieldMarkup = fbUtils.markup('div', fieldMarkup, {\n                className: className\n            });\n        } else {\n            fieldMarkup = fbUtils.markup('input', null, fieldData);\n        }\n\n        switch (fieldData.type) {\n            case 'googlemap':\n                var position = null, zoom = 1;\n\n                if (fieldData.map_position.lat\n                    && fieldData.map_position.lng\n                    && typeof google !== 'undefined'\n                ) {\n                    position = new google.maps.LatLng(\n                        fieldData.map_position.lat,\n                        fieldData.map_position.lng\n                    );\n                    zoom = fieldData.zoom;\n                }\n\n                $(fieldMarkup).amGoogleMap({\n                    'position': position,\n                    'zoom': zoom,\n                    'styles': fieldData.style\n                });\n                break;\n            case 'date':\n                var dateInput = $(fieldMarkup).find('input');\n\n                dateInput.removeAttr('type');\n                dateInput.attr('readonly', 'readonly');\n                dateInput.datepicker({\n                    showOn: 'both',\n                    changeYear: true,\n                    yearRange: '1900:2100',\n                    autoSize: true,\n                    dateFormat: opts.dateFormat\n                });\n\n                if (fieldData.value) {\n                    dateInput.datepicker('setDate', fieldData.value);\n                }\n\n                dateInput.attr('placeholder', opts.placeholder);\n                dateInput.attr('size', 15);\n                $(fieldMarkup).find('button').html('');\n\n                var datepicker = $('#ui-datepicker-div');\n\n                if (!datepicker.hasClass('am-picker-year')) {\n                    datepicker.addClass('am-picker-year');\n                }\n                break;\n        }\n\n        return fieldMarkup;\n    };\n\n    /**\n     * Callback for other option.\n     * Toggles the hidden text area for \"other\" option.\n     * @param  {String} otherId id of the \"other\" option input\n     */\n    fbUtils.otherOptionCB = function (otherId) {\n        var otherInput = document.getElementById(otherId),\n            otherInputValue = document.getElementById(otherId + '-value');\n\n        if (otherInput.checked) {\n            otherInput.style.display = 'none';\n            otherInputValue.style.display = 'inline-block';\n        } else {\n            otherInput.style.display = 'inline-block';\n            otherInputValue.style.display = 'none';\n        }\n    };\n\n    /**\n     * Capitalizes a string\n     * @param  {String} str uncapitalized string\n     * @return {String} str capitalized string\n     */\n    fbUtils.capitalize = function (str) {\n        return str.replace(/\\b\\w/g, function (m) {\n            return m.toUpperCase();\n        });\n    };\n\n    /**\n     * Check if need show hidden fields\n     * @param {FormRenderFn} formRender\n     * @param {object} $\n     */\n    fbUtils.updateDependency = function (formRender, $) {\n        $.each(formRender.element.find('.am-customform-depend'), function ($, index, elem) {\n            var name = $(elem).find(\n                '.control input,' +\n                '.control [type=\"div\"],' +\n                '.control [type=\"h1\"],' +\n                '.control [type=\"h2\"],' +\n                '.control [type=\"h3\"],' +\n                '.control [type=\"wysiwyg\"],' +\n                '.form-control'\n            ).first().attr('name');\n\n            if (this.dependencyMap[name]) {\n                fbUtils.isFieldShowed(elem, name, this.dependencyMap);\n            }\n        }.bind(formRender, $));\n    };\n\n    fbUtils.isFieldShowed = function (checkedField, elementName, dependencyMap) {\n        var orFields = [],\n            orFieldsType = ['dropdown', 'radio', 'radiotwo'],\n            hiddenField = $(checkedField),\n            hiddenInput = hiddenField.find('input, textarea, select'),\n            validElems = 0;\n\n        $.each(dependencyMap[elementName], function (index, elem) {\n            var dependencyElem = null;\n\n            // check current dependency, only if dependency element showed\n            if (dependencyMap[elem.field] &&\n                !fbUtils.isFieldShowed($('.field-' + elem.field.replace(/\\)|\\(/g, '-')), elem.field, dependencyMap)\n            ) {\n                return false;\n            }\n\n            // find element and check value\n            // if ok - increment validElems\n            // dropdown&radio always increment validElems , checked for valid by orFieldsValid\n            switch (elem.type) {\n                case 'dropdown':\n                    dependencyElem = $('select[name=\"' + elem.field + '\"]');\n                    validElems++;\n\n                    if (typeof orFields[elem.field] == 'undefined') {\n                        orFields[elem.field] = false;\n                    }\n\n                    break;\n                case 'listbox':\n                    if ($('select[name=\"' + elem.field + '[]\"]').val().indexOf(elem.value) !== -1) {\n                        validElems++;\n                    }\n                    break;\n                case 'checkbox':\n                case 'checkboxtwo':\n                    var getCheckboxOptions = function (index, elem) {\n                        return elem.value;\n                    };\n\n                    dependencyElem = $('[name=\"' + elem.field + '[]\"]:checked');\n\n                    if (dependencyElem.map(getCheckboxOptions).toArray().indexOf(elem.value) !== -1) {\n                        validElems++;\n                    }\n\n                    dependencyElem = null;\n                    break;\n                case 'radio':\n                case 'radiotwo':\n                    validElems++;\n                    dependencyElem = $('input[name=\"' + elem.field + '\"]:checked');\n\n                    if (typeof orFields[elem.field] == 'undefined') {\n                        orFields[elem.field] = false;\n                    }\n\n                    break;\n                default:\n                    validElems++;\n            }\n\n            if (dependencyElem && dependencyElem.val() === elem.value) {\n                if (orFieldsType.indexOf(elem.type) !== -1) {\n                    orFields[elem.field] = true;\n                } else {\n                    validElems++;\n                }\n            }\n        });\n\n        var orFieldsValid = fbUtils.getEntries(orFields).map(function (pair) {\n            return pair[1];\n        }).indexOf(false) === -1;\n\n        // validElems - must be count all dependencies of element\n        // dropdown&radio validated with orFieldsValid - one suitable option must selected\n        if (dependencyMap[elementName].length === validElems && orFieldsValid) {\n            hiddenInput\n                .removeClass('amcform-hidden-field')\n                .removeAttr('disabled');\n            hiddenField.show();\n\n            return true;\n        }\n\n        hiddenInput\n            .addClass('amcform-hidden-field')\n            .attr('disabled', true);\n\n        hiddenField.hide();\n\n        return false;\n    };\n\n    fbUtils.getEntries = function (obj) {\n        return Object.entries\n            ? Object.entries(obj)\n            : Object.keys(obj).map(function (key) {\n                return [key, obj[key]];\n            });\n    };\n\n    fbUtils.showAnimation = function (loaderImage) {\n        var progress = $('<div></div>', {id: this.amProgressId}),\n            container = $('<div></div>', {id: this.amImageContainerId}),\n            img = $('<img>'),\n            width;\n\n        container.appendTo(progress);\n\n        img.attr('src', loaderImage);\n        img.appendTo(container);\n        container.width('150px');\n        width = container.width();\n        width = '-' + width / 2 + 'px';\n        container.css('margin-left', width);\n        progress.hide().appendTo($('body')).fadeIn();\n    };\n\n    fbUtils.hideAnimation = function () {\n        var element = $('#' + this.amProgressId);\n\n        if (element.length) {\n            element.fadeOut(function () {\n                $(this).remove();\n            });\n        }\n    };\n\n    fbUtils.submitForm = function (event) {\n        var form = this;\n\n        event.preventDefault();\n\n        if (form.valid()) {\n            form.find('[type=\"submit\"]').addClass('disabled');\n            if (form.has('input[type=\"file\"]').length && form.find('input[type=\"file\"]').val() !== '') {\n                form.off('submit');\n                form.submit();\n            } else {\n                var formId = form.attr('id').match(/\\d+/);\n\n                $.ajax({\n                    url: form.attr('action'),\n                    data: form.serialize(),\n                    type: 'post',\n                    dataType: 'json',\n\n                    beforeSend: function () {\n                        fbUtils.showAnimation(fbUtils.formOptions[formId].src_image_progress);\n                    },\n\n                    error: function () {\n                        fbUtils.hideAnimation();\n\n                        $('html, body').animate({\n                            scrollTop: $('body').offset().top\n                        }, 500);\n\n                        form.find('[type=\"submit\"]').removeClass('disabled');\n                    },\n\n                    success: function (response) {\n                        form.closest('.amcform-popup-block').removeClass('-active');\n                        form.find('[type=\"submit\"]').removeClass('disabled');\n                        fbUtils.hideAnimation();\n\n                        if (response.result === 'success') {\n                            var renderedForm = form.find('.insert-container'),\n                                opts = fbUtils.formOptions[formId],\n                                gdpr = form.find('[name=\"gdpr\"]');\n\n                            if (formId) {\n                                formId = parseInt(formId, 10);\n                                renderedForm.empty();\n                                renderedForm.formRender(formId, opts, form.find('[name=\"is_survey\"]').attr('value'));\n\n                                if (gdpr.length > 0) {\n                                    gdpr.removeAttr('checked');\n                                }\n\n                                if (form.parent().hasClass('amform-popup')) {\n                                    form.parent().hide();\n                                } else if (form.hasClass('amhideprice-form')) {\n                                    $.fancyambox.close();\n                                }\n                            }\n\n                            $(document).trigger('amcform-init-multipage', [renderedForm]);\n                        }\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n        }\n    };\n\n    'use strict';\n\n    function FormRenderFn(formId, options, element) {\n        var utils = fbUtils;\n\n        fbUtils.formOptions[formId] = options;\n\n        var formRender = this,\n            defaults = {\n                destroyTemplate: true, // @todo\n                container: false,\n                dataType: 'xml',\n                formData: false,\n                messages: {\n                    formRendered: 'Form Rendered',\n                    noFormData: 'No form data.',\n                    other: 'Other',\n                    selectColor: 'Select Color'\n                },\n                onRender: function onRender() {\n                    $('.amform-hide-formload').removeClass('amform-hide-formload');\n                },\n                render: true,\n                notify: {\n                    error: function error(message) {\n                        return console.error(message);\n                    },\n                    success: function success(message) {\n                        return console.log(message);\n                    },\n                    warning: function warning(message) {\n                        return console.warn(message);\n                    }\n                }\n            },\n            opts = $.extend(true, defaults, options);\n\n        (function () {\n            if (!opts.formData) {\n                return false;\n            }\n\n            var setData = {\n                xml: function xml(formData) {\n                    return utils.parseXML(formData);\n                },\n                json: function json(formData) {\n                    return window.JSON.parse(formData);\n                }\n            };\n\n            opts.formData = setData[opts.dataType](opts.formData) || false;\n        })();\n\n        /**\n         * Extend Element prototype to allow us to append fields\n         *\n         * @param  {Object} fields Node elements\n         */\n        Element.prototype.appendFormFields = function (fields) {\n            var element = this;\n\n            fields.forEach(function (field) {\n                return element.appendChild(field);\n            });\n        };\n\n        /**\n         * Extend Element prototype to remove content\n         */\n        Element.prototype.emptyContainer = function () {\n            var element = this;\n\n            while (element.lastChild) {\n                element.removeChild(element.lastChild);\n            }\n        };\n\n        var runCallbacks = function runCallbacks() {\n            if (opts.onRender) {\n                opts.onRender();\n            }\n        },\n\n         santizeField = function santizeField(field) {\n            var sanitizedField = Object.assign({}, field);\n\n            sanitizedField.className = field.className || field.class || null;\n            delete sanitizedField.class;\n\n            if (field.values) {\n                field.values = field.values.map(function (option) {\n                    return utils.trimObj(option);\n                });\n            }\n\n            return utils.trimObj(sanitizedField);\n        },\n\n        // Render multiple page form\n         renderMultiPageForm = function (element, pages) {\n            if (opts.pageTitles) {\n                var pageTitles = JSON.parse(opts.pageTitles);\n            }\n\n            var multiPageWrap = $('<div data-amcform-js=\"multi-page\" class=\"amcform-multi-page fieldset\"></div>')\n                    .appendTo(element),\n                pageTitlesWrap = $('<ul data-amcform-js=\"page-titles\" class=\"amcform-page-titles\"></ul>')\n                    .appendTo(multiPageWrap);\n\n            if (typeof pageTitles != 'undefined') {\n                // Generate Titles\n                $.each(pageTitles, function (index, title) {\n                    var step = index + 1;\n\n                    pageTitlesWrap.append('<li class=\"amcform-title-wrap\"><a href=\"#page-' + index\n                        + '\" class=\"amcform-title\"><p class=\"amcform-step\">'\n                        + step + '</p><span class=\"amcform-label\">' + title + '</span></a></li>');\n                });\n            }\n\n            // Generate pages\n            for (var i = 0; i < pages.length; i++) {\n                var pageWrap = $('<div id=\"page-' + i + '\" class=\"amcform-page-wrap fields\"></div>')\n                        .appendTo(multiPageWrap)[0],\n                    toolbar = '<div class=\"amcform-toolbar\">';\n\n                pageWrap.appendFormFields(pages[i]);\n\n                if (i > 0) {\n                    toolbar += '<button type=\"button\" '\n                        + 'data-amcform-js=\"prev-button\" class=\"amcform-prev action submit primary \">'\n                        + $.mage.__('Previous') + '</button>';\n                }\n\n                if (i === pages.length - 1) {\n                    if ($('[data-amcform-js=\"gdpr\"]').length) {\n                        var gdpr =  $(element).next('[data-amcform-js=\"gdpr\"]').clone().appendTo(pageWrap),\n                            inputId = gdpr.find('input').attr('data-id');\n\n                        gdpr.find('input').prop('disabled', false).attr('id', inputId);\n                        gdpr.show();\n                    }\n                    var form = $(element).closest('.amform-form'),\n                        isSurvey = parseInt($(form).find('[name=\"is_survey\"]').attr('value'), 10),\n                        prompt = '';\n\n                    if (isSurvey) {\n                        prompt = 'data-mage-init=\\'{\"amcformPrompt\": {}}\\'';\n                    }\n                    toolbar += '<button type=\"submit\" data-amcform-js=\"submit-button\" '\n                        + prompt + ' class=\"amcform-submit action submit primary \">'\n                        + opts.submitButtonTitle + '</button>';\n                } else {\n                    toolbar += '<button type=\"button\" data-amcform-js=\"next-button\" '\n                        + 'class=\"amcform-next action submit primary \">' + $.mage.__('Next') + '</button>';\n                }\n\n                if (i > 0) {\n                    $(pageWrap).find('input, textarea').addClass('amcform-hidden-page');\n                }\n\n                $(toolbar + '</div>').appendTo(pageWrap);\n            }\n\n             window.dispatchEvent(new CustomEvent('amform-elements-rendered', {\n                 detail: {\n                     form: $(element).closest('form')\n                 }\n             }));\n        },\n\n        // Begin the core plugin\n         page,\n            pages = [],\n            rendered,\n            dependencyFields = [],\n            dependencyMap = [];\n\n        // generate field markup if we have fields\n        if (opts.formData) {\n            if (!Array.isArray(opts.formData[0])) {\n                var createPage = [];\n\n                createPage.push(opts.formData);\n                opts.formData = createPage;\n            }\n            // Pages\n            for (var i = 0; i < opts.formData.length; i++) {\n                rendered = [];\n                page = opts.formData[i];\n                // Forms\n                for (var j = 0; j < page.length; j++) {\n                    var sanitizedField = santizeField(page[j]);\n\n                    switch (sanitizedField.type) {\n                        case 'textinput':\n                            try {\n                                var validation = sanitizedField.validation_fields;\n\n                                if (!validation) {\n                                    validation = JSON.parse(sanitizedField.validation);\n                                }\n                            } catch (e) {\n                                validation = {};\n                            }\n                            var resultStr = '',\n                                begStr = '{',\n                                endStr = '}';\n\n                            resultStr = begStr + resultStr;\n\n                            if (validation.hasOwnProperty('validation')) {\n                                switch (validation.validation) {\n                                    case 'None':\n                                    case ' ':\n                                        break;\n                                    case 'pattern':\n                                        if (sanitizedField.regexp) {\n                                            var validationName = validation.validation + Math.random(),\n                                                errorMessage = sanitizedField.errorMessage || 'Invalid format.';\n\n                                            $.validator.addMethod(\n                                                validationName,\n                                                function (value, element, param) {\n                                                    return this.optional(element) || new RegExp(param).test(value);\n                                                },\n                                                $.mage.__(errorMessage)\n                                            );\n\n                                            resultStr = resultStr + '\\'' +\n                                                validationName + '\\':' + sanitizedField.regexp;\n                                        }\n                                        break;\n                                    default:\n                                        resultStr = resultStr + '\\'' + validation.validation + '\\':true';\n                                }\n                            }\n\n                            resultStr += endStr;\n                            sanitizedField['data-validate'] = resultStr;\n                            delete sanitizedField.validation;\n                            break;\n                    }\n                    if (sanitizedField.dependency) {\n                        // eslint-disable-next-line no-loop-func\n                        $.each(sanitizedField.dependency, function (index, elem) {\n                            var name = sanitizedField.name;\n\n                            dependencyFields.push(elem.field);\n\n                            if (\n                                ['checkbox', 'checkboxtwo', 'listbox'].indexOf(sanitizedField.type) !== -1\n                                || ['file'].indexOf(sanitizedField.type) !== -1\n                                && ['1'].indexOf(sanitizedField.multiple) !== -1\n                            ) {\n                                name += '[]';\n                            }\n\n                            if (!dependencyMap[name]) {\n                                dependencyMap[name] = [];\n                            }\n\n                            dependencyMap[name].push(elem);\n                        });\n                    }\n\n                    rendered.push(utils.fieldRender(sanitizedField, opts));\n                }\n\n                pages.push(rendered);\n            }\n\n            if (opts.render) {\n                if (opts.container) {\n                    opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n                    opts.container.emptyContainer();\n                    renderMultiPageForm(opts.container, pages);\n                } else if (element) {\n                    element.emptyContainer();\n                    renderMultiPageForm(element, pages);\n                }\n\n                runCallbacks();\n                opts.notify.success(opts.messages.formRendered);\n            } else {\n                $.each(pages, function (index, page) {\n                    formRender.markup = rendered.map(function (page) {\n                        return elem.innerHTML;\n                    }).join('');\n                });\n            }\n        } else {\n            var noData = utils.markup('div', opts.messages.noFormData, {\n                className: 'no-form-data'\n            });\n\n            pages.push(noData);\n            opts.notify.error(opts.messages.noFormData);\n        }\n        this.dependencyMap = dependencyMap;\n        this.dependencyFileds = dependencyFields;\n        this.element = $(element);\n        this.form = this.element.parents('form');\n        this.element.on('click change', 'input, select', function ($, fbUtils, event) {\n            var target = event.currentTarget;\n\n            if (this.dependencyFileds.indexOf(target.name.replace('[]', '')) !== -1) {\n                fbUtils.updateDependency(this, $);\n            }\n        }.bind(this, $, fbUtils));\n\n        fbUtils.updateDependency(this, $);\n\n        if (opts.ajax_submit === 1) {\n            var form = this.form;\n\n            form.unbind('submit');\n            form.on('submit', fbUtils.submitForm.bind(form));\n            form.trigger('ajaxFormLoaded');\n        }\n\n        return formRender;\n    }\n\n    (function ($) {\n        $.fn.formRender = function (formId, options, isSurvey, callback) {\n            var self = this,\n                componentOptions = {\n                    classes: {\n                        active: '-active',\n                        formEdit: '-form-edit',\n                        grid: '-grid',\n                        title: 'amcform-title'\n                    },\n                    selectors: {\n                        formParent: '.amform-parent',\n                        popupBlock: '.amcform-popup-block',\n                        closeButton: '[data-amcform-js=\"close\"]',\n                        map: '.map',\n                        showPopupButton: '[data-amform-show={formId}]',\n                        popupCloseException: '.amcform-popup, .amform-show-popup, .modals-overlay, ' +\n                            '.modal-inner-wrap, .ui-datepicker-next, .ui-datepicker-prev, .am-picker-year',\n                        popupBlockId: '.amcform-popup-block[data-form-id={formId}]',\n                        form: '.amform-form[data-amform-id={id}]',\n                        insertContainer: '.insert-container'\n                    }\n                };\n\n            if (parseInt(isSurvey, 10)) {\n                $.ajax({\n                    url: urlBuilder.build(window.location.origin + '/amasty_customform/form/survey'),\n                    dataType: 'json',\n                    type: 'post',\n                    data: {'form_id': formId},\n                    success: function (response) {\n                        if (response.isSurveyAvailable) {\n                            // eslint-disable-next-line no-use-before-define\n                            generateBegin(formId, options, callback);\n                        } else {\n                            // eslint-disable-next-line no-use-before-define\n                            renderMessage(\n                                $(componentOptions.selectors.form.replace('{id}', formId)),\n                                'Thank you for participating in this survey!'\n                            );\n                        }\n                    },\n                    error: function (error) {\n                        console.log(error);\n                    }\n                });\n            } else {\n                // eslint-disable-next-line no-use-before-define\n                generateBegin(formId, options, callback);\n            }\n\n            // eslint-disable-next-line no-use-before-define\n            addShowPopupButtonListener();\n\n            /**\n             * @param {Object} target - jQuery node/nodes-list\n             * @param {String} message\n             * @returns {void}\n             */\n            function renderMessage(target, message) {\n                if (!target.length) {\n                    return;\n                }\n\n                target.each(function (index, item) {\n                    $(item)\n                        .find(componentOptions.selectors.insertContainer)\n                        .html($('<h3>', {\n                            text: $.mage.__(message),\n                            class: componentOptions.classes.title\n                        }));\n                });\n            }\n\n            function generateBegin(formId, options, callback) {\n                // eslint-disable-next-line no-use-before-define\n                generateForm(formId, options);\n                if (callback) {\n                    callback();\n                }\n            }\n\n            function generateForm(formId, options) {\n                self.each(function () {\n                    var formRender = new FormRenderFn(formId, options, this);\n\n                    $(window).trigger('amform-form-' + formId, [\n                        formRender.form[0],\n                        formRender.form.find('[type=\"submit\"]')[0]\n                    ]);\n\n                    return formRender;\n                });\n            }\n\n            function addShowPopupButtonListener() {\n                var buttonBlock = $(componentOptions.selectors.showPopupButton.replace('{formId}', formId)),\n                    _formId,\n                    popupWrapper,\n                    popupBlock,\n                    googleMaps;\n\n                buttonBlock.on('click', function () {\n                    _formId = $(this).attr('data-amform-show');\n                    popupWrapper = $(this).closest(componentOptions.selectors.formParent);\n                    popupBlock = popupWrapper\n                        .find(componentOptions.selectors.popupBlockId\n                        .replace('{formId}', _formId));\n                    googleMaps = popupBlock.find(componentOptions.selectors.map);\n\n                    if (!popupBlock.length) {\n                        return;\n                    }\n\n                    popupBlock.addClass(componentOptions.classes.active);\n\n                    if (googleMaps.width()) {\n                        // trigger resize for prevent grey map\n                        googleMaps.width(googleMaps.width() + 1);\n                    }\n\n                    $(document).on('click', function (event) {\n                        if (!$(event.target).closest(componentOptions.selectors.popupCloseException).length) {\n                            if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                                popupWrapper.remove();\n                            }\n\n                            popupBlock.removeClass(componentOptions.classes.active);\n                        }\n                    });\n\n                    popupBlock.find(componentOptions.selectors.closeButton).on('click', function () {\n                        if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                            popupWrapper.remove();\n                        }\n\n                        popupBlock.removeClass(componentOptions.classes.active);\n                    });\n                });\n\n                if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                    // eslint-disable-next-line no-use-before-define\n                    formEditEvents(buttonBlock);\n                }\n            }\n\n            function formEditEvents(buttonBlock) {\n                var popupWrapper = buttonBlock.closest(componentOptions.selectors.formParent),\n                    popupBlock = popupWrapper.find(componentOptions.selectors.popupBlock),\n                    dataProvider = require('amcformGridDataProvider'),\n                    messageList = require('amcformMessageList'),\n                    notifications = require('amcformNotifications'),\n                    gridData = dataProvider().itemStorage.get();\n\n                buttonBlock.trigger('click');\n\n                buttonBlock.closest(componentOptions.selectors.formParent).find('form').submit(function (event) {\n                    event.preventDefault();\n\n                    // eslint-disable-next-line no-use-before-define\n                    submitEditedForm($(this), function (response) {\n                        if (!response.messages.length) {\n                            notifications().setMessageType('edited', 1);\n\n                            if (buttonBlock.hasClass(componentOptions.classes.grid)) {\n                                dataProvider().getForms(gridData.currentPage, gridData.pageSize);\n                                notifications('showSuccessMessage');\n                            } else {\n                                window.location.reload();\n                            }\n                        } else if (messageList) {\n                            response.messages.forEach(function (message) {\n                                messageList.addErrorMessage({message: message});\n                            });\n                        }\n\n                        popupBlock.removeClass(componentOptions.classes.active);\n                        popupWrapper.remove();\n                    });\n                });\n            }\n\n            function submitEditedForm(target, callback) {\n                var formData;\n\n                if (target.length) {\n                    formData = new FormData(target.get(0));\n\n                    $.ajax({\n                        type: 'POST',\n                        url: target.attr('action'),\n                        data: formData,\n                        contentType: false,\n                        processData:false,\n                        dataType: 'json'\n                    }).done(callback);\n                }\n            }\n        };\n    })($);\n});\n","Amasty_Customform/js/google-map-loader.js":"define([\n    'jquery'\n], function ($) {\n    'use_strict';\n\n    /**\n     * @param {string} googleKey\n     *\n     * @return {jQuery.Deferred}\n     */\n    return function (googleKey) {\n        var result = $.Deferred();\n\n        try {\n            require(\n                ['https://maps.googleapis.com/maps/api/js?libraries=places&key=' + googleKey],\n                result.resolve.bind(result)\n            );\n        } catch (e) {\n            result.reject();\n        }\n\n        return result;\n    }\n})\n","Amasty_Customform/js/form/provider.js":"define([\n    'Magento_Ui/js/form/provider'\n], function (Provider) {\n    return Provider.extend({\n        save: function () {\n            document.dispatchEvent(new Event('customFormSaveBefore'));\n\n            return this._super();\n        }\n    });\n});\n","Amasty_Customform/js/form/elements/form_builder.js":"define([\n    'jquery',\n    'Magento_Ui/js/form/components/html',\n    'Amasty_Customform/js/form-builder-helper'\n], function ($, HTMLComponent, helpers) {\n    'use strict';\n\n    return HTMLComponent.extend({\n        /**\n         * @return {Object} - reference to instance\n         */\n        initObservable: function () {\n            this._super();\n            $(document).on('customFormSaveBefore', this.saveFormConfig.bind(this));\n\n            return this;\n        },\n\n        saveFormConfig: function () {\n            var formBuilderWidget,\n                formTitles,\n                formConfig;\n\n            if ($.mage.customFormBuilder) {\n                formBuilderWidget = $.mage.customFormBuilder.prototype;\n\n                if (!formBuilderWidget.helpers) {\n                    formBuilderWidget.helpers = helpers[1]({}, formBuilderWidget);\n                }\n\n                formTitles = formBuilderWidget.getPageTitles();\n                formConfig = formBuilderWidget.getSerializedFormConfig();\n                this.source.set('data.form_json', JSON.stringify(formConfig));\n                this.source.set('data.form_title', JSON.stringify(formTitles));\n                delete formBuilderWidget.helpers;\n            }\n        }\n    });\n});\n","Amasty_Customform/js/grid/export.js":"define([\n    'jquery',\n    'Magento_Ui/js/grid/export',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate'\n], function ($, mageExport, alert) {\n    'use strict';\n\n    return mageExport.extend({\n        defaults: {\n            emptySelectionProcess: [\n                'individual_pdfs'\n            ]\n        },\n\n        /**\n         *\n         * @param {object} option\n         * @return string|null\n         */\n        buildOptionUrl: function (option) {\n            var params,\n                emptySelection;\n\n            if (this.emptySelectionProcess.indexOf(option.value) !== -1) {\n                params = this.getParams();\n\n                if (Boolean(params['empty_selection'])) {\n                    alert({\n                        title: $.mage.__('Attention'),\n                        content: $.mage.__('You haven\u2019t selected any items!')\n                    });\n\n                    return null;\n                }\n            }\n\n            return this._super();\n        },\n\n        /**\n         * @return {object}\n         */\n        getParams: function () {\n            var params = this._super(),\n                hasSelected = Array.isArray(params.selected) && params.selected.length > 0,\n                hasExcluded = (Array.isArray(params.excluded) && params.excluded.length) || params.excluded === false;\n\n            params.empty_selection = !hasSelected && !hasExcluded;\n\n            return params;\n        },\n\n        applyOption: function () {\n            var option = this.getActiveOption(),\n                url = this.buildOptionUrl(option);\n\n            if (url !== null) {\n                window.open(url);\n            }\n        }\n    });\n});\n","Amasty_Customform/js/grid/columns/select.js":"define([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/grid/columns/select',\n    'mage/translate'\n], function ($, _, Select) {\n    'use strict';\n\n    return Select.extend({\n        /**\n         * Retrieves label associated with a provided value.\n         *\n         * @returns {String}\n         */\n        getLabel: function (record) {\n            var label = this._super(record);\n\n            if (!label) {\n                label = record.form_name ? record.form_name : $.mage.__(' Form#') + record.form_id\n                label = label + $.mage.__(' (removed)');\n            }\n\n            return label;\n        }\n    });\n});\n","Amasty_MegaMenuLite/js/utils/helpers.js":"/**\n * Amasty MegaMenu helpers\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'underscore',\n    'uiLayout',\n    'mage/cookies'\n], function ($, ko, _, layout) {\n    'use strict';\n\n    return {\n        selectors: {\n            formKeyInput: 'input[name=\"form_key\"]',\n            slick: '.slick-slider',\n            slide: '.slick-slide'\n        },\n        formKey: $.mage.cookies.get('form_key'),\n\n        /**\n         * Update Form Key\n         *\n         * @param {Object} node\n         *\n         * @desc Updating inner form key inserting\n         * @return {void}\n         */\n        updateFormKey: function (node) {\n            var self = this,\n                formKeyInput;\n\n            _.delay(function () {\n                formKeyInput = $(node).find(self.selectors.formKeyInput);\n\n                if (formKeyInput.val() !== self.formKey) {\n                    formKeyInput.val(self.formKey);\n                }\n            });\n        },\n\n        /**\n         * Mounting necessary components into layout via enable_condition\n         *\n         * @description please specify \"uiClass\" environment for enable_condition params & select parent\n         * @param {Object} uiClass\n         * @return {Boolean}\n         */\n        mountComponents: function (uiClass) {\n            Object.keys(uiClass.components).forEach(function (key) {\n                uiClass.components[key].parent = uiClass.name;\n\n                if (_.isUndefined(uiClass.components[key].enable_condition)) {\n                    layout([uiClass.components[key]]);\n\n                    return false;\n                }\n\n                if (uiClass.components[key].enable_condition.apply(uiClass)) {\n                    layout([uiClass.components[key]]);\n                }\n            });\n\n            return true;\n        },\n\n        /**\n         * ReMounting necessary and Destroy unnecessary components into/to layout via enable_condition\n         *\n         * @description please specify \"uiClass\" environment for enable_condition params & select parent\n         * @params {Object} uiClass\n         * @return {void}\n         */\n        remountComponents: function (uiClass) {\n            uiClass.elems.each(function (component) {\n                if (!component.enable_condition.call(uiClass)) {\n                    component.destroy();\n                }\n            });\n\n            this.mountComponents(uiClass);\n        },\n\n        /**\n         * Applying Bindings in target node element\n         *\n         * @param {Object} element - node element\n         * @param {Object} context - current context\n         * @return {void}\n         */\n        applyBindings: function (element, context) {\n            _.defer(function () {\n                ko.applyBindingsToDescendants(context, element);\n                $(element).trigger('contentUpdated');\n            });\n        },\n\n        /**\n         * Components Array initialization and setting in target component\n         *\n         * @param {Array} array target uiClasses\n         * @param {Object} component current uiClass\n         * @return {void}\n         */\n        initComponentsArray: function (array, component) {\n            _.each(array, function (item) {\n                component[item.index] = item;\n            });\n        },\n\n        /**\n         * Slick Slider Position checking via subscriber\n         *\n         * @desc checking and fixing new slick sliders positions\n         * @param {Object} node - slider container node\n         * @param {Object} observer - ko observer\n         * @return {void | Boolean}\n         */\n        sliderResizeSubscribe: function (node, observer) {\n            var self = this,\n                $slider,\n                $slide,\n                sliderSpeed,\n                sliderAutoplay,\n                subscriber = observer.subscribe(function (value) {\n                    if (!value) {\n                        return false;\n                    }\n\n                    $slider = $(node).find(self.selectors.slick);\n\n                    if (!$slider.length) {\n                        subscriber.dispose();\n\n                        return false;\n                    }\n\n                    sliderAutoplay = $slider.slick('slickGetOption', 'autoplay');\n                    sliderSpeed = $slider.slick('slickGetOption', 'speed');\n                    $slide = $slider.find(self.selectors.slide).first();\n\n                    if (!parseInt(sliderAutoplay, 10) && $slide.width() && $slider.width()) {\n                        subscriber.dispose();\n\n                        return false;\n                    }\n\n                    $slider.slick('slickSetOption', 'speed', 0);\n                    $slider.slick('slickGoTo', 0);\n                    $slider.slick('setPosition');\n                    $slider.slick('setDimensions');\n                    $slider.slick('slickSetOption', 'speed', sliderSpeed);\n                });\n        },\n\n        /**\n         * Set focus on first element in target\n         *\n         * @public\n         * @param {Object} elem\n         * @return {void}\n         */\n        setItemFocus: _.debounce(function (elem) {\n            if (elem && elem.elems.length && _.isFunction(elem.elems[0].isFocused)) {\n                elem.elems[0].isFocused(true);\n            }\n        }, 500),\n\n        /**\n         * All category link element generator\n         *\n         * @desc preparing object element for 'all category' link via current data\n         * and shifting to current Array\n         * @param {Object} elem - slider container node\n         * @param {String} color - target color\n         * @return {Boolean} status\n         */\n        initAllItemLink: function (elem, color) {\n            var prototype;\n\n            if (\n                !elem.url.length ||\n                elem.elems.length && elem.elems[0].isViewAll ||\n                !_.isUndefined(elem.all_link) && !elem.all_link\n            ) {\n                return false;\n            }\n\n            prototype = {\n                name: $.mage.__('View All') + ' ' + elem.name,\n                isLinkInteractive: true,\n                index: 0,\n                isFocused: ko.observable(false),\n                isViewAll: true,\n                url: elem.url,\n                elems: [],\n                content: '',\n                hide_content: true,\n                isSubmenuVisible: ko.observable(false),\n                type: elem.type,\n                additionalClasses: ' -all-link',\n                color: ko.observable(color),\n                base_color: color,\n                isVisible: ko.observable(true),\n                level: ko.observable(elem.level()),\n                parent: elem\n            };\n\n            elem.elems.unshift(prototype);\n\n            return true;\n        }\n    };\n});\n","Amasty_MegaMenuLite/js/utils/color.js":"/**\n * Amasty MegaMenu Colors Helper Component\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($) {\n    'use strict';\n\n    return {\n\n        /**\n         * Generate darken color depending on the specified percentage\n         *\n         * @params {String} color - any color format\n         * @params {Number} percent - relative values from 0.1 to 0.9\n         *\n         * @return {String} new color in rgba\n         */\n        getDarken: function (color, percent) {\n            var currentHsla = $.Color(color).hsla();\n\n            currentHsla[2] = currentHsla[2] - percent;\n\n            return $.Color(color).hsla(currentHsla).toRgbaString();\n        },\n\n        /**\n         * Generate lighten color depending on the specified percentage\n         *\n         * @params {String} color - any color format\n         * @params {Number} percent - relative values from 0.1 to 0.9\n         *\n         * @return {String} new color in rgba\n         */\n        getLighten: function (color, percent) {\n            var currentHsla = $.Color(color).hsla();\n\n            currentHsla[2] = currentHsla[2] + percent;\n\n            return $.Color(color).hsla(currentHsla).toRgbaString();\n        },\n\n        /**\n         * Generate altered color depending on the specified percentage\n         * and side of changes depends on brightness\n         *\n         * @params {String} color - any color format\n         * @params {Number} percent - relative values from 0.1 to 0.9\n         *\n         * @return {String} new color in rgba\n         */\n        getAltered: function (color, percent) {\n            var currentHsla = $.Color(color).hsla(),\n                currentBrightness = currentHsla[2];\n\n            if (currentBrightness > 0.7) {\n                return this.getDarken(color, percent);\n            }\n\n            return this.getLighten(color, percent);\n        }\n    };\n});\n\n","Amasty_MegaMenuLite/js/form/components/wysiwyg.js":"define([\n    'jquery',\n    'Magento_PageBuilder/js/form/element/wysiwyg'\n], function ($, Wysiwyg) {\n    'use strict';\n\n    /**\n     * Extend the original PageBuilder functionality\n     */\n    return Wysiwyg.extend({\n        /**\n         * Extends method show. Hide content at root category.\n         */\n        show: function () {\n            this._super();\n\n            if (this.level === 1) {\n                this.visible(false);\n\n                return false;\n            }\n        },\n\n        /**\n         * Hide notice.\n         *\n         * @returns {Object} Chainable.\n         */\n        hideNotice: function () {\n            this.notice('');\n\n            return this;\n        },\n\n        /**\n         * Show notice.\n         *\n         * @returns {Object} Chainable.\n         */\n        showNotice: function () {\n            this.notice(this.defaultNotice);\n\n            return this;\n        }\n    });\n});\n","Amasty_MegaMenuLite/js/form/element/color-picker.js":"/**\n * Copy to extension because it is missing in magento before 2.3.0\n */\n\n/**\n * @api\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/form/element/abstract',\n    'Amasty_MegaMenuLite/js/form/element/color-picker-palette'\n], function ($t, Abstract, palette) {\n    'use strict';\n\n    return Abstract.extend({\n\n        defaults: {\n            colorPickerConfig: {\n                chooseText: $t('Apply'),\n                cancelText: $t('Cancel'),\n                maxSelectionSize: 8,\n                clickoutFiresChange: true,\n                allowEmpty: true,\n                localStorageKey: 'magento.spectrum',\n                palette: palette\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super();\n\n            this.colorPickerConfig.value = this.value;\n\n            return this;\n        }\n    });\n});\n","Amasty_MegaMenuLite/js/form/element/color-picker-palette.js":"/**\n * Copy to extension because it is missing in magento before 2.3.0\n */\n/**\n * @api\n */\ndefine([], function () {\n    'use strict';\n\n    return [\n        [\n            'rgb(0,0,0)', 'rgb(52,52,52)', 'rgb(83,83,83)', 'rgb(135,135,135)', 'rgb(193,193,193)',\n            'rgb(234,234,234)', 'rgb(240,240,240)', 'rgb(255,255,255)'\n        ],\n        [\n            'rgb(252,0,9)', 'rgb(253,135,10)', 'rgb(255,255,13)', 'rgb(35,255,9)', 'rgb(33,255,255)',\n            'rgb(0,0,254)', 'rgb(132,0,254)', 'rgb(251,0,255)'\n        ],\n        [\n            'rgb(240,192,194)', 'rgb(251,223,194)', 'rgb(255,241,193)', 'rgb(210,230,201)',\n            'rgb(199,217,220)', 'rgb(197,219,240)', 'rgb(208,200,227)', 'rgb(229,199,212)'\n        ],\n        [\n            'rgb(228,133,135)', 'rgb(246,193,139)', 'rgb(254,225,136)', 'rgb(168,208,152)',\n            'rgb(146,184,190)', 'rgb(143,184,227)', 'rgb(165,148,204)', 'rgb(202,147,175)'\n        ],\n        [\n            'rgb(214,78,83)', 'rgb(243,163,88)', 'rgb(254,211,83)', 'rgb(130,187,106)',\n            'rgb(99,149,159)', 'rgb(93,150,211)', 'rgb(123,100,182)', 'rgb(180,100,142)'\n        ],\n        [\n            'rgb(190,0,5)', 'rgb(222,126,44)', 'rgb(236,183,39)', 'rgb(89,155,61)', 'rgb(55,110,123)',\n            'rgb(49,112,185)', 'rgb(83,55,150)', 'rgb(147,55,101)'\n        ],\n        [\n            'rgb(133,0,3)', 'rgb(163,74,10)', 'rgb(177,127,7)', 'rgb(45,101,23)', 'rgb(18,62,74)',\n            'rgb(14,62,129)', 'rgb(40,15,97)', 'rgb(95,16,55)'\n        ],\n        [\n            'rgb(81,0,1)', 'rgb(100,48,7)', 'rgb(107,78,3)', 'rgb(31,63,16)',\n            'rgb(13,39,46)', 'rgb(10,40,79)', 'rgb(24,12,59)', 'rgb(59,10,36)'\n        ]\n    ];\n});\n","Amasty_MegaMenuLite/js/form/element/wysiwyg.js":"define([\n    'Magento_Ui/js/lib/view/utils/async',\n    'underscore',\n    'ko',\n    'Magento_Ui/js/form/element/abstract',\n    'mage/adminhtml/events',\n    'Magento_Variable/variables'\n], function ($, _, ko, Abstract, varienGlobalEvents) {\n    'use strict';\n\n    return Abstract.extend({\n        currentWysiwyg: undefined,\n        defaults: {\n            elementSelector: 'textarea',\n            suffixRegExpPattern: '${ $.wysiwygUniqueSuffix }',\n            $wysiwygEditorButton: '',\n            links: {\n                value: '${ $.provider }:${ $.dataScope }'\n            },\n            template: 'ui/form/field',\n            elementTmpl: 'ui/form/element/wysiwyg',\n            content: '',\n            showSpinner: false,\n            loading: false,\n            listens: {\n                disabled: 'setDisabled'\n            }\n        },\n\n        /**\n         * Extends method show. Hide content at root category.\n         */\n        show: function () {\n            this._super();\n\n            if (this.level === 1) {\n                this.visible(false);\n\n                return false;\n            }\n        },\n\n        /**\n         * Hide notice.\n         *\n         * @returns {Object} Chainable.\n         */\n        hideNotice: function () {\n            this.notice('');\n\n            return this;\n        },\n\n        /**\n         * Show notice.\n         *\n         * @returns {Abstract} Chainable.\n         */\n        showNotice: function () {\n            this.notice(this.defaultNotice);\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super()\n                .initNodeListener();\n\n            $.async({\n                component: this,\n                selector: 'button'\n            }, function (element) {\n                this.$wysiwygEditorButton = this.$wysiwygEditorButton ?\n                    this.$wysiwygEditorButton.add($(element)) : $(element);\n            }.bind(this));\n\n            if (varienGlobalEvents) {\n                // disable editor completely after initialization if field is disabled\n                varienGlobalEvents.attachEventHandler('wysiwygEditorInitialized', function () {\n                    if (!_.isUndefined(window.tinyMceEditors)) {\n                        this.currentWysiwyg = window.tinyMceEditors[this.wysiwygId];\n                    }\n\n                    if (this.disabled()) {\n                        this.setDisabled(true);\n                    }\n                }.bind(this));\n            }\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initConfig: function (config) {\n            var pattern = config.suffixRegExpPattern || this.constructor.defaults.suffixRegExpPattern;\n\n            pattern = pattern.replace(/\\$/g, '\\\\$&');\n            config.content = config.content.replace(new RegExp(pattern, 'g'), this.getUniqueSuffix(config));\n            this._super();\n\n            return this;\n        },\n\n        /**\n         * Build unique id based on name, underscore separated.\n         *\n         * @param {Object} config\n         */\n        getUniqueSuffix: function (config) {\n            return config.name.replace(/(\\.|-)/g, '_');\n        },\n\n        /**\n         * @inheritdoc\n         */\n        destroy: function () {\n            var editor;\n\n            this._super();\n\n            if (varienGlobalEvents\n                && typeof window.tinyMceEditors !== 'undefined'\n                && window.tinyMceEditors[this.wysiwygId]\n            ) {\n                editor = window.tinyMceEditors[this.wysiwygId];\n                varienGlobalEvents.removeEventHandler('tinymceChange', editor.onChangeContent);\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['value', 'content']);\n\n            return this;\n        },\n\n        /**\n         *\n         * @returns {Object} Chainable.\n         */\n        initNodeListener: function () {\n            $.async({\n                component: this,\n                selector: this.elementSelector\n            }, this.setElementNode.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Set element node.\n         *\n         * @param {HTMLElement} node\n         */\n        setElementNode: function (node) {\n            $(node).bindings({\n                value: this.value\n            });\n        },\n\n        /**\n         * Set disabled property to wysiwyg component\n         *\n         * @param {Boolean} disabled\n         */\n        setDisabled: function (disabled) {\n            if (this.$wysiwygEditorButton && disabled) {\n                this.$wysiwygEditorButton.prop('disabled', 'disabled');\n            } else if (this.$wysiwygEditorButton) {\n                this.$wysiwygEditorButton.removeProp('disabled');\n            }\n\n            /* eslint-disable no-undef */\n            if (!_.isUndefined(this.currentWysiwyg) && this.currentWysiwyg.activeEditor()) {\n                this.currentWysiwyg.setEnabledStatus(!disabled);\n                this.currentWysiwyg.getPluginButtons().prop('disabled', disabled);\n            }\n        },\n\n        /**\n         * Content getter\n         *\n         * @return {String}\n         */\n        getContentUnsanitizedHtml: function () {\n            return this.content();\n        }\n    });\n});\n","Amasty_MegaMenuLite/js/builder/sortable.js":"define([\n    'jquery',\n    'prototype'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.amMenuSortable', {\n        options: {\n            moveUrl: ''\n        },\n\n        /**\n         * @inheritdoc\n         */\n        _create: function () {\n            this.setupSortable();\n        },\n\n\n        /**\n         * Setup sortable\n         *\n         * @return {void}\n         */\n        setupSortable: function () {\n            this.element.sortable({\n                distance: 8,\n                tolerance: 'pointer',\n                cancel: 'input, button',\n                forcePlaceholderSize: true,\n                update: this.sortableDidUpdate.bind(this)\n            });\n        },\n\n        /**\n         * Update sortable\n         *\n         * @param {Object} event\n         * @param {Object} ui\n         * @return {void}\n         */\n        sortableDidUpdate: function (event, ui) {\n            var data = {\n                'id': ui.item.attr('id'),\n                'aid': ui.item.prev().attr('id')\n            };\n            $.ajax({\n                url: this.options.moveUrl,\n                method: 'POST',\n                data: data,\n                showLoader: true\n            }).done(function (data) {\n                $('.page-main-actions').next('.messages').remove();\n                $('.page-main-actions').next('#messages').remove();\n                $('.page-main-actions').after(data.messages);\n            }).fail(function (jqXHR, textStatus) {\n                if (window.console) {\n                    console.log(textStatus);\n                }\n                location.reload();\n            });\n        }\n    });\n\n    return $.mage.amMenuSortable;\n});\n","Magento_Swatches/js/swatch-renderer.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'mage/template',\n    'mage/smart-keyboard-handler',\n    'mage/translate',\n    'priceUtils',\n    'jquery-ui-modules/widget',\n    'jquery/jquery.parsequery',\n    'mage/validation/validation'\n], function ($, _, mageTemplate, keyboardHandler, $t, priceUtils) {\n    'use strict';\n\n    /**\n     * Extend form validation to support swatch accessibility\n     */\n    $.widget('mage.validation', $.mage.validation, {\n        /**\n         * Handle form with swatches validation. Focus on first invalid swatch block.\n         *\n         * @param {jQuery.Event} event\n         * @param {Object} validation\n         */\n        listenFormValidateHandler: function (event, validation) {\n            var swatchWrapper, firstActive, swatches, swatch, successList, errorList, firstSwatch;\n\n            this._superApply(arguments);\n\n            swatchWrapper = '.swatch-attribute-options';\n            swatches = $(event.target).find(swatchWrapper);\n\n            if (!swatches.length) {\n                return;\n            }\n\n            swatch = '.swatch-attribute';\n            firstActive = $(validation.errorList[0].element || []);\n            successList = validation.successList;\n            errorList = validation.errorList;\n            firstSwatch = $(firstActive).parent(swatch).find(swatchWrapper);\n\n            keyboardHandler.focus(swatches);\n\n            $.each(successList, function (index, item) {\n                $(item).parent(swatch).find(swatchWrapper).attr('aria-invalid', false);\n            });\n\n            $.each(errorList, function (index, item) {\n                $(item.element).parent(swatch).find(swatchWrapper).attr('aria-invalid', true);\n            });\n\n            if (firstSwatch.length) {\n                $(firstSwatch).trigger('focus');\n            }\n        }\n    });\n\n    /**\n     * Render tooltips by attributes (only to up).\n     * Required element attributes:\n     *  - data-option-type (integer, 0-3)\n     *  - data-option-label (string)\n     *  - data-option-tooltip-thumb\n     *  - data-option-tooltip-value\n     *  - data-thumb-width\n     *  - data-thumb-height\n     */\n    $.widget('mage.SwatchRendererTooltip', {\n        options: {\n            delay: 200,                             //how much ms before tooltip to show\n            tooltipClass: 'swatch-option-tooltip'  //configurable, but remember about css\n        },\n\n        /**\n         * @private\n         */\n        _init: function () {\n            var $widget = this,\n                $this = this.element,\n                $element = $('.' + $widget.options.tooltipClass),\n                timer,\n                type = parseInt($this.data('option-type'), 10),\n                label = $this.data('option-label'),\n                thumb = $this.data('option-tooltip-thumb'),\n                value = $this.data('option-tooltip-value'),\n                width = $this.data('thumb-width'),\n                height = $this.data('thumb-height'),\n                $image,\n                $title,\n                $corner;\n\n            if (!$element.length) {\n                $element = $('<div class=\"' +\n                    $widget.options.tooltipClass +\n                    '\"><div class=\"image\"></div><div class=\"title\"></div><div class=\"corner\"></div></div>'\n                );\n                $('body').append($element);\n            }\n\n            $image = $element.find('.image');\n            $title = $element.find('.title');\n            $corner = $element.find('.corner');\n\n            $this.on('mouseenter', function () {\n                if (!$this.hasClass('disabled')) {\n                    timer = setTimeout(\n                        function () {\n                            var leftOpt = null,\n                                leftCorner = 0,\n                                left,\n                                $window;\n\n                            if (type === 2) {\n                                // Image\n                                $image.css({\n                                    'background': 'url(\"' + thumb + '\") no-repeat center', //Background case\n                                    'background-size': 'initial',\n                                    'width': width + 'px',\n                                    'height': height + 'px'\n                                });\n                                $image.show();\n                            } else if (type === 1) {\n                                // Color\n                                $image.css({\n                                    background: value\n                                });\n                                $image.show();\n                            } else if (type === 0 || type === 3) {\n                                // Default\n                                $image.hide();\n                            }\n\n                            $title.text(label);\n\n                            leftOpt = $this.offset().left;\n                            left = leftOpt + $this.width() / 2 - $element.width() / 2;\n                            $window = $(window);\n\n                            // the numbers (5 and 5) is magick constants for offset from left or right page\n                            if (left < 0) {\n                                left = 5;\n                            } else if (left + $element.width() > $window.width()) {\n                                left = $window.width() - $element.width() - 5;\n                            }\n\n                            // the numbers (6,  3 and 18) is magick constants for offset tooltip\n                            leftCorner = 0;\n\n                            if ($element.width() < $this.width()) {\n                                leftCorner = $element.width() / 2 - 3;\n                            } else {\n                                leftCorner = (leftOpt > left ? leftOpt - left : left - leftOpt) + $this.width() / 2 - 6;\n                            }\n\n                            $corner.css({\n                                left: leftCorner\n                            });\n                            $element.css({\n                                left: left,\n                                top: $this.offset().top - $element.height() - $corner.height() - 18\n                            }).show();\n                        },\n                        $widget.options.delay\n                    );\n                }\n            });\n\n            $this.on('mouseleave', function () {\n                $element.hide();\n                clearTimeout(timer);\n            });\n\n            $(document).on('tap', function () {\n                $element.hide();\n                clearTimeout(timer);\n            });\n\n            $this.on('tap', function (event) {\n                event.stopPropagation();\n            });\n        }\n    });\n\n    /**\n     * Render swatch controls with options and use tooltips.\n     * Required two json:\n     *  - jsonConfig (magento's option config)\n     *  - jsonSwatchConfig (swatch's option config)\n     *\n     *  Tuning:\n     *  - numberToShow (show \"more\" button if options are more)\n     *  - onlySwatches (hide selectboxes)\n     *  - moreButtonText (text for \"more\" button)\n     *  - selectorProduct (selector for product container)\n     *  - selectorProductPrice (selector for change price)\n     */\n    $.widget('mage.SwatchRenderer', {\n        options: {\n            classes: {\n                attributeClass: 'swatch-attribute',\n                attributeLabelClass: 'swatch-attribute-label',\n                attributeSelectedOptionLabelClass: 'swatch-attribute-selected-option',\n                attributeOptionsWrapper: 'swatch-attribute-options',\n                attributeInput: 'swatch-input',\n                optionClass: 'swatch-option',\n                selectClass: 'swatch-select',\n                moreButton: 'swatch-more',\n                loader: 'swatch-option-loading'\n            },\n            // option's json config\n            jsonConfig: {},\n\n            // swatch's json config\n            jsonSwatchConfig: {},\n\n            // selector of parental block of prices and swatches (need to know where to seek for price block)\n            selectorProduct: '.product-info-main',\n\n            // selector of price wrapper (need to know where set price)\n            selectorProductPrice: '[data-role=priceBox]',\n\n            //selector of product images gallery wrapper\n            mediaGallerySelector: '[data-gallery-role=gallery-placeholder]',\n\n            // selector of category product tile wrapper\n            selectorProductTile: '.product-item',\n\n            // number of controls to show (false or zero = show all)\n            numberToShow: false,\n\n            // show only swatch controls\n            onlySwatches: false,\n\n            // enable label for control\n            enableControlLabel: true,\n\n            // control label id\n            controlLabelId: '',\n\n            // text for more button\n            moreButtonText: $t('More'),\n\n            // Callback url for media\n            mediaCallback: '',\n\n            // Local media cache\n            mediaCache: {},\n\n            // Cache for BaseProduct images. Needed when option unset\n            mediaGalleryInitial: [{}],\n\n            // Use ajax to get image data\n            useAjax: false,\n\n            /**\n             * Defines the mechanism of how images of a gallery should be\n             * updated when user switches between configurations of a product.\n             *\n             * As for now value of this option can be either 'replace' or 'prepend'.\n             *\n             * @type {String}\n             */\n            gallerySwitchStrategy: 'replace',\n\n            // whether swatches are rendered in product list or on product page\n            inProductList: false,\n\n            // sly-old-price block selector\n            slyOldPriceSelector: '.sly-old-price',\n\n            // tier prise selectors start\n            tierPriceTemplateSelector: '#tier-prices-template',\n            tierPriceBlockSelector: '[data-role=\"tier-price-block\"]',\n            tierPriceTemplate: '',\n            // tier prise selectors end\n\n            // A price label selector\n            normalPriceLabelSelector: '.product-info-main .normal-price .price-label',\n            qtyInfo: '#qty'\n        },\n\n        /**\n         * Get chosen product\n         *\n         * @returns int|null\n         */\n        getProduct: function () {\n            var products = this._CalcProducts();\n\n            return _.isArray(products) ? products[0] : null;\n        },\n\n        /**\n         * Get chosen product id\n         *\n         * @returns int|null\n         */\n        getProductId: function () {\n            var products = this._CalcProducts();\n\n            return _.isArray(products) && products.length === 1 ? products[0] : null;\n        },\n\n        /**\n         * @private\n         */\n        _init: function () {\n            // Don't render the same set of swatches twice\n            if ($(this.element).attr('data-rendered')) {\n                return;\n            }\n\n            $(this.element).attr('data-rendered', true);\n\n            if (_.isEmpty(this.options.jsonConfig.images)) {\n                this.options.useAjax = true;\n                // creates debounced variant of _LoadProductMedia()\n                // to use it in events handlers instead of _LoadProductMedia()\n                this._debouncedLoadProductMedia = _.debounce(this._LoadProductMedia.bind(this), 500);\n            }\n\n            this.options.tierPriceTemplate = $(this.options.tierPriceTemplateSelector).html();\n\n            if (this.options.jsonConfig !== '' && this.options.jsonSwatchConfig !== '') {\n                // store unsorted attributes\n                this.options.jsonConfig.mappedAttributes = _.clone(this.options.jsonConfig.attributes);\n                this._sortAttributes();\n                this._RenderControls();\n                this._setPreSelectedGallery();\n                $(this.element).trigger('swatch.initialized');\n            } else {\n                console.log('SwatchRenderer: No input data received');\n            }\n        },\n\n        /**\n         * @private\n         */\n        _sortAttributes: function () {\n            this.options.jsonConfig.attributes = _.sortBy(this.options.jsonConfig.attributes, function (attribute) {\n                return parseInt(attribute.position, 10);\n            });\n        },\n\n        /**\n         * @private\n         */\n        _create: function () {\n            var options = this.options,\n                gallery = $('[data-gallery-role=gallery-placeholder]', '.column.main'),\n                productData = this._determineProductData(),\n                $main = productData.isInProductView ?\n                    this.element.parents('.column.main') :\n                    this.element.parents('.product-item-info');\n\n            if (productData.isInProductView) {\n                gallery.data('gallery') ?\n                    this._onGalleryLoaded(gallery) :\n                    gallery.on('gallery:loaded', this._onGalleryLoaded.bind(this, gallery));\n            } else {\n                options.mediaGalleryInitial = [{\n                    'img': $main.find('.product-image-photo').attr('src')\n                }];\n            }\n\n            this.productForm = this.element.parents(this.options.selectorProductTile).find('form:first');\n            this.inProductList = this.productForm.length > 0;\n            $(this.options.qtyInfo).on('input', this._onQtyChanged.bind(this));\n        },\n\n        /**\n         * Determine product id and related data\n         *\n         * @returns {{productId: *, isInProductView: bool}}\n         * @private\n         */\n        _determineProductData: function () {\n            // Check if product is in a list of products.\n            var productId,\n                isInProductView = false;\n\n            productId = this.element.parents('.product-item-details')\n                    .find('.price-box.price-final_price').attr('data-product-id');\n\n            if (!productId) {\n                // Check individual product.\n                productId = $('[name=product]').val();\n                isInProductView = productId > 0;\n            }\n\n            return {\n                productId: productId,\n                isInProductView: isInProductView\n            };\n        },\n\n        /**\n         * Render controls\n         *\n         * @private\n         */\n        _RenderControls: function () {\n            var $widget = this,\n                container = this.element,\n                classes = this.options.classes,\n                chooseText = this.options.jsonConfig.chooseText,\n                showTooltip = this.options.showTooltip;\n\n            $widget.optionsMap = {};\n\n            $.each(this.options.jsonConfig.attributes, function () {\n                var item = this,\n                    controlLabelId = 'option-label-' + item.code + '-' + item.id,\n                    options = $widget._RenderSwatchOptions(item, controlLabelId),\n                    select = $widget._RenderSwatchSelect(item, chooseText),\n                    input = $widget._RenderFormInput(item),\n                    listLabel = '',\n                    label = '';\n\n                // Show only swatch controls\n                if ($widget.options.onlySwatches && !$widget.options.jsonSwatchConfig.hasOwnProperty(item.id)) {\n                    return;\n                }\n\n                if ($widget.options.enableControlLabel) {\n                    label +=\n                        '<span id=\"' + controlLabelId + '\" class=\"' + classes.attributeLabelClass + '\">' +\n                        $('<i></i>').text(item.label).html() +\n                        '</span>' +\n                        '<span class=\"' + classes.attributeSelectedOptionLabelClass + '\"></span>';\n                }\n\n                if ($widget.inProductList) {\n                    $widget.productForm.append(input);\n                    input = '';\n                    listLabel = 'aria-label=\"' + $('<i></i>').text(item.label).html() + '\"';\n                } else {\n                    listLabel = 'aria-labelledby=\"' + controlLabelId + '\"';\n                }\n\n                // Create new control\n                container.append(\n                    '<div class=\"' + classes.attributeClass + ' ' + item.code + '\" ' +\n                         'data-attribute-code=\"' + item.code + '\" ' +\n                         'data-attribute-id=\"' + item.id + '\">' +\n                        label +\n                        '<div aria-activedescendant=\"\" ' +\n                             'tabindex=\"0\" ' +\n                             'aria-invalid=\"false\" ' +\n                             'aria-required=\"true\" ' +\n                             'role=\"listbox\" ' + listLabel +\n                             'class=\"' + classes.attributeOptionsWrapper + ' clearfix\">' +\n                            options + select +\n                        '</div>' + input +\n                    '</div>'\n                );\n\n                $widget.optionsMap[item.id] = {};\n\n                // Aggregate options array to hash (key => value)\n                $.each(item.options, function () {\n                    if (this.products.length > 0) {\n                        $widget.optionsMap[item.id][this.id] = {\n                            price: parseInt(\n                                $widget.options.jsonConfig.optionPrices[this.products[0]].finalPrice.amount,\n                                10\n                            ),\n                            products: this.products\n                        };\n                    }\n                });\n            });\n\n            if (showTooltip === 1) {\n                // Connect Tooltip\n                container\n                    .find('[data-option-type=\"1\"], [data-option-type=\"2\"],' +\n                        ' [data-option-type=\"0\"], [data-option-type=\"3\"]')\n                    .SwatchRendererTooltip();\n            }\n\n            // Hide all elements below more button\n            $('.' + classes.moreButton).nextAll().hide();\n\n            // Handle events like click or change\n            $widget._EventListener();\n\n            // Rewind options\n            $widget._Rewind(container);\n\n            //Emulate click on all swatches from Request\n            $widget._EmulateSelected($.parseQuery());\n            $widget._EmulateSelected($widget._getSelectedAttributes());\n        },\n\n        disableSwatchForOutOfStockProducts: function () {\n            let $widget = this, container = this.element;\n\n            $.each(this.options.jsonConfig.attributes, function () {\n                let item = this;\n\n                if ($widget.options.jsonConfig.canDisplayShowOutOfStockStatus) {\n                    let salableProducts = $widget.options.jsonConfig.salable[item.id],\n                        swatchOptions = $(container).find(`[data-attribute-id='${item.id}']`).find('.swatch-option');\n\n                    swatchOptions.each(function (key, value) {\n                        let optionId = $(value).data('option-id');\n\n                        if (!salableProducts.hasOwnProperty(optionId)) {\n                            $(value).attr('disabled', true).addClass('disabled');\n                        }\n                    });\n                }\n            });\n        },\n\n        /**\n         * Render swatch options by part of config\n         *\n         * @param {Object} config\n         * @param {String} controlId\n         * @returns {String}\n         * @private\n         */\n        _RenderSwatchOptions: function (config, controlId) {\n            var optionConfig = this.options.jsonSwatchConfig[config.id],\n                optionClass = this.options.classes.optionClass,\n                sizeConfig = this.options.jsonSwatchImageSizeConfig,\n                moreLimit = parseInt(this.options.numberToShow, 10),\n                moreClass = this.options.classes.moreButton,\n                moreText = this.options.moreButtonText,\n                countAttributes = 0,\n                html = '';\n\n            if (!this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\n                return '';\n            }\n\n            $.each(config.options, function (index) {\n                var id,\n                    type,\n                    value,\n                    thumb,\n                    label,\n                    width,\n                    height,\n                    attr,\n                    swatchImageWidth,\n                    swatchImageHeight;\n\n                if (!optionConfig.hasOwnProperty(this.id)) {\n                    return '';\n                }\n\n                // Add more button\n                if (moreLimit === countAttributes++) {\n                    html += '<a href=\"#\" class=\"' + moreClass + '\"><span>' + moreText + '</span></a>';\n                }\n\n                id = this.id;\n                type = parseInt(optionConfig[id].type, 10);\n                value = optionConfig[id].hasOwnProperty('value') ?\n                    $('<i></i>').text(optionConfig[id].value).html() : '';\n                thumb = optionConfig[id].hasOwnProperty('thumb') ? optionConfig[id].thumb : '';\n                width = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.width : 110;\n                height = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.height : 90;\n                label = this.label ? $('<i></i>').text(this.label).html() : '';\n                attr =\n                    ' id=\"' + controlId + '-item-' + id + '\"' +\n                    ' index=\"' + index + '\"' +\n                    ' aria-checked=\"false\"' +\n                    ' aria-describedby=\"' + controlId + '\"' +\n                    ' tabindex=\"0\"' +\n                    ' data-option-type=\"' + type + '\"' +\n                    ' data-option-id=\"' + id + '\"' +\n                    ' data-option-label=\"' + label + '\"' +\n                    ' aria-label=\"' + label + '\"' +\n                    ' role=\"option\"' +\n                    ' data-thumb-width=\"' + width + '\"' +\n                    ' data-thumb-height=\"' + height + '\"';\n\n                attr += thumb !== '' ? ' data-option-tooltip-thumb=\"' + thumb + '\"' : '';\n                attr += value !== '' ? ' data-option-tooltip-value=\"' + value + '\"' : '';\n\n                swatchImageWidth = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.width : 30;\n                swatchImageHeight = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.height : 20;\n\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\n                    attr += ' data-option-empty=\"true\"';\n                }\n\n                if (type === 0) {\n                    // Text\n                    html += '<div class=\"' + optionClass + ' text\" ' + attr + '>' + (value ? value : label) +\n                        '</div>';\n                } else if (type === 1) {\n                    // Color\n                    html += '<div class=\"' + optionClass + ' color\" ' + attr +\n                        ' style=\"background: ' + value +\n                        ' no-repeat center; background-size: initial;\">' + '' +\n                        '</div>';\n                } else if (type === 2) {\n                    // Image\n                    html += '<div class=\"' + optionClass + ' image\" ' + attr +\n                        ' style=\"background: url(' + value + ') no-repeat center; background-size: initial;width:' +\n                        swatchImageWidth + 'px; height:' + swatchImageHeight + 'px\">' + '' +\n                        '</div>';\n                } else if (type === 3) {\n                    // Clear\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '></div>';\n                } else {\n                    // Default\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '>' + label + '</div>';\n                }\n            });\n\n            return html;\n        },\n\n        /**\n         * Render select by part of config\n         *\n         * @param {Object} config\n         * @param {String} chooseText\n         * @returns {String}\n         * @private\n         */\n        _RenderSwatchSelect: function (config, chooseText) {\n            var html;\n\n            if (this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\n                return '';\n            }\n\n            html =\n                '<select class=\"' + this.options.classes.selectClass + ' ' + config.code + '\">' +\n                '<option value=\"0\" data-option-id=\"0\">' + chooseText + '</option>';\n\n            $.each(config.options, function () {\n                var label = this.label,\n                    attr = ' value=\"' + this.id + '\" data-option-id=\"' + this.id + '\"';\n\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\n                    attr += ' data-option-empty=\"true\"';\n                }\n\n                html += '<option ' + attr + '>' + label + '</option>';\n            });\n\n            html += '</select>';\n\n            return html;\n        },\n\n        /**\n         * Input for submit form.\n         * This control shouldn't have \"type=hidden\", \"display: none\" for validation work :(\n         *\n         * @param {Object} config\n         * @private\n         */\n        _RenderFormInput: function (config) {\n            return '<input class=\"' + this.options.classes.attributeInput + ' super-attribute-select\" ' +\n                'name=\"super_attribute[' + config.id + ']\" ' +\n                'type=\"text\" ' +\n                'value=\"\" ' +\n                'data-selector=\"super_attribute[' + config.id + ']\" ' +\n                'data-validate=\"{required: true}\" ' +\n                'aria-required=\"true\" ' +\n                'aria-invalid=\"false\">';\n        },\n\n        /**\n         * Event listener\n         *\n         * @private\n         */\n        _EventListener: function () {\n            var $widget = this,\n                options = this.options.classes,\n                target;\n\n            $widget.element.on('click', '.' + options.optionClass, function () {\n                return $widget._OnClick($(this), $widget);\n            });\n\n            $widget.element.on('change', '.' + options.selectClass, function () {\n                return $widget._OnChange($(this), $widget);\n            });\n\n            $widget.element.on('click', '.' + options.moreButton, function (e) {\n                e.preventDefault();\n\n                return $widget._OnMoreClick($(this));\n            });\n\n            $widget.element.on('keydown', function (e) {\n                if (e.which === 13) {\n                    target = $(e.target);\n\n                    if (target.is('.' + options.optionClass)) {\n                        return $widget._OnClick(target, $widget);\n                    } else if (target.is('.' + options.selectClass)) {\n                        return $widget._OnChange(target, $widget);\n                    } else if (target.is('.' + options.moreButton)) {\n                        e.preventDefault();\n\n                        return $widget._OnMoreClick(target);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Load media gallery using ajax or json config.\n         *\n         * @private\n         */\n        _loadMedia: function () {\n            var $main = this.inProductList ?\n                    this.element.parents('.product-item-info') :\n                    this.element.parents('.column.main'),\n                images;\n\n            if (this.options.useAjax) {\n                this._debouncedLoadProductMedia();\n            }  else {\n                images = this.options.jsonConfig.images[this.getProduct()];\n\n                if (!images) {\n                    images = this.options.mediaGalleryInitial;\n                }\n                this.updateBaseImage(this._sortImages(images), $main, !this.inProductList);\n            }\n        },\n\n        /**\n         * Sorting images array\n         *\n         * @private\n         */\n        _sortImages: function (images) {\n            return _.sortBy(images, function (image) {\n                return parseInt(image.position, 10);\n            });\n        },\n\n        /**\n         * Event for swatch options\n         *\n         * @param {Object} $this\n         * @param {Object} $widget\n         * @private\n         */\n        _OnClick: function ($this, $widget) {\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\n                $wrapper = $this.parents('.' + $widget.options.classes.attributeOptionsWrapper),\n                $label = $parent.find('.' + $widget.options.classes.attributeSelectedOptionLabelClass),\n                attributeId = $parent.data('attribute-id'),\n                $input = $parent.find('.' + $widget.options.classes.attributeInput),\n                checkAdditionalData = JSON.parse(this.options.jsonSwatchConfig[attributeId]['additional_data']),\n                $priceBox = $widget.element.parents($widget.options.selectorProduct)\n                    .find(this.options.selectorProductPrice);\n\n            if ($widget.inProductList) {\n                $input = $widget.productForm.find(\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\n                );\n            }\n\n            if ($this.hasClass('disabled')) {\n                return;\n            }\n\n            if ($this.hasClass('selected')) {\n                $parent.removeAttr('data-option-selected').find('.selected').removeClass('selected');\n                $input.val('');\n                $label.text('');\n                $this.attr('aria-checked', false);\n            } else {\n                $parent.attr('data-option-selected', $this.data('option-id')).find('.selected').removeClass('selected');\n                $label.text($this.data('option-label'));\n                $input.val($this.data('option-id'));\n                $input.attr('data-attr-name', this._getAttributeCodeById(attributeId));\n                $this.addClass('selected');\n                $widget._toggleCheckedAttributes($this, $wrapper);\n            }\n\n            $widget._Rebuild();\n\n            if ($priceBox.is(':data(mage-priceBox)')) {\n                $widget._UpdatePrice();\n            }\n\n            $(document).trigger('updateMsrpPriceBlock',\n                [\n                    this._getSelectedOptionPriceIndex(),\n                    $widget.options.jsonConfig.optionPrices,\n                    $priceBox\n                ]);\n\n            if (parseInt(checkAdditionalData['update_product_preview_image'], 10) === 1) {\n                $widget._loadMedia();\n            }\n\n            $input.trigger('change');\n        },\n\n        /**\n         * Get selected option price index\n         *\n         * @return {String|undefined}\n         * @private\n         */\n        _getSelectedOptionPriceIndex: function () {\n            var allowedProduct = this._getAllowedProductWithMinPrice(this._CalcProducts());\n\n            if (_.isEmpty(allowedProduct)) {\n                return undefined;\n            }\n\n            return allowedProduct;\n        },\n\n        /**\n         * Get human readable attribute code (eg. size, color) by it ID from configuration\n         *\n         * @param {Number} attributeId\n         * @returns {*}\n         * @private\n         */\n        _getAttributeCodeById: function (attributeId) {\n            var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\n\n            return attribute ? attribute.code : attributeId;\n        },\n\n        /**\n         * Toggle accessibility attributes\n         *\n         * @param {Object} $this\n         * @param {Object} $wrapper\n         * @private\n         */\n        _toggleCheckedAttributes: function ($this, $wrapper) {\n            $wrapper.attr('aria-activedescendant', $this.attr('id'))\n                    .find('.' + this.options.classes.optionClass).attr('aria-checked', false);\n            $this.attr('aria-checked', true);\n        },\n\n        /**\n         * Event for select\n         *\n         * @param {Object} $this\n         * @param {Object} $widget\n         * @private\n         */\n        _OnChange: function ($this, $widget) {\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\n                attributeId = $parent.data('attribute-id'),\n                $input = $parent.find('.' + $widget.options.classes.attributeInput);\n\n            if ($widget.productForm.length > 0) {\n                $input = $widget.productForm.find(\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\n                );\n            }\n\n            if ($this.val() > 0) {\n                $parent.attr('data-option-selected', $this.val());\n                $input.val($this.val());\n            } else {\n                $parent.removeAttr('data-option-selected');\n                $input.val('');\n            }\n\n            $widget._Rebuild();\n            $widget._UpdatePrice();\n            $widget._loadMedia();\n            $input.trigger('change');\n        },\n\n        /**\n         * Event for more switcher\n         *\n         * @param {Object} $this\n         * @private\n         */\n        _OnMoreClick: function ($this) {\n            $this.nextAll().show();\n            $this.trigger('blur').remove();\n        },\n\n        /**\n         * Rewind options for controls\n         *\n         * @private\n         */\n        _Rewind: function (controls) {\n            controls.find('div[data-option-id], option[data-option-id]')\n                .removeClass('disabled')\n                .prop('disabled', false);\n            controls.find('div[data-option-empty], option[data-option-empty]')\n                .attr('disabled', true)\n                .addClass('disabled')\n                .attr('tabindex', '-1');\n            this.disableSwatchForOutOfStockProducts();\n        },\n\n        /**\n         * Rebuild container\n         *\n         * @private\n         */\n        _Rebuild: function () {\n            var $widget = this,\n                controls = $widget.element.find('.' + $widget.options.classes.attributeClass + '[data-attribute-id]'),\n                selected = controls.filter('[data-option-selected]');\n\n            // Enable all options\n            $widget._Rewind(controls);\n\n            // done if nothing selected\n            if (selected.length <= 0) {\n                return;\n            }\n\n            // Disable not available options\n            controls.each(function () {\n                var $this = $(this),\n                    id = $this.data('attribute-id'),\n                    products = $widget._CalcProducts(id);\n\n                if (selected.length === 1 && selected.first().data('attribute-id') === id) {\n                    return;\n                }\n\n                $this.find('[data-option-id]').each(function () {\n                    var $element = $(this),\n                        option = $element.data('option-id');\n\n                    if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option) ||\n                        $element.hasClass('selected') ||\n                        $element.is(':selected')) {\n                        return;\n                    }\n\n                    if (_.intersection(products, $widget.optionsMap[id][option].products).length <= 0) {\n                        $element.attr('disabled', true).addClass('disabled');\n                    }\n                });\n            });\n        },\n\n        /**\n         * Get selected product list\n         *\n         * @returns {Array}\n         * @private\n         */\n        _CalcProducts: function ($skipAttributeId) {\n            var $widget = this,\n                selectedOptions = '.' + $widget.options.classes.attributeClass + '[data-option-selected]',\n                products = [];\n\n            // Generate intersection of products\n            $widget.element.find(selectedOptions).each(function () {\n                var id = $(this).data('attribute-id'),\n                    option = $(this).attr('data-option-selected');\n\n                if ($skipAttributeId !== undefined && $skipAttributeId === id) {\n                    return;\n                }\n\n                if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option)) {\n                    return;\n                }\n\n                if (products.length === 0) {\n                    products = $widget.optionsMap[id][option].products;\n                } else {\n                    products = _.intersection(products, $widget.optionsMap[id][option].products);\n                }\n            });\n\n            return products;\n        },\n\n        /**\n         * Update total price\n         *\n         * @private\n         */\n        _UpdatePrice: function () {\n            var $widget = this,\n                $product = $widget.element.parents($widget.options.selectorProduct),\n                $productPrice = $product.find(this.options.selectorProductPrice),\n                result = $widget._getNewPrices(),\n                tierPriceHtml,\n                isShow;\n\n            $productPrice.trigger(\n                'updatePrice',\n                {\n                    'prices': $widget._getPrices(result, $productPrice.priceBox('option').prices)\n                }\n            );\n\n            isShow = typeof result != 'undefined' && result.oldPrice.amount !== result.finalPrice.amount;\n\n            $productPrice.find('span:first').toggleClass('special-price', isShow);\n\n            $product.find(this.options.slyOldPriceSelector)[isShow ? 'show' : 'hide']();\n\n            if (typeof result != 'undefined' && result.tierPrices && result.tierPrices.length) {\n                if (this.options.tierPriceTemplate) {\n                    tierPriceHtml = mageTemplate(\n                        this.options.tierPriceTemplate,\n                        {\n                            'tierPrices': result.tierPrices,\n                            '$t': $t,\n                            'currencyFormat': this.options.jsonConfig.currencyFormat,\n                            'priceUtils': priceUtils\n                        }\n                    );\n                    $(this.options.tierPriceBlockSelector).html(tierPriceHtml).show();\n                }\n            } else {\n                $(this.options.tierPriceBlockSelector).hide();\n            }\n\n            $(this.options.normalPriceLabelSelector).hide();\n\n            _.each($('.' + this.options.classes.attributeOptionsWrapper), function (attribute) {\n                if ($(attribute).find('.' + this.options.classes.optionClass + '.selected').length === 0) {\n                    if ($(attribute).find('.' + this.options.classes.selectClass).length > 0) {\n                        _.each($(attribute).find('.' + this.options.classes.selectClass), function (dropdown) {\n                            if ($(dropdown).val() === '0') {\n                                $(this.options.normalPriceLabelSelector).show();\n                            }\n                        }.bind(this));\n                    } else {\n                        $(this.options.normalPriceLabelSelector).show();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Get new prices for selected options\n         *\n         * @returns {*}\n         * @private\n         */\n        _getNewPrices: function () {\n            var $widget = this,\n                newPrices = $widget.options.jsonConfig.prices,\n                allowedProduct = this._getAllowedProductWithMinPrice(this._CalcProducts());\n\n            if (!_.isEmpty(allowedProduct)) {\n                newPrices = this.options.jsonConfig.optionPrices[allowedProduct];\n            }\n\n            return newPrices;\n        },\n\n        /**\n         * Get prices\n         *\n         * @param {Object} newPrices\n         * @param {Object} displayPrices\n         * @returns {*}\n         * @private\n         */\n        _getPrices: function (newPrices, displayPrices) {\n            var $widget = this;\n\n            if (_.isEmpty(newPrices)) {\n                newPrices = $widget._getNewPrices();\n            }\n            _.each(displayPrices, function (price, code) {\n\n                if (newPrices[code]) {\n                    displayPrices[code].amount = newPrices[code].amount - displayPrices[code].amount;\n                }\n            });\n\n            return displayPrices;\n        },\n\n        /**\n         * Get product with minimum price from selected options.\n         *\n         * @param {Array} allowedProducts\n         * @returns {String}\n         * @private\n         */\n        _getAllowedProductWithMinPrice: function (allowedProducts) {\n            var optionPrices = this.options.jsonConfig.optionPrices,\n                product = {},\n                optionFinalPrice, optionMinPrice;\n\n            _.each(allowedProducts, function (allowedProduct) {\n                optionFinalPrice = parseFloat(optionPrices[allowedProduct].finalPrice.amount);\n\n                if (_.isEmpty(product) || optionFinalPrice < optionMinPrice) {\n                    optionMinPrice = optionFinalPrice;\n                    product = allowedProduct;\n                }\n            }, this);\n\n            return product;\n        },\n\n        /**\n         * Gets all product media and change current to the needed one\n         *\n         * @private\n         */\n        _LoadProductMedia: function () {\n            var $widget = this,\n                $this = $widget.element,\n                productData = this._determineProductData(),\n                mediaCallData,\n                mediaCacheKey,\n\n                /**\n                 * Processes product media data\n                 *\n                 * @param {Object} data\n                 * @returns void\n                 */\n                mediaSuccessCallback = function (data) {\n                    if (!(mediaCacheKey in $widget.options.mediaCache)) {\n                        $widget.options.mediaCache[mediaCacheKey] = data;\n                    }\n                    $widget._ProductMediaCallback($this, data, productData.isInProductView);\n                    setTimeout(function () {\n                        $widget._DisableProductMediaLoader($this);\n                    }, 300);\n                };\n\n            if (!$widget.options.mediaCallback) {\n                return;\n            }\n\n            mediaCallData = {\n                'product_id': this.getProduct()\n            };\n\n            mediaCacheKey = JSON.stringify(mediaCallData);\n\n            if (mediaCacheKey in $widget.options.mediaCache) {\n                $widget._XhrKiller();\n                $widget._EnableProductMediaLoader($this);\n                mediaSuccessCallback($widget.options.mediaCache[mediaCacheKey]);\n            } else {\n                mediaCallData.isAjax = true;\n                $widget._XhrKiller();\n                $widget._EnableProductMediaLoader($this);\n                $widget.xhr = $.ajax({\n                    url: $widget.options.mediaCallback,\n                    cache: true,\n                    type: 'GET',\n                    dataType: 'json',\n                    data: mediaCallData,\n                    success: mediaSuccessCallback\n                }).done(function () {\n                    $widget._XhrKiller();\n                });\n            }\n        },\n\n        /**\n         * Enable loader\n         *\n         * @param {Object} $this\n         * @private\n         */\n        _EnableProductMediaLoader: function ($this) {\n            var $widget = this;\n\n            if ($('body.catalog-product-view').length > 0) {\n                $this.parents('.column.main').find('.photo.image')\n                    .addClass($widget.options.classes.loader);\n            } else {\n                //Category View\n                $this.parents('.product-item-info').find('.product-image-photo')\n                    .addClass($widget.options.classes.loader);\n            }\n        },\n\n        /**\n         * Disable loader\n         *\n         * @param {Object} $this\n         * @private\n         */\n        _DisableProductMediaLoader: function ($this) {\n            var $widget = this;\n\n            if ($('body.catalog-product-view').length > 0) {\n                $this.parents('.column.main').find('.photo.image')\n                    .removeClass($widget.options.classes.loader);\n            } else {\n                //Category View\n                $this.parents('.product-item-info').find('.product-image-photo')\n                    .removeClass($widget.options.classes.loader);\n            }\n        },\n\n        /**\n         * Callback for product media\n         *\n         * @param {Object} $this\n         * @param {String} response\n         * @param {Boolean} isInProductView\n         * @private\n         */\n        _ProductMediaCallback: function ($this, response, isInProductView) {\n            var $main = isInProductView ? $this.parents('.column.main') : $this.parents('.product-item-info'),\n                $widget = this,\n                images = [],\n\n                /**\n                 * Check whether object supported or not\n                 *\n                 * @param {Object} e\n                 * @returns {*|Boolean}\n                 */\n                support = function (e) {\n                    return e.hasOwnProperty('large') && e.hasOwnProperty('medium') && e.hasOwnProperty('small');\n                };\n\n            if (_.size($widget) < 1 || !support(response)) {\n                this.updateBaseImage(this.options.mediaGalleryInitial, $main, isInProductView);\n\n                return;\n            }\n\n            images.push({\n                full: response.large,\n                img: response.medium,\n                thumb: response.small,\n                isMain: true\n            });\n\n            if (response.hasOwnProperty('gallery')) {\n                $.each(response.gallery, function () {\n                    if (!support(this) || response.large === this.large) {\n                        return;\n                    }\n                    images.push({\n                        full: this.large,\n                        img: this.medium,\n                        thumb: this.small\n                    });\n                });\n            }\n\n            this.updateBaseImage(images, $main, isInProductView);\n        },\n\n        /**\n         * Check if images to update are initial and set their type\n         * @param {Array} images\n         */\n        _setImageType: function (images) {\n\n            images.map(function (img) {\n                if (!img.type) {\n                    img.type = 'image';\n                }\n            });\n\n            return images;\n        },\n\n        /**\n         * Update [gallery-placeholder] or [product-image-photo]\n         * @param {Array} images\n         * @param {jQuery} context\n         * @param {Boolean} isInProductView\n         */\n        updateBaseImage: function (images, context, isInProductView) {\n            var justAnImage = images[0],\n                initialImages = this.options.mediaGalleryInitial,\n                imagesToUpdate,\n                gallery = context.find(this.options.mediaGallerySelector).data('gallery'),\n                isInitial;\n\n            if (isInProductView) {\n                if (_.isUndefined(gallery)) {\n                    context.find(this.options.mediaGallerySelector).on('gallery:loaded', function () {\n                        this.updateBaseImage(images, context, isInProductView);\n                    }.bind(this));\n\n                    return;\n                }\n\n                imagesToUpdate = images.length ? this._setImageType($.extend(true, [], images)) : [];\n                isInitial = _.isEqual(imagesToUpdate, initialImages);\n\n                if (this.options.gallerySwitchStrategy === 'prepend' && !isInitial) {\n                    imagesToUpdate = imagesToUpdate.concat(initialImages);\n                }\n\n                imagesToUpdate = this._setImageIndex(imagesToUpdate);\n\n                gallery.updateData(imagesToUpdate);\n                this._addFotoramaVideoEvents(isInitial);\n            } else if (justAnImage && justAnImage.img) {\n                context.find('.product-image-photo').attr('src', justAnImage.img);\n            }\n        },\n\n        /**\n         * Add video events\n         *\n         * @param {Boolean} isInitial\n         * @private\n         */\n        _addFotoramaVideoEvents: function (isInitial) {\n            if (_.isUndefined($.mage.AddFotoramaVideoEvents)) {\n                return;\n            }\n\n            if (isInitial) {\n                $(this.options.mediaGallerySelector).AddFotoramaVideoEvents();\n\n                return;\n            }\n\n            $(this.options.mediaGallerySelector).AddFotoramaVideoEvents({\n                selectedOption: this.getProduct(),\n                dataMergeStrategy: this.options.gallerySwitchStrategy\n            });\n        },\n\n        /**\n         * Set correct indexes for image set.\n         *\n         * @param {Array} images\n         * @private\n         */\n        _setImageIndex: function (images) {\n            var length = images.length,\n                i;\n\n            for (i = 0; length > i; i++) {\n                images[i].i = i + 1;\n            }\n\n            return images;\n        },\n\n        /**\n         * Kill doubled AJAX requests\n         *\n         * @private\n         */\n        _XhrKiller: function () {\n            var $widget = this;\n\n            if ($widget.xhr !== undefined && $widget.xhr !== null) {\n                $widget.xhr.abort();\n                $widget.xhr = null;\n            }\n        },\n\n        /**\n         * Emulate mouse click on all swatches that should be selected\n         * @param {Object} [selectedAttributes]\n         * @private\n         */\n        _EmulateSelected: function (selectedAttributes) {\n            $.each(selectedAttributes, $.proxy(function (attributeCode, optionId) {\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\n                    '[data-attribute-code=\"' + attributeCode + '\"] [data-option-id=\"' + optionId + '\"]'),\n                    parentInput = elem.parent();\n\n                if (elem.hasClass('selected')) {\n                    return;\n                }\n\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\n                    parentInput.val(optionId);\n                    parentInput.trigger('change');\n                } else {\n                    elem.trigger('click');\n                }\n            }, this));\n        },\n\n        /**\n         * Emulate mouse click or selection change on all swatches that should be selected\n         * @param {Object} [selectedAttributes]\n         * @private\n         */\n        _EmulateSelectedByAttributeId: function (selectedAttributes) {\n            $.each(selectedAttributes, $.proxy(function (attributeId, optionId) {\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\n                    '[data-attribute-id=\"' + attributeId + '\"] [data-option-id=\"' + optionId + '\"]'),\n                    parentInput = elem.parent();\n\n                if (elem.hasClass('selected')) {\n                    return;\n                }\n\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\n                    parentInput.val(optionId);\n                    parentInput.trigger('change');\n                } else {\n                    elem.trigger('click');\n                }\n            }, this));\n        },\n\n        /**\n         * Get default options values settings with either URL query parameters\n         * @private\n         */\n        _getSelectedAttributes: function () {\n            var hashIndex = window.location.href.indexOf('#'),\n                selectedAttributes = {},\n                params;\n\n            if (hashIndex !== -1) {\n                params = $.parseQuery(window.location.href.substr(hashIndex + 1));\n\n                selectedAttributes = _.invert(_.mapObject(_.invert(params), function (attributeId) {\n                    var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\n\n                    return attribute ? attribute.code : attributeId;\n                }.bind(this)));\n            }\n\n            return selectedAttributes;\n        },\n\n        /**\n         * Callback which fired after gallery gets initialized.\n         *\n         * @param {HTMLElement} element - DOM element associated with a gallery.\n         */\n        _onGalleryLoaded: function (element) {\n            var galleryObject = element.data('gallery');\n\n            this.options.mediaGalleryInitial = galleryObject.returnCurrentImages();\n        },\n\n        /**\n         * Sets mediaCache for cases when jsonConfig contains preSelectedGallery on layered navigation result pages\n         *\n         * @private\n         */\n        _setPreSelectedGallery: function () {\n            var mediaCallData;\n\n            if (this.options.jsonConfig.preSelectedGallery) {\n                mediaCallData = {\n                    'product_id': this.getProduct()\n                };\n\n                this.options.mediaCache[JSON.stringify(mediaCallData)] = this.options.jsonConfig.preSelectedGallery;\n            }\n        },\n\n        /**\n         * Callback for quantity change event.\n         */\n        _onQtyChanged: function () {\n            var $price = this.element.parents(this.options.selectorProduct)\n                .find(this.options.selectorProductPrice);\n\n            $price.trigger(\n                'updatePrice',\n                {\n                    'prices': this._getPrices(this._getNewPrices(), $price.priceBox('option').prices)\n                }\n            );\n        }\n    });\n\n    return $.mage.SwatchRenderer;\n});\n","Magento_Swatches/js/product-attributes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/modal/prompt',\n    'uiRegistry',\n    'collapsable'\n], function ($, alert, prompt, rg) {\n    'use strict';\n\n    return function (optionConfig) {\n        var activePanelClass = 'selected-type-options',\n            swatchProductAttributes = {\n                frontendInput: $('#frontend_input'),\n                isFilterable: $('#is_filterable'),\n                isFilterableInSearch: $('#is_filterable_in_search'),\n                backendType: $('#backend_type'),\n                usedForSortBy: $('#used_for_sort_by'),\n                frontendClass: $('#frontend_class'),\n                isWysiwygEnabled: $('#is_wysiwyg_enabled'),\n                isHtmlAllowedOnFront: $('#is_html_allowed_on_front'),\n                isRequired: $('#is_required'),\n                isUnique: $('#is_unique'),\n                defaultValueText: $('#default_value_text'),\n                defaultValueTextarea: $('#default_value_textarea'),\n                defaultValueDate: $('#default_value_date'),\n                defaultValueDatetime: $('#default_value_datetime'),\n                defaultValueYesno: $('#default_value_yesno'),\n                isGlobal: $('#is_global'),\n                useProductImageForSwatch: $('#use_product_image_for_swatch'),\n                updateProductPreviewImage: $('#update_product_preview_image'),\n                usedInProductListing: $('#used_in_product_listing'),\n                isVisibleOnFront: $('#is_visible_on_front'),\n                position: $('#position'),\n                attrTabsFront: $('#product_attribute_tabs_front'),\n\n                /**\n                 * @returns {*|jQuery|HTMLElement}\n                 */\n                get tabsFront() {\n                    return this.attrTabsFront.length ? this.attrTabsFront.closest('li') : $('#front_fieldset-wrapper');\n                },\n                selectFields: ['boolean', 'select', 'multiselect', 'price', 'swatch_text', 'swatch_visual'],\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                toggleApplyVisibility: function (select) {\n                    if ($(select).val() === 1) {\n                        $(select).next('select').removeClass('no-display');\n                        $(select).next('select').removeClass('ignore-validate');\n                    } else {\n                        $(select).next('select').addClass('no-display');\n                        $(select).next('select').addClass('ignore-validate');\n                        $(select).next('select option:selected').each(function () {\n                            this.selected = false;\n                        });\n                    }\n                },\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                checkOptionsPanelVisibility: function () {\n                    var selectOptionsPanel = $('#manage-options-panel'),\n                        visualOptionsPanel = $('#swatch-visual-options-panel'),\n                        textOptionsPanel = $('#swatch-text-options-panel');\n\n                    this._hidePanel(selectOptionsPanel);\n                    this._hidePanel(visualOptionsPanel);\n                    this._hidePanel(textOptionsPanel);\n\n                    switch (this.frontendInput.val()) {\n                        case 'swatch_visual':\n                            this._showPanel(visualOptionsPanel);\n                            break;\n\n                        case 'swatch_text':\n                            this._showPanel(textOptionsPanel);\n                            break;\n\n                        case 'select':\n                        case 'multiselect':\n                            this._showPanel(selectOptionsPanel);\n                            break;\n                    }\n                },\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                bindAttributeInputType: function () {\n                    this.checkOptionsPanelVisibility();\n                    this.switchDefaultValueField();\n\n                    if (!~$.inArray(this.frontendInput.val(), this.selectFields)) {\n                        // not in array\n                        this.isFilterable.selectedIndex = 0;\n                        this._disable(this.isFilterable);\n                        this._disable(this.isFilterableInSearch);\n                    } else {\n                        // in array\n                        this._enable(this.isFilterable);\n                        this._enable(this.isFilterableInSearch);\n                        this.backendType.val('int');\n                    }\n\n                    if (this.frontendInput.val() === 'multiselect' ||\n                        this.frontendInput.val() === 'gallery' ||\n                        this.frontendInput.val() === 'textarea'\n                    ) {\n                        this._disable(this.usedForSortBy);\n                    } else {\n                        this._enable(this.usedForSortBy);\n                    }\n\n                    if (this.frontendInput.val() === 'swatch_text') {\n                        $('.swatch-text-field-0').addClass('required-option');\n                    } else {\n                        $('.swatch-text-field-0').removeClass('required-option');\n                    }\n\n                    this.setRowVisibility(this.isWysiwygEnabled, false);\n                    this.setRowVisibility(this.isHtmlAllowedOnFront, false);\n\n                    switch (this.frontendInput.val()) {\n                        case 'textarea':\n                            this.setRowVisibility(this.isWysiwygEnabled, true);\n\n                            if (this.isWysiwygEnabled.val() === '0') {\n                                this._enable(this.isHtmlAllowedOnFront);\n                            }\n                            this.frontendClass.val('');\n                            this._disable(this.frontendClass);\n                            break;\n\n                        case 'text':\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\n                            this._enable(this.frontendClass);\n                            break;\n\n                        case 'select':\n                        case 'multiselect':\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\n                            this.frontendClass.val('');\n                            this._disable(this.frontendClass);\n                            break;\n                        default:\n                            this.frontendClass.val('');\n                            this._disable(this.frontendClass);\n                    }\n\n                    this.switchIsFilterable();\n                },\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                switchIsFilterable: function () {\n                    if (this.isFilterable.selectedIndex === 0) {\n                        this._disable(this.position);\n                    } else {\n                        this._enable(this.position);\n                    }\n                },\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                switchDefaultValueField: function () {\n                    var currentValue = this.frontendInput.val(),\n                        defaultValueTextVisibility = false,\n                        defaultValueTextareaVisibility = false,\n                        defaultValueDateVisibility = false,\n                        defaultValueDatetimeVisibility = false,\n                        defaultValueYesnoVisibility = false,\n                        scopeVisibility = true,\n                        useProductImageForSwatch = false,\n                        defaultValueUpdateImage = false,\n                        optionDefaultInputType = '',\n                        isFrontTabHidden = false,\n                        thing = this;\n\n                    if (!this.frontendInput.length) {\n                        return;\n                    }\n\n                    switch (currentValue) {\n                        case 'select':\n                            optionDefaultInputType = 'radio';\n                            break;\n\n                        case 'multiselect':\n                            optionDefaultInputType = 'checkbox';\n                            break;\n\n                        case 'date':\n                            defaultValueDateVisibility = true;\n                            break;\n\n                        case 'datetime':\n                            defaultValueDatetimeVisibility = true;\n                            break;\n\n                        case 'boolean':\n                            defaultValueYesnoVisibility = true;\n                            break;\n\n                        case 'textarea':\n                        case 'texteditor':\n                            defaultValueTextareaVisibility = true;\n                            break;\n\n                        case 'media_image':\n                            defaultValueTextVisibility = false;\n                            break;\n\n                        case 'price':\n                            scopeVisibility = false;\n                            break;\n\n                        case 'swatch_visual':\n                            useProductImageForSwatch = true;\n                            defaultValueUpdateImage = true;\n                            defaultValueTextVisibility = false;\n                            break;\n\n                        case 'swatch_text':\n                            useProductImageForSwatch = false;\n                            defaultValueUpdateImage = true;\n                            defaultValueTextVisibility = false;\n                            break;\n                        default:\n                            defaultValueTextVisibility = true;\n                            break;\n                    }\n\n                    delete optionConfig.hiddenFields['swatch_visual'];\n                    delete optionConfig.hiddenFields['swatch_text'];\n\n                    if (currentValue === 'media_image') {\n                        this.tabsFront.hide();\n                        this.setRowVisibility(this.isRequired, false);\n                        this.setRowVisibility(this.isUnique, false);\n                        this.setRowVisibility(this.frontendClass, false);\n                    } else if (optionConfig.hiddenFields[currentValue]) {\n                        $.each(optionConfig.hiddenFields[currentValue], function (key, option) {\n                            switch (option) {\n                                case '_front_fieldset':\n                                    thing.tabsFront.hide();\n                                    isFrontTabHidden = true;\n                                    break;\n\n                                case '_default_value':\n                                    defaultValueTextVisibility = false;\n                                    defaultValueTextareaVisibility = false;\n                                    defaultValueDateVisibility = false;\n                                    defaultValueDatetimeVisibility = false;\n                                    defaultValueYesnoVisibility = false;\n                                    break;\n\n                                case '_scope':\n                                    scopeVisibility = false;\n                                    break;\n                                default:\n                                    thing.setRowVisibility($('#' + option), false);\n                            }\n                        });\n\n                        if (!isFrontTabHidden) {\n                            thing.tabsFront.show();\n                        }\n\n                    } else {\n                        this.tabsFront.show();\n                        this.showDefaultRows();\n                    }\n\n                    this.setRowVisibility(this.defaultValueText, defaultValueTextVisibility);\n                    this.setRowVisibility(this.defaultValueTextarea, defaultValueTextareaVisibility);\n                    this.setRowVisibility(this.defaultValueDate, defaultValueDateVisibility);\n                    this.setRowVisibility(this.defaultValueDatetime, defaultValueDatetimeVisibility);\n                    this.setRowVisibility(this.defaultValueYesno, defaultValueYesnoVisibility);\n                    this.setRowVisibility(this.isGlobal, scopeVisibility);\n\n                    /* swatch attributes */\n                    this.setRowVisibility(this.useProductImageForSwatch, useProductImageForSwatch);\n                    this.setRowVisibility(this.updateProductPreviewImage, defaultValueUpdateImage);\n\n                    $('input[name=\\'default[]\\']').each(function () {\n                        $(this).attr('type', optionDefaultInputType);\n                    });\n                },\n\n                /**\n                 * @this {swatchProductAttributes}\n                 */\n                showDefaultRows: function () {\n                    this.setRowVisibility(this.isRequired, true);\n                    this.setRowVisibility(this.isUnique, true);\n                    this.setRowVisibility(this.frontendClass, true);\n                },\n\n                /**\n                 * @param {Object} el\n                 * @param {Boolean} isVisible\n                 * @this {swatchProductAttributes}\n                 */\n                setRowVisibility: function (el, isVisible) {\n                    if (isVisible) {\n                        el.show();\n                        el.closest('.field').show();\n                    } else {\n                        el.hide();\n                        el.closest('.field').hide();\n                    }\n                },\n\n                /**\n                 * @param {Object} el\n                 * @this {swatchProductAttributes}\n                 */\n                _disable: function (el) {\n                    el.attr('disabled', 'disabled');\n                },\n\n                /**\n                 * @param {jQuery} el\n                 * @this {swatchProductAttributes}\n                 */\n                _enable: function (el) {\n                    if (!el.attr('readonly')) {\n                        el.prop('disabled', false);\n                    }\n                },\n\n                /**\n                 * @param {Object} el\n                 * @this {swatchProductAttributes}\n                 */\n                _showPanel: function (el) {\n                    el.closest('.fieldset').show();\n                    el.addClass(activePanelClass);\n                    this._render(el.attr('id'));\n                },\n\n                /**\n                 * @param {Object} el\n                 * @this {swatchProductAttributes}\n                 */\n                _hidePanel: function (el) {\n                    el.closest('.fieldset').hide();\n                    el.removeClass(activePanelClass);\n                },\n\n                /**\n                 * @param {String} id\n                 * @this {swatchProductAttributes}\n                 */\n                _render: function (id) {\n                    rg.get(id, function () {\n                        $('#' + id).trigger('render');\n                    });\n                },\n\n                /**\n                 * @param {String} promptMessage\n                 * @this {swatchProductAttributes}\n                 */\n                saveAttributeInNewSet: function (promptMessage) {\n\n                    prompt({\n                        content: promptMessage,\n                        actions: {\n\n                            /**\n                             * @param {String} val\n                             * @this {actions}\n                             */\n                            confirm: function (val) {\n                                var rules = ['required-entry', 'validate-no-html-tags'],\n                                    newAttributeSetNameInputId = $('#new_attribute_set_name'),\n                                    editForm = $('#edit_form'),\n                                    newAttributeSetName = val,\n                                    i;\n\n                                if (!newAttributeSetName) {\n                                    return;\n                                }\n\n                                for (i = 0; i < rules.length; i++) {\n                                    if (!$.validator.methods[rules[i]](newAttributeSetName)) {\n                                        alert({\n                                            content: $.validator.messages[rules[i]]\n                                        });\n\n                                        return;\n                                    }\n                                }\n\n                                if (newAttributeSetNameInputId.length) {\n                                    newAttributeSetNameInputId.val(newAttributeSetName);\n                                } else {\n                                    editForm.append(new Element('input', {\n                                            type: 'hidden',\n                                            id: newAttributeSetNameInputId,\n                                            name: 'new_attribute_set_name',\n                                            value: newAttributeSetName\n                                        })\n                                    );\n                                }\n                                // Temporary solution will replaced after refactoring of attributes functionality\n                                editForm.triggerHandler('save');\n                            }\n                        }\n                    });\n                }\n            };\n\n        $(function () {\n            var editForm = $('#edit_form'),\n                swatchVisualPanel = $('#swatch-visual-options-panel'),\n                swatchTextPanel = $('#swatch-text-options-panel'),\n                tableBody = $(),\n                activePanel = $();\n\n            $('#frontend_input').on('change', function () {\n                swatchProductAttributes.bindAttributeInputType();\n            });\n            $('#is_filterable').on('change', function () {\n                swatchProductAttributes.switchIsFilterable();\n            });\n\n            swatchProductAttributes.bindAttributeInputType();\n\n            // @todo: refactor collapsible component\n            $('.attribute-popup .collapse, [data-role=\"advanced_fieldset-content\"]')\n                .collapsable()\n                .collapse('hide');\n\n            editForm.on('beforeSubmit', function () {\n                var optionContainer, optionsValues;\n\n                activePanel = swatchTextPanel.hasClass(activePanelClass) ? swatchTextPanel : swatchVisualPanel;\n                optionContainer = activePanel.find('table tbody');\n\n                if (activePanel.hasClass(activePanelClass)) {\n                    optionsValues = $.map(\n                        optionContainer.find('tr'),\n                        function (row) {\n                            return $(row).find('input, select, textarea').serialize();\n                        }\n                    );\n                    $('<input>')\n                        .attr({\n                            type: 'hidden',\n                            name: 'serialized_options'\n                        })\n                        .val(JSON.stringify(optionsValues))\n                        .prependTo(editForm);\n                }\n\n                tableBody = optionContainer.detach();\n            });\n\n            editForm.on('afterValidate.error highlight.validate', function () {\n                if (activePanel.hasClass(activePanelClass)) {\n                    activePanel.find('table').append(tableBody);\n                    $('input[name=\"serialized_options\"]').remove();\n                }\n            });\n        });\n\n        window.saveAttributeInNewSet = swatchProductAttributes.saveAttributeInNewSet;\n        window.toggleApplyVisibility = swatchProductAttributes.toggleApplyVisibility;\n    };\n});\n","Magento_Swatches/js/text.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n *  @api\n */\ndefine([\n    'jquery',\n    'mage/template',\n    'uiRegistry',\n    'jquery/ui',\n    'prototype',\n    'validation'\n], function (jQuery, mageTemplate, rg) {\n    'use strict';\n\n    return function (config) {\n        var swatchOptionTextDefaultInputType = 'radio',\n            swatchTextOption = {\n                table: $('swatch-text-options-table'),\n                itemCount: 0,\n                totalItems: 0,\n                rendered: 0,\n                isReadOnly: config.isReadOnly,\n                template: mageTemplate('#swatch-text-row-template'),\n\n                /**\n                 * Add option\n                 *\n                 * @param {Object} data\n                 * @param {Object} render\n                 */\n                add: function (data, render) {\n                    var isNewOption = false,\n                        element;\n\n                    if (typeof data.id == 'undefined') {\n                        data = {\n                            'id': 'option_' + this.itemCount,\n                            'sort_order': this.itemCount + 1\n                        };\n                        isNewOption = true;\n                    }\n\n                    if (!data.intype) {\n                        data.intype = swatchOptionTextDefaultInputType;\n                    }\n\n                    element = this.template({\n                        data: data\n                    });\n\n                    if (isNewOption && !this.isReadOnly) {\n                        this.enableNewOptionDeleteButton(data.id);\n                    }\n                    this.itemCount++;\n                    this.totalItems++;\n                    this.elements += element;\n\n                    if (render) {\n                        this.render();\n                    }\n                },\n\n                /**\n                 * Remove option\n                 *\n                 * @param {Object} event\n                 */\n                remove: function (event) {\n                    var element = $(Event.findElement(event, 'tr')),\n                        elementFlags; // !!! Button already have table parent in safari\n\n                    // Safari workaround\n                    element.ancestors().each(function (parentItem) {\n                        if (parentItem.hasClassName('option-row')) {\n                            element = parentItem;\n                            throw $break;\n                        } else if (parentItem.hasClassName('box')) {\n                            throw $break;\n                        }\n                    });\n\n                    if (element) {\n                        elementFlags = element.getElementsByClassName('delete-flag');\n\n                        if (elementFlags[0]) {\n                            elementFlags[0].value = 1;\n                        }\n\n                        element.addClassName('no-display');\n                        element.addClassName('template');\n                        element.hide();\n                        this.totalItems--;\n                        this.updateItemsCountField();\n                    }\n                },\n\n                /**\n                 * Update items count field\n                 */\n                updateItemsCountField: function () {\n                    $('swatch-text-option-count-check').value = this.totalItems > 0 ? '1' : '';\n                },\n\n                /**\n                 * Enable delete button for new option\n                 *\n                 * @param {String} id\n                 */\n                enableNewOptionDeleteButton: function (id) {\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\n                        button.enable();\n                        button.removeClassName('disabled');\n                    });\n                },\n\n                /**\n                 * Bind remove button\n                 */\n                bindRemoveButtons: function () {\n                    jQuery('#swatch-text-options-panel').on('click', '.delete-option', this.remove.bind(this));\n                },\n\n                /**\n                 * Render action\n                 */\n                render: function () {\n                    Element.insert($$('[data-role=swatch-text-options-container]')[0], this.elements);\n                    this.elements = '';\n                },\n\n                /**\n                 * Render action with delay (performance fix)\n                 *\n                 * @param {Object} data\n                 * @param {Number} from\n                 * @param {Number} step\n                 * @param {Number} delay\n                 * @returns {Boolean}\n                 */\n                renderWithDelay: function (data, from, step, delay) {\n                    var arrayLength = data.length,\n                        len;\n\n                    for (len = from + step; from < len && from < arrayLength; from++) {\n                        this.add(data[from]);\n                    }\n                    this.render();\n\n                    if (from === arrayLength) {\n                        this.updateItemsCountField();\n                        this.rendered = 1;\n                        jQuery('body').trigger('processStop');\n\n                        return true;\n                    }\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\n                },\n\n                /**\n                 * Ignore validate action\n                 */\n                ignoreValidate: function () {\n                    var ignore = '.ignore-validate input, ' +\n                        '.ignore-validate select, ' +\n                        '.ignore-validate textarea';\n\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\n                }\n            };\n\n        if ($('add_new_swatch_text_option_button')) {\n            Event.observe(\n                'add_new_swatch_text_option_button',\n                'click',\n                swatchTextOption.add.bind(swatchTextOption, true)\n            );\n        }\n        jQuery('#swatch-text-options-panel').on('render', function () {\n            swatchTextOption.ignoreValidate();\n\n            if (swatchTextOption.rendered) {\n                return false;\n            }\n            jQuery('body').trigger('processStart');\n            swatchTextOption.renderWithDelay(config.attributesData, 0, 100, 300);\n            swatchTextOption.bindRemoveButtons();\n        });\n\n        if (config.isSortable) {\n            jQuery(function ($) {\n                $('[data-role=swatch-text-options-container]').sortable({\n                    distance: 8,\n                    tolerance: 'pointer',\n                    cancel: 'input, button',\n                    axis: 'y',\n\n                    /**\n                     * Update components\n                     */\n                    update: function () {\n                        $('[data-role=swatch-text-options-container] [data-role=order]').each(\n                            function (index, element) {\n                                $(element).val(index + 1);\n                            }\n                        );\n                    }\n                });\n            });\n        }\n\n        jQuery(function () {\n            if (jQuery('#frontend_input').val() !== 'swatch_text') {\n                jQuery('.swatch-text-field-0').removeClass('required-option');\n            }\n        });\n\n        window.swatchTextOption = swatchTextOption;\n        window.swatchOptionTextDefaultInputType = swatchOptionTextDefaultInputType;\n\n        rg.set('swatch-text-options-panel', swatchTextOption);\n    };\n});\n","Magento_Swatches/js/visual.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global FORM_KEY */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'mage/template',\n    'uiRegistry',\n    'jquery/colorpicker/js/colorpicker',\n    'prototype',\n    'jquery/ui',\n    'validation'\n], function (jQuery, mageTemplate, rg) {\n    'use strict';\n\n    return function (config) {\n        var swatchOptionVisualDefaultInputType = 'radio',\n            swatchVisualOption = {\n                table: $('swatch-visual-options-table'),\n                itemCount: 0,\n                totalItems: 0,\n                rendered: 0,\n                isReadOnly: config.isReadOnly,\n                template: mageTemplate('#swatch-visual-row-template'),\n\n                /**\n                 * Add new option using template\n                 *\n                 * @param {Object} data\n                 * @param {Object} render\n                 */\n                add: function (data, render) {\n                    var isNewOption = false,\n                        element;\n\n                    if (typeof data.id == 'undefined') {\n                        data = {\n                            'id': 'option_' + this.itemCount,\n                            'sort_order': this.itemCount + 1,\n                            'empty_class': 'unavailable'\n                        };\n                        isNewOption = true;\n                    } else if (data.defaultswatch0 === '') {\n                        data['empty_class'] = 'unavailable';\n                    }\n\n                    if (!data.intype) {\n                        data.intype = swatchOptionVisualDefaultInputType;\n                    }\n\n                    element = this.template({\n                        data: data\n                    });\n\n                    if (isNewOption && !this.isReadOnly) {\n                        this.enableNewOptionDeleteButton(data.id);\n                    }\n                    this.itemCount++;\n                    this.totalItems++;\n                    this.elements += element;\n\n                    if (render) {\n                        this.render();\n                    }\n                },\n\n                /**\n                 * ColorPicker initialization process\n                 */\n                initColorPicker: function () {\n                    var element = this,\n                        hiddenColorPicker = !jQuery(element).data('colorpickerId');\n\n                    jQuery(this).ColorPicker({\n\n                        /**\n                         * ColorPicker onShow action\n                         */\n                        onShow: function () {\n                            var color = jQuery(element).parent().parent().prev().prev('input').val(),\n                                menu = jQuery(this).parents('.swatch_sub-menu_container');\n\n                            menu.hide();\n                            jQuery(element).ColorPickerSetColor(color);\n                        },\n\n                        /**\n                         * ColorPicker onSubmit action\n                         *\n                         * @param {String} hsb\n                         * @param {String} hex\n                         * @param {String} rgb\n                         * @param {String} el\n                         */\n                        onSubmit: function (hsb, hex, rgb, el) {\n                            var container = jQuery(el).parent().parent().prev();\n\n                            jQuery(el).ColorPickerHide();\n                            container.parent().removeClass('unavailable');\n                            container.prev('input').val('#' + hex);\n                            container.css('background', '#' + hex);\n                        }\n                    });\n\n                    if (hiddenColorPicker) {\n                        jQuery(this).ColorPickerShow();\n                    }\n                },\n\n                /**\n                 * Remove action\n                 *\n                 * @param {Object} event\n                 */\n                remove: function (event) {\n                    var element = $(Event.findElement(event, 'tr')),\n                        elementFlags; // !!! Button already have table parent in safari\n\n                    // Safari workaround\n                    element.ancestors().each(function (parentItem) {\n                        if (parentItem.hasClassName('option-row')) {\n                            element = parentItem;\n                            throw $break;\n                        } else if (parentItem.hasClassName('box')) {\n                            throw $break;\n                        }\n                    });\n\n                    if (element) {\n                        elementFlags = element.getElementsByClassName('delete-flag');\n\n                        if (elementFlags[0]) {\n                            elementFlags[0].value = 1;\n                        }\n\n                        element.addClassName('no-display');\n                        element.addClassName('template');\n                        element.hide();\n                        this.totalItems--;\n                        this.updateItemsCountField();\n                    }\n                },\n\n                /**\n                 * Update items count field\n                 */\n                updateItemsCountField: function () {\n                    $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\n                },\n\n                /**\n                 * Enable delete button for new option\n                 *\n                 * @param {String} id\n                 */\n                enableNewOptionDeleteButton: function (id) {\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\n                        button.enable();\n                        button.removeClassName('disabled');\n                    });\n                },\n\n                /**\n                 * Bind remove button\n                 */\n                bindRemoveButtons: function () {\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\n                },\n\n                /**\n                 * Render options\n                 */\n                render: function () {\n                    Element.insert($$('[data-role=swatch-visual-options-container]')[0], this.elements);\n                    this.elements = '';\n                },\n\n                /**\n                 * Render elements with delay (performance fix)\n                 *\n                 * @param {Object} data\n                 * @param {Number} from\n                 * @param {Number} step\n                 * @param {Number} delay\n                 * @returns {Boolean}\n                 */\n                renderWithDelay: function (data, from, step, delay) {\n                    var arrayLength = data.length,\n                        len;\n\n                    for (len = from + step; from < len && from < arrayLength; from++) {\n                        this.add(data[from]);\n                    }\n                    this.render();\n\n                    if (from === arrayLength) {\n                        this.updateItemsCountField();\n                        this.rendered = 1;\n                        jQuery('body').trigger('processStop');\n\n                        return true;\n                    }\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\n                },\n\n                /**\n                 * Ignore validate action\n                 */\n                ignoreValidate: function () {\n                    var ignore = '.ignore-validate input, ' +\n                        '.ignore-validate select, ' +\n                        '.ignore-validate textarea';\n\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\n                }\n            };\n\n        if ($('add_new_swatch_visual_option_button')) {\n            Event.observe(\n                'add_new_swatch_visual_option_button',\n                'click',\n                swatchVisualOption.add.bind(swatchVisualOption, {}, true)\n            );\n        }\n\n        jQuery('#swatch-visual-options-panel').on('render', function () {\n            swatchVisualOption.ignoreValidate();\n\n            if (swatchVisualOption.rendered) {\n                return false;\n            }\n            jQuery('body').trigger('processStart');\n            swatchVisualOption.renderWithDelay(config.attributesData, 0, 100, 300);\n            swatchVisualOption.bindRemoveButtons();\n            jQuery('#swatch-visual-options-panel').on(\n                'click',\n                '.colorpicker_handler',\n                swatchVisualOption.initColorPicker\n            );\n        });\n        jQuery('body').on('click', function (event) {\n            var element = jQuery(event.target);\n\n            if (\n                element.parents('.swatch_sub-menu_container').length === 1 ||\n                element.next('div.swatch_sub-menu_container').length === 1\n            ) {\n                return true;\n            }\n            jQuery('.swatch_sub-menu_container').hide();\n        });\n\n        if (config.isSortable) {\n            jQuery(function ($) {\n                $('[data-role=swatch-visual-options-container]').sortable({\n                    distance: 8,\n                    tolerance: 'pointer',\n                    cancel: 'input, button',\n                    axis: 'y',\n\n                    /**\n                     * Update component\n                     */\n                    update: function () {\n                        $('[data-role=swatch-visual-options-container] [data-role=order]').each(\n                            function (index, element) {\n                                $(element).val(index + 1);\n                            }\n                        );\n                    }\n                });\n            });\n        }\n\n        window.swatchVisualOption = swatchVisualOption;\n        window.swatchOptionVisualDefaultInputType = swatchOptionVisualDefaultInputType;\n\n        rg.set('swatch-visual-options-panel', swatchVisualOption);\n\n        jQuery(function ($) {\n\n            var swatchComponents = {\n\n                /**\n                 * div wrapper for to hide all evement\n                 */\n                wrapper: null,\n\n                /**\n                 * iframe component to perform file upload without page reload\n                 */\n                iframe: null,\n\n                /**\n                 * form component for upload image\n                 */\n                form: null,\n\n                /**\n                 * Input file component for upload image\n                 */\n                inputFile: null,\n\n                /**\n                 * Create swatch component for upload files\n                 *\n                 * @this {swatchComponents}\n                 * @public\n                 */\n                create: function () {\n                    this.wrapper = $('<div>').css({\n                        display: 'none'\n                    }).appendTo($('body'));\n\n                    this.iframe = $('<iframe></iframe>', {\n                        id:  'upload_iframe',\n                        name: 'upload_iframe'\n                    }).appendTo(this.wrapper);\n\n                    this.form = $('<form></form>', {\n                        id: 'swatch_form_image_upload',\n                        name: 'swatch_form_image_upload',\n                        target: 'upload_iframe',\n                        method: 'post',\n                        enctype: 'multipart/form-data',\n                        class: 'ignore-validate',\n                        action: config.uploadActionUrl\n                    }).appendTo(this.wrapper);\n\n                    this.inputFile = $('<input />', {\n                        type: 'file',\n                        name: 'datafile',\n                        class: 'swatch_option_file'\n                    }).appendTo(this.form);\n\n                    $('<input />', {\n                        type: 'hidden',\n                        name: 'form_key',\n                        value: FORM_KEY\n                    }).appendTo(this.form);\n                }\n            };\n\n            /**\n             * Create swatch components\n             */\n            swatchComponents.create();\n\n            /**\n             * Register event for swatch input[type=file] change\n             */\n            swatchComponents.inputFile.change(function () {\n                var container = $('#' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\n\n                    /**\n                     * @this {iframe}\n                     */\n                    iframeHandler = function () {\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\n\n                        container.prev('input').val(imageParams['file_path']);\n                        container.css({\n                            'background-image': 'url(' + fullMediaUrl + ')',\n                            'background-size': 'cover'\n                        });\n                        container.parent().removeClass('unavailable');\n                    };\n\n                swatchComponents.iframe.off('load');\n                swatchComponents.iframe.on('load', iframeHandler);\n                swatchComponents.form.submit();\n                $(this).val('');\n            });\n\n            /**\n             * Register event for choose \"upload image\" option\n             */\n            $(document).on('click', '.btn_choose_file_upload', function () {\n                swatchComponents.inputFile.attr('data-called-by', $(this).attr('id'));\n                swatchComponents.inputFile.trigger('click');\n            });\n\n            /**\n             * Register event for remove option\n             */\n            $(document).on('click', '.btn_remove_swatch', function () {\n                var optionPanel = $(this).parents().eq(2);\n\n                optionPanel.children('input').val('');\n                optionPanel.children('.swatch_window').css('background', '');\n\n                optionPanel.addClass('unavailable');\n\n                jQuery('.swatch_sub-menu_container').hide();\n            });\n\n            /**\n             * Toggle color upload chooser\n             */\n            $(document).on('click', '.swatches-visual-col', function () {\n                var currentElement = $(this).find('.swatch_sub-menu_container');\n\n                jQuery('.swatch_sub-menu_container').not(currentElement).hide();\n                currentElement.toggle();\n            });\n        });\n    };\n});\n","Magento_Swatches/js/form/element/swatch-visual.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global FORM_KEY */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'Magento_Ui/js/lib/view/utils/async',\n    'mage/template',\n    'uiRegistry',\n    'prototype',\n    'Magento_Ui/js/form/element/abstract',\n    'jquery/colorpicker/js/colorpicker',\n    'jquery/ui'\n], function (_, jQuery, mageTemplate, rg, prototype, Abstract) {\n    'use strict';\n\n    /**\n     * Former implementation.\n     *\n     * @param {*} value\n     * @param {Object} container\n     * @param {String} uploadUrl\n     * @param {String} elementName\n     */\n    function oldCode(value, container, uploadUrl, elementName) {\n        var swatchVisualOption = {\n            itemCount: 0,\n            totalItems: 0,\n            rendered: 0,\n            isReadOnly: false,\n\n            /**\n             * Initialize.\n             */\n            initialize: function () {\n                if (_.isEmpty(value)) {\n                    container.addClassName('unavailable');\n                }\n\n                jQuery(container).on(\n                    'click',\n                    '.colorpicker_handler',\n                    this.initColorPicker\n                );\n            },\n\n            /**\n             * ColorPicker initialization process\n             */\n            initColorPicker: function () {\n                var element = this,\n                    hiddenColorPicker = !jQuery(element).data('colorpickerId');\n\n                jQuery(this).ColorPicker({\n\n                    /**\n                     * ColorPicker onShow action\n                     */\n                    onShow: function () {\n                        var color = jQuery(element).parent().parent().prev().prev('input').val(),\n                            menu = jQuery(this).parents('.swatch_sub-menu_container');\n\n                        menu.hide();\n                        jQuery(element).ColorPickerSetColor(color);\n                    },\n\n                    /**\n                     * ColorPicker onSubmit action\n                     *\n                     * @param {String} hsb\n                     * @param {String} hex\n                     * @param {String} rgb\n                     * @param {String} el\n                     */\n                    onSubmit: function (hsb, hex, rgb, el) {\n                        var localContainer = jQuery(el).parent().parent().prev();\n\n                        jQuery(el).ColorPickerHide();\n                        localContainer.parent().removeClass('unavailable');\n                        localContainer.prev('input').val('#' + hex).trigger('change');\n                        localContainer.css('background', '#' + hex);\n                    }\n                });\n\n                if (hiddenColorPicker) {\n                    jQuery(this).ColorPickerShow();\n                }\n            },\n\n            /**\n             * Remove action\n             *\n             * @param {Object} event\n             */\n            remove: function (event) {\n                var element = $(Event.findElement(event, 'tr')),\n                    elementFlags; // !!! Button already have table parent in safari\n\n                // Safari workaround\n                element.ancestors().each(function (parentItem) {\n                    if (parentItem.hasClassName('option-row')) {\n                        element = parentItem;\n                        throw $break;\n                    } else if (parentItem.hasClassName('box')) {\n                        throw $break;\n                    }\n                });\n\n                if (element) {\n                    elementFlags = element.getElementsByClassName('delete-flag');\n\n                    if (elementFlags[0]) {\n                        elementFlags[0].value = 1;\n                    }\n\n                    element.addClassName('no-display');\n                    element.addClassName('template');\n                    element.hide();\n                    this.totalItems--;\n                    this.updateItemsCountField();\n                }\n            },\n\n            /**\n             * Update items count field\n             */\n            updateItemsCountField: function () {\n                $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\n            }\n        };\n\n        //swatchVisualOption.initColorPicker();\n\n        jQuery('body').on('click', function (event) {\n            var element = jQuery(event.target);\n\n            if (\n                element.parents('.swatch_sub-menu_container').length === 1 ||\n                element.next('div.swatch_sub-menu_container').length === 1\n            ) {\n                return true;\n            }\n            jQuery('.swatch_sub-menu_container').hide();\n        });\n\n        jQuery(function ($) {\n\n            var swatchComponents = {\n\n                /**\n                 * div wrapper for to hide all evement\n                 */\n                wrapper: null,\n\n                /**\n                 * iframe component to perform file upload without page reload\n                 */\n                iframe: null,\n\n                /**\n                 * form component for upload image\n                 */\n                form: null,\n\n                /**\n                 * Input file component for upload image\n                 */\n                inputFile: null,\n\n                /**\n                 * Create swatch component for upload files\n                 *\n                 * @this {swatchComponents}\n                 * @public\n                 */\n                create: function () {\n                    this.wrapper = $('<div>').css({\n                        display: 'none'\n                    }).appendTo($('body'));\n\n                    this.iframe = $('<iframe></iframe>', {\n                        name: 'upload_iframe_' + elementName\n                    }).appendTo(this.wrapper);\n\n                    this.form = $('<form></form>', {\n                        name: 'swatch_form_image_upload_' + elementName,\n                        target: 'upload_iframe_' + elementName,\n                        method: 'post',\n                        enctype: 'multipart/form-data',\n                        class: 'ignore-validate',\n                        action: uploadUrl\n                    }).appendTo(this.wrapper);\n\n                    this.inputFile = $('<input />', {\n                        type: 'file',\n                        name: 'datafile',\n                        class: 'swatch_option_file'\n                    }).appendTo(this.form);\n\n                    $('<input />', {\n                        type: 'hidden',\n                        name: 'form_key',\n                        value: FORM_KEY\n                    }).appendTo(this.form);\n                }\n            };\n\n            swatchVisualOption.initialize();\n\n            /**\n             * Create swatch components\n             */\n            swatchComponents.create();\n\n            /**\n             * Register event for swatch input[type=file] change\n             */\n            swatchComponents.inputFile.change(function () {\n                var localContainer = $('.' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\n\n                    /**\n                     * @this {iframe}\n                     */\n                    iframeHandler = function () {\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\n\n                        localContainer.prev('input').val(imageParams['file_path']).trigger('change');\n                        localContainer.css({\n                            'background-image': 'url(' + fullMediaUrl + ')',\n                            'background-size': 'cover'\n                        });\n                        localContainer.parent().removeClass('unavailable');\n                    };\n\n                swatchComponents.iframe.off('load');\n                swatchComponents.iframe.on('load', iframeHandler);\n                swatchComponents.form.submit();\n                $(this).val('');\n            });\n\n            /**\n             * Register event for choose \"upload image\" option\n             */\n            $(container).on('click', '.btn_choose_file_upload', function () {\n                swatchComponents.inputFile.attr('data-called-by', $(this).data('class'));\n                swatchComponents.inputFile.trigger('click');\n            });\n\n            /**\n             * Register event for remove option\n             */\n            $(container).on('click', '.btn_remove_swatch', function () {\n                var optionPanel = $(this).parents().eq(2);\n\n                optionPanel.children('input').val('').trigger('change');\n                optionPanel.children('.swatch_window').css('background', '');\n                optionPanel.addClass('unavailable');\n                jQuery('.swatch_sub-menu_container').hide();\n            });\n\n            /**\n             * Toggle color upload chooser\n             */\n            $(container).on('click', '.swatch_window', function () {\n                jQuery('.swatch_sub-menu_container').hide();\n                $(this).next('div').toggle();\n            });\n        });\n    }\n\n    return Abstract.extend({\n        defaults: {\n            elementId: 0,\n            prefixName: '',\n            prefixElementName: '',\n            elementName: '',\n            value: '',\n            uploadUrl: ''\n        },\n\n        /**\n         * Parses options and merges the result with instance\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            this.configureDataScope();\n\n            return this;\n        },\n\n        /**\n         * Initialize.\n         *\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            this._super()\n                .initOldCode()\n                .on('value', this.onChangeColor.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Handler function that execute when color changes.\n         *\n         * @param {String} data - color\n         */\n        onChangeColor: function (data) {\n            if (!data) {\n                jQuery('.' + this.elementName).parent().removeClass('unavailable');\n            }\n        },\n\n        /**\n         * Initialize wrapped former implementation.\n         *\n         * @returns {Object} Chainable.\n         */\n        initOldCode: function () {\n            jQuery.async('.' + this.elementName, this.name, function (elem) {\n                oldCode(this.value(), elem.parentElement, this.uploadUrl, this.elementName);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Configure data scope.\n         */\n        configureDataScope: function () {\n            var recordId, prefixName;\n\n            // Get recordId\n            recordId = this.parentName.split('.').last();\n\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\n            this.elementName = this.prefixElementName + recordId;\n\n            this.inputName = prefixName + '[' + this.elementName + ']';\n            this.exportDataLink = 'data.' + this.prefixName + '.' + this.elementName;\n            this.exports.value = this.provider + ':' + this.exportDataLink;\n        },\n\n        /** @inheritdoc */\n        destroy: function () {\n            this._super();\n\n            this.source.remove(this.exportDataLink);\n        },\n\n        /**\n         * Get HTML array from data scope.\n         *\n         * @param {String} dataScopeString\n         * @returns {String}\n         */\n        dataScopeToHtmlArray: function (dataScopeString) {\n            var dataScopeArray, dataScope, reduceFunction;\n\n            /**\n             * Add new level of nesting.\n             *\n             * @param {String} prev\n             * @param {String} curr\n             * @returns {String}\n             */\n            reduceFunction = function (prev, curr) {\n                return prev + '[' + curr + ']';\n            };\n\n            dataScopeArray = dataScopeString.split('.');\n\n            dataScope = dataScopeArray.shift();\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\n\n            return dataScope;\n        }\n    });\n});\n","Magento_Weee/js/fpt-attribute.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global RegionUpdater */\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery/ui',\n    'mage/adminhtml/form'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('mage.fptAttribute', {\n        /** @inheritdoc */\n        _create: function () {\n            var widget = this;\n\n            this.rowTmpl = mageTemplate(this.element.find('[data-role=\"row-template\"]').html());\n\n            this._initOptionItem();\n\n            if ($(this.options.bundlePriceType).val() === '0') {\n                this.element.hide();\n            }\n\n            $.each(this.options.itemsData, function () {\n                widget.addItem(this);\n            });\n        },\n\n        /**\n         * @private\n         */\n        _initOptionItem: function () {\n            var widget = this,\n                isOriginalRequired = $(widget.element).hasClass('required');\n\n            this._on({\n                /**\n                 * Add new tax item.\n                 *\n                 * @param {jQuery.Event} event\n                 */\n                'click [data-action=add-fpt-item]': function (event) {\n                    this.addItem(event);\n                },\n\n                /**\n                 * Delete tax item.\n                 *\n                 * @param {jQuery.Event} event\n                 */\n                'click [data-action=delete-fpt-item]': function (event) {\n                    var parent = $(event.target).closest('[data-role=\"fpt-item-row\"]');\n\n                    parent.find('[data-role=\"delete-fpt-item\"]').val(1);\n                    parent.addClass('ignore-validate').hide();\n                },\n\n                /**\n                 * Change tax item country/state.\n                 *\n                 * @param {jQuery.Event} event\n                 * @param {Object} data\n                 */\n                'change [data-role=\"select-country\"]': function (event, data) {\n                    var currentElement = event.target || event.srcElement || event.currentTarget,\n                        parentElement = $(currentElement).closest('[data-role=\"fpt-item-row\"]'),\n                        updater;\n\n                    data = data || {};\n                    updater = new RegionUpdater(\n                        parentElement.find('[data-role=\"select-country\"]').attr('id'), null,\n                        parentElement.find('[data-role=\"select-state\"]').attr('id'),\n                        widget.options.region, 'disable', true\n                    );\n                    updater.update();\n                    //set selected state value if set\n                    if (data.state) {\n                        parentElement.find('[data-role=\"select-state\"]').val(data.state);\n                    }\n\n                    if (!isOriginalRequired && $(widget.element).hasClass('required')) {\n                        $(widget.element).removeClass('required');\n                    }\n                }\n            });\n\n            $(this.options.bundlePriceType).on('change', function (event) {\n                var attributeItems = widget.element.find('[data-role=\"delete-fpt-item\"]');\n\n                if ($(event.target).val() === '0') {\n                    widget.element.hide();\n                    attributeItems.each(function () {\n                        $(this).val(1);\n                    });\n                } else {\n                    widget.element.show();\n                    attributeItems.each(function () {\n                        if ($(this).closest('[data-role=\"fpt-item-row\"]').is(':visible')) {\n                            $(this).val(0);\n                        }\n                    });\n                }\n            });\n        },\n\n        /**\n         * Add custom option.\n         *\n         * @param {jQuery.Event} event\n         */\n        addItem: function (event) {\n            var data = {},\n                currentElement = event.target || event.srcElement || event.currentTarget,\n                tmpl;\n\n            if (typeof currentElement !== 'undefined') {\n                data['website_id'] = 0;\n            } else {\n                data = event;\n            }\n\n            data.index = this.element.find('[data-role=\"fpt-item-row\"]').length;\n\n            tmpl = this.rowTmpl({\n                data: data\n            });\n\n            $(tmpl).appendTo(this.element.find('[data-role=\"fpt-item-container\"]'));\n\n            //set selected website_id value if set\n            if (data['website_id']) {\n                this.element.find('[data-role=\"select-website\"][id$=\"_' + data.index + '_website\"]')\n                    .val(data['website_id']);\n            }\n\n            //set selected country value if set\n            if (data.country) {\n                this.element.find('[data-role=\"select-country\"][id$=\"_' + data.index + '_country\"]')\n                    .val(data.country).trigger('change', data);\n            }\n        }\n    });\n\n    return $.mage.fptAttribute;\n});\n","Magento_Weee/js/fpt-group.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/group',\n    'uiRegistry',\n    'Magento_Ui/js/lib/validation/validator',\n    'mage/translate',\n    'underscore'\n], function (Group, uiRegistry, validation, $t, _) {\n    'use strict';\n\n    return Group.extend({\n        defaults: {\n            visible: true,\n            label: '',\n            showLabel: true,\n            required: false,\n            template: 'ui/group/group',\n            fieldTemplate: 'ui/form/field',\n            breakLine: true,\n            validateWholeGroup: false,\n            additionalClasses: {}\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            validation.addRule('validate-fpt-group', function (value) {\n                if (value.indexOf('?') !== -1) {\n\n                    return false;\n                }\n\n                return true;\n            }, $t(\n                'Set unique country-state combinations within the same fixed product tax. ' +\n                'Verify the combinations and try again.'\n            ));\n\n            this._super();\n        },\n\n        /**\n         *\n         * @private\n         */\n        _handleOptionsAvailability: function () {\n            var parent,\n                dup;\n\n            dup = {};\n            parent = uiRegistry.get(uiRegistry.get(this.parentName).parentName);\n            _.each(parent.elems(), function (elem) {\n                var country,\n                    state,\n                    val,\n                    key;\n\n                country = uiRegistry.get(elem.name + '.countryState.country');\n                state = uiRegistry.get(elem.name + '.countryState.state');\n                val = uiRegistry.get(elem.name + '.countryState.val');\n\n                key = country.value() + (state.value() > 0 ? state.value() : 0);\n                dup[key]++;\n\n                if (!dup[key]) {\n                    dup[key] = 1;\n                    val.value('');\n                } else {\n                    dup[key]++;\n                    val.value(country.value() + '?' + country.name);\n                }\n            });\n        },\n\n        /** @inheritdoc */\n        initElement: function (elem) {\n            var obj;\n\n            obj = this;\n            this._super();\n            elem.on('value', function () {\n                obj._handleOptionsAvailability();\n            });\n\n            return this;\n        }\n    });\n});\n","Magento_Weee/js/regions-tax-select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            filterBy: {\n                field: 'country',\n                target: '${ $.parentName }.country:value'\n            }\n        },\n\n        /** @inheritdoc */\n        filter: function () {\n            this._super();\n            this.disableSelect();\n        },\n\n        /**\n         * Disables select if there's no regions/states\n         *\n         * @returns {*} instance - Chainable\n         */\n        disableSelect: function () {\n            var empty = !this.options().length;\n\n            this.disabled(empty);\n\n            if (empty) {\n                this.error('');\n            }\n\n            return this;\n        }\n    });\n});\n","Magento_Weee/js/price/adjustment.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            bodyTmpl: 'Magento_Weee/price/adjustment',\n            dataSource: '${ $.parentName }.provider',\n            //Weee configuration constants can be configured from backend\n            inclFptWithDesc: 1,//show FPT and description\n            inclFpt: 0, //show FPT attribute\n            exclFpt: 2, //do not show FPT\n            bothFptPrices: 3 //show price without FPT and with FPT and with description\n        },\n\n        /**\n         * Get Weee attributes.\n         *\n         * @param {Object} row\n         * @return {HTMLElement} Weee html\n         */\n        getWeeeAttributes: function (row) {\n            return row['price_info']['extension_attributes']['weee_attributes'];\n        },\n\n        /**\n         * Get Weee without Tax attributes.\n         *\n         * @param {Object} taxAmount\n         * @return {HTMLElement} Weee html\n         */\n        getWeeeTaxWithoutTax: function (taxAmount) {\n            return taxAmount['amount_excl_tax'];\n        },\n\n        /**\n         * UnsanitizedHtml version of getWeeeTaxWithoutTax.\n         *\n         * @param {Object} taxAmount\n         * @return {HTMLElement} Weee html\n         */\n        getWeeeTaxWithoutTaxUnsanitizedHtml: function (taxAmount) {\n            return this.getWeeeTaxWithoutTax(taxAmount);\n        },\n\n        /**\n         * Get Weee with Tax attributes.\n         *\n         * @param {Object} taxAmount\n         * @return {HTMLElement} Weee html\n         */\n        getWeeeTaxWithTax: function (taxAmount) {\n            return taxAmount['tax_amount_incl_tax'];\n        },\n\n        /**\n         * UnsanitizedHtml version of getWeeeTaxWithTax.\n         *\n         * @param {Object} taxAmount\n         * @return {HTMLElement} Weee html\n         */\n        getWeeeTaxWithTaxUnsanitizedHtml: function (taxAmount) {\n            return this.getWeeeTaxWithTax(taxAmount);\n        },\n\n        /**\n         * Get Weee Tax name.\n         *\n         * @param {String} taxAmount\n         * @return {String} Weee name\n         */\n        getWeeTaxAttributeName: function (taxAmount) {\n            return taxAmount['attribute_code'];\n        },\n\n        /**\n         * Set price type.\n         *\n         * @param {String} priceType\n         * @return {Object}\n         */\n        setPriceType: function (priceType) {\n            this.taxPriceType = priceType;\n\n            return this;\n        },\n\n        /**\n         * Check if Weee Tax must be shown.\n         *\n         * @param {Object} row\n         * @return {Boolean}\n         */\n        isShown: function (row) {\n            return row['price_info']['extension_attributes']['weee_attributes'].length;\n        },\n\n        /**\n         * Get Weee final price.\n         *\n         * @param {Object} row\n         * @return {HTMLElement} Weee final price html\n         */\n        getWeeeAdjustment: function (row) {\n            return row['price_info']['extension_attributes']['weee_adjustment'];\n        },\n\n        /**\n         * UnsanitizedHtml version of getWeeeAdjustment.\n         *\n         * @param {Object} row\n         * @return {HTMLElement} Weee final price html\n         */\n        getWeeeAdjustmentUnsanitizedHtml: function (row) {\n            return this.getWeeeAdjustment(row);\n        },\n\n        /**\n         * Return whether display setting is to display price including FPT only.\n         *\n         * @return {Boolean}\n         */\n        displayPriceInclFpt: function () {\n            return +this.source.data.displayWeee === this.inclFpt;\n        },\n\n        /**\n         * Return whether display setting is to display\n         * price including FPT and FPT description.\n         *\n         * @return {Boolean}\n         */\n        displayPriceInclFptDescr: function () {\n            return +this.source.data.displayWeee === this.inclFptWithDesc;\n        },\n\n        /**\n         * Return whether display setting is to display price\n         * excluding FPT but including FPT description and final price.\n         *\n         * @return {Boolean}\n         */\n        displayPriceExclFptDescr: function () {\n            return +this.source.data.displayWeee === this.exclFpt;\n        },\n\n        /**\n         * Return whether display setting is to display price excluding FPT.\n         *\n         * @return {Boolean}\n         */\n        displayPriceExclFpt: function () {\n            return +this.source.data.displayWeee === this.bothFptPrices;\n        },\n\n        /**\n         * Return whether display setting is to display price excluding tax.\n         *\n         * @return {Boolean}\n         */\n        displayPriceExclTax: function () {\n            return +this.source.data.displayTaxes === this.inclFptWithDesc;\n        },\n\n        /**\n         * Return whether display setting is to display price including tax.\n         *\n         * @return {Boolean}\n         */\n        displayPriceInclTax: function () {\n            return +this.source.data.displayTaxes === this.exclFpt;\n        },\n\n        /**\n         * Return whether display setting is to display\n         * both price including tax and price excluding tax.\n         *\n         * @return {Boolean}\n         */\n        displayBothPricesTax: function () {\n            return +this.source.data.displayTaxes === this.bothFptPrices;\n        }\n    });\n});\n","Amasty_JetTheme/js/validation.js":"require([\n    'jquery',\n    'mage/translate',\n    'jquery/validate'\n], function ($) {\n    $.validator.addMethod(\n        'validate-css-size', function (v) {\n            var sizeValue = new RegExp(/^([\\d]{1,3}\\%)|([\\d]{1,4}px)$/i);\n\n            if ($.mage.isEmptyNoTrim(v)) {\n                return true\n            }\n\n            return sizeValue.test(v);\n        },\n        $.mage.__('Value must be in format (100% or 1024px for example)')\n    );\n});\n","Amasty_JetTheme/js/am-checkbox-set.js":"define([\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/form/element/checkbox-set',\n    'mage/translate'\n], function ($, ko, _, Radio) {\n    'use strict';\n\n    return Radio.extend({\n        defaults: {\n            buttonConfig: {\n                defaultStateTitle: 'Show',\n                activeStateTitle: 'Hide',\n                isButtonVisible: true\n            },\n            options: null,\n            listens: {\n                uploadedImage: 'handleUploadedImage',\n                isBlockVisible: 'getButtonTitle',\n                value: 'findItemByKey'\n            },\n            isBlockVisible: true,\n            uploadedImage: false,\n            selectedItem: null,\n            value: null\n        },\n\n        /** @inheritDoc  */\n        initialize: function () {\n            this._super();\n\n            return this;\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe(['options', 'uploadedImage', 'isBlockVisible', 'selectedItem']);\n\n            return this;\n        },\n\n        /**\n         * Handle button title\n         * @returns {String}\n         */\n        getButtonTitle: function () {\n            return this.isBlockVisible()\n                ? $.mage.__(this.buttonConfig.activeStateTitle)\n                : $.mage.__(this.buttonConfig.defaultStateTitle);\n        },\n\n        /**\n         * Show/Hide block\n         * @returns {void}\n         */\n        toggleBlockVisibility: function () {\n            this.isBlockVisible(!this.isBlockVisible());\n        },\n\n        /**\n         * Find item by key after selection\n         * @returns {Object}\n         */\n        findItemByKey: function () {\n            var data = _.find(this.options(), function (item) {\n                return item.value === this.value();\n            }.bind(this));\n\n            // eslint-disable-next-line no-unused-expressions\n            data ? this.selectedItem(data.label) : this.selectedItem(null);\n\n            return this;\n        },\n\n        /**\n         * Handle block based on uploaded image\n         * @param {Array} image\n         * @returns {void}\n         */\n        handleUploadedImage: function (image) {\n            if (_.isArray(image) && image.length) {\n                this.clearValue();\n                this.isBlockVisible(false);\n            } else {\n                this.reset();\n            }\n        },\n\n        /**\n         * Clear value to reset field\n         * @returns {void}\n         */\n        clearValue: function () {\n            this.value(null);\n        }\n    });\n});\n","Amasty_JetTheme/js/color.js":"define([\n    'jquery',\n    'jquery/colorpicker/js/colorpicker'\n], function ($) {\n    'use strict';\n\n    return function (config) {\n        // eslint-disable-next-line jquery-no-event-shorthand\n        $(document).ready(function () {\n            var input = $('#' + config.htmlId);\n\n            function inverse(color) {\n                return (0xFFFFFF - ('0x' + color)).toString(16).padStart(6, '0').toUpperCase();\n            }\n\n            if (config.inverseHex !== '') {\n                input.css({\n                    'backgroundColor': config.value,\n                    'color': config.inverseHex\n                });\n            }\n\n            input.ColorPicker({\n                color: '\\' . $value . \\'',\n                onChange: function (hsb, hex) {\n                    input.css({\n                        'backgroundColor': '#' + hex,\n                        'color': '#' + inverse(hex)\n                    }).val('#' + hex);\n                }\n            });\n        });\n    };\n});\n","Amasty_JetTheme/js/image-optimization.js":"","Amasty_JetTheme/js/view/color-switcher-button.js":"define([\n    'Magento_Ui/js/lib/view/utils/async',\n    'Amasty_JetTheme/js/view/abstract-switcher-button',\n    'Amasty_JetTheme/js/model/colors-config'\n], function ($, Button, colorsModel) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            actionConfigKey: 'preset_id',\n            listens: {\n                isElementInitialized: 'setElementListeners'\n            },\n            presetsElementSelector: 'amasty_jettheme_style_switcher_color_presets',\n            urlToLoad: null\n        },\n        model: colorsModel,\n\n        /** @inheritDoc */\n        initialize: function () {\n            this._super();\n\n            $.async({\n                selector: '#' + this.presetsElementSelector\n            }, function (element) {\n                this.presetsElement = $(element);\n                this.isElementInitialized(true);\n            }.bind(this));\n\n            return this;\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe([ 'isElementInitialized' ]);\n\n            return this;\n        }\n    });\n});\n","Amasty_JetTheme/js/view/color-field.js":"define([\n    'jquery',\n    'ko',\n    'underscore',\n    'uiElement',\n    'Amasty_JetTheme/js/model/colors-config',\n    'jquery/colorpicker/js/colorpicker',\n    'domReady!'\n], function ($, ko, _, Element, colorsModel) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            ignoreTmpl: {\n                templates: false\n            },\n            inputUiElement: null,\n            isInputInitialized: false,\n            isNewColorApplied: false,\n            fieldId: null,\n            listens: {\n                value: 'setColor _highlightRow',\n                isInputInitialized: 'setColor initializeColorPicker _highlightRow',\n                isSetToInitial: 'resetColorToInitial',\n                isNewColorApplied: 'toggleIsDefaultValue'\n            },\n            isSetToInitial: colorsModel.isResetColor,\n            htmlId: null,\n            cachedValue: '',\n            classes: {\n                selectedRow: 'amtheme-selected-row'\n            }\n        },\n\n        /** @inheritDoc  */\n        initialize: function () {\n            this._super();\n\n            colorsModel.colorsConfig.subscribe(function (data) {\n                if (data && _.has(data, this.fieldId)) {\n                    this.value(data[this.fieldId]);\n                    this.isNewColorApplied(true);\n                    this.value.valueHasMutated();\n                }\n            }.bind(this));\n\n            $.async({\n                selector: '#' + this.htmlId\n            }, function (element) {\n                this.inputUiElement = $(element);\n                this.cachedValue = this.value();\n                this.getIsDefaultValue();\n                this.isInputInitialized(true);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * @returns {void}\n         */\n        getIsDefaultValue: function () {\n            this.useDefaultElement = $('#row_' + this.htmlId).find('#' + this.htmlId + '_inherit');\n\n            if (this.useDefaultElement.length) {\n                this.useDefaultValue = this.useDefaultElement.is(':checked');\n            }\n        },\n\n        /**\n         * @returns {void}\n         */\n        resetColorToInitial: function (data) {\n            if (data) {\n                this.value(this.cachedValue);\n                this.isNewColorApplied(false);\n            }\n        },\n\n        /**\n         * @returns {void}\n         */\n        toggleIsDefaultValue: function () {\n            if (!this.useDefaultElement.length) {\n                return;\n            }\n\n            if (this.isNewColorApplied() && this.useDefaultElement.is(':checked')) {\n                this.useDefaultElement.trigger('click');\n\n                return;\n            }\n\n            if (!this.isNewColorApplied() && this.useDefaultElement.is(':checked') !== this.useDefaultValue) {\n                this.useDefaultElement.trigger('click');\n            }\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe(['value', 'isInputInitialized', 'isNewColorApplied']);\n\n            return this;\n        },\n\n        /**\n         * @param {String} color\n         * @returns {string}\n         */\n        inverseColor: function (color) {\n            return (0xFFFFFF - ('0x' + color)).toString(16)\n                .padStart(6, '0')\n                .toUpperCase();\n        },\n\n        initializeColorPicker: function () {\n            _.debounce(function () {\n                this.inputUiElement.ColorPicker({\n                    color: this.value(),\n                    onChange: function (hsb, hex) {\n                        this.inputUiElement.css({\n                            backgroundColor: '#' + hex,\n                            color: '#' + this.inverseColor(hex)\n                        }).val('#' + hex);\n                    }.bind(this)\n                });\n            }.bind(this), 300)();\n        },\n\n        setColor: function () {\n            this.inputUiElement.css({\n                backgroundColor: this.value(),\n                color: this.inverseHex\n            }).val(this.value());\n\n        },\n\n        /**\n         * Add additional class on parent element to highlight changes\n         * @private\n         * @returns {void}\n         */\n        _highlightRow: function () {\n            var parentRow = this.inputUiElement.parents('#row_' + this.htmlId),\n                parentSection = this.inputUiElement.parents('.section-config'),\n                $headerElement = parentSection.find('.entry-edit-head');\n\n            if (this.cachedValue !== '' && this.cachedValue !== this.value()) {\n                parentRow.addClass(this.classes.selectedRow);\n                parentSection.addClass('active');\n                $headerElement.find('> a').addClass('open');\n                parentSection.find('.admin__collapsible-block').show();\n            } else {\n                parentRow.removeClass(this.classes.selectedRow);\n            }\n        }\n    });\n});\n","Amasty_JetTheme/js/view/global-switcher-button.js":"define([\n    'jquery',\n    'underscore',\n    'Amasty_JetTheme/js/view/abstract-switcher-button',\n    'Amasty_JetTheme/js/model/global-switcher'\n], function ($, _, Button, globalSwitcherModel) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            presetsElementSelector: 'amasty_jettheme_style_switcher_style',\n            selectedClass: 'amtheme-selected-row',\n            defaultOptionValue: 'food',\n            actionConfigKey: 'style_id'\n        },\n        model: globalSwitcherModel,\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super();\n\n            this.model.globalConfig.subscribe(function (data) {\n                this.handleElements(data);\n            }.bind(this));\n\n            this.model.isRestoreToDefault.subscribe(function () {\n                this.restoreToDefault(this.model.defaultGlobalConfig());\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * @param {Object} config\n         * @returns {void}\n         */\n        restoreToDefault: function (config) {\n            _.each(config, function (data, key) {\n                var $element = $('#' + key),\n                    defaultValue = $element.data('isUseDefault'),\n                    useDefaultElement = this.getUseDefaultElement(key);\n\n                this.handleElement('#' + key, data, false);\n\n                if (!useDefaultElement.length) {\n                    return;\n                }\n\n                if (defaultValue && useDefaultElement.is(':checked') !== defaultValue) {\n                    useDefaultElement.trigger('click');\n                }\n            }.bind(this));\n        },\n\n        /**\n         * @return {Object} chaining\n         */\n        afterRenderHandler: function () {\n            this._super();\n\n            this.presetsElement = $('#' + this.presetsElementSelector);\n\n            this.setElementListeners();\n\n            return this;\n        },\n\n        /**\n         * @param {Object} config\n         * @returns {void}\n         */\n        handleElements: function (config) {\n            if (config) {\n                _.each(config, function (data, key) {\n                    var $element = $('#' + key),\n                        defaultValue = $element.data('isUseDefault'),\n                        useDefaultElement = this.getUseDefaultElement(key);\n\n                    this.handleElement('#' + key, data, true);\n\n                    if (!useDefaultElement.length) {\n                        return;\n                    }\n\n                    if (!defaultValue) {\n                        $element.data('isUseDefault', useDefaultElement.is(':checked'));\n                    }\n\n                    if (useDefaultElement.is(':checked')) {\n                        useDefaultElement.trigger('click');\n                    }\n                }.bind(this));\n            }\n        },\n\n        /**\n         * @param {String} elementId\n         * @param {Object} data\n         * @param {Boolean} isNew\n         * @returns {void}\n         */\n        handleElement: function (elementId, data, isNew) {\n            var $element = $(elementId);\n\n            if ($element.length) {\n                if (data instanceof Array) {\n                    this.handleMultiselect($element, data);\n                } else if (data instanceof Object) {\n                    $element.val(data.value);\n                } else {\n                    $element.val(data);\n                }\n\n                $element[0].dispatchEvent(new Event('change'));\n\n                this.highlightParents(elementId, isNew);\n            }\n        },\n\n        getUseDefaultElement: function (elementId) {\n            return $('#row_' + elementId).find('#' + elementId + '_inherit');\n        },\n\n        /**\n         * @param {Element} element\n         * @param {Object} data\n         * @returns {void}\n         */\n        handleMultiselect: function (element, data) {\n            var options = $(element).find('option');\n\n            _.each(options, function (option) {\n                var $option = $(option),\n                    optionValue = $option.val(),\n                    equalValue = _.find(data, function (value) {\n                        return value === optionValue;\n                    });\n\n                // eslint-disable-next-line no-unused-expressions\n                equalValue ? $option.attr('selected', 'selected') : $option.removeAttr('selected');\n            });\n        },\n\n        /**\n         * @param {String} elementId\n         * @param {Boolean} flag\n         * @returns {void}\n         */\n        highlightParents: function (elementId, flag) {\n            var $element = $(elementId),\n                $parentElement = $element.closest('.section-config'),\n                $headerElement = $parentElement.find('.entry-edit-head');\n\n            this._toggleSelectedClass($element.closest('tr'), flag);\n            this._toggleSelectedClass($headerElement, flag);\n\n            if (!$headerElement.hasClass('admin__collapsible-block')) {\n                return;\n            }\n\n            $parentElement.addClass('active');\n            $headerElement.find('> a').addClass('open');\n            $parentElement.find('.admin__collapsible-block').show();\n        },\n\n        /**\n         * Add/remove classes on updated elements\n         * @private\n         * @param {Element} element\n         * @param {Boolean} show\n         * @returns {void}\n         */\n        _toggleSelectedClass: function (element, show) {\n            var $element = $(element);\n\n            // eslint-disable-next-line no-unused-expressions\n            show ? $element.addClass(this.selectedClass) : $element.removeClass(this.selectedClass);\n        }\n    });\n});\n","Amasty_JetTheme/js/view/abstract-switcher-button.js":"define([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/form/components/button',\n    'Amasty_JetTheme/js/action/get-config'\n], function ($, _, Button, getConfigAction) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            actionConfigKey: '',\n            actions: [\n                {\n                    actionName: 'getConfig',\n                    // eslint-disable-next-line no-template-curly-in-string\n                    targetName: '${ $.name}'\n                }\n            ],\n            childError: null,\n            defaultOptionValue: 'default',\n            elementTmpl: 'Amasty_JetTheme/form/get-config-button',\n            isErrorPresent: false,\n            listens: {\n                errorMessage: 'showMessage'\n            },\n            presetsElement: null,\n            presetsElementSelector: null,\n            preselectConfigId: null,\n            title: 'Apply',\n            urlToLoad: null\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe(['errorMessage', 'isErrorPresent']);\n\n            this.errorMessage = this.model.errorMessage;\n\n            return this;\n        },\n\n        /**\n         * @param {Element} element\n         * @returns {Object}\n         */\n        afterRenderHandler: function (element) {\n            this.element = element;\n\n            this.moveButtonToTheEnd();\n\n            return this;\n        },\n\n        /**\n         * @returns {void}\n         */\n        moveButtonToTheEnd: function () {\n            var $element = $(this.element),\n                rowElement = $element.parents('td.value');\n\n            rowElement.append($element.parent());\n        },\n\n        /**\n         * Set listener\n         * @returns {void}\n         */\n        setElementListeners: function () {\n            if (this.presetsElement.length) {\n                this.preselectedConfigId = this.presetsElement.val();\n\n                this.presetsElement.on('change', function (event) {\n                    this.preselectedConfigId = event.target.value;\n                }.bind(this));\n\n                this.getIsDefaultValue();\n            }\n        },\n\n        getIsDefaultValue: function () {\n            this.useDefaultElement = $('#row_' + this.presetsElementSelector)\n                .find('#' + this.presetsElementSelector + '_inherit');\n\n            if (this.useDefaultElement.length) {\n                this.disabled(this.useDefaultElement.is(':checked'));\n            }\n        },\n\n        /**\n         * @returns {void}\n         */\n        showMessage: function () {\n            this.isErrorPresent(!!this.errorMessage());\n        },\n\n        /**\n         * Call Ajax from action to get config\n         * @returns {void}\n         */\n        getConfig: function () {\n            var configId = this.preselectedConfigId ? this.preselectedConfigId : this.defaultOptionValue,\n                actionData = _.object([this.actionConfigKey], [configId]);\n\n            this._resetErrors();\n\n            if (this.urlToLoad) {\n                getConfigAction.getConfig(this.urlToLoad, actionData, this.model);\n            }\n        },\n\n        /**\n         * @private\n         * @returns {void}\n         */\n        _resetErrors: function () {\n            this.isErrorPresent(false);\n            this.errorMessage('');\n        }\n    });\n});\n","Amasty_JetTheme/js/view/footer/abstract-footer-layout.js":"define([\n    'jquery',\n    'ko',\n    'underscore',\n    'uiElement',\n    'Amasty_JetTheme/js/model/custom-footer'\n], function ($, ko, _, Element, footerModel) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            template: 'Amasty_JetTheme/footer/abstract-footer-layout',\n            layoutBlocks: [],\n            cachedLayoutBlocks: '',\n            isVisible: false,\n            selectedLayout: [],\n            updatedLayoutConfig: {},\n            layoutSelectors: {\n                columnWrapElement: '.amtheme-footer-container',\n                columnElement: '.column',\n                itemWrapElement: '.item-block',\n                itemElement: '.item-block'\n            }\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe(['isVisible', 'layoutBlocks', 'selectedLayout']);\n\n            footerModel.activeLayout.subscribe(function (layoutCode) {\n                if (layoutCode) {\n                    this.isVisible(layoutCode === this.index);\n                }\n            }.bind(this));\n\n            footerModel.fieldValue.subscribe(function () {\n                this.setSelectedLayout();\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Toggle layout visibility\n         * @returns {void}\n         */\n        toggleLayoutVisibility: function () {\n            footerModel.setActiveLayout(this.index);\n        },\n\n        /**\n         * Update field value\n         * @param {Object} data\n         * @param {Number} index\n         * @returns {void}\n         */\n        setUpdatedLayoutConfig: function (data, index) {\n            footerModel.fieldValue()[this.index][index] = data;\n            footerModel.setFieldValue(footerModel.fieldValue());\n        },\n\n        /**\n         * Set layout data based on footer model config\n         * @returns {void}\n         */\n        setSelectedLayout: function () {\n            if (this.cachedLayoutBlocks === JSON.stringify(footerModel.fieldValue()[this.index])) {\n                return;\n            }\n\n            this.layoutBlocks([]);\n            _.each(footerModel.fieldValue()[this.index], function (array, index) {\n                this.layoutBlocks()[index] = [];\n                _.each(array, function (name) {\n                    this.layoutBlocks()[index].push(footerModel.footerBlocks()[name]);\n                }.bind(this));\n            }.bind(this));\n\n            this.cachedLayoutBlocks = JSON.stringify(footerModel.fieldValue()[this.index]);\n            this.layoutBlocks.valueHasMutated();\n        },\n\n        /**\n         * Init jQuery sortable widget\n         * @param {Element} element\n         * @returns {void}\n         */\n        afterColumnRender: function (element) {\n            var self = this;\n\n            $(element).sortable({\n                connectWith: [ this.layoutSelectors.columnElement ],\n                placeholder: 'place',\n                items: this.layoutSelectors.itemElement,\n                start: function (event, ui) {\n                    ui.item.css('opacity', 0.6);\n                },\n                stop: function (event, ui) {\n                    ui.item.css('opacity', 1);\n                },\n                update: function () {\n                    var $this = $(this),\n                        newDataObject = [];\n\n                    _.each($this.find('.item'), function (item) {\n                        var value = $(item).data('value');\n\n                        if (value) {\n                            newDataObject.push(value);\n                        }\n                    });\n\n                    self.setUpdatedLayoutConfig(newDataObject, $this.data('index'));\n                }\n            });\n        }\n    });\n});\n","Amasty_JetTheme/js/view/footer/custom-footer.js":"define([\n    'jquery',\n    'ko',\n    'underscore',\n    'uiComponent',\n    'uiLayout',\n    'mageUtils',\n    'Amasty_JetTheme/js/model/custom-footer'\n], function ($, ko, _, Component, layout, utils, footerModel) {\n    'use strict';\n\n    var layoutNode = {\n        // eslint-disable-next-line no-template-curly-in-string\n        parent: '${ $.$data.parentName }',\n        // eslint-disable-next-line no-template-curly-in-string\n        name: '${ $.$data.name }',\n        displayArea: 'footers-grid'\n    };\n\n    return Component.extend({\n        defaults: {\n            asyncUiElement: null,\n            asyncElementSelector: 'amasty_jettheme_custom_footer_enable_custom_layout',\n            isAsyncElementInitialized: false,\n            template: 'Amasty_JetTheme/footer/custom-footer',\n            layoutConfig: null,\n            footerLayouts: null,\n            value: null,\n            elementValue: {}\n        },\n\n        /** @inheritDoc  */\n        initialize: function () {\n            this._super();\n\n            $.async({\n                selector: '#' + this.asyncElementSelector\n            }, function (element) {\n                this.asyncUiElement = $(element);\n\n                this.asyncElementValue(+this.asyncUiElement.val());\n\n                this.asyncUiElement.on('change', function (event) {\n                    this.asyncElementValue(+event.target.value);\n                }.bind(this));\n            }.bind(this));\n\n            return this;\n        },\n\n        /** @inheritDoc */\n        initObservable: function () {\n            this._super()\n                .observe(['value', 'asyncElementValue', 'footerLayouts', 'value']);\n\n            footerModel.fieldValue.subscribe(function (config) {\n                this.value(null);\n                this.value(JSON.stringify(config));\n            }.bind(this));\n\n            this.setFooterData();\n            this.initChildren();\n\n            return this;\n        },\n\n        /**\n         * Set footed data into model\n         * @returns {void}\n         */\n        setFooterData: function () {\n            var initialConfig = JSON.parse(this.elementValue);\n\n            footerModel.setFieldValue(initialConfig);\n            footerModel.setFooterConfig(JSON.parse(this.layoutConfig));\n            footerModel.handleInitialConfig(initialConfig);\n        },\n\n        /**\n         * Crete & init child components\n         * @returns {Object}\n         */\n        initChildren: function () {\n            var layouts = footerModel.footerLayouts(),\n                activeLayout = footerModel.getActiveLayout();\n\n            _.each(layouts, function (config) {\n                var rendererTemplate,\n                    rendererComponent,\n                    templateData;\n\n                templateData = {\n                    parentName: this.name,\n                    name: config.value\n                };\n                rendererTemplate = _.extend(\n                    layoutNode,\n                    {\n                        component: config.component\n                            ? config.component\n                            : 'Amasty_JetTheme/js/view/footer/abstract-footer-layout',\n                        label: config.label,\n                        isVisible: activeLayout === config.value\n                    }\n                );\n\n                rendererComponent = utils.template(rendererTemplate, templateData);\n                layout([ rendererComponent ]);\n            }.bind(this));\n\n            return this;\n        }\n    });\n});\n","Amasty_JetTheme/js/model/custom-footer.js":"/**\n * Custom footer model\n * @api\n */\n\ndefine([\n    'ko',\n    'underscore',\n    'jquery'\n], function (ko, _, $) {\n    'use strict';\n\n    var footerBlocks = ko.observable(null),\n        footerLayouts = ko.observable(null),\n        fieldValue = ko.observable({}),\n        activeLayout = ko.observable(null);\n\n    /**\n     * Map active blocks with initial config\n     * @param {Object} blockData\n     * @param {Number} elementValue\n     * @returns {string}\n     */\n    // eslint-disable-next-line consistent-return\n    function mapBlocksConfig(blockData, elementValue) {\n        var fieldData = fieldValue();\n\n        if (fieldData) {\n            _.each(fieldData, function (configItem) {\n                var isBlockExist = false;\n\n                if (configItem && typeof configItem === 'object') {\n                    _.each(configItem, function (configArray) {\n                        var isContains = _.contains(configArray, blockData.name);\n\n                        if (isContains) {\n                            isBlockExist = true;\n\n                            if (!elementValue) {\n                                configArray.splice(_.indexOf(configArray, blockData.name), 1);\n                            }\n                        }\n                    });\n\n                    if (!isBlockExist && elementValue) {\n                        configItem[0].push(blockData.name);\n                    }\n\n                    blockData.active(elementValue);\n                }\n            });\n\n            return fieldData;\n        }\n    }\n\n    /**\n     * @param {Object} config\n     * @returns {void}\n     */\n    function setFieldValue(config) {\n        fieldValue(_.extend(fieldValue(), config));\n        fieldValue.valueHasMutated();\n    }\n\n    /**\n     * Set block listeners\n     * @param {Object} blockData\n     * @returns {Function}\n     */\n    function setBlockListeners(blockData) {\n        var $element = $('#' + blockData['config-id']),\n            value = +$element.val();\n\n        if ($element.length) {\n            $element.on('change', function (event) {\n                var newFieldValue = '';\n\n                value = +event.target.value;\n\n                newFieldValue = mapBlocksConfig(blockData, value);\n\n                setFieldValue(newFieldValue);\n            });\n        }\n\n        return mapBlocksConfig(blockData, value);\n    }\n\n    /**\n     * @param {Object} blocks\n     * @returns {void}\n     */\n    function setFooterBlocks(blocks) {\n        var fieldData = fieldValue() ? fieldValue() : null;\n\n        _.each(blocks, function (block, key) {\n            var configId = _.has(block, 'config_path') ? block['config_path'].replace(/[/]/g, '_') : '';\n\n            block.name = key;\n            block['config-id'] = configId;\n            block.active = ko.observable(true);\n\n            fieldData = setBlockListeners(block);\n        });\n\n        setFieldValue(fieldData);\n        footerBlocks(blocks);\n    }\n\n    /**\n     * @param {Object} layouts\n     * @returns {void}\n     */\n    function setFooterLayouts(layouts) {\n        footerLayouts(layouts);\n    }\n\n    /**\n     * @param {Object} config\n     * @returns {void}\n     */\n    function setFooterConfig(config) {\n        setFooterBlocks(config.content);\n        setFooterLayouts(config.layouts);\n    }\n\n    /**\n     * @returns {string}\n     */\n    function getActiveLayout() {\n        return activeLayout();\n    }\n\n    /**\n     * @param {String} layoutCode\n     * @returns {void}\n     */\n    function setActiveLayout(layoutCode) {\n        activeLayout(layoutCode);\n        fieldValue(_.extend(fieldValue(), { 'active-layout': getActiveLayout() }));\n    }\n\n    /**\n     * Set initial active layout & create config for footer block\n     * @param {Array} initialConfig\n     * @return {void}\n     */\n    function handleInitialConfig(initialConfig) {\n        var config = fieldValue() ? fieldValue() : initialConfig;\n\n        activeLayout(config['active-layout']);\n    }\n\n    return {\n        footerBlocks: footerBlocks,\n        footerLayouts: footerLayouts,\n        fieldValue: fieldValue,\n        activeLayout: activeLayout,\n        setFooterConfig: setFooterConfig,\n        handleInitialConfig: handleInitialConfig,\n        setActiveLayout: setActiveLayout,\n        getActiveLayout: getActiveLayout,\n        setFieldValue: setFieldValue\n    };\n});\n","Amasty_JetTheme/js/model/global-switcher.js":"/**\n * Global config model\n * @api\n */\n\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'Amasty_JetTheme/js/model/colors-config',\n    'Amasty_JetTheme/js/model/custom-footer'\n], function (ko, $, _, colorsModel, footerModel) {\n    'use strict';\n\n    var globalConfig = ko.observable({}),\n        errorMessage = ko.observable(''),\n        defaultGlobalConfig = ko.observable({}),\n        isRestoreToDefault = ko.observable(false);\n\n    /**\n     * @param {Object} config\n     * @returns {void}\n     */\n    function handleDefaultConfig(config) {\n        if (!_.isEmpty(defaultGlobalConfig())) {\n            isRestoreToDefault(!isRestoreToDefault());\n            defaultGlobalConfig({});\n        }\n\n        _.each(config, function (data, key) {\n            defaultGlobalConfig()[key] = $('#' + key).val();\n        });\n\n        if (_.has(config, 'color_scheme')) {\n            colorsModel.setConfig(config['color_scheme']);\n            colorsModel.isResetColor(false);\n        } else {\n            colorsModel.isResetColor(true);\n        }\n\n        if (_.has(config, 'custom_footer_layout_config')) {\n            footerModel.handleInitialConfig(config['custom_footer_layout_config']);\n        }\n\n        globalConfig(config);\n    }\n\n    /**\n     * Get global config\n     * @returns {Object}\n     */\n    function getConfig() {\n        return globalConfig();\n    }\n\n    /**\n     * Set config\n     * @param {Object} config\n     * @returns {void}\n     */\n    function setConfig(config) {\n        handleDefaultConfig(config);\n    }\n\n    /**\n     * Set messages\n     * @param {String} message\n     * @returns {void}\n     */\n    function setErrorMessage(message) {\n        errorMessage(message);\n    }\n\n    return {\n        globalConfig: globalConfig,\n        defaultGlobalConfig: defaultGlobalConfig,\n        errorMessage: errorMessage,\n        isRestoreToDefault: isRestoreToDefault,\n        getConfig: getConfig,\n        setConfig: setConfig,\n        setErrorMessage: setErrorMessage\n    };\n});\n","Amasty_JetTheme/js/model/colors-config.js":"/**\n * Colors model\n * @api\n */\n\ndefine([\n    'ko'\n], function (ko) {\n    'use strict';\n\n    var colorsConfig = ko.observable({}),\n        errorMessage = ko.observable(''),\n        isResetColor = ko.observable(false);\n\n    /**\n     * Set colors into observable property\n     * @param {Object} colors\n     * @returns {void}\n     */\n    function setConfig(colors) {\n        colorsConfig(colors);\n    }\n\n    /**\n     * Set messages\n     * @param {String} message\n     * @returns {void}\n     */\n    function setErrorMessage(message) {\n        errorMessage(message);\n    }\n\n    return {\n        colorsConfig: colorsConfig,\n        errorMessage: errorMessage,\n        isResetColor: isResetColor,\n        setConfig: setConfig,\n        setErrorMessage: setErrorMessage\n    };\n});\n","Amasty_JetTheme/js/action/get-config.js":"/**\n * Ajax actions\n * @api\n */\n\ndefine([\n    'jquery',\n    'underscore'\n], function ($, _) {\n    'use strict';\n\n    return {\n        /**\n         * Ajax call\n         * @param {String} url\n         * @param {Object} data\n         * @param {Object} model\n         * @returns {Deferred}\n         */\n        getConfig: function (url, data, model) {\n            return $.ajax({\n                url: url,\n                data: this._prepareData(data),\n                type: 'POST',\n                success: function (response) {\n                    if (_.has(response, 'error') && response.error) {\n                        model.setErrorMessage(response.message);\n                    } else {\n                        model.setConfig(response.data);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Prepare data for ajax\n         * @param {Object} data\n         * @returns {Object}\n         */\n        _prepareData: function (data) {\n            return $.extend({\n                form_key: window.FORM_KEY\n            }, data);\n        }\n    };\n});\n"}
}});
