require.config({"config": {
        "jsbuild":{"Amasty_CustomerAttributes/js/jquery.jqplot.js":"/**\n * Title: jqPlot Charts\n * \n * Pure JavaScript plotting plugin for jQuery.\n * \n * About: Version\n * \n * version: 1.0.8 \n * revision: 1250\n * \n * About: Copyright & License\n * \n * Copyright (c) 2009-2013 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT and GPL version 2.0 licenses. This means that you can \n * choose the license that best suits your project and use it accordingly.\n * \n * See <GPL Version 2> and <MIT License> contained within this distribution for further information. \n *\n * The author would appreciate an email letting him know of any substantial\n * use of jqPlot.  You can reach the author at: chris at jqplot dot com \n * or see http://www.jqplot.com/info.php.  This is, of course, not required.\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php.\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n * \n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n * \n * About: Introduction\n * \n * jqPlot requires jQuery (1.4+ required for certain features). jQuery 1.4.2 is included in the distribution.  \n * To use jqPlot include jQuery, the jqPlot jQuery plugin, the jqPlot css file and optionally \n * the excanvas script for IE support in your web page:\n * \n * > <!--[if lt IE 9]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.js\"></script><![endif]-->\n * > <script language=\"javascript\" type=\"text/javascript\" src=\"jquery-1.4.4.min.js\"></script>\n * > <script language=\"javascript\" type=\"text/javascript\" src=\"jquery.jqplot.min.js\"></script>\n * > <link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.jqplot.css\" />\n * \n * jqPlot can be customized by overriding the defaults of any of the objects which make\n * up the plot. The general usage of jqplot is:\n * \n * > chart = $.jqplot('targetElemId', [dataArray,...], {optionsObject});\n * \n * The options available to jqplot are detailed in <jqPlot Options> in the jqPlotOptions.txt file.\n * \n * An actual call to $.jqplot() may look like the \n * examples below:\n * \n * > chart = $.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]]);\n * \n * or\n * \n * > dataArray = [34,12,43,55,77];\n * > chart = $.jqplot('targetElemId', [dataArray, ...], {title:'My Plot', axes:{yaxis:{min:20, max:100}}});\n * \n * For more inforrmation, see <jqPlot Usage>.\n * \n * About: Usage\n * \n * See <jqPlot Usage>\n * \n * About: Available Options \n * \n * See <jqPlot Options> for a list of options available thorugh the options object (not complete yet!)\n * \n * About: Options Usage\n * \n * See <Options Tutorial>\n * \n * About: Changes\n * \n * See <Change Log>\n * \n */\n\ndefine([\n    \"jquery\"\n], function ($) {\n\n    (function ($) {\n        // make sure undefined is undefined\n        var undefined;\n\n        $.fn.emptyForce = function () {\n            for (var i = 0, elem; (elem = $(this)[i]) != null; i++) {\n                // Remove element nodes and prevent memory leaks\n                if (elem.nodeType === 1) {\n                    $.cleanData(elem.getElementsByTagName(\"*\"));\n                }\n\n                // Remove any remaining nodes\n                if ($.jqplot.use_excanvas) {\n                    elem.outerHTML = \"\";\n                }\n                else {\n                    while (elem.firstChild) {\n                        elem.removeChild(elem.firstChild);\n                    }\n                }\n\n                elem = null;\n            }\n\n            return $(this);\n        };\n\n        $.fn.removeChildForce = function (parent) {\n            while (parent.firstChild) {\n                this.removeChildForce(parent.firstChild);\n                parent.removeChild(parent.firstChild);\n            }\n        };\n\n        $.fn.jqplot = function () {\n            var datas = [];\n            var options = [];\n            // see how many data arrays we have\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                if ($.isArray(arguments[i])) {\n                    datas.push(arguments[i]);\n                }\n                else if ($.isPlainObject(arguments[i])) {\n                    options.push(arguments[i]);\n                }\n            }\n\n            return this.each(function (index) {\n                var tid,\n                    plot,\n                    $this = $(this),\n                    dl = datas.length,\n                    ol = options.length,\n                    data,\n                    opts;\n\n                if (index < dl) {\n                    data = datas[index];\n                }\n                else {\n                    data = dl ? datas[dl - 1] : null;\n                }\n\n                if (index < ol) {\n                    opts = options[index];\n                }\n                else {\n                    opts = ol ? options[ol - 1] : null;\n                }\n\n                // does el have an id?\n                // if not assign it one.\n                tid = $this.attr('id');\n                if (tid === undefined) {\n                    tid = 'jqplot_target_' + $.jqplot.targetCounter++;\n                    $this.attr('id', tid);\n                }\n\n                plot = $.jqplot(tid, data, opts);\n\n                $this.data('jqplot', plot);\n            });\n        };\n\n\n        /**\n         * Namespace: $.jqplot\n         * jQuery function called by the user to create a plot.\n         *\n         * Parameters:\n         * target - ID of target element to render the plot into.\n         * data - an array of data series.\n         * options - user defined options object.  See the individual classes for available options.\n         *\n         * Properties:\n         * config - object to hold configuration information for jqPlot plot object.\n         *\n         * attributes:\n         * enablePlugins - False to disable plugins by default.  Plugins must then be explicitly\n         *   enabled in the individual plot options.  Default: false.\n         *   This property sets the \"show\" property of certain plugins to true or false.\n         *   Only plugins that can be immediately active upon loading are affected.  This includes\n         *   non-renderer plugins like cursor, dragable, highlighter, and trendline.\n         * defaultHeight - Default height for plots where no css height specification exists.  This\n         *   is a jqplot wide default.\n         * defaultWidth - Default height for plots where no css height specification exists.  This\n         *   is a jqplot wide default.\n         */\n\n        $.jqplot = function (target, data, options) {\n            var _data = null, _options = null;\n\n            if (arguments.length === 3) {\n                _data = data;\n                _options = options;\n            }\n\n            else if (arguments.length === 2) {\n                if ($.isArray(data)) {\n                    _data = data;\n                }\n\n                else if ($.isPlainObject(data)) {\n                    _options = data;\n                }\n            }\n\n            if (_data === null && _options !== null && _options.data) {\n                _data = _options.data;\n            }\n\n            var plot = new jqPlot();\n            // remove any error class that may be stuck on target.\n            $('#' + target).removeClass('jqplot-error');\n\n            if ($.jqplot.config.catchErrors) {\n                try {\n                    plot.init(target, _data, _options);\n                    plot.draw();\n                    plot.themeEngine.init.call(plot);\n                    return plot;\n                }\n                catch (e) {\n                    var msg = $.jqplot.config.errorMessage || e.message;\n                    $('#' + target).append('<div class=\"jqplot-error-message\">' + msg + '</div>');\n                    $('#' + target).addClass('jqplot-error');\n                    document.getElementById(target).style.background = $.jqplot.config.errorBackground;\n                    document.getElementById(target).style.border = $.jqplot.config.errorBorder;\n                    document.getElementById(target).style.fontFamily = $.jqplot.config.errorFontFamily;\n                    document.getElementById(target).style.fontSize = $.jqplot.config.errorFontSize;\n                    document.getElementById(target).style.fontStyle = $.jqplot.config.errorFontStyle;\n                    document.getElementById(target).style.fontWeight = $.jqplot.config.errorFontWeight;\n                }\n            }\n            else {\n                plot.init(target, _data, _options);\n                plot.draw();\n                plot.themeEngine.init.call(plot);\n                return plot;\n            }\n        };\n\n        $.jqplot.version = \"1.0.8\";\n        $.jqplot.revision = \"1250\";\n\n        $.jqplot.targetCounter = 1;\n\n        // canvas manager to reuse canvases on the plot.\n        // Should help solve problem of canvases not being freed and\n        // problem of waiting forever for firefox to decide to free memory.\n        $.jqplot.CanvasManager = function () {\n            // canvases are managed globally so that they can be reused\n            // across plots after they have been freed\n            if (typeof $.jqplot.CanvasManager.canvases == 'undefined') {\n                $.jqplot.CanvasManager.canvases = [];\n                $.jqplot.CanvasManager.free = [];\n            }\n\n            var myCanvases = [];\n\n            this.getCanvas = function () {\n                var canvas;\n                var makeNew = true;\n\n                if (!$.jqplot.use_excanvas) {\n                    for (var i = 0, l = $.jqplot.CanvasManager.canvases.length; i < l; i++) {\n                        if ($.jqplot.CanvasManager.free[i] === true) {\n                            makeNew = false;\n                            canvas = $.jqplot.CanvasManager.canvases[i];\n                            // $(canvas).removeClass('jqplot-canvasManager-free').addClass('jqplot-canvasManager-inuse');\n                            $.jqplot.CanvasManager.free[i] = false;\n                            myCanvases.push(i);\n                            break;\n                        }\n                    }\n                }\n\n                if (makeNew) {\n                    canvas = document.createElement('canvas');\n                    myCanvases.push($.jqplot.CanvasManager.canvases.length);\n                    $.jqplot.CanvasManager.canvases.push(canvas);\n                    $.jqplot.CanvasManager.free.push(false);\n                }\n\n                return canvas;\n            };\n\n            // this method has to be used after settings the dimesions\n            // on the element returned by getCanvas()\n            this.initCanvas = function (canvas) {\n                if ($.jqplot.use_excanvas) {\n                    return window.G_vmlCanvasManager.initElement(canvas);\n                }\n                return canvas;\n            };\n\n            this.freeAllCanvases = function () {\n                for (var i = 0, l = myCanvases.length; i < l; i++) {\n                    this.freeCanvas(myCanvases[i]);\n                }\n                myCanvases = [];\n            };\n\n            this.freeCanvas = function (idx) {\n                if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                    // excanvas can't be reused, but properly unset\n                    window.G_vmlCanvasManager.uninitElement($.jqplot.CanvasManager.canvases[idx]);\n                    $.jqplot.CanvasManager.canvases[idx] = null;\n                }\n                else {\n                    var canvas = $.jqplot.CanvasManager.canvases[idx];\n                    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n                    $(canvas).unbind().removeAttr('class').removeAttr('style');\n                    // Style attributes seemed to be still hanging around.  wierd.  Some ticks\n                    // still retained a left: 0px attribute after reusing a canvas.\n                    $(canvas).css({left: '', top: '', position: ''});\n                    // setting size to 0 may save memory of unused canvases?\n                    canvas.width = 0;\n                    canvas.height = 0;\n                    $.jqplot.CanvasManager.free[idx] = true;\n                }\n            };\n\n        };\n\n\n        // Convienence function that won't hang IE or FF without FireBug.\n        $.jqplot.log = function () {\n            if (window.console) {\n                window.console.log.apply(window.console, arguments);\n            }\n        };\n\n        $.jqplot.config = {\n            addDomReference: false,\n            enablePlugins: false,\n            defaultHeight: 300,\n            defaultWidth: 400,\n            UTCAdjust: false,\n            timezoneOffset: new Date(new Date().getTimezoneOffset() * 60000),\n            errorMessage: '',\n            errorBackground: '',\n            errorBorder: '',\n            errorFontFamily: '',\n            errorFontSize: '',\n            errorFontStyle: '',\n            errorFontWeight: '',\n            catchErrors: false,\n            defaultTickFormatString: \"%.1f\",\n            defaultColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n            defaultNegativeColors: [\"#498991\", \"#C08840\", \"#9F9274\", \"#546D61\", \"#646C4A\", \"#6F6621\", \"#6E3F5F\", \"#4F64B0\", \"#A89050\", \"#C45923\", \"#187399\", \"#945381\", \"#959E5C\", \"#C7AF7B\", \"#478396\", \"#907294\"],\n            dashLength: 4,\n            gapLength: 4,\n            dotGapLength: 2.5,\n            srcLocation: 'jqplot/src/',\n            pluginLocation: 'jqplot/src/plugins/'\n        };\n\n\n        $.jqplot.arrayMax = function (array) {\n            return Math.max.apply(Math, array);\n        };\n\n        $.jqplot.arrayMin = function (array) {\n            return Math.min.apply(Math, array);\n        };\n\n        $.jqplot.enablePlugins = $.jqplot.config.enablePlugins;\n\n        // canvas related tests taken from modernizer:\n        // Copyright (c) 2009 - 2010 Faruk Ates.\n        // http://www.modernizr.com\n\n        $.jqplot.support_canvas = function () {\n            if (typeof $.jqplot.support_canvas.result == 'undefined') {\n                $.jqplot.support_canvas.result = !!document.createElement('canvas').getContext;\n            }\n            return $.jqplot.support_canvas.result;\n        };\n\n        $.jqplot.support_canvas_text = function () {\n            if (typeof $.jqplot.support_canvas_text.result == 'undefined') {\n                if (window.G_vmlCanvasManager !== undefined && window.G_vmlCanvasManager._version > 887) {\n                    $.jqplot.support_canvas_text.result = true;\n                }\n                else {\n                    $.jqplot.support_canvas_text.result = !!(document.createElement('canvas').getContext && typeof document.createElement('canvas').getContext('2d').fillText == 'function');\n                }\n\n            }\n            return $.jqplot.support_canvas_text.result;\n        };\n\n        $.jqplot.use_excanvas = ((!$.support.boxModel || !$.support.objectAll || !$support.leadingWhitespace) && !$.jqplot.support_canvas()) ? true : false;\n\n        /**\n         *\n         * Hooks: jqPlot Pugin Hooks\n         *\n         * $.jqplot.preInitHooks - called before initialization.\n         * $.jqplot.postInitHooks - called after initialization.\n         * $.jqplot.preParseOptionsHooks - called before user options are parsed.\n         * $.jqplot.postParseOptionsHooks - called after user options are parsed.\n         * $.jqplot.preDrawHooks - called before plot draw.\n         * $.jqplot.postDrawHooks - called after plot draw.\n         * $.jqplot.preDrawSeriesHooks - called before each series is drawn.\n         * $.jqplot.postDrawSeriesHooks - called after each series is drawn.\n         * $.jqplot.preDrawLegendHooks - called before the legend is drawn.\n         * $.jqplot.addLegendRowHooks - called at the end of legend draw, so plugins\n         *     can add rows to the legend table.\n         * $.jqplot.preSeriesInitHooks - called before series is initialized.\n         * $.jqplot.postSeriesInitHooks - called after series is initialized.\n         * $.jqplot.preParseSeriesOptionsHooks - called before series related options\n         *     are parsed.\n         * $.jqplot.postParseSeriesOptionsHooks - called after series related options\n         *     are parsed.\n         * $.jqplot.eventListenerHooks - called at the end of plot drawing, binds\n         *     listeners to the event canvas which lays on top of the grid area.\n         * $.jqplot.preDrawSeriesShadowHooks - called before series shadows are drawn.\n         * $.jqplot.postDrawSeriesShadowHooks - called after series shadows are drawn.\n         *\n         */\n\n        $.jqplot.preInitHooks = [];\n        $.jqplot.postInitHooks = [];\n        $.jqplot.preParseOptionsHooks = [];\n        $.jqplot.postParseOptionsHooks = [];\n        $.jqplot.preDrawHooks = [];\n        $.jqplot.postDrawHooks = [];\n        $.jqplot.preDrawSeriesHooks = [];\n        $.jqplot.postDrawSeriesHooks = [];\n        $.jqplot.preDrawLegendHooks = [];\n        $.jqplot.addLegendRowHooks = [];\n        $.jqplot.preSeriesInitHooks = [];\n        $.jqplot.postSeriesInitHooks = [];\n        $.jqplot.preParseSeriesOptionsHooks = [];\n        $.jqplot.postParseSeriesOptionsHooks = [];\n        $.jqplot.eventListenerHooks = [];\n        $.jqplot.preDrawSeriesShadowHooks = [];\n        $.jqplot.postDrawSeriesShadowHooks = [];\n\n        // A superclass holding some common properties and methods.\n        $.jqplot.ElemContainer = function () {\n            this._elem;\n            this._plotWidth;\n            this._plotHeight;\n            this._plotDimensions = {height: null, width: null};\n        };\n\n        $.jqplot.ElemContainer.prototype.createElement = function (el, offsets, clss, cssopts, attrib) {\n            this._offsets = offsets;\n            var klass = clss || 'jqplot';\n            var elem = document.createElement(el);\n            this._elem = $(elem);\n            this._elem.addClass(klass);\n            this._elem.css(cssopts);\n            this._elem.attr(attrib);\n            // avoid memory leak;\n            elem = null;\n            return this._elem;\n        };\n\n        $.jqplot.ElemContainer.prototype.getWidth = function () {\n            if (this._elem) {\n                return this._elem.outerWidth(true);\n            }\n            else {\n                return null;\n            }\n        };\n\n        $.jqplot.ElemContainer.prototype.getHeight = function () {\n            if (this._elem) {\n                return this._elem.outerHeight(true);\n            }\n            else {\n                return null;\n            }\n        };\n\n        $.jqplot.ElemContainer.prototype.getPosition = function () {\n            if (this._elem) {\n                return this._elem.position();\n            }\n            else {\n                return {top: null, left: null, bottom: null, right: null};\n            }\n        };\n\n        $.jqplot.ElemContainer.prototype.getTop = function () {\n            return this.getPosition().top;\n        };\n\n        $.jqplot.ElemContainer.prototype.getLeft = function () {\n            return this.getPosition().left;\n        };\n\n        $.jqplot.ElemContainer.prototype.getBottom = function () {\n            return this._elem.css('bottom');\n        };\n\n        $.jqplot.ElemContainer.prototype.getRight = function () {\n            return this._elem.css('right');\n        };\n\n\n        /**\n         * Class: Axis\n         * An individual axis object.  Cannot be instantiated directly, but created\n         * by the Plot object.  Axis properties can be set or overridden by the\n         * options passed in from the user.\n         *\n         */\n        function Axis(name) {\n            $.jqplot.ElemContainer.call(this);\n            // Group: Properties\n            //\n            // Axes options are specified within an axes object at the top level of the\n            // plot options like so:\n            // > {\n            // >    axes: {\n            // >        xaxis: {min: 5},\n            // >        yaxis: {min: 2, max: 8, numberTicks:4},\n            // >        x2axis: {pad: 1.5},\n            // >        y2axis: {ticks:[22, 44, 66, 88]}\n            // >        }\n            // > }\n            // There are 2 x axes, 'xaxis' and 'x2axis', and\n            // 9 yaxes, 'yaxis', 'y2axis'. 'y3axis', ...  Any or all of which may be specified.\n            this.name = name;\n            this._series = [];\n            // prop: show\n            // Wether to display the axis on the graph.\n            this.show = false;\n            // prop: tickRenderer\n            // A class of a rendering engine for creating the ticks labels displayed on the plot,\n            // See <$.jqplot.AxisTickRenderer>.\n            this.tickRenderer = $.jqplot.AxisTickRenderer;\n            // prop: tickOptions\n            // Options that will be passed to the tickRenderer, see <$.jqplot.AxisTickRenderer> options.\n            this.tickOptions = {};\n            // prop: labelRenderer\n            // A class of a rendering engine for creating an axis label.\n            this.labelRenderer = $.jqplot.AxisLabelRenderer;\n            // prop: labelOptions\n            // Options passed to the label renderer.\n            this.labelOptions = {};\n            // prop: label\n            // Label for the axis\n            this.label = null;\n            // prop: showLabel\n            // true to show the axis label.\n            this.showLabel = true;\n            // prop: min\n            // minimum value of the axis (in data units, not pixels).\n            this.min = null;\n            // prop: max\n            // maximum value of the axis (in data units, not pixels).\n            this.max = null;\n            // prop: autoscale\n            // DEPRECATED\n            // the default scaling algorithm produces superior results.\n            this.autoscale = false;\n            // prop: pad\n            // Padding to extend the range above and below the data bounds.\n            // The data range is multiplied by this factor to determine minimum and maximum axis bounds.\n            // A value of 0 will be interpreted to mean no padding, and pad will be set to 1.0.\n            this.pad = 1.2;\n            // prop: padMax\n            // Padding to extend the range above data bounds.\n            // The top of the data range is multiplied by this factor to determine maximum axis bounds.\n            // A value of 0 will be interpreted to mean no padding, and padMax will be set to 1.0.\n            this.padMax = null;\n            // prop: padMin\n            // Padding to extend the range below data bounds.\n            // The bottom of the data range is multiplied by this factor to determine minimum axis bounds.\n            // A value of 0 will be interpreted to mean no padding, and padMin will be set to 1.0.\n            this.padMin = null;\n            // prop: ticks\n            // 1D [val, val, ...] or 2D [[val, label], [val, label], ...] array of ticks for the axis.\n            // If no label is specified, the value is formatted into an appropriate label.\n            this.ticks = [];\n            // prop: numberTicks\n            // Desired number of ticks.  Default is to compute automatically.\n            this.numberTicks;\n            // prop: tickInterval\n            // number of units between ticks.  Mutually exclusive with numberTicks.\n            this.tickInterval;\n            // prop: renderer\n            // A class of a rendering engine that handles tick generation,\n            // scaling input data to pixel grid units and drawing the axis element.\n            this.renderer = $.jqplot.LinearAxisRenderer;\n            // prop: rendererOptions\n            // renderer specific options.  See <$.jqplot.LinearAxisRenderer> for options.\n            this.rendererOptions = {};\n            // prop: showTicks\n            // Wether to show the ticks (both marks and labels) or not.\n            // Will not override showMark and showLabel options if specified on the ticks themselves.\n            this.showTicks = true;\n            // prop: showTickMarks\n            // Wether to show the tick marks (line crossing grid) or not.\n            // Overridden by showTicks and showMark option of tick itself.\n            this.showTickMarks = true;\n            // prop: showMinorTicks\n            // Wether or not to show minor ticks.  This is renderer dependent.\n            this.showMinorTicks = true;\n            // prop: drawMajorGridlines\n            // True to draw gridlines for major axis ticks.\n            this.drawMajorGridlines = true;\n            // prop: drawMinorGridlines\n            // True to draw gridlines for minor ticks.\n            this.drawMinorGridlines = false;\n            // prop: drawMajorTickMarks\n            // True to draw tick marks for major axis ticks.\n            this.drawMajorTickMarks = true;\n            // prop: drawMinorTickMarks\n            // True to draw tick marks for minor ticks.  This is renderer dependent.\n            this.drawMinorTickMarks = true;\n            // prop: useSeriesColor\n            // Use the color of the first series associated with this axis for the\n            // tick marks and line bordering this axis.\n            this.useSeriesColor = false;\n            // prop: borderWidth\n            // width of line stroked at the border of the axis.  Defaults\n            // to the width of the grid boarder.\n            this.borderWidth = null;\n            // prop: borderColor\n            // color of the border adjacent to the axis.  Defaults to grid border color.\n            this.borderColor = null;\n            // prop: scaleToHiddenSeries\n            // True to include hidden series when computing axes bounds and scaling.\n            this.scaleToHiddenSeries = false;\n            // minimum and maximum values on the axis.\n            this._dataBounds = {min: null, max: null};\n            // statistics (min, max, mean) as well as actual data intervals for each series attached to axis.\n            // holds collection of {intervals:[], min:, max:, mean: } objects for each series on axis.\n            this._intervalStats = [];\n            // pixel position from the top left of the min value and max value on the axis.\n            this._offsets = {min: null, max: null};\n            this._ticks = [];\n            this._label = null;\n            // prop: syncTicks\n            // true to try and synchronize tick spacing across multiple axes so that ticks and\n            // grid lines line up.  This has an impact on autoscaling algorithm, however.\n            // In general, autoscaling an individual axis will work better if it does not\n            // have to sync ticks.\n            this.syncTicks = null;\n            // prop: tickSpacing\n            // Approximate pixel spacing between ticks on graph.  Used during autoscaling.\n            // This number will be an upper bound, actual spacing will be less.\n            this.tickSpacing = 75;\n            // Properties to hold the original values for min, max, ticks, tickInterval and numberTicks\n            // so they can be restored if altered by plugins.\n            this._min = null;\n            this._max = null;\n            this._tickInterval = null;\n            this._numberTicks = null;\n            this.__ticks = null;\n            // hold original user options.\n            this._options = {};\n        }\n\n        Axis.prototype = new $.jqplot.ElemContainer();\n        Axis.prototype.constructor = Axis;\n\n        Axis.prototype.init = function () {\n            if ($.isFunction(this.renderer)) {\n                this.renderer = new this.renderer();\n            }\n            // set the axis name\n            this.tickOptions.axis = this.name;\n            // if showMark or showLabel tick options not specified, use value of axis option.\n            // showTicks overrides showTickMarks.\n            if (this.tickOptions.showMark == null) {\n                this.tickOptions.showMark = this.showTicks;\n            }\n            if (this.tickOptions.showMark == null) {\n                this.tickOptions.showMark = this.showTickMarks;\n            }\n            if (this.tickOptions.showLabel == null) {\n                this.tickOptions.showLabel = this.showTicks;\n            }\n\n            if (this.label == null || this.label == '') {\n                this.showLabel = false;\n            }\n            else {\n                this.labelOptions.label = this.label;\n            }\n            if (this.showLabel == false) {\n                this.labelOptions.show = false;\n            }\n            // set the default padMax, padMin if not specified\n            // special check, if no padding desired, padding\n            // should be set to 1.0\n            if (this.pad == 0) {\n                this.pad = 1.0;\n            }\n            if (this.padMax == 0) {\n                this.padMax = 1.0;\n            }\n            if (this.padMin == 0) {\n                this.padMin = 1.0;\n            }\n            if (this.padMax == null) {\n                this.padMax = (this.pad - 1) / 2 + 1;\n            }\n            if (this.padMin == null) {\n                this.padMin = (this.pad - 1) / 2 + 1;\n            }\n            // now that padMin and padMax are correctly set, reset pad in case user has supplied\n            // padMin and/or padMax\n            this.pad = this.padMax + this.padMin - 1;\n            if (this.min != null || this.max != null) {\n                this.autoscale = false;\n            }\n            // if not set, sync ticks for y axes but not x by default.\n            if (this.syncTicks == null && this.name.indexOf('y') > -1) {\n                this.syncTicks = true;\n            }\n            else if (this.syncTicks == null) {\n                this.syncTicks = false;\n            }\n            this.renderer.init.call(this, this.rendererOptions);\n\n        };\n\n        Axis.prototype.draw = function (ctx, plot) {\n            // Memory Leaks patch\n            if (this.__ticks) {\n                this.__ticks = null;\n            }\n\n            return this.renderer.draw.call(this, ctx, plot);\n\n        };\n\n        Axis.prototype.set = function () {\n            this.renderer.set.call(this);\n        };\n\n        Axis.prototype.pack = function (pos, offsets) {\n            if (this.show) {\n                this.renderer.pack.call(this, pos, offsets);\n            }\n            // these properties should all be available now.\n            if (this._min == null) {\n                this._min = this.min;\n                this._max = this.max;\n                this._tickInterval = this.tickInterval;\n                this._numberTicks = this.numberTicks;\n                this.__ticks = this._ticks;\n            }\n        };\n\n        // reset the axis back to original values if it has been scaled, zoomed, etc.\n        Axis.prototype.reset = function () {\n            this.renderer.reset.call(this);\n        };\n\n        Axis.prototype.resetScale = function (opts) {\n            $.extend(true, this, {\n                min: null,\n                max: null,\n                numberTicks: null,\n                tickInterval: null,\n                _ticks: [],\n                ticks: []\n            }, opts);\n            this.resetDataBounds();\n        };\n\n        Axis.prototype.resetDataBounds = function () {\n            // Go through all the series attached to this axis and find\n            // the min/max bounds for this axis.\n            var db = this._dataBounds;\n            db.min = null;\n            db.max = null;\n            var l, s, d;\n            // check for when to force min 0 on bar series plots.\n            var doforce = (this.show) ? true : false;\n            for (var i = 0; i < this._series.length; i++) {\n                s = this._series[i];\n                if (s.show || this.scaleToHiddenSeries) {\n                    d = s._plotData;\n                    if (s._type === 'line' && s.renderer.bands.show && this.name.charAt(0) !== 'x') {\n                        d = [[0, s.renderer.bands._min], [1, s.renderer.bands._max]];\n                    }\n\n                    var minyidx = 1, maxyidx = 1;\n\n                    if (s._type != null && s._type == 'ohlc') {\n                        minyidx = 3;\n                        maxyidx = 2;\n                    }\n\n                    for (var j = 0, l = d.length; j < l; j++) {\n                        if (this.name == 'xaxis' || this.name == 'x2axis') {\n                            if ((d[j][0] != null && d[j][0] < db.min) || db.min == null) {\n                                db.min = d[j][0];\n                            }\n                            if ((d[j][0] != null && d[j][0] > db.max) || db.max == null) {\n                                db.max = d[j][0];\n                            }\n                        }\n                        else {\n                            if ((d[j][minyidx] != null && d[j][minyidx] < db.min) || db.min == null) {\n                                db.min = d[j][minyidx];\n                            }\n                            if ((d[j][maxyidx] != null && d[j][maxyidx] > db.max) || db.max == null) {\n                                db.max = d[j][maxyidx];\n                            }\n                        }\n                    }\n\n                    // Hack to not pad out bottom of bar plots unless user has specified a padding.\n                    // every series will have a chance to set doforce to false.  once it is set to\n                    // false, it cannot be reset to true.\n                    // If any series attached to axis is not a bar, wont force 0.\n                    if (doforce && s.renderer.constructor !== $.jqplot.BarRenderer) {\n                        doforce = false;\n                    }\n\n                    else if (doforce && this._options.hasOwnProperty('forceTickAt0') && this._options.forceTickAt0 == false) {\n                        doforce = false;\n                    }\n\n                    else if (doforce && s.renderer.constructor === $.jqplot.BarRenderer) {\n                        if (s.barDirection == 'vertical' && this.name != 'xaxis' && this.name != 'x2axis') {\n                            if (this._options.pad != null || this._options.padMin != null) {\n                                doforce = false;\n                            }\n                        }\n\n                        else if (s.barDirection == 'horizontal' && (this.name == 'xaxis' || this.name == 'x2axis')) {\n                            if (this._options.pad != null || this._options.padMin != null) {\n                                doforce = false;\n                            }\n                        }\n\n                    }\n                }\n            }\n\n            if (doforce && this.renderer.constructor === $.jqplot.LinearAxisRenderer && db.min >= 0) {\n                this.padMin = 1.0;\n                this.forceTickAt0 = true;\n            }\n        };\n\n        /**\n         * Class: Legend\n         * Legend object.  Cannot be instantiated directly, but created\n         * by the Plot object.  Legend properties can be set or overridden by the\n         * options passed in from the user.\n         */\n        function Legend(options) {\n            $.jqplot.ElemContainer.call(this);\n            // Group: Properties\n\n            // prop: show\n            // Wether to display the legend on the graph.\n            this.show = false;\n            // prop: location\n            // Placement of the legend.  one of the compass directions: nw, n, ne, e, se, s, sw, w\n            this.location = 'ne';\n            // prop: labels\n            // Array of labels to use.  By default the renderer will look for labels on the series.\n            // Labels specified in this array will override labels specified on the series.\n            this.labels = [];\n            // prop: showLabels\n            // true to show the label text on the  legend.\n            this.showLabels = true;\n            // prop: showSwatch\n            // true to show the color swatches on the legend.\n            this.showSwatches = true;\n            // prop: placement\n            // \"insideGrid\" places legend inside the grid area of the plot.\n            // \"outsideGrid\" places the legend outside the grid but inside the plot container,\n            // shrinking the grid to accomodate the legend.\n            // \"inside\" synonym for \"insideGrid\",\n            // \"outside\" places the legend ouside the grid area, but does not shrink the grid which\n            // can cause the legend to overflow the plot container.\n            this.placement = \"insideGrid\";\n            // prop: xoffset\n            // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc.\n            // properties or via CSS margin styling of the .jqplot-table-legend class.\n            this.xoffset = 0;\n            // prop: yoffset\n            // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc.\n            // properties or via CSS margin styling of the .jqplot-table-legend class.\n            this.yoffset = 0;\n            // prop: border\n            // css spec for the border around the legend box.\n            this.border;\n            // prop: background\n            // css spec for the background of the legend box.\n            this.background;\n            // prop: textColor\n            // css color spec for the legend text.\n            this.textColor;\n            // prop: fontFamily\n            // css font-family spec for the legend text.\n            this.fontFamily;\n            // prop: fontSize\n            // css font-size spec for the legend text.\n            this.fontSize;\n            // prop: rowSpacing\n            // css padding-top spec for the rows in the legend.\n            this.rowSpacing = '0.5em';\n            // renderer\n            // A class that will create a DOM object for the legend,\n            // see <$.jqplot.TableLegendRenderer>.\n            this.renderer = $.jqplot.TableLegendRenderer;\n            // prop: rendererOptions\n            // renderer specific options passed to the renderer.\n            this.rendererOptions = {};\n            // prop: predraw\n            // Wether to draw the legend before the series or not.\n            // Used with series specific legend renderers for pie, donut, mekko charts, etc.\n            this.preDraw = false;\n            // prop: marginTop\n            // CSS margin for the legend DOM element. This will set an element\n            // CSS style for the margin which will override any style sheet setting.\n            // The default will be taken from the stylesheet.\n            this.marginTop = null;\n            // prop: marginRight\n            // CSS margin for the legend DOM element. This will set an element\n            // CSS style for the margin which will override any style sheet setting.\n            // The default will be taken from the stylesheet.\n            this.marginRight = null;\n            // prop: marginBottom\n            // CSS margin for the legend DOM element. This will set an element\n            // CSS style for the margin which will override any style sheet setting.\n            // The default will be taken from the stylesheet.\n            this.marginBottom = null;\n            // prop: marginLeft\n            // CSS margin for the legend DOM element. This will set an element\n            // CSS style for the margin which will override any style sheet setting.\n            // The default will be taken from the stylesheet.\n            this.marginLeft = null;\n            // prop: escapeHtml\n            // True to escape special characters with their html entity equivalents\n            // in legend text.  \"<\" becomes &lt; and so on, so html tags are not rendered.\n            this.escapeHtml = false;\n            this._series = [];\n\n            $.extend(true, this, options);\n        }\n\n        Legend.prototype = new $.jqplot.ElemContainer();\n        Legend.prototype.constructor = Legend;\n\n        Legend.prototype.setOptions = function (options) {\n            $.extend(true, this, options);\n\n            // Try to emulate deprecated behaviour\n            // if user has specified xoffset or yoffset, copy these to\n            // the margin properties.\n\n            if (this.placement == 'inside') {\n                this.placement = 'insideGrid';\n            }\n\n            if (this.xoffset > 0) {\n                if (this.placement == 'insideGrid') {\n                    switch (this.location) {\n                        case 'nw':\n                        case 'w':\n                        case 'sw':\n                            if (this.marginLeft == null) {\n                                this.marginLeft = this.xoffset + 'px';\n                            }\n                            this.marginRight = '0px';\n                            break;\n                        case 'ne':\n                        case 'e':\n                        case 'se':\n                        default:\n                            if (this.marginRight == null) {\n                                this.marginRight = this.xoffset + 'px';\n                            }\n                            this.marginLeft = '0px';\n                            break;\n                    }\n                }\n                else if (this.placement == 'outside') {\n                    switch (this.location) {\n                        case 'nw':\n                        case 'w':\n                        case 'sw':\n                            if (this.marginRight == null) {\n                                this.marginRight = this.xoffset + 'px';\n                            }\n                            this.marginLeft = '0px';\n                            break;\n                        case 'ne':\n                        case 'e':\n                        case 'se':\n                        default:\n                            if (this.marginLeft == null) {\n                                this.marginLeft = this.xoffset + 'px';\n                            }\n                            this.marginRight = '0px';\n                            break;\n                    }\n                }\n                this.xoffset = 0;\n            }\n\n            if (this.yoffset > 0) {\n                if (this.placement == 'outside') {\n                    switch (this.location) {\n                        case 'sw':\n                        case 's':\n                        case 'se':\n                            if (this.marginTop == null) {\n                                this.marginTop = this.yoffset + 'px';\n                            }\n                            this.marginBottom = '0px';\n                            break;\n                        case 'ne':\n                        case 'n':\n                        case 'nw':\n                        default:\n                            if (this.marginBottom == null) {\n                                this.marginBottom = this.yoffset + 'px';\n                            }\n                            this.marginTop = '0px';\n                            break;\n                    }\n                }\n                else if (this.placement == 'insideGrid') {\n                    switch (this.location) {\n                        case 'sw':\n                        case 's':\n                        case 'se':\n                            if (this.marginBottom == null) {\n                                this.marginBottom = this.yoffset + 'px';\n                            }\n                            this.marginTop = '0px';\n                            break;\n                        case 'ne':\n                        case 'n':\n                        case 'nw':\n                        default:\n                            if (this.marginTop == null) {\n                                this.marginTop = this.yoffset + 'px';\n                            }\n                            this.marginBottom = '0px';\n                            break;\n                    }\n                }\n                this.yoffset = 0;\n            }\n\n            // TO-DO:\n            // Handle case where offsets are < 0.\n            //\n        };\n\n        Legend.prototype.init = function () {\n            if ($.isFunction(this.renderer)) {\n                this.renderer = new this.renderer();\n            }\n            this.renderer.init.call(this, this.rendererOptions);\n        };\n\n        Legend.prototype.draw = function (offsets, plot) {\n            for (var i = 0; i < $.jqplot.preDrawLegendHooks.length; i++) {\n                $.jqplot.preDrawLegendHooks[i].call(this, offsets);\n            }\n            return this.renderer.draw.call(this, offsets, plot);\n        };\n\n        Legend.prototype.pack = function (offsets) {\n            this.renderer.pack.call(this, offsets);\n        };\n\n        /**\n         * Class: Title\n         * Plot Title object.  Cannot be instantiated directly, but created\n         * by the Plot object.  Title properties can be set or overridden by the\n         * options passed in from the user.\n         *\n         * Parameters:\n         * text - text of the title.\n         */\n        function Title(text) {\n            $.jqplot.ElemContainer.call(this);\n            // Group: Properties\n\n            // prop: text\n            // text of the title;\n            this.text = text;\n            // prop: show\n            // whether or not to show the title\n            this.show = true;\n            // prop: fontFamily\n            // css font-family spec for the text.\n            this.fontFamily;\n            // prop: fontSize\n            // css font-size spec for the text.\n            this.fontSize;\n            // prop: textAlign\n            // css text-align spec for the text.\n            this.textAlign;\n            // prop: textColor\n            // css color spec for the text.\n            this.textColor;\n            // prop: renderer\n            // A class for creating a DOM element for the title,\n            // see <$.jqplot.DivTitleRenderer>.\n            this.renderer = $.jqplot.DivTitleRenderer;\n            // prop: rendererOptions\n            // renderer specific options passed to the renderer.\n            this.rendererOptions = {};\n            // prop: escapeHtml\n            // True to escape special characters with their html entity equivalents\n            // in title text.  \"<\" becomes &lt; and so on, so html tags are not rendered.\n            this.escapeHtml = false;\n        }\n\n        Title.prototype = new $.jqplot.ElemContainer();\n        Title.prototype.constructor = Title;\n\n        Title.prototype.init = function () {\n            if ($.isFunction(this.renderer)) {\n                this.renderer = new this.renderer();\n            }\n            this.renderer.init.call(this, this.rendererOptions);\n        };\n\n        Title.prototype.draw = function (width) {\n            return this.renderer.draw.call(this, width);\n        };\n\n        Title.prototype.pack = function () {\n            this.renderer.pack.call(this);\n        };\n\n\n        /**\n         * Class: Series\n         * An individual data series object.  Cannot be instantiated directly, but created\n         * by the Plot object.  Series properties can be set or overridden by the\n         * options passed in from the user.\n         */\n        function Series(options) {\n            options = options || {};\n            $.jqplot.ElemContainer.call(this);\n            // Group: Properties\n            // Properties will be assigned from a series array at the top level of the\n            // options.  If you had two series and wanted to change the color and line\n            // width of the first and set the second to use the secondary y axis with\n            // no shadow and supply custom labels for each:\n            // > {\n            // >    series:[\n            // >        {color: '#ff4466', lineWidth: 5, label:'good line'},\n            // >        {yaxis: 'y2axis', shadow: false, label:'bad line'}\n            // >    ]\n            // > }\n\n            // prop: show\n            // whether or not to draw the series.\n            this.show = true;\n            // prop: xaxis\n            // which x axis to use with this series, either 'xaxis' or 'x2axis'.\n            this.xaxis = 'xaxis';\n            this._xaxis;\n            // prop: yaxis\n            // which y axis to use with this series, either 'yaxis' or 'y2axis'.\n            this.yaxis = 'yaxis';\n            this._yaxis;\n            this.gridBorderWidth = 2.0;\n            // prop: renderer\n            // A class of a renderer which will draw the series,\n            // see <$.jqplot.LineRenderer>.\n            this.renderer = $.jqplot.LineRenderer;\n            // prop: rendererOptions\n            // Options to pass on to the renderer.\n            this.rendererOptions = {};\n            this.data = [];\n            this.gridData = [];\n            // prop: label\n            // Line label to use in the legend.\n            this.label = '';\n            // prop: showLabel\n            // true to show label for this series in the legend.\n            this.showLabel = true;\n            // prop: color\n            // css color spec for the series\n            this.color;\n            // prop: negativeColor\n            // css color spec used for filled (area) plots that are filled to zero and\n            // the \"useNegativeColors\" option is true.\n            this.negativeColor;\n            // prop: lineWidth\n            // width of the line in pixels.  May have different meanings depending on renderer.\n            this.lineWidth = 2.5;\n            // prop: lineJoin\n            // Canvas lineJoin style between segments of series.\n            this.lineJoin = 'round';\n            // prop: lineCap\n            // Canvas lineCap style at ends of line.\n            this.lineCap = 'round';\n            // prop: linePattern\n            // line pattern 'dashed', 'dotted', 'solid', some combination\n            // of '-' and '.' characters such as '.-.' or a numerical array like\n            // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line,\n            // [1, 10, 20, 10] to draw a dot-dash line, and so on.\n            this.linePattern = 'solid';\n            this.shadow = true;\n            // prop: shadowAngle\n            // Shadow angle in degrees\n            this.shadowAngle = 45;\n            // prop: shadowOffset\n            // Shadow offset from line in pixels\n            this.shadowOffset = 1.25;\n            // prop: shadowDepth\n            // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n            this.shadowDepth = 3;\n            // prop: shadowAlpha\n            // Alpha channel transparency of shadow.  0 = transparent.\n            this.shadowAlpha = '0.1';\n            // prop: breakOnNull\n            // Wether line segments should be be broken at null value.\n            // False will join point on either side of line.\n            this.breakOnNull = false;\n            // prop: markerRenderer\n            // A class of a renderer which will draw marker (e.g. circle, square, ...) at the data points,\n            // see <$.jqplot.MarkerRenderer>.\n            this.markerRenderer = $.jqplot.MarkerRenderer;\n            // prop: markerOptions\n            // renderer specific options to pass to the markerRenderer,\n            // see <$.jqplot.MarkerRenderer>.\n            this.markerOptions = {};\n            // prop: showLine\n            // whether to actually draw the line or not.  Series will still be renderered, even if no line is drawn.\n            this.showLine = true;\n            // prop: showMarker\n            // whether or not to show the markers at the data points.\n            this.showMarker = true;\n            // prop: index\n            // 0 based index of this series in the plot series array.\n            this.index;\n            // prop: fill\n            // true or false, whether to fill under lines or in bars.\n            // May not be implemented in all renderers.\n            this.fill = false;\n            // prop: fillColor\n            // CSS color spec to use for fill under line.  Defaults to line color.\n            this.fillColor;\n            // prop: fillAlpha\n            // Alpha transparency to apply to the fill under the line.\n            // Use this to adjust alpha separate from fill color.\n            this.fillAlpha;\n            // prop: fillAndStroke\n            // If true will stroke the line (with color this.color) as well as fill under it.\n            // Applies only when fill is true.\n            this.fillAndStroke = false;\n            // prop: disableStack\n            // true to not stack this series with other series in the plot.\n            // To render properly, non-stacked series must come after any stacked series\n            // in the plot's data series array.  So, the plot's data series array would look like:\n            // > [stackedSeries1, stackedSeries2, ..., nonStackedSeries1, nonStackedSeries2, ...]\n            // disableStack will put a gap in the stacking order of series, and subsequent\n            // stacked series will not fill down through the non-stacked series and will\n            // most likely not stack properly on top of the non-stacked series.\n            this.disableStack = false;\n            // _stack is set by the Plot if the plot is a stacked chart.\n            // will stack lines or bars on top of one another to build a \"mountain\" style chart.\n            // May not be implemented in all renderers.\n            this._stack = false;\n            // prop: neighborThreshold\n            // how close or far (in pixels) the cursor must be from a point marker to detect the point.\n            this.neighborThreshold = 4;\n            // prop: fillToZero\n            // true will force bar and filled series to fill toward zero on the fill Axis.\n            this.fillToZero = false;\n            // prop: fillToValue\n            // fill a filled series to this value on the fill axis.\n            // Works in conjunction with fillToZero, so that must be true.\n            this.fillToValue = 0;\n            // prop: fillAxis\n            // Either 'x' or 'y'.  Which axis to fill the line toward if fillToZero is true.\n            // 'y' means fill up/down to 0 on the y axis for this series.\n            this.fillAxis = 'y';\n            // prop: useNegativeColors\n            // true to color negative values differently in filled and bar charts.\n            this.useNegativeColors = true;\n            this._stackData = [];\n            // _plotData accounts for stacking.  If plots not stacked, _plotData and data are same.  If\n            // stacked, _plotData is accumulation of stacking data.\n            this._plotData = [];\n            // _plotValues hold the individual x and y values that will be plotted for this series.\n            this._plotValues = {x: [], y: []};\n            // statistics about the intervals between data points.  Used for auto scaling.\n            this._intervals = {x: {}, y: {}};\n            // data from the previous series, for stacked charts.\n            this._prevPlotData = [];\n            this._prevGridData = [];\n            this._stackAxis = 'y';\n            this._primaryAxis = '_xaxis';\n            // give each series a canvas to draw on.  This should allow for redrawing speedups.\n            this.canvas = new $.jqplot.GenericCanvas();\n            this.shadowCanvas = new $.jqplot.GenericCanvas();\n            this.plugins = {};\n            // sum of y values in this series.\n            this._sumy = 0;\n            this._sumx = 0;\n            this._type = '';\n        }\n\n        Series.prototype = new $.jqplot.ElemContainer();\n        Series.prototype.constructor = Series;\n\n        Series.prototype.init = function (index, gridbw, plot) {\n            // weed out any null values in the data.\n            this.index = index;\n            this.gridBorderWidth = gridbw;\n            var d = this.data;\n            var temp = [], i, l;\n            for (i = 0, l = d.length; i < l; i++) {\n                if (!this.breakOnNull) {\n                    if (d[i] == null || d[i][0] == null || d[i][1] == null) {\n                        continue;\n                    }\n                    else {\n                        temp.push(d[i]);\n                    }\n                }\n                else {\n                    // TODO: figure out what to do with null values\n                    // probably involve keeping nulls in data array\n                    // and then updating renderers to break line\n                    // when it hits null value.\n                    // For now, just keep value.\n                    temp.push(d[i]);\n                }\n            }\n            this.data = temp;\n\n            // parse the renderer options and apply default colors if not provided\n            // Set color even if not shown, so series don't change colors when other\n            // series on plot shown/hidden.\n            if (!this.color) {\n                this.color = plot.colorGenerator.get(this.index);\n            }\n            if (!this.negativeColor) {\n                this.negativeColor = plot.negativeColorGenerator.get(this.index);\n            }\n\n\n            if (!this.fillColor) {\n                this.fillColor = this.color;\n            }\n            if (this.fillAlpha) {\n                var comp = $.jqplot.normalize2rgb(this.fillColor);\n                var comp = $.jqplot.getColorComponents(comp);\n                this.fillColor = 'rgba(' + comp[0] + ',' + comp[1] + ',' + comp[2] + ',' + this.fillAlpha + ')';\n            }\n            if ($.isFunction(this.renderer)) {\n                this.renderer = new this.renderer();\n            }\n            this.renderer.init.call(this, this.rendererOptions, plot);\n            this.markerRenderer = new this.markerRenderer();\n            if (!this.markerOptions.color) {\n                this.markerOptions.color = this.color;\n            }\n            if (this.markerOptions.show == null) {\n                this.markerOptions.show = this.showMarker;\n            }\n            this.showMarker = this.markerOptions.show;\n            // the markerRenderer is called within its own scope, don't want to overwrite series options!!\n            this.markerRenderer.init(this.markerOptions);\n        };\n\n        // data - optional data point array to draw using this series renderer\n        // gridData - optional grid data point array to draw using this series renderer\n        // stackData - array of cumulative data for stacked plots.\n        Series.prototype.draw = function (sctx, opts, plot) {\n            var options = (opts == undefined) ? {} : opts;\n            sctx = (sctx == undefined) ? this.canvas._ctx : sctx;\n\n            var j, data, gridData;\n\n            // hooks get called even if series not shown\n            // we don't clear canvas here, it would wipe out all other series as well.\n            for (j = 0; j < $.jqplot.preDrawSeriesHooks.length; j++) {\n                $.jqplot.preDrawSeriesHooks[j].call(this, sctx, options);\n            }\n            if (this.show) {\n                this.renderer.setGridData.call(this, plot);\n                if (!options.preventJqPlotSeriesDrawTrigger) {\n                    $(sctx.canvas).trigger('jqplotSeriesDraw', [this.data, this.gridData]);\n                }\n                data = [];\n                if (options.data) {\n                    data = options.data;\n                }\n                else if (!this._stack) {\n                    data = this.data;\n                }\n                else {\n                    data = this._plotData;\n                }\n                gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot);\n\n                if (this._type === 'line' && this.renderer.smooth && this.renderer._smoothedData.length) {\n                    gridData = this.renderer._smoothedData;\n                }\n\n                this.renderer.draw.call(this, sctx, gridData, options, plot);\n            }\n\n            for (j = 0; j < $.jqplot.postDrawSeriesHooks.length; j++) {\n                $.jqplot.postDrawSeriesHooks[j].call(this, sctx, options, plot);\n            }\n\n            sctx = opts = plot = j = data = gridData = null;\n        };\n\n        Series.prototype.drawShadow = function (sctx, opts, plot) {\n            var options = (opts == undefined) ? {} : opts;\n            sctx = (sctx == undefined) ? this.shadowCanvas._ctx : sctx;\n\n            var j, data, gridData;\n\n            // hooks get called even if series not shown\n            // we don't clear canvas here, it would wipe out all other series as well.\n            for (j = 0; j < $.jqplot.preDrawSeriesShadowHooks.length; j++) {\n                $.jqplot.preDrawSeriesShadowHooks[j].call(this, sctx, options);\n            }\n            if (this.shadow) {\n                this.renderer.setGridData.call(this, plot);\n\n                data = [];\n                if (options.data) {\n                    data = options.data;\n                }\n                else if (!this._stack) {\n                    data = this.data;\n                }\n                else {\n                    data = this._plotData;\n                }\n                gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot);\n\n                this.renderer.drawShadow.call(this, sctx, gridData, options, plot);\n            }\n\n            for (j = 0; j < $.jqplot.postDrawSeriesShadowHooks.length; j++) {\n                $.jqplot.postDrawSeriesShadowHooks[j].call(this, sctx, options);\n            }\n\n            sctx = opts = plot = j = data = gridData = null;\n\n        };\n\n        // toggles series display on plot, e.g. show/hide series\n        Series.prototype.toggleDisplay = function (ev, callback) {\n            var s, speed;\n            if (ev.data.series) {\n                s = ev.data.series;\n            }\n            else {\n                s = this;\n            }\n\n            if (ev.data.speed) {\n                speed = ev.data.speed;\n            }\n            if (speed) {\n                // this can be tricky because series may not have a canvas element if replotting.\n                if (s.canvas._elem.is(':hidden') || !s.show) {\n                    s.show = true;\n\n                    s.canvas._elem.removeClass('jqplot-series-hidden');\n                    if (s.shadowCanvas._elem) {\n                        s.shadowCanvas._elem.fadeIn(speed);\n                    }\n                    s.canvas._elem.fadeIn(speed, callback);\n                    s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-' + s.index).fadeIn(speed);\n                }\n                else {\n                    s.show = false;\n\n                    s.canvas._elem.addClass('jqplot-series-hidden');\n                    if (s.shadowCanvas._elem) {\n                        s.shadowCanvas._elem.fadeOut(speed);\n                    }\n                    s.canvas._elem.fadeOut(speed, callback);\n                    s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-' + s.index).fadeOut(speed);\n                }\n            }\n            else {\n                // this can be tricky because series may not have a canvas element if replotting.\n                if (s.canvas._elem.is(':hidden') || !s.show) {\n                    s.show = true;\n\n                    s.canvas._elem.removeClass('jqplot-series-hidden');\n                    if (s.shadowCanvas._elem) {\n                        s.shadowCanvas._elem.show();\n                    }\n                    s.canvas._elem.show(0, callback);\n                    s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-' + s.index).show();\n                }\n                else {\n                    s.show = false;\n\n                    s.canvas._elem.addClass('jqplot-series-hidden');\n                    if (s.shadowCanvas._elem) {\n                        s.shadowCanvas._elem.hide();\n                    }\n                    s.canvas._elem.hide(0, callback);\n                    s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-' + s.index).hide();\n                }\n            }\n        };\n\n\n        /**\n         * Class: Grid\n         *\n         * Object representing the grid on which the plot is drawn.  The grid in this\n         * context is the area bounded by the axes, the area which will contain the series.\n         * Note, the series are drawn on their own canvas.\n         * The Grid object cannot be instantiated directly, but is created by the Plot object.\n         * Grid properties can be set or overridden by the options passed in from the user.\n         */\n        function Grid() {\n            $.jqplot.ElemContainer.call(this);\n            // Group: Properties\n\n            // prop: drawGridlines\n            // whether to draw the gridlines on the plot.\n            this.drawGridlines = true;\n            // prop: gridLineColor\n            // color of the grid lines.\n            this.gridLineColor = '#cccccc';\n            // prop: gridLineWidth\n            // width of the grid lines.\n            this.gridLineWidth = 1.0;\n            // prop: background\n            // css spec for the background color.\n            this.background = '#fffdf6';\n            // prop: borderColor\n            // css spec for the color of the grid border.\n            this.borderColor = '#999999';\n            // prop: borderWidth\n            // width of the border in pixels.\n            this.borderWidth = 2.0;\n            // prop: drawBorder\n            // True to draw border around grid.\n            this.drawBorder = true;\n            // prop: shadow\n            // whether to show a shadow behind the grid.\n            this.shadow = true;\n            // prop: shadowAngle\n            // shadow angle in degrees\n            this.shadowAngle = 45;\n            // prop: shadowOffset\n            // Offset of each shadow stroke from the border in pixels\n            this.shadowOffset = 1.5;\n            // prop: shadowWidth\n            // width of the stoke for the shadow\n            this.shadowWidth = 3;\n            // prop: shadowDepth\n            // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n            this.shadowDepth = 3;\n            // prop: shadowColor\n            // an optional css color spec for the shadow in 'rgba(n, n, n, n)' form\n            this.shadowColor = null;\n            // prop: shadowAlpha\n            // Alpha channel transparency of shadow.  0 = transparent.\n            this.shadowAlpha = '0.07';\n            this._left;\n            this._top;\n            this._right;\n            this._bottom;\n            this._width;\n            this._height;\n            this._axes = [];\n            // prop: renderer\n            // Instance of a renderer which will actually render the grid,\n            // see <$.jqplot.CanvasGridRenderer>.\n            this.renderer = $.jqplot.CanvasGridRenderer;\n            // prop: rendererOptions\n            // Options to pass on to the renderer,\n            // see <$.jqplot.CanvasGridRenderer>.\n            this.rendererOptions = {};\n            this._offsets = {top: null, bottom: null, left: null, right: null};\n        }\n\n        Grid.prototype = new $.jqplot.ElemContainer();\n        Grid.prototype.constructor = Grid;\n\n        Grid.prototype.init = function () {\n            if ($.isFunction(this.renderer)) {\n                this.renderer = new this.renderer();\n            }\n            this.renderer.init.call(this, this.rendererOptions);\n        };\n\n        Grid.prototype.createElement = function (offsets, plot) {\n            this._offsets = offsets;\n            return this.renderer.createElement.call(this, plot);\n        };\n\n        Grid.prototype.draw = function () {\n            this.renderer.draw.call(this);\n        };\n\n        $.jqplot.GenericCanvas = function () {\n            $.jqplot.ElemContainer.call(this);\n            this._ctx;\n        };\n\n        $.jqplot.GenericCanvas.prototype = new $.jqplot.ElemContainer();\n        $.jqplot.GenericCanvas.prototype.constructor = $.jqplot.GenericCanvas;\n\n        $.jqplot.GenericCanvas.prototype.createElement = function (offsets, clss, plotDimensions, plot) {\n            this._offsets = offsets;\n            var klass = 'jqplot';\n            if (clss != undefined) {\n                klass = clss;\n            }\n            var elem;\n\n            elem = plot.canvasManager.getCanvas();\n\n            // if new plotDimensions supplied, use them.\n            if (plotDimensions != null) {\n                this._plotDimensions = plotDimensions;\n            }\n\n            elem.width = this._plotDimensions.width - this._offsets.left - this._offsets.right;\n            elem.height = this._plotDimensions.height - this._offsets.top - this._offsets.bottom;\n            this._elem = $(elem);\n            this._elem.css({position: 'absolute', left: this._offsets.left, top: this._offsets.top});\n\n            this._elem.addClass(klass);\n\n            elem = plot.canvasManager.initCanvas(elem);\n\n            elem = null;\n            return this._elem;\n        };\n\n        $.jqplot.GenericCanvas.prototype.setContext = function () {\n            this._ctx = this._elem.get(0).getContext(\"2d\");\n            return this._ctx;\n        };\n\n        // Memory Leaks patch\n        $.jqplot.GenericCanvas.prototype.resetCanvas = function () {\n            if (this._elem) {\n                if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                    window.G_vmlCanvasManager.uninitElement(this._elem.get(0));\n                }\n\n                //this._elem.remove();\n                this._elem.emptyForce();\n            }\n\n            this._ctx = null;\n        };\n\n        $.jqplot.HooksManager = function () {\n            this.hooks = [];\n            this.args = [];\n        };\n\n        $.jqplot.HooksManager.prototype.addOnce = function (fn, args) {\n            args = args || [];\n            var havehook = false;\n            for (var i = 0, l = this.hooks.length; i < l; i++) {\n                if (this.hooks[i] == fn) {\n                    havehook = true;\n                }\n            }\n            if (!havehook) {\n                this.hooks.push(fn);\n                this.args.push(args);\n            }\n        };\n\n        $.jqplot.HooksManager.prototype.add = function (fn, args) {\n            args = args || [];\n            this.hooks.push(fn);\n            this.args.push(args);\n        };\n\n        $.jqplot.EventListenerManager = function () {\n            this.hooks = [];\n        };\n\n        $.jqplot.EventListenerManager.prototype.addOnce = function (ev, fn) {\n            var havehook = false, h, i;\n            for (var i = 0, l = this.hooks.length; i < l; i++) {\n                h = this.hooks[i];\n                if (h[0] == ev && h[1] == fn) {\n                    havehook = true;\n                }\n            }\n            if (!havehook) {\n                this.hooks.push([ev, fn]);\n            }\n        };\n\n        $.jqplot.EventListenerManager.prototype.add = function (ev, fn) {\n            this.hooks.push([ev, fn]);\n        };\n\n\n        var _axisNames = ['yMidAxis', 'xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];\n\n        /**\n         * Class: jqPlot\n         * Plot object returned by call to $.jqplot.  Handles parsing user options,\n         * creating sub objects (Axes, legend, title, series) and rendering the plot.\n         */\n        function jqPlot() {\n            // Group: Properties\n            // These properties are specified at the top of the options object\n            // like so:\n            // > {\n            // >     axesDefaults:{min:0},\n            // >     series:[{color:'#6633dd'}],\n            // >     title: 'A Plot'\n            // > }\n            //\n\n            // prop: animate\n            // True to animate the series on initial plot draw (renderer dependent).\n            // Actual animation functionality must be supported in the renderer.\n            this.animate = false;\n            // prop: animateReplot\n            // True to animate series after a call to the replot() method.\n            // Use with caution!  Replots can happen very frequently under\n            // certain circumstances (e.g. resizing, dragging points) and\n            // animation in these situations can cause problems.\n            this.animateReplot = false;\n            // prop: axes\n            // up to 4 axes are supported, each with its own options,\n            // See <Axis> for axis specific options.\n            this.axes = {\n                xaxis: new Axis('xaxis'),\n                yaxis: new Axis('yaxis'),\n                x2axis: new Axis('x2axis'),\n                y2axis: new Axis('y2axis'),\n                y3axis: new Axis('y3axis'),\n                y4axis: new Axis('y4axis'),\n                y5axis: new Axis('y5axis'),\n                y6axis: new Axis('y6axis'),\n                y7axis: new Axis('y7axis'),\n                y8axis: new Axis('y8axis'),\n                y9axis: new Axis('y9axis'),\n                yMidAxis: new Axis('yMidAxis')\n            };\n            this.baseCanvas = new $.jqplot.GenericCanvas();\n            // true to intercept right click events and fire a 'jqplotRightClick' event.\n            // this will also block the context menu.\n            this.captureRightClick = false;\n            // prop: data\n            // user's data.  Data should *NOT* be specified in the options object,\n            // but be passed in as the second argument to the $.jqplot() function.\n            // The data property is described here soley for reference.\n            // The data should be in the form of an array of 2D or 1D arrays like\n            // > [ [[x1, y1], [x2, y2],...], [y1, y2, ...] ].\n            this.data = [];\n            // prop: dataRenderer\n            // A callable which can be used to preprocess data passed into the plot.\n            // Will be called with 3 arguments: the plot data, a reference to the plot,\n            // and the value of dataRendererOptions.\n            this.dataRenderer;\n            // prop: dataRendererOptions\n            // Options that will be passed to the dataRenderer.\n            // Can be of any type.\n            this.dataRendererOptions;\n            this.defaults = {\n                // prop: axesDefaults\n                // default options that will be applied to all axes.\n                // see <Axis> for axes options.\n                axesDefaults: {},\n                axes: {\n                    xaxis: {},\n                    yaxis: {},\n                    x2axis: {},\n                    y2axis: {},\n                    y3axis: {},\n                    y4axis: {},\n                    y5axis: {},\n                    y6axis: {},\n                    y7axis: {},\n                    y8axis: {},\n                    y9axis: {},\n                    yMidAxis: {}\n                },\n                // prop: seriesDefaults\n                // default options that will be applied to all series.\n                // see <Series> for series options.\n                seriesDefaults: {},\n                series: []\n            };\n            // prop: defaultAxisStart\n            // 1-D data series are internally converted into 2-D [x,y] data point arrays\n            // by jqPlot.  This is the default starting value for the missing x or y value.\n            // The added data will be a monotonically increasing series (e.g. [1, 2, 3, ...])\n            // starting at this value.\n            this.defaultAxisStart = 1;\n            // this.doCustomEventBinding = true;\n            // prop: drawIfHidden\n            // True to execute the draw method even if the plot target is hidden.\n            // Generally, this should be false.  Most plot elements will not be sized/\n            // positioned correclty if renderered into a hidden container.  To render into\n            // a hidden container, call the replot method when the container is shown.\n            this.drawIfHidden = false;\n            this.eventCanvas = new $.jqplot.GenericCanvas();\n            // prop: fillBetween\n            // Fill between 2 line series in a plot.\n            // Options object:\n            // {\n            //    series1: first index (0 based) of series in fill\n            //    series2: second index (0 based) of series in fill\n            //    color: color of fill [default fillColor of series1]\n            //    baseSeries:  fill will be drawn below this series (0 based index)\n            //    fill: false to turn off fill [default true].\n            //  }\n            this.fillBetween = {\n                series1: null,\n                series2: null,\n                color: null,\n                baseSeries: 0,\n                fill: true\n            };\n            // prop; fontFamily\n            // css spec for the font-family attribute.  Default for the entire plot.\n            this.fontFamily;\n            // prop: fontSize\n            // css spec for the font-size attribute.  Default for the entire plot.\n            this.fontSize;\n            // prop: grid\n            // See <Grid> for grid specific options.\n            this.grid = new Grid();\n            // prop: legend\n            // see <$.jqplot.TableLegendRenderer>\n            this.legend = new Legend();\n            // prop: noDataIndicator\n            // Options to set up a mock plot with a data loading indicator if no data is specified.\n            this.noDataIndicator = {\n                show: false,\n                indicator: 'Loading Data...',\n                axes: {\n                    xaxis: {\n                        min: 0,\n                        max: 10,\n                        tickInterval: 2,\n                        show: true\n                    },\n                    yaxis: {\n                        min: 0,\n                        max: 12,\n                        tickInterval: 3,\n                        show: true\n                    }\n                }\n            };\n            // prop: negativeSeriesColors\n            // colors to use for portions of the line below zero.\n            this.negativeSeriesColors = $.jqplot.config.defaultNegativeColors;\n            // container to hold all of the merged options.  Convienence for plugins.\n            this.options = {};\n            this.previousSeriesStack = [];\n            // Namespace to hold plugins.  Generally non-renderer plugins add themselves to here.\n            this.plugins = {};\n            // prop: series\n            // Array of series object options.\n            // see <Series> for series specific options.\n            this.series = [];\n            // array of series indices. Keep track of order\n            // which series canvases are displayed, lowest\n            // to highest, back to front.\n            this.seriesStack = [];\n            // prop: seriesColors\n            // Ann array of CSS color specifications that will be applied, in order,\n            // to the series in the plot.  Colors will wrap around so, if their\n            // are more series than colors, colors will be reused starting at the\n            // beginning.  For pie charts, this specifies the colors of the slices.\n            this.seriesColors = $.jqplot.config.defaultColors;\n            // prop: sortData\n            // false to not sort the data passed in by the user.\n            // Many bar, stacked and other graphs as well as many plugins depend on\n            // having sorted data.\n            this.sortData = true;\n            // prop: stackSeries\n            // true or false, creates a stack or \"mountain\" plot.\n            // Not all series renderers may implement this option.\n            this.stackSeries = false;\n            // a shortcut for axis syncTicks options.  Not implemented yet.\n            this.syncXTicks = true;\n            // a shortcut for axis syncTicks options.  Not implemented yet.\n            this.syncYTicks = true;\n            // the jquery object for the dom target.\n            this.target = null;\n            // The id of the dom element to render the plot into\n            this.targetId = null;\n            // prop textColor\n            // css spec for the css color attribute.  Default for the entire plot.\n            this.textColor;\n            // prop: title\n            // Title object.  See <Title> for specific options.  As a shortcut, you\n            // can specify the title option as just a string like: title: 'My Plot'\n            // and this will create a new title object with the specified text.\n            this.title = new Title();\n            // Count how many times the draw method has been called while the plot is visible.\n            // Mostly used to test if plot has never been dran (=0), has been successfully drawn\n            // into a visible container once (=1) or draw more than once into a visible container.\n            // Can use this in tests to see if plot has been visibly drawn at least one time.\n            // After plot has been visibly drawn once, it generally doesn't need redrawing if its\n            // container is hidden and shown.\n            this._drawCount = 0;\n            // sum of y values for all series in plot.\n            // used in mekko chart.\n            this._sumy = 0;\n            this._sumx = 0;\n            // array to hold the cumulative stacked series data.\n            // used to ajust the individual series data, which won't have access to other\n            // series data.\n            this._stackData = [];\n            // array that holds the data to be plotted. This will be the series data\n            // merged with the the appropriate data from _stackData according to the stackAxis.\n            this._plotData = [];\n            this._width = null;\n            this._height = null;\n            this._plotDimensions = {height: null, width: null};\n            this._gridPadding = {top: null, right: null, bottom: null, left: null};\n            this._defaultGridPadding = {top: 10, right: 10, bottom: 23, left: 10};\n\n            this._addDomReference = $.jqplot.config.addDomReference;\n\n            this.preInitHooks = new $.jqplot.HooksManager();\n            this.postInitHooks = new $.jqplot.HooksManager();\n            this.preParseOptionsHooks = new $.jqplot.HooksManager();\n            this.postParseOptionsHooks = new $.jqplot.HooksManager();\n            this.preDrawHooks = new $.jqplot.HooksManager();\n            this.postDrawHooks = new $.jqplot.HooksManager();\n            this.preDrawSeriesHooks = new $.jqplot.HooksManager();\n            this.postDrawSeriesHooks = new $.jqplot.HooksManager();\n            this.preDrawLegendHooks = new $.jqplot.HooksManager();\n            this.addLegendRowHooks = new $.jqplot.HooksManager();\n            this.preSeriesInitHooks = new $.jqplot.HooksManager();\n            this.postSeriesInitHooks = new $.jqplot.HooksManager();\n            this.preParseSeriesOptionsHooks = new $.jqplot.HooksManager();\n            this.postParseSeriesOptionsHooks = new $.jqplot.HooksManager();\n            this.eventListenerHooks = new $.jqplot.EventListenerManager();\n            this.preDrawSeriesShadowHooks = new $.jqplot.HooksManager();\n            this.postDrawSeriesShadowHooks = new $.jqplot.HooksManager();\n\n            this.colorGenerator = new $.jqplot.ColorGenerator();\n            this.negativeColorGenerator = new $.jqplot.ColorGenerator();\n\n            this.canvasManager = new $.jqplot.CanvasManager();\n\n            this.themeEngine = new $.jqplot.ThemeEngine();\n\n            var seriesColorsIndex = 0;\n\n            // Group: methods\n            //\n            // method: init\n            // sets the plot target, checks data and applies user\n            // options to plot.\n            this.init = function (target, data, options) {\n                options = options || {};\n                for (var i = 0; i < $.jqplot.preInitHooks.length; i++) {\n                    $.jqplot.preInitHooks[i].call(this, target, data, options);\n                }\n\n                for (var i = 0; i < this.preInitHooks.hooks.length; i++) {\n                    this.preInitHooks.hooks[i].call(this, target, data, options);\n                }\n\n                this.targetId = '#' + target;\n                this.target = $('#' + target);\n\n                //////\n                // Add a reference to plot\n                //////\n                if (this._addDomReference) {\n                    this.target.data('jqplot', this);\n                }\n                // remove any error class that may be stuck on target.\n                this.target.removeClass('jqplot-error');\n                if (!this.target.get(0)) {\n                    throw new Error(\"No plot target specified\");\n                }\n\n                // make sure the target is positioned by some means and set css\n                if (this.target.css('position') == 'static') {\n                    this.target.css('position', 'relative');\n                }\n                if (!this.target.hasClass('jqplot-target')) {\n                    this.target.addClass('jqplot-target');\n                }\n\n                // if no height or width specified, use a default.\n                if (!this.target.height()) {\n                    var h;\n                    if (options && options.height) {\n                        h = parseInt(options.height, 10);\n                    }\n                    else if (this.target.attr('data-height')) {\n                        h = parseInt(this.target.attr('data-height'), 10);\n                    }\n                    else {\n                        h = parseInt($.jqplot.config.defaultHeight, 10);\n                    }\n                    this._height = h;\n                    this.target.css('height', h + 'px');\n                }\n                else {\n                    this._height = h = this.target.height();\n                }\n                if (!this.target.width()) {\n                    var w;\n                    if (options && options.width) {\n                        w = parseInt(options.width, 10);\n                    }\n                    else if (this.target.attr('data-width')) {\n                        w = parseInt(this.target.attr('data-width'), 10);\n                    }\n                    else {\n                        w = parseInt($.jqplot.config.defaultWidth, 10);\n                    }\n                    this._width = w;\n                    this.target.css('width', w + 'px');\n                }\n                else {\n                    this._width = w = this.target.width();\n                }\n\n                for (var i = 0, l = _axisNames.length; i < l; i++) {\n                    this.axes[_axisNames[i]] = new Axis(_axisNames[i]);\n                }\n\n                this._plotDimensions.height = this._height;\n                this._plotDimensions.width = this._width;\n                this.grid._plotDimensions = this._plotDimensions;\n                this.title._plotDimensions = this._plotDimensions;\n                this.baseCanvas._plotDimensions = this._plotDimensions;\n                this.eventCanvas._plotDimensions = this._plotDimensions;\n                this.legend._plotDimensions = this._plotDimensions;\n                if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {\n                    throw new Error(\"Canvas dimension not set\");\n                }\n\n                if (options.dataRenderer && $.isFunction(options.dataRenderer)) {\n                    if (options.dataRendererOptions) {\n                        this.dataRendererOptions = options.dataRendererOptions;\n                    }\n                    this.dataRenderer = options.dataRenderer;\n                    data = this.dataRenderer(data, this, this.dataRendererOptions);\n                }\n\n                if (options.noDataIndicator && $.isPlainObject(options.noDataIndicator)) {\n                    $.extend(true, this.noDataIndicator, options.noDataIndicator);\n                }\n\n                if (data == null || $.isArray(data) == false || data.length == 0 || $.isArray(data[0]) == false || data[0].length == 0) {\n\n                    if (this.noDataIndicator.show == false) {\n                        throw new Error(\"No data specified\");\n                    }\n\n                    else {\n                        // have to be descructive here in order for plot to not try and render series.\n                        // This means that $.jqplot() will have to be called again when there is data.\n                        //delete options.series;\n\n                        for (var ax in this.noDataIndicator.axes) {\n                            for (var prop in this.noDataIndicator.axes[ax]) {\n                                this.axes[ax][prop] = this.noDataIndicator.axes[ax][prop];\n                            }\n                        }\n\n                        this.postDrawHooks.add(function () {\n                            var eh = this.eventCanvas.getHeight();\n                            var ew = this.eventCanvas.getWidth();\n                            var temp = $('<div class=\"jqplot-noData-container\" style=\"position:absolute;\"></div>');\n                            this.target.append(temp);\n                            temp.height(eh);\n                            temp.width(ew);\n                            temp.css('top', this.eventCanvas._offsets.top);\n                            temp.css('left', this.eventCanvas._offsets.left);\n\n                            var temp2 = $('<div class=\"jqplot-noData-contents\" style=\"text-align:center; position:relative; margin-left:auto; margin-right:auto;\"></div>');\n                            temp.append(temp2);\n                            temp2.html(this.noDataIndicator.indicator);\n                            var th = temp2.height();\n                            var tw = temp2.width();\n                            temp2.height(th);\n                            temp2.width(tw);\n                            temp2.css('top', (eh - th) / 2 + 'px');\n                        });\n\n                    }\n                }\n\n                // make a copy of the data\n                this.data = $.extend(true, [], data);\n\n                this.parseOptions(options);\n\n                if (this.textColor) {\n                    this.target.css('color', this.textColor);\n                }\n                if (this.fontFamily) {\n                    this.target.css('font-family', this.fontFamily);\n                }\n                if (this.fontSize) {\n                    this.target.css('font-size', this.fontSize);\n                }\n\n                this.title.init();\n                this.legend.init();\n                this._sumy = 0;\n                this._sumx = 0;\n                this.computePlotData();\n                for (var i = 0; i < this.series.length; i++) {\n                    // set default stacking order for series canvases\n                    this.seriesStack.push(i);\n                    this.previousSeriesStack.push(i);\n                    this.series[i].shadowCanvas._plotDimensions = this._plotDimensions;\n                    this.series[i].canvas._plotDimensions = this._plotDimensions;\n                    for (var j = 0; j < $.jqplot.preSeriesInitHooks.length; j++) {\n                        $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    for (var j = 0; j < this.preSeriesInitHooks.hooks.length; j++) {\n                        this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    // this.populatePlotData(this.series[i], i);\n                    this.series[i]._plotDimensions = this._plotDimensions;\n                    this.series[i].init(i, this.grid.borderWidth, this);\n                    for (var j = 0; j < $.jqplot.postSeriesInitHooks.length; j++) {\n                        $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    for (var j = 0; j < this.postSeriesInitHooks.hooks.length; j++) {\n                        this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    this._sumy += this.series[i]._sumy;\n                    this._sumx += this.series[i]._sumx;\n                }\n\n                var name,\n                    axis;\n                for (var i = 0, l = _axisNames.length; i < l; i++) {\n                    name = _axisNames[i];\n                    axis = this.axes[name];\n                    axis._plotDimensions = this._plotDimensions;\n                    axis.init();\n                    if (this.axes[name].borderColor == null) {\n                        if (name.charAt(0) !== 'x' && axis.useSeriesColor === true && axis.show) {\n                            axis.borderColor = axis._series[0].color;\n                        }\n                        else {\n                            axis.borderColor = this.grid.borderColor;\n                        }\n                    }\n                }\n\n                if (this.sortData) {\n                    sortData(this.series);\n                }\n                this.grid.init();\n                this.grid._axes = this.axes;\n\n                this.legend._series = this.series;\n\n                for (var i = 0; i < $.jqplot.postInitHooks.length; i++) {\n                    $.jqplot.postInitHooks[i].call(this, target, this.data, options);\n                }\n\n                for (var i = 0; i < this.postInitHooks.hooks.length; i++) {\n                    this.postInitHooks.hooks[i].call(this, target, this.data, options);\n                }\n            };\n\n            // method: resetAxesScale\n            // Reset the specified axes min, max, numberTicks and tickInterval properties to null\n            // or reset these properties on all axes if no list of axes is provided.\n            //\n            // Parameters:\n            // axes - Boolean to reset or not reset all axes or an array or object of axis names to reset.\n            this.resetAxesScale = function (axes, options) {\n                var opts = options || {};\n                var ax = axes || this.axes;\n                if (ax === true) {\n                    ax = this.axes;\n                }\n                if ($.isArray(ax)) {\n                    for (var i = 0; i < ax.length; i++) {\n                        this.axes[ax[i]].resetScale(opts[ax[i]]);\n                    }\n                }\n                else if (typeof(ax) === 'object') {\n                    for (var name in ax) {\n                        this.axes[name].resetScale(opts[name]);\n                    }\n                }\n            };\n            // method: reInitialize\n            // reinitialize plot for replotting.\n            // not called directly.\n            this.reInitialize = function (data, opts) {\n                // Plot should be visible and have a height and width.\n                // If plot doesn't have height and width for some\n                // reason, set it by other means.  Plot must not have\n                // a display:none attribute, however.\n\n                var options = $.extend(true, {}, this.options, opts);\n\n                var target = this.targetId.substr(1);\n                var tdata = (data == null) ? this.data : data;\n\n                for (var i = 0; i < $.jqplot.preInitHooks.length; i++) {\n                    $.jqplot.preInitHooks[i].call(this, target, tdata, options);\n                }\n\n                for (var i = 0; i < this.preInitHooks.hooks.length; i++) {\n                    this.preInitHooks.hooks[i].call(this, target, tdata, options);\n                }\n\n                this._height = this.target.height();\n                this._width = this.target.width();\n\n                if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {\n                    throw new Error(\"Target dimension not set\");\n                }\n\n                this._plotDimensions.height = this._height;\n                this._plotDimensions.width = this._width;\n                this.grid._plotDimensions = this._plotDimensions;\n                this.title._plotDimensions = this._plotDimensions;\n                this.baseCanvas._plotDimensions = this._plotDimensions;\n                this.eventCanvas._plotDimensions = this._plotDimensions;\n                this.legend._plotDimensions = this._plotDimensions;\n\n                var name,\n                    t,\n                    j,\n                    axis;\n\n                for (var i = 0, l = _axisNames.length; i < l; i++) {\n                    name = _axisNames[i];\n                    axis = this.axes[name];\n\n                    // Memory Leaks patch : clear ticks elements\n                    t = axis._ticks;\n                    for (var j = 0, tlen = t.length; j < tlen; j++) {\n                        var el = t[j]._elem;\n                        if (el) {\n                            // if canvas renderer\n                            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                                window.G_vmlCanvasManager.uninitElement(el.get(0));\n                            }\n                            el.emptyForce();\n                            el = null;\n                            t._elem = null;\n                        }\n                    }\n                    t = null;\n\n                    delete axis.ticks;\n                    delete axis._ticks;\n                    this.axes[name] = new Axis(name);\n                    this.axes[name]._plotWidth = this._width;\n                    this.axes[name]._plotHeight = this._height;\n                }\n\n                if (data) {\n                    if (options.dataRenderer && $.isFunction(options.dataRenderer)) {\n                        if (options.dataRendererOptions) {\n                            this.dataRendererOptions = options.dataRendererOptions;\n                        }\n                        this.dataRenderer = options.dataRenderer;\n                        data = this.dataRenderer(data, this, this.dataRendererOptions);\n                    }\n\n                    // make a copy of the data\n                    this.data = $.extend(true, [], data);\n                }\n\n                if (opts) {\n                    this.parseOptions(options);\n                }\n\n                this.title._plotWidth = this._width;\n\n                if (this.textColor) {\n                    this.target.css('color', this.textColor);\n                }\n                if (this.fontFamily) {\n                    this.target.css('font-family', this.fontFamily);\n                }\n                if (this.fontSize) {\n                    this.target.css('font-size', this.fontSize);\n                }\n\n                this.title.init();\n                this.legend.init();\n                this._sumy = 0;\n                this._sumx = 0;\n\n                this.seriesStack = [];\n                this.previousSeriesStack = [];\n\n                this.computePlotData();\n                for (var i = 0, l = this.series.length; i < l; i++) {\n                    // set default stacking order for series canvases\n                    this.seriesStack.push(i);\n                    this.previousSeriesStack.push(i);\n                    this.series[i].shadowCanvas._plotDimensions = this._plotDimensions;\n                    this.series[i].canvas._plotDimensions = this._plotDimensions;\n                    for (var j = 0; j < $.jqplot.preSeriesInitHooks.length; j++) {\n                        $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    for (var j = 0; j < this.preSeriesInitHooks.hooks.length; j++) {\n                        this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    // this.populatePlotData(this.series[i], i);\n                    this.series[i]._plotDimensions = this._plotDimensions;\n                    this.series[i].init(i, this.grid.borderWidth, this);\n                    for (var j = 0; j < $.jqplot.postSeriesInitHooks.length; j++) {\n                        $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    for (var j = 0; j < this.postSeriesInitHooks.hooks.length; j++) {\n                        this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                    }\n                    this._sumy += this.series[i]._sumy;\n                    this._sumx += this.series[i]._sumx;\n                }\n\n                for (var i = 0, l = _axisNames.length; i < l; i++) {\n                    name = _axisNames[i];\n                    axis = this.axes[name];\n\n                    axis._plotDimensions = this._plotDimensions;\n                    axis.init();\n                    if (axis.borderColor == null) {\n                        if (name.charAt(0) !== 'x' && axis.useSeriesColor === true && axis.show) {\n                            axis.borderColor = axis._series[0].color;\n                        }\n                        else {\n                            axis.borderColor = this.grid.borderColor;\n                        }\n                    }\n                }\n\n                if (this.sortData) {\n                    sortData(this.series);\n                }\n                this.grid.init();\n                this.grid._axes = this.axes;\n\n                this.legend._series = this.series;\n\n                for (var i = 0, l = $.jqplot.postInitHooks.length; i < l; i++) {\n                    $.jqplot.postInitHooks[i].call(this, target, this.data, options);\n                }\n\n                for (var i = 0, l = this.postInitHooks.hooks.length; i < l; i++) {\n                    this.postInitHooks.hooks[i].call(this, target, this.data, options);\n                }\n            };\n\n\n            // method: quickInit\n            //\n            // Quick reinitialization plot for replotting.\n            // Does not parse options ore recreate axes and series.\n            // not called directly.\n            this.quickInit = function () {\n                // Plot should be visible and have a height and width.\n                // If plot doesn't have height and width for some\n                // reason, set it by other means.  Plot must not have\n                // a display:none attribute, however.\n\n                this._height = this.target.height();\n                this._width = this.target.width();\n\n                if (this._height <= 0 || this._width <= 0 || !this._height || !this._width) {\n                    throw new Error(\"Target dimension not set\");\n                }\n\n                this._plotDimensions.height = this._height;\n                this._plotDimensions.width = this._width;\n                this.grid._plotDimensions = this._plotDimensions;\n                this.title._plotDimensions = this._plotDimensions;\n                this.baseCanvas._plotDimensions = this._plotDimensions;\n                this.eventCanvas._plotDimensions = this._plotDimensions;\n                this.legend._plotDimensions = this._plotDimensions;\n\n                for (var n in this.axes) {\n                    this.axes[n]._plotWidth = this._width;\n                    this.axes[n]._plotHeight = this._height;\n                }\n\n                this.title._plotWidth = this._width;\n\n                if (this.textColor) {\n                    this.target.css('color', this.textColor);\n                }\n                if (this.fontFamily) {\n                    this.target.css('font-family', this.fontFamily);\n                }\n                if (this.fontSize) {\n                    this.target.css('font-size', this.fontSize);\n                }\n\n                this._sumy = 0;\n                this._sumx = 0;\n                this.computePlotData();\n                for (var i = 0; i < this.series.length; i++) {\n                    // this.populatePlotData(this.series[i], i);\n                    if (this.series[i]._type === 'line' && this.series[i].renderer.bands.show) {\n                        this.series[i].renderer.initBands.call(this.series[i], this.series[i].renderer.options, this);\n                    }\n                    this.series[i]._plotDimensions = this._plotDimensions;\n                    this.series[i].canvas._plotDimensions = this._plotDimensions;\n                    //this.series[i].init(i, this.grid.borderWidth);\n                    this._sumy += this.series[i]._sumy;\n                    this._sumx += this.series[i]._sumx;\n                }\n\n                var name;\n\n                for (var j = 0; j < 12; j++) {\n                    name = _axisNames[j];\n                    // Memory Leaks patch : clear ticks elements\n                    var t = this.axes[name]._ticks;\n                    for (var i = 0; i < t.length; i++) {\n                        var el = t[i]._elem;\n                        if (el) {\n                            // if canvas renderer\n                            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                                window.G_vmlCanvasManager.uninitElement(el.get(0));\n                            }\n                            el.emptyForce();\n                            el = null;\n                            t._elem = null;\n                        }\n                    }\n                    t = null;\n\n                    this.axes[name]._plotDimensions = this._plotDimensions;\n                    this.axes[name]._ticks = [];\n                    // this.axes[name].renderer.init.call(this.axes[name], {});\n                }\n\n                if (this.sortData) {\n                    sortData(this.series);\n                }\n\n                this.grid._axes = this.axes;\n\n                this.legend._series = this.series;\n            };\n\n            // sort the series data in increasing order.\n            function sortData(series) {\n                var d, sd, pd, ppd, ret;\n                for (var i = 0; i < series.length; i++) {\n                    var check;\n                    var bat = [series[i].data, series[i]._stackData, series[i]._plotData, series[i]._prevPlotData];\n                    for (var n = 0; n < 4; n++) {\n                        check = true;\n                        d = bat[n];\n                        if (series[i]._stackAxis == 'x') {\n                            for (var j = 0; j < d.length; j++) {\n                                if (typeof(d[j][1]) != \"number\") {\n                                    check = false;\n                                    break;\n                                }\n                            }\n                            if (check) {\n                                d.sort(function (a, b) {\n                                    return a[1] - b[1];\n                                });\n                            }\n                        }\n                        else {\n                            for (var j = 0; j < d.length; j++) {\n                                if (typeof(d[j][0]) != \"number\") {\n                                    check = false;\n                                    break;\n                                }\n                            }\n                            if (check) {\n                                d.sort(function (a, b) {\n                                    return a[0] - b[0];\n                                });\n                            }\n                        }\n                    }\n\n                }\n            }\n\n            this.computePlotData = function () {\n                this._plotData = [];\n                this._stackData = [];\n                var series,\n                    index,\n                    l;\n\n\n                for (index = 0, l = this.series.length; index < l; index++) {\n                    series = this.series[index];\n                    this._plotData.push([]);\n                    this._stackData.push([]);\n                    var cd = series.data;\n                    this._plotData[index] = $.extend(true, [], cd);\n                    this._stackData[index] = $.extend(true, [], cd);\n                    series._plotData = this._plotData[index];\n                    series._stackData = this._stackData[index];\n                    var plotValues = {x: [], y: []};\n\n                    if (this.stackSeries && !series.disableStack) {\n                        series._stack = true;\n                        ///////////////////////////\n                        // have to check for nulls\n                        ///////////////////////////\n                        var sidx = (series._stackAxis === 'x') ? 0 : 1;\n\n                        for (var k = 0, cdl = cd.length; k < cdl; k++) {\n                            var temp = cd[k][sidx];\n                            if (temp == null) {\n                                temp = 0;\n                            }\n                            this._plotData[index][k][sidx] = temp;\n                            this._stackData[index][k][sidx] = temp;\n\n                            if (index > 0) {\n                                for (var j = index; j--;) {\n                                    var prevval = this._plotData[j][k][sidx];\n                                    // only need to sum up the stack axis column of data\n                                    // and only sum if it is of same sign.\n                                    // if previous series isn't same sign, keep looking\n                                    // at earlier series untill we find one of same sign.\n                                    if (temp * prevval >= 0) {\n                                        this._plotData[index][k][sidx] += prevval;\n                                        this._stackData[index][k][sidx] += prevval;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n                    else {\n                        for (var i = 0; i < series.data.length; i++) {\n                            plotValues.x.push(series.data[i][0]);\n                            plotValues.y.push(series.data[i][1]);\n                        }\n                        this._stackData.push(series.data);\n                        this.series[index]._stackData = series.data;\n                        this._plotData.push(series.data);\n                        series._plotData = series.data;\n                        series._plotValues = plotValues;\n                    }\n                    if (index > 0) {\n                        series._prevPlotData = this.series[index - 1]._plotData;\n                    }\n                    series._sumy = 0;\n                    series._sumx = 0;\n                    for (i = series.data.length - 1; i > -1; i--) {\n                        series._sumy += series.data[i][1];\n                        series._sumx += series.data[i][0];\n                    }\n                }\n\n            };\n\n            // populate the _stackData and _plotData arrays for the plot and the series.\n            this.populatePlotData = function (series, index) {\n                // if a stacked chart, compute the stacked data\n                this._plotData = [];\n                this._stackData = [];\n                series._stackData = [];\n                series._plotData = [];\n                var plotValues = {x: [], y: []};\n                if (this.stackSeries && !series.disableStack) {\n                    series._stack = true;\n                    var sidx = (series._stackAxis === 'x') ? 0 : 1;\n                    // var idx = sidx ? 0 : 1;\n                    // push the current data into stackData\n                    //this._stackData.push(this.series[i].data);\n                    var temp = $.extend(true, [], series.data);\n                    // create the data that will be plotted for this series\n                    var plotdata = $.extend(true, [], series.data);\n                    var tempx, tempy, dval, stackval, comparator;\n                    // for first series, nothing to add to stackData.\n                    for (var j = 0; j < index; j++) {\n                        var cd = this.series[j].data;\n                        for (var k = 0; k < cd.length; k++) {\n                            dval = cd[k];\n                            tempx = (dval[0] != null) ? dval[0] : 0;\n                            tempy = (dval[1] != null) ? dval[1] : 0;\n                            temp[k][0] += tempx;\n                            temp[k][1] += tempy;\n                            stackval = (sidx) ? tempy : tempx;\n                            // only need to sum up the stack axis column of data\n                            // and only sum if it is of same sign.\n                            if (series.data[k][sidx] * stackval >= 0) {\n                                plotdata[k][sidx] += stackval;\n                            }\n                        }\n                    }\n                    for (var i = 0; i < plotdata.length; i++) {\n                        plotValues.x.push(plotdata[i][0]);\n                        plotValues.y.push(plotdata[i][1]);\n                    }\n                    this._plotData.push(plotdata);\n                    this._stackData.push(temp);\n                    series._stackData = temp;\n                    series._plotData = plotdata;\n                    series._plotValues = plotValues;\n                }\n                else {\n                    for (var i = 0; i < series.data.length; i++) {\n                        plotValues.x.push(series.data[i][0]);\n                        plotValues.y.push(series.data[i][1]);\n                    }\n                    this._stackData.push(series.data);\n                    this.series[index]._stackData = series.data;\n                    this._plotData.push(series.data);\n                    series._plotData = series.data;\n                    series._plotValues = plotValues;\n                }\n                if (index > 0) {\n                    series._prevPlotData = this.series[index - 1]._plotData;\n                }\n                series._sumy = 0;\n                series._sumx = 0;\n                for (i = series.data.length - 1; i > -1; i--) {\n                    series._sumy += series.data[i][1];\n                    series._sumx += series.data[i][0];\n                }\n            };\n\n            // function to safely return colors from the color array and wrap around at the end.\n            this.getNextSeriesColor = (function (t) {\n                var idx = 0;\n                var sc = t.seriesColors;\n\n                return function () {\n                    if (idx < sc.length) {\n                        return sc[idx++];\n                    }\n                    else {\n                        idx = 0;\n                        return sc[idx++];\n                    }\n                };\n            })(this);\n\n            this.parseOptions = function (options) {\n                for (var i = 0; i < this.preParseOptionsHooks.hooks.length; i++) {\n                    this.preParseOptionsHooks.hooks[i].call(this, options);\n                }\n                for (var i = 0; i < $.jqplot.preParseOptionsHooks.length; i++) {\n                    $.jqplot.preParseOptionsHooks[i].call(this, options);\n                }\n                this.options = $.extend(true, {}, this.defaults, options);\n                var opts = this.options;\n                this.animate = opts.animate;\n                this.animateReplot = opts.animateReplot;\n                this.stackSeries = opts.stackSeries;\n                if ($.isPlainObject(opts.fillBetween)) {\n\n                    var temp = ['series1', 'series2', 'color', 'baseSeries', 'fill'],\n                        tempi;\n\n                    for (var i = 0, l = temp.length; i < l; i++) {\n                        tempi = temp[i];\n                        if (opts.fillBetween[tempi] != null) {\n                            this.fillBetween[tempi] = opts.fillBetween[tempi];\n                        }\n                    }\n                }\n\n                if (opts.seriesColors) {\n                    this.seriesColors = opts.seriesColors;\n                }\n                if (opts.negativeSeriesColors) {\n                    this.negativeSeriesColors = opts.negativeSeriesColors;\n                }\n                if (opts.captureRightClick) {\n                    this.captureRightClick = opts.captureRightClick;\n                }\n                this.defaultAxisStart = (options && options.defaultAxisStart != null) ? options.defaultAxisStart : this.defaultAxisStart;\n                this.colorGenerator.setColors(this.seriesColors);\n                this.negativeColorGenerator.setColors(this.negativeSeriesColors);\n                // var cg = new this.colorGenerator(this.seriesColors);\n                // var ncg = new this.colorGenerator(this.negativeSeriesColors);\n                // this._gridPadding = this.options.gridPadding;\n                $.extend(true, this._gridPadding, opts.gridPadding);\n                this.sortData = (opts.sortData != null) ? opts.sortData : this.sortData;\n                for (var i = 0; i < 12; i++) {\n                    var n = _axisNames[i];\n                    var axis = this.axes[n];\n                    axis._options = $.extend(true, {}, opts.axesDefaults, opts.axes[n]);\n                    $.extend(true, axis, opts.axesDefaults, opts.axes[n]);\n                    axis._plotWidth = this._width;\n                    axis._plotHeight = this._height;\n                }\n                // if (this.data.length == 0) {\n                //     this.data = [];\n                //     for (var i=0; i<this.options.series.length; i++) {\n                //         this.data.push(this.options.series.data);\n                //     }\n                // }\n\n                var normalizeData = function (data, dir, start) {\n                    // return data as an array of point arrays,\n                    // in form [[x1,y1...], [x2,y2...], ...]\n                    var temp = [];\n                    var i, l;\n                    dir = dir || 'vertical';\n                    if (!$.isArray(data[0])) {\n                        // we have a series of scalars.  One line with just y values.\n                        // turn the scalar list of data into a data array of form:\n                        // [[1, data[0]], [2, data[1]], ...]\n                        for (i = 0, l = data.length; i < l; i++) {\n                            if (dir == 'vertical') {\n                                temp.push([start + i, data[i]]);\n                            }\n                            else {\n                                temp.push([data[i], start + i]);\n                            }\n                        }\n                    }\n                    else {\n                        // we have a properly formatted data series, copy it.\n                        $.extend(true, temp, data);\n                    }\n                    return temp;\n                };\n\n                var colorIndex = 0;\n                this.series = [];\n                for (var i = 0; i < this.data.length; i++) {\n                    var sopts = $.extend(true, {index: i}, {\n                        seriesColors: this.seriesColors,\n                        negativeSeriesColors: this.negativeSeriesColors\n                    }, this.options.seriesDefaults, this.options.series[i], {rendererOptions: {animation: {show: this.animate}}});\n                    // pass in options in case something needs set prior to initialization.\n                    var temp = new Series(sopts);\n                    for (var j = 0; j < $.jqplot.preParseSeriesOptionsHooks.length; j++) {\n                        $.jqplot.preParseSeriesOptionsHooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);\n                    }\n                    for (var j = 0; j < this.preParseSeriesOptionsHooks.hooks.length; j++) {\n                        this.preParseSeriesOptionsHooks.hooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);\n                    }\n                    // Now go back and apply the options to the series.  Really should just do this during initializaiton, but don't want to\n                    // mess up preParseSeriesOptionsHooks at this point.\n                    $.extend(true, temp, sopts);\n                    var dir = 'vertical';\n                    if (temp.renderer === $.jqplot.BarRenderer && temp.rendererOptions && temp.rendererOptions.barDirection == 'horizontal') {\n                        dir = 'horizontal';\n                        temp._stackAxis = 'x';\n                        temp._primaryAxis = '_yaxis';\n                    }\n                    temp.data = normalizeData(this.data[i], dir, this.defaultAxisStart);\n                    switch (temp.xaxis) {\n                        case 'xaxis':\n                            temp._xaxis = this.axes.xaxis;\n                            break;\n                        case 'x2axis':\n                            temp._xaxis = this.axes.x2axis;\n                            break;\n                        default:\n                            break;\n                    }\n                    temp._yaxis = this.axes[temp.yaxis];\n                    temp._xaxis._series.push(temp);\n                    temp._yaxis._series.push(temp);\n                    if (temp.show) {\n                        temp._xaxis.show = true;\n                        temp._yaxis.show = true;\n                    }\n                    else {\n                        if (temp._xaxis.scaleToHiddenSeries) {\n                            temp._xaxis.show = true;\n                        }\n                        if (temp._yaxis.scaleToHiddenSeries) {\n                            temp._yaxis.show = true;\n                        }\n                    }\n\n                    // // parse the renderer options and apply default colors if not provided\n                    // if (!temp.color && temp.show != false) {\n                    //     temp.color = cg.next();\n                    //     colorIndex = cg.getIndex() - 1;;\n                    // }\n                    // if (!temp.negativeColor && temp.show != false) {\n                    //     temp.negativeColor = ncg.get(colorIndex);\n                    //     ncg.setIndex(colorIndex);\n                    // }\n                    if (!temp.label) {\n                        temp.label = 'Series ' + (i + 1).toString();\n                    }\n                    // temp.rendererOptions.show = temp.show;\n                    // $.extend(true, temp.renderer, {color:this.seriesColors[i]}, this.rendererOptions);\n                    this.series.push(temp);\n                    for (var j = 0; j < $.jqplot.postParseSeriesOptionsHooks.length; j++) {\n                        $.jqplot.postParseSeriesOptionsHooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);\n                    }\n                    for (var j = 0; j < this.postParseSeriesOptionsHooks.hooks.length; j++) {\n                        this.postParseSeriesOptionsHooks.hooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);\n                    }\n                }\n\n                // copy the grid and title options into this object.\n                $.extend(true, this.grid, this.options.grid);\n                // if axis border properties aren't set, set default.\n                for (var i = 0, l = _axisNames.length; i < l; i++) {\n                    var n = _axisNames[i];\n                    var axis = this.axes[n];\n                    if (axis.borderWidth == null) {\n                        axis.borderWidth = this.grid.borderWidth;\n                    }\n                }\n\n                if (typeof this.options.title == 'string') {\n                    this.title.text = this.options.title;\n                }\n                else if (typeof this.options.title == 'object') {\n                    $.extend(true, this.title, this.options.title);\n                }\n                this.title._plotWidth = this._width;\n                this.legend.setOptions(this.options.legend);\n\n                for (var i = 0; i < $.jqplot.postParseOptionsHooks.length; i++) {\n                    $.jqplot.postParseOptionsHooks[i].call(this, options);\n                }\n                for (var i = 0; i < this.postParseOptionsHooks.hooks.length; i++) {\n                    this.postParseOptionsHooks.hooks[i].call(this, options);\n                }\n            };\n\n            // method: destroy\n            // Releases all resources occupied by the plot\n            this.destroy = function () {\n                this.canvasManager.freeAllCanvases();\n                if (this.eventCanvas && this.eventCanvas._elem) {\n                    this.eventCanvas._elem.unbind();\n                }\n                // Couple of posts on Stack Overflow indicate that empty() doesn't\n                // always cear up the dom and release memory.  Sometimes setting\n                // innerHTML property to null is needed.  Particularly on IE, may\n                // have to directly set it to null, bypassing $.\n                this.target.empty();\n\n                this.target[0].innerHTML = '';\n            };\n\n            // method: replot\n            // Does a reinitialization of the plot followed by\n            // a redraw.  Method could be used to interactively\n            // change plot characteristics and then replot.\n            //\n            // Parameters:\n            // options - Options used for replotting.\n            //\n            // Properties:\n            // clear - false to not clear (empty) the plot container before replotting (default: true).\n            // resetAxes - true to reset all axes min, max, numberTicks and tickInterval setting so axes will rescale themselves.\n            //             optionally pass in list of axes to reset (e.g. ['xaxis', 'y2axis']) (default: false).\n            this.replot = function (options) {\n                var opts = options || {};\n                var data = opts.data || null;\n                var clear = (opts.clear === false) ? false : true;\n                var resetAxes = opts.resetAxes || false;\n                delete opts.data;\n                delete opts.clear;\n                delete opts.resetAxes;\n\n                this.target.trigger('jqplotPreReplot');\n\n                if (clear) {\n                    this.destroy();\n                }\n                // if have data or other options, full reinit.\n                // otherwise, quickinit.\n                if (data || !$.isEmptyObject(opts)) {\n                    this.reInitialize(data, opts);\n                }\n                else {\n                    this.quickInit();\n                }\n\n                if (resetAxes) {\n                    this.resetAxesScale(resetAxes, opts.axes);\n                }\n                this.draw();\n                this.target.trigger('jqplotPostReplot');\n            };\n\n            // method: redraw\n            // Empties the plot target div and redraws the plot.\n            // This enables plot data and properties to be changed\n            // and then to comletely clear the plot and redraw.\n            // redraw *will not* reinitialize any plot elements.\n            // That is, axes will not be autoscaled and defaults\n            // will not be reapplied to any plot elements.  redraw\n            // is used primarily with zooming.\n            //\n            // Parameters:\n            // clear - false to not clear (empty) the plot container before redrawing (default: true).\n            this.redraw = function (clear) {\n                clear = (clear != null) ? clear : true;\n                this.target.trigger('jqplotPreRedraw');\n                if (clear) {\n                    this.canvasManager.freeAllCanvases();\n                    this.eventCanvas._elem.unbind();\n                    // Dont think I bind any events to the target, this shouldn't be necessary.\n                    // It will remove user's events.\n                    // this.target.unbind();\n                    this.target.empty();\n                }\n                for (var ax in this.axes) {\n                    this.axes[ax]._ticks = [];\n                }\n                this.computePlotData();\n                // for (var i=0; i<this.series.length; i++) {\n                //     this.populatePlotData(this.series[i], i);\n                // }\n                this._sumy = 0;\n                this._sumx = 0;\n                for (var i = 0, tsl = this.series.length; i < tsl; i++) {\n                    this._sumy += this.series[i]._sumy;\n                    this._sumx += this.series[i]._sumx;\n                }\n                this.draw();\n                this.target.trigger('jqplotPostRedraw');\n            };\n\n            // method: draw\n            // Draws all elements of the plot into the container.\n            // Does not clear the container before drawing.\n            this.draw = function () {\n                if (this.drawIfHidden || this.target.is(':visible')) {\n                    this.target.trigger('jqplotPreDraw');\n                    var i,\n                        j,\n                        l,\n                        tempseries;\n                    for (i = 0, l = $.jqplot.preDrawHooks.length; i < l; i++) {\n                        $.jqplot.preDrawHooks[i].call(this);\n                    }\n                    for (i = 0, l = this.preDrawHooks.hooks.length; i < l; i++) {\n                        this.preDrawHooks.hooks[i].apply(this, this.preDrawSeriesHooks.args[i]);\n                    }\n                    // create an underlying canvas to be used for special features.\n                    this.target.append(this.baseCanvas.createElement({\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0\n                    }, 'jqplot-base-canvas', null, this));\n                    this.baseCanvas.setContext();\n                    this.target.append(this.title.draw());\n                    this.title.pack({top: 0, left: 0});\n\n                    // make room  for the legend between the grid and the edge.\n                    // pass a dummy offsets object and a reference to the plot.\n                    var legendElem = this.legend.draw({}, this);\n\n                    var gridPadding = {top: 0, left: 0, bottom: 0, right: 0};\n\n                    if (this.legend.placement == \"outsideGrid\") {\n                        // temporarily append the legend to get dimensions\n                        this.target.append(legendElem);\n                        switch (this.legend.location) {\n                            case 'n':\n                                gridPadding.top += this.legend.getHeight();\n                                break;\n                            case 's':\n                                gridPadding.bottom += this.legend.getHeight();\n                                break;\n                            case 'ne':\n                            case 'e':\n                            case 'se':\n                                gridPadding.right += this.legend.getWidth();\n                                break;\n                            case 'nw':\n                            case 'w':\n                            case 'sw':\n                                gridPadding.left += this.legend.getWidth();\n                                break;\n                            default:  // same as 'ne'\n                                gridPadding.right += this.legend.getWidth();\n                                break;\n                        }\n                        legendElem = legendElem.detach();\n                    }\n\n                    var ax = this.axes;\n                    var name;\n                    // draw the yMidAxis first, so xaxis of pyramid chart can adjust itself if needed.\n                    for (i = 0; i < 12; i++) {\n                        name = _axisNames[i];\n                        this.target.append(ax[name].draw(this.baseCanvas._ctx, this));\n                        ax[name].set();\n                    }\n                    if (ax.yaxis.show) {\n                        gridPadding.left += ax.yaxis.getWidth();\n                    }\n                    var ra = ['y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];\n                    var rapad = [0, 0, 0, 0, 0, 0, 0, 0];\n                    var gpr = 0;\n                    var n;\n                    for (n = 0; n < 8; n++) {\n                        if (ax[ra[n]].show) {\n                            gpr += ax[ra[n]].getWidth();\n                            rapad[n] = gpr;\n                        }\n                    }\n                    gridPadding.right += gpr;\n                    if (ax.x2axis.show) {\n                        gridPadding.top += ax.x2axis.getHeight();\n                    }\n                    if (this.title.show) {\n                        gridPadding.top += this.title.getHeight();\n                    }\n                    if (ax.xaxis.show) {\n                        gridPadding.bottom += ax.xaxis.getHeight();\n                    }\n\n                    // end of gridPadding adjustments.\n\n                    // if user passed in gridDimensions option, check against calculated gridPadding\n                    if (this.options.gridDimensions && $.isPlainObject(this.options.gridDimensions)) {\n                        var gdw = parseInt(this.options.gridDimensions.width, 10) || 0;\n                        var gdh = parseInt(this.options.gridDimensions.height, 10) || 0;\n                        var widthAdj = (this._width - gridPadding.left - gridPadding.right - gdw) / 2;\n                        var heightAdj = (this._height - gridPadding.top - gridPadding.bottom - gdh) / 2;\n\n                        if (heightAdj >= 0 && widthAdj >= 0) {\n                            gridPadding.top += heightAdj;\n                            gridPadding.bottom += heightAdj;\n                            gridPadding.left += widthAdj;\n                            gridPadding.right += widthAdj;\n                        }\n                    }\n                    var arr = ['top', 'bottom', 'left', 'right'];\n                    for (var n in arr) {\n                        if (this._gridPadding[arr[n]] == null && gridPadding[arr[n]] > 0) {\n                            this._gridPadding[arr[n]] = gridPadding[arr[n]];\n                        }\n                        else if (this._gridPadding[arr[n]] == null) {\n                            this._gridPadding[arr[n]] = this._defaultGridPadding[arr[n]];\n                        }\n                    }\n\n                    var legendPadding = this._gridPadding;\n\n                    if (this.legend.placement === 'outsideGrid') {\n                        legendPadding = {top: this.title.getHeight(), left: 0, right: 0, bottom: 0};\n                        if (this.legend.location === 's') {\n                            legendPadding.left = this._gridPadding.left;\n                            legendPadding.right = this._gridPadding.right;\n                        }\n                    }\n\n                    ax.xaxis.pack({\n                        position: 'absolute',\n                        bottom: this._gridPadding.bottom - ax.xaxis.getHeight(),\n                        left: 0,\n                        width: this._width\n                    }, {min: this._gridPadding.left, max: this._width - this._gridPadding.right});\n                    ax.yaxis.pack({\n                        position: 'absolute',\n                        top: 0,\n                        left: this._gridPadding.left - ax.yaxis.getWidth(),\n                        height: this._height\n                    }, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n                    ax.x2axis.pack({\n                        position: 'absolute',\n                        top: this._gridPadding.top - ax.x2axis.getHeight(),\n                        left: 0,\n                        width: this._width\n                    }, {min: this._gridPadding.left, max: this._width - this._gridPadding.right});\n                    for (i = 8; i > 0; i--) {\n                        ax[ra[i - 1]].pack({\n                            position: 'absolute',\n                            top: 0,\n                            right: this._gridPadding.right - rapad[i - 1]\n                        }, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n                    }\n                    var ltemp = (this._width - this._gridPadding.left - this._gridPadding.right) / 2.0 + this._gridPadding.left - ax.yMidAxis.getWidth() / 2.0;\n                    ax.yMidAxis.pack({\n                        position: 'absolute',\n                        top: 0,\n                        left: ltemp,\n                        zIndex: 9,\n                        textAlign: 'center'\n                    }, {min: this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n\n                    this.target.append(this.grid.createElement(this._gridPadding, this));\n                    this.grid.draw();\n\n                    var series = this.series;\n                    var seriesLength = series.length;\n                    // put the shadow canvases behind the series canvases so shadows don't overlap on stacked bars.\n                    for (i = 0, l = seriesLength; i < l; i++) {\n                        // draw series in order of stacking.  This affects only\n                        // order in which canvases are added to dom.\n                        j = this.seriesStack[i];\n                        this.target.append(series[j].shadowCanvas.createElement(this._gridPadding, 'jqplot-series-shadowCanvas', null, this));\n                        series[j].shadowCanvas.setContext();\n                        series[j].shadowCanvas._elem.data('seriesIndex', j);\n                    }\n\n                    for (i = 0, l = seriesLength; i < l; i++) {\n                        // draw series in order of stacking.  This affects only\n                        // order in which canvases are added to dom.\n                        j = this.seriesStack[i];\n                        this.target.append(series[j].canvas.createElement(this._gridPadding, 'jqplot-series-canvas', null, this));\n                        series[j].canvas.setContext();\n                        series[j].canvas._elem.data('seriesIndex', j);\n                    }\n                    // Need to use filled canvas to capture events in IE.\n                    // Also, canvas seems to block selection of other elements in document on FF.\n                    this.target.append(this.eventCanvas.createElement(this._gridPadding, 'jqplot-event-canvas', null, this));\n                    this.eventCanvas.setContext();\n                    this.eventCanvas._ctx.fillStyle = 'rgba(0,0,0,0)';\n                    this.eventCanvas._ctx.fillRect(0, 0, this.eventCanvas._ctx.canvas.width, this.eventCanvas._ctx.canvas.height);\n\n                    // bind custom event handlers to regular events.\n                    this.bindCustomEvents();\n\n                    // draw legend before series if the series needs to know the legend dimensions.\n                    if (this.legend.preDraw) {\n                        this.eventCanvas._elem.before(legendElem);\n                        this.legend.pack(legendPadding);\n                        if (this.legend._elem) {\n                            this.drawSeries({\n                                legendInfo: {\n                                    location: this.legend.location,\n                                    placement: this.legend.placement,\n                                    width: this.legend.getWidth(),\n                                    height: this.legend.getHeight(),\n                                    xoffset: this.legend.xoffset,\n                                    yoffset: this.legend.yoffset\n                                }\n                            });\n                        }\n                        else {\n                            this.drawSeries();\n                        }\n                    }\n                    else {  // draw series before legend\n                        this.drawSeries();\n                        if (seriesLength) {\n                            $(series[seriesLength - 1].canvas._elem).after(legendElem);\n                        }\n                        this.legend.pack(legendPadding);\n                    }\n\n                    // register event listeners on the overlay canvas\n                    for (var i = 0, l = $.jqplot.eventListenerHooks.length; i < l; i++) {\n                        // in the handler, this will refer to the eventCanvas dom element.\n                        // make sure there are references back into plot objects.\n                        this.eventCanvas._elem.bind($.jqplot.eventListenerHooks[i][0], {plot: this}, $.jqplot.eventListenerHooks[i][1]);\n                    }\n\n                    // register event listeners on the overlay canvas\n                    for (var i = 0, l = this.eventListenerHooks.hooks.length; i < l; i++) {\n                        // in the handler, this will refer to the eventCanvas dom element.\n                        // make sure there are references back into plot objects.\n                        this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[i][0], {plot: this}, this.eventListenerHooks.hooks[i][1]);\n                    }\n\n                    var fb = this.fillBetween;\n                    if (fb.fill && fb.series1 !== fb.series2 && fb.series1 < seriesLength && fb.series2 < seriesLength && series[fb.series1]._type === 'line' && series[fb.series2]._type === 'line') {\n                        this.doFillBetweenLines();\n                    }\n\n                    for (var i = 0, l = $.jqplot.postDrawHooks.length; i < l; i++) {\n                        $.jqplot.postDrawHooks[i].call(this);\n                    }\n\n                    for (var i = 0, l = this.postDrawHooks.hooks.length; i < l; i++) {\n                        this.postDrawHooks.hooks[i].apply(this, this.postDrawHooks.args[i]);\n                    }\n\n                    if (this.target.is(':visible')) {\n                        this._drawCount += 1;\n                    }\n\n                    var temps,\n                        tempr,\n                        sel,\n                        _els;\n                    // ughh.  ideally would hide all series then show them.\n                    for (i = 0, l = seriesLength; i < l; i++) {\n                        temps = series[i];\n                        tempr = temps.renderer;\n                        sel = '.jqplot-point-label.jqplot-series-' + i;\n                        if (tempr.animation && tempr.animation._supported && tempr.animation.show && (this._drawCount < 2 || this.animateReplot)) {\n                            _els = this.target.find(sel);\n                            _els.stop(true, true).hide();\n                            temps.canvas._elem.stop(true, true).hide();\n                            temps.shadowCanvas._elem.stop(true, true).hide();\n                            temps.canvas._elem.jqplotEffect('blind', {\n                                mode: 'show',\n                                direction: tempr.animation.direction\n                            }, tempr.animation.speed);\n                            temps.shadowCanvas._elem.jqplotEffect('blind', {\n                                mode: 'show',\n                                direction: tempr.animation.direction\n                            }, tempr.animation.speed);\n                            _els.fadeIn(tempr.animation.speed * 0.8);\n                        }\n                    }\n                    _els = null;\n\n                    this.target.trigger('jqplotPostDraw', [this]);\n                }\n            };\n\n            jqPlot.prototype.doFillBetweenLines = function () {\n                var fb = this.fillBetween;\n                var sid1 = fb.series1;\n                var sid2 = fb.series2;\n                // first series should always be lowest index\n                var id1 = (sid1 < sid2) ? sid1 : sid2;\n                var id2 = (sid2 > sid1) ? sid2 : sid1;\n\n                var series1 = this.series[id1];\n                var series2 = this.series[id2];\n\n                if (series2.renderer.smooth) {\n                    var tempgd = series2.renderer._smoothedData.slice(0).reverse();\n                }\n                else {\n                    var tempgd = series2.gridData.slice(0).reverse();\n                }\n\n                if (series1.renderer.smooth) {\n                    var gd = series1.renderer._smoothedData.concat(tempgd);\n                }\n                else {\n                    var gd = series1.gridData.concat(tempgd);\n                }\n\n                var color = (fb.color !== null) ? fb.color : this.series[sid1].fillColor;\n                var baseSeries = (fb.baseSeries !== null) ? fb.baseSeries : id1;\n\n                // now apply a fill to the shape on the lower series shadow canvas,\n                // so it is behind both series.\n                var sr = this.series[baseSeries].renderer.shapeRenderer;\n                var opts = {fillStyle: color, fill: true, closePath: true};\n                sr.draw(series1.shadowCanvas._ctx, gd, opts);\n            };\n\n            this.bindCustomEvents = function () {\n                this.eventCanvas._elem.bind('click', {plot: this}, this.onClick);\n                this.eventCanvas._elem.bind('dblclick', {plot: this}, this.onDblClick);\n                this.eventCanvas._elem.bind('mousedown', {plot: this}, this.onMouseDown);\n                this.eventCanvas._elem.bind('mousemove', {plot: this}, this.onMouseMove);\n                this.eventCanvas._elem.bind('mouseenter', {plot: this}, this.onMouseEnter);\n                this.eventCanvas._elem.bind('mouseleave', {plot: this}, this.onMouseLeave);\n                if (this.captureRightClick) {\n                    this.eventCanvas._elem.bind('mouseup', {plot: this}, this.onRightClick);\n                    this.eventCanvas._elem.get(0).oncontextmenu = function () {\n                        return false;\n                    };\n                }\n                else {\n                    this.eventCanvas._elem.bind('mouseup', {plot: this}, this.onMouseUp);\n                }\n            };\n\n            function getEventPosition(ev) {\n                var plot = ev.data.plot;\n                var go = plot.eventCanvas._elem.offset();\n                var gridPos = {x: ev.pageX - go.left, y: ev.pageY - go.top};\n                var dataPos = {\n                    xaxis: null,\n                    yaxis: null,\n                    x2axis: null,\n                    y2axis: null,\n                    y3axis: null,\n                    y4axis: null,\n                    y5axis: null,\n                    y6axis: null,\n                    y7axis: null,\n                    y8axis: null,\n                    y9axis: null,\n                    yMidAxis: null\n                };\n                var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];\n                var ax = plot.axes;\n                var n, axis;\n                for (n = 11; n > 0; n--) {\n                    axis = an[n - 1];\n                    if (ax[axis].show) {\n                        dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);\n                    }\n                }\n\n                return {offsets: go, gridPos: gridPos, dataPos: dataPos};\n            }\n\n\n            // function to check if event location is over a area area\n            function checkIntersection(gridpos, plot) {\n                var series = plot.series;\n                var i, j, k, s, r, x, y, theta, sm, sa, minang, maxang;\n                var d0, d, p, pp, points, bw, hp;\n                var threshold, t;\n                for (k = plot.seriesStack.length - 1; k >= 0; k--) {\n                    i = plot.seriesStack[k];\n                    s = series[i];\n                    hp = s._highlightThreshold;\n                    switch (s.renderer.constructor) {\n                        case $.jqplot.BarRenderer:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            for (j = 0; j < s._barPoints.length; j++) {\n                                points = s._barPoints[j];\n                                p = s.gridData[j];\n                                if (x > points[0][0] && x < points[2][0] && y > points[2][1] && y < points[0][1]) {\n                                    return {\n                                        seriesIndex: s.index,\n                                        pointIndex: j,\n                                        gridData: p,\n                                        data: s.data[j],\n                                        points: s._barPoints[j]\n                                    };\n                                }\n                            }\n                            break;\n                        case $.jqplot.PyramidRenderer:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            for (j = 0; j < s._barPoints.length; j++) {\n                                points = s._barPoints[j];\n                                p = s.gridData[j];\n                                if (x > points[0][0] + hp[0][0] && x < points[2][0] + hp[2][0] && y > points[2][1] && y < points[0][1]) {\n                                    return {\n                                        seriesIndex: s.index,\n                                        pointIndex: j,\n                                        gridData: p,\n                                        data: s.data[j],\n                                        points: s._barPoints[j]\n                                    };\n                                }\n                            }\n                            break;\n\n                        case $.jqplot.DonutRenderer:\n                            sa = s.startAngle / 180 * Math.PI;\n                            x = gridpos.x - s._center[0];\n                            y = gridpos.y - s._center[1];\n                            r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n                            if (x > 0 && -y >= 0) {\n                                theta = 2 * Math.PI - Math.atan(-y / x);\n                            }\n                            else if (x > 0 && -y < 0) {\n                                theta = -Math.atan(-y / x);\n                            }\n                            else if (x < 0) {\n                                theta = Math.PI - Math.atan(-y / x);\n                            }\n                            else if (x == 0 && -y > 0) {\n                                theta = 3 * Math.PI / 2;\n                            }\n                            else if (x == 0 && -y < 0) {\n                                theta = Math.PI / 2;\n                            }\n                            else if (x == 0 && y == 0) {\n                                theta = 0;\n                            }\n                            if (sa) {\n                                theta -= sa;\n                                if (theta < 0) {\n                                    theta += 2 * Math.PI;\n                                }\n                                else if (theta > 2 * Math.PI) {\n                                    theta -= 2 * Math.PI;\n                                }\n                            }\n\n                            sm = s.sliceMargin / 180 * Math.PI;\n                            if (r < s._radius && r > s._innerRadius) {\n                                for (j = 0; j < s.gridData.length; j++) {\n                                    minang = (j > 0) ? s.gridData[j - 1][1] + sm : sm;\n                                    maxang = s.gridData[j][1];\n                                    if (theta > minang && theta < maxang) {\n                                        return {\n                                            seriesIndex: s.index,\n                                            pointIndex: j,\n                                            gridData: [gridpos.x, gridpos.y],\n                                            data: s.data[j]\n                                        };\n                                    }\n                                }\n                            }\n                            break;\n\n                        case $.jqplot.PieRenderer:\n                            sa = s.startAngle / 180 * Math.PI;\n                            x = gridpos.x - s._center[0];\n                            y = gridpos.y - s._center[1];\n                            r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n                            if (x > 0 && -y >= 0) {\n                                theta = 2 * Math.PI - Math.atan(-y / x);\n                            }\n                            else if (x > 0 && -y < 0) {\n                                theta = -Math.atan(-y / x);\n                            }\n                            else if (x < 0) {\n                                theta = Math.PI - Math.atan(-y / x);\n                            }\n                            else if (x == 0 && -y > 0) {\n                                theta = 3 * Math.PI / 2;\n                            }\n                            else if (x == 0 && -y < 0) {\n                                theta = Math.PI / 2;\n                            }\n                            else if (x == 0 && y == 0) {\n                                theta = 0;\n                            }\n                            if (sa) {\n                                theta -= sa;\n                                if (theta < 0) {\n                                    theta += 2 * Math.PI;\n                                }\n                                else if (theta > 2 * Math.PI) {\n                                    theta -= 2 * Math.PI;\n                                }\n                            }\n\n                            sm = s.sliceMargin / 180 * Math.PI;\n                            if (r < s._radius) {\n                                for (j = 0; j < s.gridData.length; j++) {\n                                    minang = (j > 0) ? s.gridData[j - 1][1] + sm : sm;\n                                    maxang = s.gridData[j][1];\n                                    if (theta > minang && theta < maxang) {\n                                        return {\n                                            seriesIndex: s.index,\n                                            pointIndex: j,\n                                            gridData: [gridpos.x, gridpos.y],\n                                            data: s.data[j]\n                                        };\n                                    }\n                                }\n                            }\n                            break;\n\n                        case $.jqplot.BubbleRenderer:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            var ret = null;\n\n                            if (s.show) {\n                                for (var j = 0; j < s.gridData.length; j++) {\n                                    p = s.gridData[j];\n                                    d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]));\n                                    if (d <= p[2] && (d <= d0 || d0 == null)) {\n                                        d0 = d;\n                                        ret = {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                    }\n                                }\n                                if (ret != null) {\n                                    return ret;\n                                }\n                            }\n                            break;\n\n                        case $.jqplot.FunnelRenderer:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            var v = s._vertices,\n                                vfirst = v[0],\n                                vlast = v[v.length - 1],\n                                lex,\n                                rex,\n                                cv;\n\n                            // equations of right and left sides, returns x, y values given height of section (y value and 2 points)\n\n                        function findedge(l, p1, p2) {\n                            var m = (p1[1] - p2[1]) / (p1[0] - p2[0]);\n                            var b = p1[1] - m * p1[0];\n                            var y = l + p1[1];\n\n                            return [(y - b) / m, y];\n                        }\n\n                            // check each section\n                            lex = findedge(y, vfirst[0], vlast[3]);\n                            rex = findedge(y, vfirst[1], vlast[2]);\n                            for (j = 0; j < v.length; j++) {\n                                cv = v[j];\n                                if (y >= cv[0][1] && y <= cv[3][1] && x >= lex[0] && x <= rex[0]) {\n                                    return {seriesIndex: s.index, pointIndex: j, gridData: null, data: s.data[j]};\n                                }\n                            }\n                            break;\n\n                        case $.jqplot.LineRenderer:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            r = s.renderer;\n                            if (s.show) {\n                                if ((s.fill || (s.renderer.bands.show && s.renderer.bands.fill)) && (!plot.plugins.highlighter || !plot.plugins.highlighter.show)) {\n                                    // first check if it is in bounding box\n                                    var inside = false;\n                                    if (x > s._boundingBox[0][0] && x < s._boundingBox[1][0] && y > s._boundingBox[1][1] && y < s._boundingBox[0][1]) {\n                                        // now check the crossing number\n\n                                        var numPoints = s._areaPoints.length;\n                                        var ii;\n                                        var j = numPoints - 1;\n\n                                        for (var ii = 0; ii < numPoints; ii++) {\n                                            var vertex1 = [s._areaPoints[ii][0], s._areaPoints[ii][1]];\n                                            var vertex2 = [s._areaPoints[j][0], s._areaPoints[j][1]];\n\n                                            if (vertex1[1] < y && vertex2[1] >= y || vertex2[1] < y && vertex1[1] >= y) {\n                                                if (vertex1[0] + (y - vertex1[1]) / (vertex2[1] - vertex1[1]) * (vertex2[0] - vertex1[0]) < x) {\n                                                    inside = !inside;\n                                                }\n                                            }\n\n                                            j = ii;\n                                        }\n                                    }\n                                    if (inside) {\n                                        return {\n                                            seriesIndex: i,\n                                            pointIndex: null,\n                                            gridData: s.gridData,\n                                            data: s.data,\n                                            points: s._areaPoints\n                                        };\n                                    }\n                                    break;\n\n                                }\n\n                                else {\n                                    t = s.markerRenderer.size / 2 + s.neighborThreshold;\n                                    threshold = (t > 0) ? t : 0;\n                                    for (var j = 0; j < s.gridData.length; j++) {\n                                        p = s.gridData[j];\n                                        // neighbor looks different to OHLC chart.\n                                        if (r.constructor == $.jqplot.OHLCRenderer) {\n                                            if (r.candleStick) {\n                                                var yp = s._yaxis.series_u2p;\n                                                if (x >= p[0] - r._bodyWidth / 2 && x <= p[0] + r._bodyWidth / 2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                    return {\n                                                        seriesIndex: i,\n                                                        pointIndex: j,\n                                                        gridData: p,\n                                                        data: s.data[j]\n                                                    };\n                                                }\n                                            }\n                                            // if an open hi low close chart\n                                            else if (!r.hlc) {\n                                                var yp = s._yaxis.series_u2p;\n                                                if (x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                    return {\n                                                        seriesIndex: i,\n                                                        pointIndex: j,\n                                                        gridData: p,\n                                                        data: s.data[j]\n                                                    };\n                                                }\n                                            }\n                                            // a hi low close chart\n                                            else {\n                                                var yp = s._yaxis.series_u2p;\n                                                if (x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {\n                                                    return {\n                                                        seriesIndex: i,\n                                                        pointIndex: j,\n                                                        gridData: p,\n                                                        data: s.data[j]\n                                                    };\n                                                }\n                                            }\n\n                                        }\n                                        else if (p[0] != null && p[1] != null) {\n                                            d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]));\n                                            if (d <= threshold && (d <= d0 || d0 == null)) {\n                                                d0 = d;\n                                                return {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            break;\n\n                        default:\n                            x = gridpos.x;\n                            y = gridpos.y;\n                            r = s.renderer;\n                            if (s.show) {\n                                t = s.markerRenderer.size / 2 + s.neighborThreshold;\n                                threshold = (t > 0) ? t : 0;\n                                for (var j = 0; j < s.gridData.length; j++) {\n                                    p = s.gridData[j];\n                                    // neighbor looks different to OHLC chart.\n                                    if (r.constructor == $.jqplot.OHLCRenderer) {\n                                        if (r.candleStick) {\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0] - r._bodyWidth / 2 && x <= p[0] + r._bodyWidth / 2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                return {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                            }\n                                        }\n                                        // if an open hi low close chart\n                                        else if (!r.hlc) {\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                return {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                            }\n                                        }\n                                        // a hi low close chart\n                                        else {\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {\n                                                return {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                            }\n                                        }\n\n                                    }\n                                    else {\n                                        d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]));\n                                        if (d <= threshold && (d <= d0 || d0 == null)) {\n                                            d0 = d;\n                                            return {seriesIndex: i, pointIndex: j, gridData: p, data: s.data[j]};\n                                        }\n                                    }\n                                }\n                            }\n                            break;\n                    }\n                }\n\n                return null;\n            }\n\n\n            this.onClick = function (ev) {\n                // Event passed in is normalized and will have data attribute.\n                // Event passed out is unnormalized.\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var neighbor = checkIntersection(positions.gridPos, p);\n                var evt = $.Event('jqplotClick');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n            };\n\n            this.onDblClick = function (ev) {\n                // Event passed in is normalized and will have data attribute.\n                // Event passed out is unnormalized.\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var neighbor = checkIntersection(positions.gridPos, p);\n                var evt = $.Event('jqplotDblClick');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n            };\n\n            this.onMouseDown = function (ev) {\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var neighbor = checkIntersection(positions.gridPos, p);\n                var evt = $.Event('jqplotMouseDown');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n            };\n\n            this.onMouseUp = function (ev) {\n                var positions = getEventPosition(ev);\n                var evt = $.Event('jqplotMouseUp');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, ev.data.plot]);\n            };\n\n            this.onRightClick = function (ev) {\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var neighbor = checkIntersection(positions.gridPos, p);\n                if (p.captureRightClick) {\n                    if (ev.which == 3) {\n                        var evt = $.Event('jqplotRightClick');\n                        evt.pageX = ev.pageX;\n                        evt.pageY = ev.pageY;\n                        $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n                    }\n                    else {\n                        var evt = $.Event('jqplotMouseUp');\n                        evt.pageX = ev.pageX;\n                        evt.pageY = ev.pageY;\n                        $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n                    }\n                }\n            };\n\n            this.onMouseMove = function (ev) {\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var neighbor = checkIntersection(positions.gridPos, p);\n                var evt = $.Event('jqplotMouseMove');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n            };\n\n            this.onMouseEnter = function (ev) {\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var evt = $.Event('jqplotMouseEnter');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                evt.relatedTarget = ev.relatedTarget;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);\n            };\n\n            this.onMouseLeave = function (ev) {\n                var positions = getEventPosition(ev);\n                var p = ev.data.plot;\n                var evt = $.Event('jqplotMouseLeave');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                evt.relatedTarget = ev.relatedTarget;\n                $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);\n            };\n\n            // method: drawSeries\n            // Redraws all or just one series on the plot.  No axis scaling\n            // is performed and no other elements on the plot are redrawn.\n            // options is an options object to pass on to the series renderers.\n            // It can be an empty object {}.  idx is the series index\n            // to redraw if only one series is to be redrawn.\n            this.drawSeries = function (options, idx) {\n                var i, series, ctx;\n                // if only one argument passed in and it is a number, use it ad idx.\n                idx = (typeof(options) === \"number\" && idx == null) ? options : idx;\n                options = (typeof(options) === \"object\") ? options : {};\n                // draw specified series\n                if (idx != undefined) {\n                    series = this.series[idx];\n                    ctx = series.shadowCanvas._ctx;\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                    series.drawShadow(ctx, options, this);\n                    ctx = series.canvas._ctx;\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                    series.draw(ctx, options, this);\n                    if (series.renderer.constructor == $.jqplot.BezierCurveRenderer) {\n                        if (idx < this.series.length - 1) {\n                            this.drawSeries(idx + 1);\n                        }\n                    }\n                }\n\n                else {\n                    // if call series drawShadow method first, in case all series shadows\n                    // should be drawn before any series.  This will ensure, like for\n                    // stacked bar plots, that shadows don't overlap series.\n                    for (i = 0; i < this.series.length; i++) {\n                        // first clear the canvas\n                        series = this.series[i];\n                        ctx = series.shadowCanvas._ctx;\n                        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                        series.drawShadow(ctx, options, this);\n                        ctx = series.canvas._ctx;\n                        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                        series.draw(ctx, options, this);\n                    }\n                }\n                options = idx = i = series = ctx = null;\n            };\n\n            // method: moveSeriesToFront\n            // This method requires jQuery 1.4+\n            // Moves the specified series canvas in front of all other series canvases.\n            // This effectively \"draws\" the specified series on top of all other series,\n            // although it is performed through DOM manipulation, no redrawing is performed.\n            //\n            // Parameters:\n            // idx - 0 based index of the series to move.  This will be the index of the series\n            // as it was first passed into the jqplot function.\n            this.moveSeriesToFront = function (idx) {\n                idx = parseInt(idx, 10);\n                var stackIndex = $.inArray(idx, this.seriesStack);\n                // if already in front, return\n                if (stackIndex == -1) {\n                    return;\n                }\n                if (stackIndex == this.seriesStack.length - 1) {\n                    this.previousSeriesStack = this.seriesStack.slice(0);\n                    return;\n                }\n                var opidx = this.seriesStack[this.seriesStack.length - 1];\n                var serelem = this.series[idx].canvas._elem.detach();\n                var shadelem = this.series[idx].shadowCanvas._elem.detach();\n                this.series[opidx].shadowCanvas._elem.after(shadelem);\n                this.series[opidx].canvas._elem.after(serelem);\n                this.previousSeriesStack = this.seriesStack.slice(0);\n                this.seriesStack.splice(stackIndex, 1);\n                this.seriesStack.push(idx);\n            };\n\n            // method: moveSeriesToBack\n            // This method requires jQuery 1.4+\n            // Moves the specified series canvas behind all other series canvases.\n            //\n            // Parameters:\n            // idx - 0 based index of the series to move.  This will be the index of the series\n            // as it was first passed into the jqplot function.\n            this.moveSeriesToBack = function (idx) {\n                idx = parseInt(idx, 10);\n                var stackIndex = $.inArray(idx, this.seriesStack);\n                // if already in back, return\n                if (stackIndex == 0 || stackIndex == -1) {\n                    return;\n                }\n                var opidx = this.seriesStack[0];\n                var serelem = this.series[idx].canvas._elem.detach();\n                var shadelem = this.series[idx].shadowCanvas._elem.detach();\n                this.series[opidx].shadowCanvas._elem.before(shadelem);\n                this.series[opidx].canvas._elem.before(serelem);\n                this.previousSeriesStack = this.seriesStack.slice(0);\n                this.seriesStack.splice(stackIndex, 1);\n                this.seriesStack.unshift(idx);\n            };\n\n            // method: restorePreviousSeriesOrder\n            // This method requires jQuery 1.4+\n            // Restore the series canvas order to its previous state.\n            // Useful to put a series back where it belongs after moving\n            // it to the front.\n            this.restorePreviousSeriesOrder = function () {\n                var i, j, serelem, shadelem, temp, move, keep;\n                // if no change, return.\n                if (this.seriesStack == this.previousSeriesStack) {\n                    return;\n                }\n                for (i = 1; i < this.previousSeriesStack.length; i++) {\n                    move = this.previousSeriesStack[i];\n                    keep = this.previousSeriesStack[i - 1];\n                    serelem = this.series[move].canvas._elem.detach();\n                    shadelem = this.series[move].shadowCanvas._elem.detach();\n                    this.series[keep].shadowCanvas._elem.after(shadelem);\n                    this.series[keep].canvas._elem.after(serelem);\n                }\n                temp = this.seriesStack.slice(0);\n                this.seriesStack = this.previousSeriesStack.slice(0);\n                this.previousSeriesStack = temp;\n            };\n\n            // method: restoreOriginalSeriesOrder\n            // This method requires jQuery 1.4+\n            // Restore the series canvas order to its original order\n            // when the plot was created.\n            this.restoreOriginalSeriesOrder = function () {\n                var i, j, arr = [], serelem, shadelem;\n                for (i = 0; i < this.series.length; i++) {\n                    arr.push(i);\n                }\n                if (this.seriesStack == arr) {\n                    return;\n                }\n                this.previousSeriesStack = this.seriesStack.slice(0);\n                this.seriesStack = arr;\n                for (i = 1; i < this.seriesStack.length; i++) {\n                    serelem = this.series[i].canvas._elem.detach();\n                    shadelem = this.series[i].shadowCanvas._elem.detach();\n                    this.series[i - 1].shadowCanvas._elem.after(shadelem);\n                    this.series[i - 1].canvas._elem.after(serelem);\n                }\n            };\n\n            this.activateTheme = function (name) {\n                this.themeEngine.activate(this, name);\n            };\n        }\n\n\n        // conpute a highlight color or array of highlight colors from given colors.\n        $.jqplot.computeHighlightColors = function (colors) {\n            var ret;\n            if ($.isArray(colors)) {\n                ret = [];\n                for (var i = 0; i < colors.length; i++) {\n                    var rgba = $.jqplot.getColorComponents(colors[i]);\n                    var newrgb = [rgba[0], rgba[1], rgba[2]];\n                    var sum = newrgb[0] + newrgb[1] + newrgb[2];\n                    for (var j = 0; j < 3; j++) {\n                        // when darkening, lowest color component can be is 60.\n                        newrgb[j] = (sum > 660) ? newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;\n                        newrgb[j] = parseInt(newrgb[j], 10);\n                        (newrgb[j] > 255) ? 255 : newrgb[j];\n                    }\n                    // newrgb[3] = (rgba[3] > 0.4) ? rgba[3] * 0.4 : rgba[3] * 1.5;\n                    // newrgb[3] = (rgba[3] > 0.5) ? 0.8 * rgba[3] - .1 : rgba[3] + 0.2;\n                    newrgb[3] = 0.3 + 0.35 * rgba[3];\n                    ret.push('rgba(' + newrgb[0] + ',' + newrgb[1] + ',' + newrgb[2] + ',' + newrgb[3] + ')');\n                }\n            }\n            else {\n                var rgba = $.jqplot.getColorComponents(colors);\n                var newrgb = [rgba[0], rgba[1], rgba[2]];\n                var sum = newrgb[0] + newrgb[1] + newrgb[2];\n                for (var j = 0; j < 3; j++) {\n                    // when darkening, lowest color component can be is 60.\n                    // newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);\n                    // newrgb[j] = parseInt(newrgb[j], 10);\n                    newrgb[j] = (sum > 660) ? newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;\n                    newrgb[j] = parseInt(newrgb[j], 10);\n                    (newrgb[j] > 255) ? 255 : newrgb[j];\n                }\n                // newrgb[3] = (rgba[3] > 0.4) ? rgba[3] * 0.4 : rgba[3] * 1.5;\n                // newrgb[3] = (rgba[3] > 0.5) ? 0.8 * rgba[3] - .1 : rgba[3] + 0.2;\n                newrgb[3] = 0.3 + 0.35 * rgba[3];\n                ret = 'rgba(' + newrgb[0] + ',' + newrgb[1] + ',' + newrgb[2] + ',' + newrgb[3] + ')';\n            }\n            return ret;\n        };\n\n        $.jqplot.ColorGenerator = function (colors) {\n            colors = colors || $.jqplot.config.defaultColors;\n            var idx = 0;\n\n            this.next = function () {\n                if (idx < colors.length) {\n                    return colors[idx++];\n                }\n                else {\n                    idx = 0;\n                    return colors[idx++];\n                }\n            };\n\n            this.previous = function () {\n                if (idx > 0) {\n                    return colors[idx--];\n                }\n                else {\n                    idx = colors.length - 1;\n                    return colors[idx];\n                }\n            };\n\n            // get a color by index without advancing pointer.\n            this.get = function (i) {\n                var idx = i - colors.length * Math.floor(i / colors.length);\n                return colors[idx];\n            };\n\n            this.setColors = function (c) {\n                colors = c;\n            };\n\n            this.reset = function () {\n                idx = 0;\n            };\n\n            this.getIndex = function () {\n                return idx;\n            };\n\n            this.setIndex = function (index) {\n                idx = index;\n            };\n        };\n\n        // convert a hex color string to rgb string.\n        // h - 3 or 6 character hex string, with or without leading #\n        // a - optional alpha\n        $.jqplot.hex2rgb = function (h, a) {\n            h = h.replace('#', '');\n            if (h.length == 3) {\n                h = h.charAt(0) + h.charAt(0) + h.charAt(1) + h.charAt(1) + h.charAt(2) + h.charAt(2);\n            }\n            var rgb;\n            rgb = 'rgba(' + parseInt(h.slice(0, 2), 16) + ', ' + parseInt(h.slice(2, 4), 16) + ', ' + parseInt(h.slice(4, 6), 16);\n            if (a) {\n                rgb += ', ' + a;\n            }\n            rgb += ')';\n            return rgb;\n        };\n\n        // convert an rgb color spec to a hex spec.  ignore any alpha specification.\n        $.jqplot.rgb2hex = function (s) {\n            var pat = /rgba?\\( *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *(?:, *[0-9.]*)?\\)/;\n            var m = s.match(pat);\n            var h = '#';\n            for (var i = 1; i < 4; i++) {\n                var temp;\n                if (m[i].search(/%/) != -1) {\n                    temp = parseInt(255 * m[i] / 100, 10).toString(16);\n                    if (temp.length == 1) {\n                        temp = '0' + temp;\n                    }\n                }\n                else {\n                    temp = parseInt(m[i], 10).toString(16);\n                    if (temp.length == 1) {\n                        temp = '0' + temp;\n                    }\n                }\n                h += temp;\n            }\n            return h;\n        };\n\n        // given a css color spec, return an rgb css color spec\n        $.jqplot.normalize2rgb = function (s, a) {\n            if (s.search(/^ *rgba?\\(/) != -1) {\n                return s;\n            }\n            else if (s.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/) != -1) {\n                return $.jqplot.hex2rgb(s, a);\n            }\n            else {\n                throw new Error('Invalid color spec');\n            }\n        };\n\n        // extract the r, g, b, a color components out of a css color spec.\n        $.jqplot.getColorComponents = function (s) {\n            // check to see if a color keyword.\n            s = $.jqplot.colorKeywordMap[s] || s;\n            var rgb = $.jqplot.normalize2rgb(s);\n            var pat = /rgba?\\( *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *,? *([0-9.]* *)?\\)/;\n            var m = rgb.match(pat);\n            var ret = [];\n            for (var i = 1; i < 4; i++) {\n                if (m[i].search(/%/) != -1) {\n                    ret[i - 1] = parseInt(255 * m[i] / 100, 10);\n                }\n                else {\n                    ret[i - 1] = parseInt(m[i], 10);\n                }\n            }\n            ret[3] = parseFloat(m[4]) ? parseFloat(m[4]) : 1.0;\n            return ret;\n        };\n\n        $.jqplot.colorKeywordMap = {\n            aliceblue: 'rgb(240, 248, 255)',\n            antiquewhite: 'rgb(250, 235, 215)',\n            aqua: 'rgb( 0, 255, 255)',\n            aquamarine: 'rgb(127, 255, 212)',\n            azure: 'rgb(240, 255, 255)',\n            beige: 'rgb(245, 245, 220)',\n            bisque: 'rgb(255, 228, 196)',\n            black: 'rgb( 0, 0, 0)',\n            blanchedalmond: 'rgb(255, 235, 205)',\n            blue: 'rgb( 0, 0, 255)',\n            blueviolet: 'rgb(138, 43, 226)',\n            brown: 'rgb(165, 42, 42)',\n            burlywood: 'rgb(222, 184, 135)',\n            cadetblue: 'rgb( 95, 158, 160)',\n            chartreuse: 'rgb(127, 255, 0)',\n            chocolate: 'rgb(210, 105, 30)',\n            coral: 'rgb(255, 127, 80)',\n            cornflowerblue: 'rgb(100, 149, 237)',\n            cornsilk: 'rgb(255, 248, 220)',\n            crimson: 'rgb(220, 20, 60)',\n            cyan: 'rgb( 0, 255, 255)',\n            darkblue: 'rgb( 0, 0, 139)',\n            darkcyan: 'rgb( 0, 139, 139)',\n            darkgoldenrod: 'rgb(184, 134, 11)',\n            darkgray: 'rgb(169, 169, 169)',\n            darkgreen: 'rgb( 0, 100, 0)',\n            darkgrey: 'rgb(169, 169, 169)',\n            darkkhaki: 'rgb(189, 183, 107)',\n            darkmagenta: 'rgb(139, 0, 139)',\n            darkolivegreen: 'rgb( 85, 107, 47)',\n            darkorange: 'rgb(255, 140, 0)',\n            darkorchid: 'rgb(153, 50, 204)',\n            darkred: 'rgb(139, 0, 0)',\n            darksalmon: 'rgb(233, 150, 122)',\n            darkseagreen: 'rgb(143, 188, 143)',\n            darkslateblue: 'rgb( 72, 61, 139)',\n            darkslategray: 'rgb( 47, 79, 79)',\n            darkslategrey: 'rgb( 47, 79, 79)',\n            darkturquoise: 'rgb( 0, 206, 209)',\n            darkviolet: 'rgb(148, 0, 211)',\n            deeppink: 'rgb(255, 20, 147)',\n            deepskyblue: 'rgb( 0, 191, 255)',\n            dimgray: 'rgb(105, 105, 105)',\n            dimgrey: 'rgb(105, 105, 105)',\n            dodgerblue: 'rgb( 30, 144, 255)',\n            firebrick: 'rgb(178, 34, 34)',\n            floralwhite: 'rgb(255, 250, 240)',\n            forestgreen: 'rgb( 34, 139, 34)',\n            fuchsia: 'rgb(255, 0, 255)',\n            gainsboro: 'rgb(220, 220, 220)',\n            ghostwhite: 'rgb(248, 248, 255)',\n            gold: 'rgb(255, 215, 0)',\n            goldenrod: 'rgb(218, 165, 32)',\n            gray: 'rgb(128, 128, 128)',\n            grey: 'rgb(128, 128, 128)',\n            green: 'rgb( 0, 128, 0)',\n            greenyellow: 'rgb(173, 255, 47)',\n            honeydew: 'rgb(240, 255, 240)',\n            hotpink: 'rgb(255, 105, 180)',\n            indianred: 'rgb(205, 92, 92)',\n            indigo: 'rgb( 75, 0, 130)',\n            ivory: 'rgb(255, 255, 240)',\n            khaki: 'rgb(240, 230, 140)',\n            lavender: 'rgb(230, 230, 250)',\n            lavenderblush: 'rgb(255, 240, 245)',\n            lawngreen: 'rgb(124, 252, 0)',\n            lemonchiffon: 'rgb(255, 250, 205)',\n            lightblue: 'rgb(173, 216, 230)',\n            lightcoral: 'rgb(240, 128, 128)',\n            lightcyan: 'rgb(224, 255, 255)',\n            lightgoldenrodyellow: 'rgb(250, 250, 210)',\n            lightgray: 'rgb(211, 211, 211)',\n            lightgreen: 'rgb(144, 238, 144)',\n            lightgrey: 'rgb(211, 211, 211)',\n            lightpink: 'rgb(255, 182, 193)',\n            lightsalmon: 'rgb(255, 160, 122)',\n            lightseagreen: 'rgb( 32, 178, 170)',\n            lightskyblue: 'rgb(135, 206, 250)',\n            lightslategray: 'rgb(119, 136, 153)',\n            lightslategrey: 'rgb(119, 136, 153)',\n            lightsteelblue: 'rgb(176, 196, 222)',\n            lightyellow: 'rgb(255, 255, 224)',\n            lime: 'rgb( 0, 255, 0)',\n            limegreen: 'rgb( 50, 205, 50)',\n            linen: 'rgb(250, 240, 230)',\n            magenta: 'rgb(255, 0, 255)',\n            maroon: 'rgb(128, 0, 0)',\n            mediumaquamarine: 'rgb(102, 205, 170)',\n            mediumblue: 'rgb( 0, 0, 205)',\n            mediumorchid: 'rgb(186, 85, 211)',\n            mediumpurple: 'rgb(147, 112, 219)',\n            mediumseagreen: 'rgb( 60, 179, 113)',\n            mediumslateblue: 'rgb(123, 104, 238)',\n            mediumspringgreen: 'rgb( 0, 250, 154)',\n            mediumturquoise: 'rgb( 72, 209, 204)',\n            mediumvioletred: 'rgb(199, 21, 133)',\n            midnightblue: 'rgb( 25, 25, 112)',\n            mintcream: 'rgb(245, 255, 250)',\n            mistyrose: 'rgb(255, 228, 225)',\n            moccasin: 'rgb(255, 228, 181)',\n            navajowhite: 'rgb(255, 222, 173)',\n            navy: 'rgb( 0, 0, 128)',\n            oldlace: 'rgb(253, 245, 230)',\n            olive: 'rgb(128, 128, 0)',\n            olivedrab: 'rgb(107, 142, 35)',\n            orange: 'rgb(255, 165, 0)',\n            orangered: 'rgb(255, 69, 0)',\n            orchid: 'rgb(218, 112, 214)',\n            palegoldenrod: 'rgb(238, 232, 170)',\n            palegreen: 'rgb(152, 251, 152)',\n            paleturquoise: 'rgb(175, 238, 238)',\n            palevioletred: 'rgb(219, 112, 147)',\n            papayawhip: 'rgb(255, 239, 213)',\n            peachpuff: 'rgb(255, 218, 185)',\n            peru: 'rgb(205, 133, 63)',\n            pink: 'rgb(255, 192, 203)',\n            plum: 'rgb(221, 160, 221)',\n            powderblue: 'rgb(176, 224, 230)',\n            purple: 'rgb(128, 0, 128)',\n            red: 'rgb(255, 0, 0)',\n            rosybrown: 'rgb(188, 143, 143)',\n            royalblue: 'rgb( 65, 105, 225)',\n            saddlebrown: 'rgb(139, 69, 19)',\n            salmon: 'rgb(250, 128, 114)',\n            sandybrown: 'rgb(244, 164, 96)',\n            seagreen: 'rgb( 46, 139, 87)',\n            seashell: 'rgb(255, 245, 238)',\n            sienna: 'rgb(160, 82, 45)',\n            silver: 'rgb(192, 192, 192)',\n            skyblue: 'rgb(135, 206, 235)',\n            slateblue: 'rgb(106, 90, 205)',\n            slategray: 'rgb(112, 128, 144)',\n            slategrey: 'rgb(112, 128, 144)',\n            snow: 'rgb(255, 250, 250)',\n            springgreen: 'rgb( 0, 255, 127)',\n            steelblue: 'rgb( 70, 130, 180)',\n            tan: 'rgb(210, 180, 140)',\n            teal: 'rgb( 0, 128, 128)',\n            thistle: 'rgb(216, 191, 216)',\n            tomato: 'rgb(255, 99, 71)',\n            turquoise: 'rgb( 64, 224, 208)',\n            violet: 'rgb(238, 130, 238)',\n            wheat: 'rgb(245, 222, 179)',\n            white: 'rgb(255, 255, 255)',\n            whitesmoke: 'rgb(245, 245, 245)',\n            yellow: 'rgb(255, 255, 0)',\n            yellowgreen: 'rgb(154, 205, 50)'\n        };\n\n\n        // class: $.jqplot.AxisLabelRenderer\n        // Renderer to place labels on the axes.\n        $.jqplot.AxisLabelRenderer = function (options) {\n            // Group: Properties\n            $.jqplot.ElemContainer.call(this);\n            // name of the axis associated with this tick\n            this.axis;\n            // prop: show\n            // whether or not to show the tick (mark and label).\n            this.show = true;\n            // prop: label\n            // The text or html for the label.\n            this.label = '';\n            this.fontFamily = null;\n            this.fontSize = null;\n            this.textColor = null;\n            this._elem;\n            // prop: escapeHTML\n            // true to escape HTML entities in the label.\n            this.escapeHTML = false;\n\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.AxisLabelRenderer.prototype = new $.jqplot.ElemContainer();\n        $.jqplot.AxisLabelRenderer.prototype.constructor = $.jqplot.AxisLabelRenderer;\n\n        $.jqplot.AxisLabelRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.AxisLabelRenderer.prototype.draw = function (ctx, plot) {\n            // Memory Leaks patch\n            if (this._elem) {\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n\n            this._elem = $('<div style=\"position:absolute;\" class=\"jqplot-' + this.axis + '-label\"></div>');\n\n            if (Number(this.label)) {\n                this._elem.css('white-space', 'nowrap');\n            }\n\n            if (!this.escapeHTML) {\n                this._elem.html(this.label);\n            }\n            else {\n                this._elem.text(this.label);\n            }\n            if (this.fontFamily) {\n                this._elem.css('font-family', this.fontFamily);\n            }\n            if (this.fontSize) {\n                this._elem.css('font-size', this.fontSize);\n            }\n            if (this.textColor) {\n                this._elem.css('color', this.textColor);\n            }\n\n            return this._elem;\n        };\n\n        $.jqplot.AxisLabelRenderer.prototype.pack = function () {\n        };\n\n        // class: $.jqplot.AxisTickRenderer\n        // A \"tick\" object showing the value of a tick/gridline on the plot.\n        $.jqplot.AxisTickRenderer = function (options) {\n            // Group: Properties\n            $.jqplot.ElemContainer.call(this);\n            // prop: mark\n            // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.\n            this.mark = 'outside';\n            // name of the axis associated with this tick\n            this.axis;\n            // prop: showMark\n            // whether or not to show the mark on the axis.\n            this.showMark = true;\n            // prop: showGridline\n            // whether or not to draw the gridline on the grid at this tick.\n            this.showGridline = true;\n            // prop: isMinorTick\n            // if this is a minor tick.\n            this.isMinorTick = false;\n            // prop: size\n            // Length of the tick beyond the grid in pixels.\n            // DEPRECATED: This has been superceeded by markSize\n            this.size = 4;\n            // prop:  markSize\n            // Length of the tick marks in pixels.  For 'cross' style, length\n            // will be stoked above and below axis, so total length will be twice this.\n            this.markSize = 6;\n            // prop: show\n            // whether or not to show the tick (mark and label).\n            // Setting this to false requires more testing.  It is recommended\n            // to set showLabel and showMark to false instead.\n            this.show = true;\n            // prop: showLabel\n            // whether or not to show the label.\n            this.showLabel = true;\n            this.label = null;\n            this.value = null;\n            this._styles = {};\n            // prop: formatter\n            // A class of a formatter for the tick text.  sprintf by default.\n            this.formatter = $.jqplot.DefaultTickFormatter;\n            // prop: prefix\n            // String to prepend to the tick label.\n            // Prefix is prepended to the formatted tick label.\n            this.prefix = '';\n            // prop: suffix\n            // String to append to the tick label.\n            // Suffix is appended to the formatted tick label.\n            this.suffix = '';\n            // prop: formatString\n            // string passed to the formatter.\n            this.formatString = '';\n            // prop: fontFamily\n            // css spec for the font-family css attribute.\n            this.fontFamily;\n            // prop: fontSize\n            // css spec for the font-size css attribute.\n            this.fontSize;\n            // prop: textColor\n            // css spec for the color attribute.\n            this.textColor;\n            // prop: escapeHTML\n            // true to escape HTML entities in the label.\n            this.escapeHTML = false;\n            this._elem;\n            this._breakTick = false;\n\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.AxisTickRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.AxisTickRenderer.prototype = new $.jqplot.ElemContainer();\n        $.jqplot.AxisTickRenderer.prototype.constructor = $.jqplot.AxisTickRenderer;\n\n        $.jqplot.AxisTickRenderer.prototype.setTick = function (value, axisName, isMinor) {\n            this.value = value;\n            this.axis = axisName;\n            if (isMinor) {\n                this.isMinorTick = true;\n            }\n            return this;\n        };\n\n        $.jqplot.AxisTickRenderer.prototype.draw = function () {\n            if (this.label === null) {\n                this.label = this.prefix + this.formatter(this.formatString, this.value) + this.suffix;\n            }\n            var style = {position: 'absolute'};\n            if (Number(this.label)) {\n                style['whitSpace'] = 'nowrap';\n            }\n\n            // Memory Leaks patch\n            if (this._elem) {\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n\n            this._elem = $(document.createElement('div'));\n            this._elem.addClass(\"jqplot-\" + this.axis + \"-tick\");\n\n            if (!this.escapeHTML) {\n                this._elem.html(this.label);\n            }\n            else {\n                this._elem.text(this.label);\n            }\n\n            this._elem.css(style);\n\n            for (var s in this._styles) {\n                this._elem.css(s, this._styles[s]);\n            }\n            if (this.fontFamily) {\n                this._elem.css('font-family', this.fontFamily);\n            }\n            if (this.fontSize) {\n                this._elem.css('font-size', this.fontSize);\n            }\n            if (this.textColor) {\n                this._elem.css('color', this.textColor);\n            }\n            if (this._breakTick) {\n                this._elem.addClass('jqplot-breakTick');\n            }\n\n            return this._elem;\n        };\n\n        $.jqplot.DefaultTickFormatter = function (format, val) {\n            if (typeof val == 'number') {\n                if (!format) {\n                    format = $.jqplot.config.defaultTickFormatString;\n                }\n                return $.jqplot.sprintf(format, val);\n            }\n            else {\n                return String(val);\n            }\n        };\n\n        $.jqplot.PercentTickFormatter = function (format, val) {\n            if (typeof val == 'number') {\n                val = 100 * val;\n                if (!format) {\n                    format = $.jqplot.config.defaultTickFormatString;\n                }\n                return $.jqplot.sprintf(format, val);\n            }\n            else {\n                return String(val);\n            }\n        };\n\n        $.jqplot.AxisTickRenderer.prototype.pack = function () {\n        };\n\n        // Class: $.jqplot.CanvasGridRenderer\n        // The default jqPlot grid renderer, creating a grid on a canvas element.\n        // The renderer has no additional options beyond the <Grid> class.\n        $.jqplot.CanvasGridRenderer = function () {\n            this.shadowRenderer = new $.jqplot.ShadowRenderer();\n        };\n\n        // called with context of Grid object\n        $.jqplot.CanvasGridRenderer.prototype.init = function (options) {\n            this._ctx;\n            $.extend(true, this, options);\n            // set the shadow renderer options\n            var sopts = {\n                lineJoin: 'miter',\n                lineCap: 'round',\n                fill: false,\n                isarc: false,\n                angle: this.shadowAngle,\n                offset: this.shadowOffset,\n                alpha: this.shadowAlpha,\n                depth: this.shadowDepth,\n                lineWidth: this.shadowWidth,\n                closePath: false,\n                strokeStyle: this.shadowColor\n            };\n            this.renderer.shadowRenderer.init(sopts);\n        };\n\n        // called with context of Grid.\n        $.jqplot.CanvasGridRenderer.prototype.createElement = function (plot) {\n            var elem;\n            // Memory Leaks patch\n            if (this._elem) {\n                if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                    elem = this._elem.get(0);\n                    window.G_vmlCanvasManager.uninitElement(elem);\n                    elem = null;\n                }\n\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n\n            elem = plot.canvasManager.getCanvas();\n\n            var w = this._plotDimensions.width;\n            var h = this._plotDimensions.height;\n            elem.width = w;\n            elem.height = h;\n            this._elem = $(elem);\n            this._elem.addClass('jqplot-grid-canvas');\n            this._elem.css({position: 'absolute', left: 0, top: 0});\n\n            elem = plot.canvasManager.initCanvas(elem);\n\n            this._top = this._offsets.top;\n            this._bottom = h - this._offsets.bottom;\n            this._left = this._offsets.left;\n            this._right = w - this._offsets.right;\n            this._width = this._right - this._left;\n            this._height = this._bottom - this._top;\n            // avoid memory leak\n            elem = null;\n            return this._elem;\n        };\n\n        $.jqplot.CanvasGridRenderer.prototype.draw = function () {\n            this._ctx = this._elem.get(0).getContext(\"2d\");\n            var ctx = this._ctx;\n            var axes = this._axes;\n            // Add the grid onto the grid canvas.  This is the bottom most layer.\n            ctx.save();\n            ctx.clearRect(0, 0, this._plotDimensions.width, this._plotDimensions.height);\n            ctx.fillStyle = this.backgroundColor || this.background;\n            ctx.fillRect(this._left, this._top, this._width, this._height);\n\n            ctx.save();\n            ctx.lineJoin = 'miter';\n            ctx.lineCap = 'butt';\n            ctx.lineWidth = this.gridLineWidth;\n            ctx.strokeStyle = this.gridLineColor;\n            var b, e, s, m;\n            var ax = ['xaxis', 'yaxis', 'x2axis', 'y2axis'];\n            for (var i = 4; i > 0; i--) {\n                var name = ax[i - 1];\n                var axis = axes[name];\n                var ticks = axis._ticks;\n                var numticks = ticks.length;\n                if (axis.show) {\n                    if (axis.drawBaseline) {\n                        var bopts = {};\n                        if (axis.baselineWidth !== null) {\n                            bopts.lineWidth = axis.baselineWidth;\n                        }\n                        if (axis.baselineColor !== null) {\n                            bopts.strokeStyle = axis.baselineColor;\n                        }\n                        switch (name) {\n                            case 'xaxis':\n                                drawLine(this._left, this._bottom, this._right, this._bottom, bopts);\n                                break;\n                            case 'yaxis':\n                                drawLine(this._left, this._bottom, this._left, this._top, bopts);\n                                break;\n                            case 'x2axis':\n                                drawLine(this._left, this._bottom, this._right, this._bottom, bopts);\n                                break;\n                            case 'y2axis':\n                                drawLine(this._right, this._bottom, this._right, this._top, bopts);\n                                break;\n                        }\n                    }\n                    for (var j = numticks; j > 0; j--) {\n                        var t = ticks[j - 1];\n                        if (t.show) {\n                            var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                            switch (name) {\n                                case 'xaxis':\n                                    // draw the grid line if we should\n                                    if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines))) {\n                                        drawLine(pos, this._top, pos, this._bottom);\n                                    }\n                                    // draw the mark\n                                    if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks))) {\n                                        s = t.markSize;\n                                        m = t.mark;\n                                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                        switch (m) {\n                                            case 'outside':\n                                                b = this._bottom;\n                                                e = this._bottom + s;\n                                                break;\n                                            case 'inside':\n                                                b = this._bottom - s;\n                                                e = this._bottom;\n                                                break;\n                                            case 'cross':\n                                                b = this._bottom - s;\n                                                e = this._bottom + s;\n                                                break;\n                                            default:\n                                                b = this._bottom;\n                                                e = this._bottom + s;\n                                                break;\n                                        }\n                                        // draw the shadow\n                                        if (this.shadow) {\n                                            this.renderer.shadowRenderer.draw(ctx, [[pos, b], [pos, e]], {\n                                                lineCap: 'butt',\n                                                lineWidth: this.gridLineWidth,\n                                                offset: this.gridLineWidth * 0.75,\n                                                depth: 2,\n                                                fill: false,\n                                                closePath: false\n                                            });\n                                        }\n                                        // draw the line\n                                        drawLine(pos, b, pos, e);\n                                    }\n                                    break;\n                                case 'yaxis':\n                                    // draw the grid line\n                                    if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines))) {\n                                        drawLine(this._right, pos, this._left, pos);\n                                    }\n                                    // draw the mark\n                                    if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks))) {\n                                        s = t.markSize;\n                                        m = t.mark;\n                                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                        switch (m) {\n                                            case 'outside':\n                                                b = this._left - s;\n                                                e = this._left;\n                                                break;\n                                            case 'inside':\n                                                b = this._left;\n                                                e = this._left + s;\n                                                break;\n                                            case 'cross':\n                                                b = this._left - s;\n                                                e = this._left + s;\n                                                break;\n                                            default:\n                                                b = this._left - s;\n                                                e = this._left;\n                                                break;\n                                        }\n                                        // draw the shadow\n                                        if (this.shadow) {\n                                            this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {\n                                                lineCap: 'butt',\n                                                lineWidth: this.gridLineWidth * 1.5,\n                                                offset: this.gridLineWidth * 0.75,\n                                                fill: false,\n                                                closePath: false\n                                            });\n                                        }\n                                        drawLine(b, pos, e, pos, {strokeStyle: axis.borderColor});\n                                    }\n                                    break;\n                                case 'x2axis':\n                                    // draw the grid line\n                                    if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines))) {\n                                        drawLine(pos, this._bottom, pos, this._top);\n                                    }\n                                    // draw the mark\n                                    if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks))) {\n                                        s = t.markSize;\n                                        m = t.mark;\n                                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                        switch (m) {\n                                            case 'outside':\n                                                b = this._top - s;\n                                                e = this._top;\n                                                break;\n                                            case 'inside':\n                                                b = this._top;\n                                                e = this._top + s;\n                                                break;\n                                            case 'cross':\n                                                b = this._top - s;\n                                                e = this._top + s;\n                                                break;\n                                            default:\n                                                b = this._top - s;\n                                                e = this._top;\n                                                break;\n                                        }\n                                        // draw the shadow\n                                        if (this.shadow) {\n                                            this.renderer.shadowRenderer.draw(ctx, [[pos, b], [pos, e]], {\n                                                lineCap: 'butt',\n                                                lineWidth: this.gridLineWidth,\n                                                offset: this.gridLineWidth * 0.75,\n                                                depth: 2,\n                                                fill: false,\n                                                closePath: false\n                                            });\n                                        }\n                                        drawLine(pos, b, pos, e);\n                                    }\n                                    break;\n                                case 'y2axis':\n                                    // draw the grid line\n                                    if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines))) {\n                                        drawLine(this._left, pos, this._right, pos);\n                                    }\n                                    // draw the mark\n                                    if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks))) {\n                                        s = t.markSize;\n                                        m = t.mark;\n                                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                        switch (m) {\n                                            case 'outside':\n                                                b = this._right;\n                                                e = this._right + s;\n                                                break;\n                                            case 'inside':\n                                                b = this._right - s;\n                                                e = this._right;\n                                                break;\n                                            case 'cross':\n                                                b = this._right - s;\n                                                e = this._right + s;\n                                                break;\n                                            default:\n                                                b = this._right;\n                                                e = this._right + s;\n                                                break;\n                                        }\n                                        // draw the shadow\n                                        if (this.shadow) {\n                                            this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {\n                                                lineCap: 'butt',\n                                                lineWidth: this.gridLineWidth * 1.5,\n                                                offset: this.gridLineWidth * 0.75,\n                                                fill: false,\n                                                closePath: false\n                                            });\n                                        }\n                                        drawLine(b, pos, e, pos, {strokeStyle: axis.borderColor});\n                                    }\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    }\n                    t = null;\n                }\n                axis = null;\n                ticks = null;\n            }\n            // Now draw grid lines for additional y axes\n            //////\n            // TO DO: handle yMidAxis\n            //////\n            ax = ['y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];\n            for (var i = 7; i > 0; i--) {\n                var axis = axes[ax[i - 1]];\n                var ticks = axis._ticks;\n                if (axis.show) {\n                    var tn = ticks[axis.numberTicks - 1];\n                    var t0 = ticks[0];\n                    var left = axis.getLeft();\n                    var points = [[left, tn.getTop() + tn.getHeight() / 2], [left, t0.getTop() + t0.getHeight() / 2 + 1.0]];\n                    // draw the shadow\n                    if (this.shadow) {\n                        this.renderer.shadowRenderer.draw(ctx, points, {\n                            lineCap: 'butt',\n                            fill: false,\n                            closePath: false\n                        });\n                    }\n                    // draw the line\n                    drawLine(points[0][0], points[0][1], points[1][0], points[1][1], {\n                        lineCap: 'butt',\n                        strokeStyle: axis.borderColor,\n                        lineWidth: axis.borderWidth\n                    });\n                    // draw the tick marks\n                    for (var j = ticks.length; j > 0; j--) {\n                        var t = ticks[j - 1];\n                        s = t.markSize;\n                        m = t.mark;\n                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                        if (t.showMark && t.mark) {\n                            switch (m) {\n                                case 'outside':\n                                    b = left;\n                                    e = left + s;\n                                    break;\n                                case 'inside':\n                                    b = left - s;\n                                    e = left;\n                                    break;\n                                case 'cross':\n                                    b = left - s;\n                                    e = left + s;\n                                    break;\n                                default:\n                                    b = left;\n                                    e = left + s;\n                                    break;\n                            }\n                            points = [[b, pos], [e, pos]];\n                            // draw the shadow\n                            if (this.shadow) {\n                                this.renderer.shadowRenderer.draw(ctx, points, {\n                                    lineCap: 'butt',\n                                    lineWidth: this.gridLineWidth * 1.5,\n                                    offset: this.gridLineWidth * 0.75,\n                                    fill: false,\n                                    closePath: false\n                                });\n                            }\n                            // draw the line\n                            drawLine(b, pos, e, pos, {strokeStyle: axis.borderColor});\n                        }\n                        t = null;\n                    }\n                    t0 = null;\n                }\n                axis = null;\n                ticks = null;\n            }\n\n            ctx.restore();\n\n            function drawLine(bx, by, ex, ey, opts) {\n                ctx.save();\n                opts = opts || {};\n                if (opts.lineWidth == null || opts.lineWidth != 0) {\n                    $.extend(true, ctx, opts);\n                    ctx.beginPath();\n                    ctx.moveTo(bx, by);\n                    ctx.lineTo(ex, ey);\n                    ctx.stroke();\n                    ctx.restore();\n                }\n            }\n\n            if (this.shadow) {\n                var points = [[this._left, this._bottom], [this._right, this._bottom], [this._right, this._top]];\n                this.renderer.shadowRenderer.draw(ctx, points);\n            }\n            // Now draw border around grid.  Use axis border definitions. start at\n            // upper left and go clockwise.\n            if (this.borderWidth != 0 && this.drawBorder) {\n                drawLine(this._left, this._top, this._right, this._top, {\n                    lineCap: 'round',\n                    strokeStyle: axes.x2axis.borderColor,\n                    lineWidth: axes.x2axis.borderWidth\n                });\n                drawLine(this._right, this._top, this._right, this._bottom, {\n                    lineCap: 'round',\n                    strokeStyle: axes.y2axis.borderColor,\n                    lineWidth: axes.y2axis.borderWidth\n                });\n                drawLine(this._right, this._bottom, this._left, this._bottom, {\n                    lineCap: 'round',\n                    strokeStyle: axes.xaxis.borderColor,\n                    lineWidth: axes.xaxis.borderWidth\n                });\n                drawLine(this._left, this._bottom, this._left, this._top, {\n                    lineCap: 'round',\n                    strokeStyle: axes.yaxis.borderColor,\n                    lineWidth: axes.yaxis.borderWidth\n                });\n            }\n            // ctx.lineWidth = this.borderWidth;\n            // ctx.strokeStyle = this.borderColor;\n            // ctx.strokeRect(this._left, this._top, this._width, this._height);\n\n            ctx.restore();\n            ctx = null;\n            axes = null;\n        };\n\n        // Class: $.jqplot.DivTitleRenderer\n        // The default title renderer for jqPlot.  This class has no options beyond the <Title> class.\n        $.jqplot.DivTitleRenderer = function () {\n        };\n\n        $.jqplot.DivTitleRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.DivTitleRenderer.prototype.draw = function () {\n            // Memory Leaks patch\n            if (this._elem) {\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n\n            var r = this.renderer;\n            var elem = document.createElement('div');\n            this._elem = $(elem);\n            this._elem.addClass('jqplot-title');\n\n            if (!this.text) {\n                this.show = false;\n                this._elem.height(0);\n                this._elem.width(0);\n            }\n            else if (this.text) {\n                var color;\n                if (this.color) {\n                    color = this.color;\n                }\n                else if (this.textColor) {\n                    color = this.textColor;\n                }\n\n                // don't trust that a stylesheet is present, set the position.\n                var styles = {position: 'absolute', top: '0px', left: '0px'};\n\n                if (this._plotWidth) {\n                    styles['width'] = this._plotWidth + 'px';\n                }\n                if (this.fontSize) {\n                    styles['fontSize'] = this.fontSize;\n                }\n                if (typeof this.textAlign === 'string') {\n                    styles['textAlign'] = this.textAlign;\n                }\n                else {\n                    styles['textAlign'] = 'center';\n                }\n                if (color) {\n                    styles['color'] = color;\n                }\n                if (this.paddingBottom) {\n                    styles['paddingBottom'] = this.paddingBottom;\n                }\n                if (this.fontFamily) {\n                    styles['fontFamily'] = this.fontFamily;\n                }\n\n                this._elem.css(styles);\n                if (this.escapeHtml) {\n                    this._elem.text(this.text);\n                }\n                else {\n                    this._elem.html(this.text);\n                }\n\n\n                // styletext += (this._plotWidth) ? 'width:'+this._plotWidth+'px;' : '';\n                // styletext += (this.fontSize) ? 'font-size:'+this.fontSize+';' : '';\n                // styletext += (this.textAlign) ? 'text-align:'+this.textAlign+';' : 'text-align:center;';\n                // styletext += (color) ? 'color:'+color+';' : '';\n                // styletext += (this.paddingBottom) ? 'padding-bottom:'+this.paddingBottom+';' : '';\n                // this._elem = $('<div class=\"jqplot-title\" style=\"'+styletext+'\">'+this.text+'</div>');\n                // if (this.fontFamily) {\n                //     this._elem.css('font-family', this.fontFamily);\n                // }\n            }\n\n            elem = null;\n\n            return this._elem;\n        };\n\n        $.jqplot.DivTitleRenderer.prototype.pack = function () {\n            // nothing to do here\n        };\n\n\n        var dotlen = 0.1;\n\n        $.jqplot.LinePattern = function (ctx, pattern) {\n\n            var defaultLinePatterns = {\n                dotted: [dotlen, $.jqplot.config.dotGapLength],\n                dashed: [$.jqplot.config.dashLength, $.jqplot.config.gapLength],\n                solid: null\n            };\n\n            if (typeof pattern === 'string') {\n                if (pattern[0] === '.' || pattern[0] === '-') {\n                    var s = pattern;\n                    pattern = [];\n                    for (var i = 0, imax = s.length; i < imax; i++) {\n                        if (s[i] === '.') {\n                            pattern.push(dotlen);\n                        }\n                        else if (s[i] === '-') {\n                            pattern.push($.jqplot.config.dashLength);\n                        }\n                        else {\n                            continue;\n                        }\n                        pattern.push($.jqplot.config.gapLength);\n                    }\n                }\n                else {\n                    pattern = defaultLinePatterns[pattern];\n                }\n            }\n\n            if (!(pattern && pattern.length)) {\n                return ctx;\n            }\n\n            var patternIndex = 0;\n            var patternDistance = pattern[0];\n            var px = 0;\n            var py = 0;\n            var pathx0 = 0;\n            var pathy0 = 0;\n\n            var moveTo = function (x, y) {\n                ctx.moveTo(x, y);\n                px = x;\n                py = y;\n                pathx0 = x;\n                pathy0 = y;\n            };\n\n            var lineTo = function (x, y) {\n                var scale = ctx.lineWidth;\n                var dx = x - px;\n                var dy = y - py;\n                var dist = Math.sqrt(dx * dx + dy * dy);\n                if ((dist > 0) && (scale > 0)) {\n                    dx /= dist;\n                    dy /= dist;\n                    while (true) {\n                        var dp = scale * patternDistance;\n                        if (dp < dist) {\n                            px += dp * dx;\n                            py += dp * dy;\n                            if ((patternIndex & 1) == 0) {\n                                ctx.lineTo(px, py);\n                            }\n                            else {\n                                ctx.moveTo(px, py);\n                            }\n                            dist -= dp;\n                            patternIndex++;\n                            if (patternIndex >= pattern.length) {\n                                patternIndex = 0;\n                            }\n                            patternDistance = pattern[patternIndex];\n                        }\n                        else {\n                            px = x;\n                            py = y;\n                            if ((patternIndex & 1) == 0) {\n                                ctx.lineTo(px, py);\n                            }\n                            else {\n                                ctx.moveTo(px, py);\n                            }\n                            patternDistance -= dist / scale;\n                            break;\n                        }\n                    }\n                }\n            };\n\n            var beginPath = function () {\n                ctx.beginPath();\n            };\n\n            var closePath = function () {\n                lineTo(pathx0, pathy0);\n            };\n\n            return {\n                moveTo: moveTo,\n                lineTo: lineTo,\n                beginPath: beginPath,\n                closePath: closePath\n            };\n        };\n\n        // Class: $.jqplot.LineRenderer\n        // The default line renderer for jqPlot, this class has no options beyond the <Series> class.\n        // Draws series as a line.\n        $.jqplot.LineRenderer = function () {\n            this.shapeRenderer = new $.jqplot.ShapeRenderer();\n            this.shadowRenderer = new $.jqplot.ShadowRenderer();\n        };\n\n        // called with scope of series.\n        $.jqplot.LineRenderer.prototype.init = function (options, plot) {\n            // Group: Properties\n            //\n            options = options || {};\n            this._type = 'line';\n            this.renderer.animation = {\n                show: false,\n                direction: 'left',\n                speed: 2500,\n                _supported: true\n            };\n            // prop: smooth\n            // True to draw a smoothed (interpolated) line through the data points\n            // with automatically computed number of smoothing points.\n            // Set to an integer number > 2 to specify number of smoothing points\n            // to use between each data point.\n            this.renderer.smooth = false;  // true or a number > 2 for smoothing.\n            this.renderer.tension = null; // null to auto compute or a number typically > 6.  Fewer points requires higher tension.\n            // prop: constrainSmoothing\n            // True to use a more accurate smoothing algorithm that will\n            // not overshoot any data points.  False to allow overshoot but\n            // produce a smoother looking line.\n            this.renderer.constrainSmoothing = true;\n            // this is smoothed data in grid coordinates, like gridData\n            this.renderer._smoothedData = [];\n            // this is smoothed data in plot units (plot coordinates), like plotData.\n            this.renderer._smoothedPlotData = [];\n            this.renderer._hiBandGridData = [];\n            this.renderer._lowBandGridData = [];\n            this.renderer._hiBandSmoothedData = [];\n            this.renderer._lowBandSmoothedData = [];\n\n            // prop: bandData\n            // Data used to draw error bands or confidence intervals above/below a line.\n            //\n            // bandData can be input in 3 forms.  jqPlot will figure out which is the\n            // low band line and which is the high band line for all forms:\n            //\n            // A 2 dimensional array like [[yl1, yl2, ...], [yu1, yu2, ...]] where\n            // [yl1, yl2, ...] are y values of the lower line and\n            // [yu1, yu2, ...] are y values of the upper line.\n            // In this case there must be the same number of y data points as data points\n            // in the series and the bands will inherit the x values of the series.\n            //\n            // A 2 dimensional array like [[[xl1, yl1], [xl2, yl2], ...], [[xh1, yh1], [xh2, yh2], ...]]\n            // where [xl1, yl1] are x,y data points for the lower line and\n            // [xh1, yh1] are x,y data points for the high line.\n            // x values do not have to correspond to the x values of the series and can\n            // be of any arbitrary length.\n            //\n            // Can be of form [[yl1, yu1], [yl2, yu2], [yl3, yu3], ...] where\n            // there must be 3 or more arrays and there must be the same number of arrays\n            // as there are data points in the series.  In this case,\n            // [yl1, yu1] specifies the lower and upper y values for the 1st\n            // data point and so on.  The bands will inherit the x\n            // values from the series.\n            this.renderer.bandData = [];\n\n            // Group: bands\n            // Banding around line, e.g error bands or confidence intervals.\n            this.renderer.bands = {\n                // prop: show\n                // true to show the bands.  If bandData or interval is\n                // supplied, show will be set to true by default.\n                show: false,\n                hiData: [],\n                lowData: [],\n                // prop: color\n                // color of lines at top and bottom of bands [default: series color].\n                color: this.color,\n                // prop: showLines\n                // True to show lines at top and bottom of bands [default: false].\n                showLines: false,\n                // prop: fill\n                // True to fill area between bands [default: true].\n                fill: true,\n                // prop: fillColor\n                // css color spec for filled area.  [default: series color].\n                fillColor: null,\n                _min: null,\n                _max: null,\n                // prop: interval\n                // User specified interval above and below line for bands [default: '3%''].\n                // Can be a value like 3 or a string like '3%'\n                // or an upper/lower array like [1, -2] or ['2%', '-1.5%']\n                interval: '3%'\n            };\n\n\n            var lopts = {\n                highlightMouseOver: options.highlightMouseOver,\n                highlightMouseDown: options.highlightMouseDown,\n                highlightColor: options.highlightColor\n            };\n\n            delete (options.highlightMouseOver);\n            delete (options.highlightMouseDown);\n            delete (options.highlightColor);\n\n            $.extend(true, this.renderer, options);\n\n            this.renderer.options = options;\n\n            // if we are given some band data, and bands aren't explicity set to false in options, turn them on.\n            if (this.renderer.bandData.length > 1 && (!options.bands || options.bands.show == null)) {\n                this.renderer.bands.show = true;\n            }\n\n            // if we are given an interval, and bands aren't explicity set to false in options, turn them on.\n            else if (options.bands && options.bands.show == null && options.bands.interval != null) {\n                this.renderer.bands.show = true;\n            }\n\n            // if plot is filled, turn off bands.\n            if (this.fill) {\n                this.renderer.bands.show = false;\n            }\n\n            if (this.renderer.bands.show) {\n                this.renderer.initBands.call(this, this.renderer.options, plot);\n            }\n\n\n            // smoothing is not compatible with stacked lines, disable\n            if (this._stack) {\n                this.renderer.smooth = false;\n            }\n\n            // set the shape renderer options\n            var opts = {\n                lineJoin: this.lineJoin,\n                lineCap: this.lineCap,\n                fill: this.fill,\n                isarc: false,\n                strokeStyle: this.color,\n                fillStyle: this.fillColor,\n                lineWidth: this.lineWidth,\n                linePattern: this.linePattern,\n                closePath: this.fill\n            };\n            this.renderer.shapeRenderer.init(opts);\n\n            var shadow_offset = options.shadowOffset;\n            // set the shadow renderer options\n            if (shadow_offset == null) {\n                // scale the shadowOffset to the width of the line.\n                if (this.lineWidth > 2.5) {\n                    shadow_offset = 1.25 * (1 + (Math.atan((this.lineWidth / 2.5)) / 0.785398163 - 1) * 0.6);\n                    // var shadow_offset = this.shadowOffset;\n                }\n                // for skinny lines, don't make such a big shadow.\n                else {\n                    shadow_offset = 1.25 * Math.atan((this.lineWidth / 2.5)) / 0.785398163;\n                }\n            }\n\n            var sopts = {\n                lineJoin: this.lineJoin,\n                lineCap: this.lineCap,\n                fill: this.fill,\n                isarc: false,\n                angle: this.shadowAngle,\n                offset: shadow_offset,\n                alpha: this.shadowAlpha,\n                depth: this.shadowDepth,\n                lineWidth: this.lineWidth,\n                linePattern: this.linePattern,\n                closePath: this.fill\n            };\n            this.renderer.shadowRenderer.init(sopts);\n            this._areaPoints = [];\n            this._boundingBox = [[], []];\n\n            if (!this.isTrendline && this.fill || this.renderer.bands.show) {\n                // Group: Properties\n                //\n                // prop: highlightMouseOver\n                // True to highlight area on a filled plot when moused over.\n                // This must be false to enable highlightMouseDown to highlight when clicking on an area on a filled plot.\n                this.highlightMouseOver = true;\n                // prop: highlightMouseDown\n                // True to highlight when a mouse button is pressed over an area on a filled plot.\n                // This will be disabled if highlightMouseOver is true.\n                this.highlightMouseDown = false;\n                // prop: highlightColor\n                // color to use when highlighting an area on a filled plot.\n                this.highlightColor = null;\n                // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver\n                if (lopts.highlightMouseDown && lopts.highlightMouseOver == null) {\n                    lopts.highlightMouseOver = false;\n                }\n\n                $.extend(true, this, {\n                    highlightMouseOver: lopts.highlightMouseOver,\n                    highlightMouseDown: lopts.highlightMouseDown,\n                    highlightColor: lopts.highlightColor\n                });\n\n                if (!this.highlightColor) {\n                    var fc = (this.renderer.bands.show) ? this.renderer.bands.fillColor : this.fillColor;\n                    this.highlightColor = $.jqplot.computeHighlightColors(fc);\n                }\n                // turn off (disable) the highlighter plugin\n                if (this.highlighter) {\n                    this.highlighter.show = false;\n                }\n            }\n\n            if (!this.isTrendline && plot) {\n                plot.plugins.lineRenderer = {};\n                plot.postInitHooks.addOnce(postInit);\n                plot.postDrawHooks.addOnce(postPlotDraw);\n                plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);\n                plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);\n                plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);\n                plot.eventListenerHooks.addOnce('jqplotClick', handleClick);\n                plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);\n            }\n\n        };\n\n        $.jqplot.LineRenderer.prototype.initBands = function (options, plot) {\n            // use bandData if no data specified in bands option\n            //var bd = this.renderer.bandData;\n            var bd = options.bandData || [];\n            var bands = this.renderer.bands;\n            bands.hiData = [];\n            bands.lowData = [];\n            var data = this.data;\n            bands._max = null;\n            bands._min = null;\n            // If 2 arrays, and each array greater than 2 elements, assume it is hi and low data bands of y values.\n            if (bd.length == 2) {\n                // Do we have an array of x,y values?\n                // like [[[1,1], [2,4], [3,3]], [[1,3], [2,6], [3,5]]]\n                if ($.isArray(bd[0][0])) {\n                    // since an arbitrary array of points, spin through all of them to determine max and min lines.\n\n                    var p;\n                    var bdminidx = 0, bdmaxidx = 0;\n                    for (var i = 0, l = bd[0].length; i < l; i++) {\n                        p = bd[0][i];\n                        if ((p[1] != null && p[1] > bands._max) || bands._max == null) {\n                            bands._max = p[1];\n                        }\n                        if ((p[1] != null && p[1] < bands._min) || bands._min == null) {\n                            bands._min = p[1];\n                        }\n                    }\n                    for (var i = 0, l = bd[1].length; i < l; i++) {\n                        p = bd[1][i];\n                        if ((p[1] != null && p[1] > bands._max) || bands._max == null) {\n                            bands._max = p[1];\n                            bdmaxidx = 1;\n                        }\n                        if ((p[1] != null && p[1] < bands._min) || bands._min == null) {\n                            bands._min = p[1];\n                            bdminidx = 1;\n                        }\n                    }\n\n                    if (bdmaxidx === bdminidx) {\n                        bands.show = false;\n                    }\n\n                    bands.hiData = bd[bdmaxidx];\n                    bands.lowData = bd[bdminidx];\n                }\n                // else data is arrays of y values\n                // like [[1,4,3], [3,6,5]]\n                // must have same number of band data points as points in series\n                else if (bd[0].length === data.length && bd[1].length === data.length) {\n                    var hi = (bd[0][0] > bd[1][0]) ? 0 : 1;\n                    var low = (hi) ? 0 : 1;\n                    for (var i = 0, l = data.length; i < l; i++) {\n                        bands.hiData.push([data[i][0], bd[hi][i]]);\n                        bands.lowData.push([data[i][0], bd[low][i]]);\n                    }\n                }\n\n                // we don't have proper data array, don't show bands.\n                else {\n                    bands.show = false;\n                }\n            }\n\n            // if more than 2 arrays, have arrays of [ylow, yhi] values.\n            // note, can't distinguish case of [[ylow, yhi], [ylow, yhi]] from [[ylow, ylow], [yhi, yhi]]\n            // this is assumed to be of the latter form.\n            else if (bd.length > 2 && !$.isArray(bd[0][0])) {\n                var hi = (bd[0][0] > bd[0][1]) ? 0 : 1;\n                var low = (hi) ? 0 : 1;\n                for (var i = 0, l = bd.length; i < l; i++) {\n                    bands.hiData.push([data[i][0], bd[i][hi]]);\n                    bands.lowData.push([data[i][0], bd[i][low]]);\n                }\n            }\n\n            // don't have proper data, auto calculate\n            else {\n                var intrv = bands.interval;\n                var a = null;\n                var b = null;\n                var afunc = null;\n                var bfunc = null;\n\n                if ($.isArray(intrv)) {\n                    a = intrv[0];\n                    b = intrv[1];\n                }\n                else {\n                    a = intrv;\n                }\n\n                if (isNaN(a)) {\n                    // we have a string\n                    if (a.charAt(a.length - 1) === '%') {\n                        afunc = 'multiply';\n                        a = parseFloat(a) / 100 + 1;\n                    }\n                }\n\n                else {\n                    a = parseFloat(a);\n                    afunc = 'add';\n                }\n\n                if (b !== null && isNaN(b)) {\n                    // we have a string\n                    if (b.charAt(b.length - 1) === '%') {\n                        bfunc = 'multiply';\n                        b = parseFloat(b) / 100 + 1;\n                    }\n                }\n\n                else if (b !== null) {\n                    b = parseFloat(b);\n                    bfunc = 'add';\n                }\n\n                if (a !== null) {\n                    if (b === null) {\n                        b = -a;\n                        bfunc = afunc;\n                        if (bfunc === 'multiply') {\n                            b += 2;\n                        }\n                    }\n\n                    // make sure a always applies to hi band.\n                    if (a < b) {\n                        var temp = a;\n                        a = b;\n                        b = temp;\n                        temp = afunc;\n                        afunc = bfunc;\n                        bfunc = temp;\n                    }\n\n                    for (var i = 0, l = data.length; i < l; i++) {\n                        switch (afunc) {\n                            case 'add':\n                                bands.hiData.push([data[i][0], data[i][1] + a]);\n                                break;\n                            case 'multiply':\n                                bands.hiData.push([data[i][0], data[i][1] * a]);\n                                break;\n                        }\n                        switch (bfunc) {\n                            case 'add':\n                                bands.lowData.push([data[i][0], data[i][1] + b]);\n                                break;\n                            case 'multiply':\n                                bands.lowData.push([data[i][0], data[i][1] * b]);\n                                break;\n                        }\n                    }\n                }\n\n                else {\n                    bands.show = false;\n                }\n            }\n\n            var hd = bands.hiData;\n            var ld = bands.lowData;\n            for (var i = 0, l = hd.length; i < l; i++) {\n                if ((hd[i][1] != null && hd[i][1] > bands._max) || bands._max == null) {\n                    bands._max = hd[i][1];\n                }\n            }\n            for (var i = 0, l = ld.length; i < l; i++) {\n                if ((ld[i][1] != null && ld[i][1] < bands._min) || bands._min == null) {\n                    bands._min = ld[i][1];\n                }\n            }\n\n            // one last check for proper data\n            // these don't apply any more since allowing arbitrary x,y values\n            // if (bands.hiData.length != bands.lowData.length) {\n            //     bands.show = false;\n            // }\n\n            // if (bands.hiData.length != this.data.length) {\n            //     bands.show = false;\n            // }\n\n            if (bands.fillColor === null) {\n                var c = $.jqplot.getColorComponents(bands.color);\n                // now adjust alpha to differentiate fill\n                c[3] = c[3] * 0.5;\n                bands.fillColor = 'rgba(' + c[0] + ', ' + c[1] + ', ' + c[2] + ', ' + c[3] + ')';\n            }\n        };\n\n        function getSteps(d, f) {\n            return (3.4182054 + f) * Math.pow(d, -0.3534992);\n        }\n\n        function computeSteps(d1, d2) {\n            var s = Math.sqrt(Math.pow((d2[0] - d1[0]), 2) + Math.pow ((d2[1] - d1[1]), 2));\n            return 5.7648 * Math.log(s) + 7.4456;\n        }\n\n        function tanh(x) {\n            var a = (Math.exp(2 * x) - 1) / (Math.exp(2 * x) + 1);\n            return a;\n        }\n\n        //////////\n        // computeConstrainedSmoothedData\n        // An implementation of the constrained cubic spline interpolation\n        // method as presented in:\n        //\n        // Kruger, CJC, Constrained Cubic Spine Interpolation for Chemical Engineering Applications\n        // http://www.korf.co.uk/spline.pdf\n        //\n        // The implementation below borrows heavily from the sample Visual Basic\n        // implementation by CJC Kruger found in http://www.korf.co.uk/spline.xls\n        //\n        /////////\n\n        // called with scope of series\n        function computeConstrainedSmoothedData(gd) {\n            var smooth = this.renderer.smooth;\n            var dim = this.canvas.getWidth();\n            var xp = this._xaxis.series_p2u;\n            var yp = this._yaxis.series_p2u;\n            var steps = null;\n            var _steps = null;\n            var dist = gd.length / dim;\n            var _smoothedData = [];\n            var _smoothedPlotData = [];\n\n            if (!isNaN(parseFloat(smooth))) {\n                steps = parseFloat(smooth);\n            }\n            else {\n                steps = getSteps(dist, 0.5);\n            }\n\n            var yy = [];\n            var xx = [];\n\n            for (var i = 0, l = gd.length; i < l; i++) {\n                yy.push(gd[i][1]);\n                xx.push(gd[i][0]);\n            }\n\n            function dxx(x1, x0) {\n                if (x1 - x0 == 0) {\n                    return Math.pow(10, 10);\n                }\n                else {\n                    return x1 - x0;\n                }\n            }\n\n            var A, B, C, D;\n            // loop through each line segment.  Have # points - 1 line segments.  Nmber segments starting at 1.\n            var nmax = gd.length - 1;\n            for (var num = 1, gdl = gd.length; num < gdl; num++) {\n                var gxx = [];\n                var ggxx = [];\n                // point at each end of segment.\n                for (var j = 0; j < 2; j++) {\n                    var i = num - 1 + j; // point number, 0 to # points.\n\n                    if (i == 0 || i == nmax) {\n                        gxx[j] = Math.pow(10, 10);\n                    }\n                    else if (yy[i + 1] - yy[i] == 0 || yy[i] - yy[i - 1] == 0) {\n                        gxx[j] = 0;\n                    }\n                    else if (((xx[i + 1] - xx[i]) / (yy[i + 1] - yy[i]) + (xx[i] - xx[i - 1]) / (yy[i] - yy[i - 1])) == 0) {\n                        gxx[j] = 0;\n                    }\n                    else if ((yy[i + 1] - yy[i]) * (yy[i] - yy[i - 1]) < 0) {\n                        gxx[j] = 0;\n                    }\n\n                    else {\n                        gxx[j] = 2 / (dxx(xx[i + 1], xx[i]) / (yy[i + 1] - yy[i]) + dxx(xx[i], xx[i - 1]) / (yy[i] - yy[i - 1]));\n                    }\n                }\n\n                // Reset first derivative (slope) at first and last point\n                if (num == 1) {\n                    // First point has 0 2nd derivative\n                    gxx[0] = 3 / 2 * (yy[1] - yy[0]) / dxx(xx[1], xx[0]) - gxx[1] / 2;\n                }\n                else if (num == nmax) {\n                    // Last point has 0 2nd derivative\n                    gxx[1] = 3 / 2 * (yy[nmax] - yy[nmax - 1]) / dxx(xx[nmax], xx[nmax - 1]) - gxx[0] / 2;\n                }\n\n                // Calc second derivative at points\n                ggxx[0] = -2 * (gxx[1] + 2 * gxx[0]) / dxx(xx[num], xx[num - 1]) + 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);\n                ggxx[1] = 2 * (2 * gxx[1] + gxx[0]) / dxx(xx[num], xx[num - 1]) - 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);\n\n                // Calc constants for cubic interpolation\n                D = 1 / 6 * (ggxx[1] - ggxx[0]) / dxx(xx[num], xx[num - 1]);\n                C = 1 / 2 * (xx[num] * ggxx[0] - xx[num - 1] * ggxx[1]) / dxx(xx[num], xx[num - 1]);\n                B = (yy[num] - yy[num - 1] - C * (Math.pow(xx[num], 2) - Math.pow(xx[num - 1], 2)) - D * (Math.pow(xx[num], 3) - Math.pow(xx[num - 1], 3))) / dxx(xx[num], xx[num - 1]);\n                A = yy[num - 1] - B * xx[num - 1] - C * Math.pow(xx[num - 1], 2) - D * Math.pow(xx[num - 1], 3);\n\n                var increment = (xx[num] - xx[num - 1]) / steps;\n                var temp, tempx;\n\n                for (var j = 0, l = steps; j < l; j++) {\n                    temp = [];\n                    tempx = xx[num - 1] + j * increment;\n                    temp.push(tempx);\n                    temp.push(A + B * tempx + C * Math.pow(tempx, 2) + D * Math.pow(tempx, 3));\n                    _smoothedData.push(temp);\n                    _smoothedPlotData.push([xp(temp[0]), yp(temp[1])]);\n                }\n            }\n\n            _smoothedData.push(gd[i]);\n            _smoothedPlotData.push([xp(gd[i][0]), yp(gd[i][1])]);\n\n            return [_smoothedData, _smoothedPlotData];\n        }\n\n        ///////\n        // computeHermiteSmoothedData\n        // A hermite spline smoothing of the plot data.\n        // This implementation is derived from the one posted\n        // by krypin on the jqplot-users mailing list:\n        //\n        // http://groups.google.com/group/jqplot-users/browse_thread/thread/748be6a445723cea?pli=1\n        //\n        // with a blog post:\n        //\n        // http://blog.statscollector.com/a-plugin-renderer-for-jqplot-to-draw-a-hermite-spline/\n        //\n        // and download of the original plugin:\n        //\n        // http://blog.statscollector.com/wp-content/uploads/2010/02/jqplot.hermiteSplineRenderer.js\n        //////////\n\n        // called with scope of series\n        function computeHermiteSmoothedData(gd) {\n            var smooth = this.renderer.smooth;\n            var tension = this.renderer.tension;\n            var dim = this.canvas.getWidth();\n            var xp = this._xaxis.series_p2u;\n            var yp = this._yaxis.series_p2u;\n            var steps = null;\n            var _steps = null;\n            var a = null;\n            var a1 = null;\n            var a2 = null;\n            var slope = null;\n            var slope2 = null;\n            var temp = null;\n            var t, s, h1, h2, h3, h4;\n            var TiX, TiY, Ti1X, Ti1Y;\n            var pX, pY, p;\n            var sd = [];\n            var spd = [];\n            var dist = gd.length / dim;\n            var min, max, stretch, scale, shift;\n            var _smoothedData = [];\n            var _smoothedPlotData = [];\n            if (!isNaN(parseFloat(smooth))) {\n                steps = parseFloat(smooth);\n            }\n            else {\n                steps = getSteps(dist, 0.5);\n            }\n            if (!isNaN(parseFloat(tension))) {\n                tension = parseFloat(tension);\n            }\n\n            for (var i = 0, l = gd.length - 1; i < l; i++) {\n\n                if (tension === null) {\n                    slope = Math.abs((gd[i + 1][1] - gd[i][1]) / (gd[i + 1][0] - gd[i][0]));\n\n                    min = 0.3;\n                    max = 0.6;\n                    stretch = (max - min) / 2.0;\n                    scale = 2.5;\n                    shift = -1.4;\n\n                    temp = slope / scale + shift;\n\n                    a1 = stretch * tanh(temp) - stretch * tanh(shift) + min;\n\n                    // if have both left and right line segments, will use  minimum tension.\n                    if (i > 0) {\n                        slope2 = Math.abs((gd[i][1] - gd[i - 1][1]) / (gd[i][0] - gd[i - 1][0]));\n                    }\n                    temp = slope2 / scale + shift;\n\n                    a2 = stretch * tanh(temp) - stretch * tanh(shift) + min;\n\n                    a = (a1 + a2) / 2.0;\n\n                }\n                else {\n                    a = tension;\n                }\n                for (t = 0; t < steps; t++) {\n                    s = t / steps;\n                    h1 = (1 + 2 * s) * Math.pow((1 - s), 2);\n                    h2 = s * Math.pow((1 - s), 2);\n                    h3 = Math.pow(s, 2) * (3 - 2 * s);\n                    h4 = Math.pow(s, 2) * (s - 1);\n\n                    if (gd[i - 1]) {\n                        TiX = a * (gd[i + 1][0] - gd[i - 1][0]);\n                        TiY = a * (gd[i + 1][1] - gd[i - 1][1]);\n                    } else {\n                        TiX = a * (gd[i + 1][0] - gd[i][0]);\n                        TiY = a * (gd[i + 1][1] - gd[i][1]);\n                    }\n                    if (gd[i + 2]) {\n                        Ti1X = a * (gd[i + 2][0] - gd[i][0]);\n                        Ti1Y = a * (gd[i + 2][1] - gd[i][1]);\n                    } else {\n                        Ti1X = a * (gd[i + 1][0] - gd[i][0]);\n                        Ti1Y = a * (gd[i + 1][1] - gd[i][1]);\n                    }\n\n                    pX = h1 * gd[i][0] + h3 * gd[i + 1][0] + h2 * TiX + h4 * Ti1X;\n                    pY = h1 * gd[i][1] + h3 * gd[i + 1][1] + h2 * TiY + h4 * Ti1Y;\n                    p = [pX, pY];\n\n                    _smoothedData.push(p);\n                    _smoothedPlotData.push([xp(pX), yp(pY)]);\n                }\n            }\n            _smoothedData.push(gd[l]);\n            _smoothedPlotData.push([xp(gd[l][0]), yp(gd[l][1])]);\n\n            return [_smoothedData, _smoothedPlotData];\n        }\n\n        // setGridData\n        // converts the user data values to grid coordinates and stores them\n        // in the gridData array.\n        // Called with scope of a series.\n        $.jqplot.LineRenderer.prototype.setGridData = function (plot) {\n            // recalculate the grid data\n            var xp = this._xaxis.series_u2p;\n            var yp = this._yaxis.series_u2p;\n            var data = this._plotData;\n            var pdata = this._prevPlotData;\n            this.gridData = [];\n            this._prevGridData = [];\n            this.renderer._smoothedData = [];\n            this.renderer._smoothedPlotData = [];\n            this.renderer._hiBandGridData = [];\n            this.renderer._lowBandGridData = [];\n            this.renderer._hiBandSmoothedData = [];\n            this.renderer._lowBandSmoothedData = [];\n            var bands = this.renderer.bands;\n            var hasNull = false;\n            for (var i = 0, l = data.length; i < l; i++) {\n                // if not a line series or if no nulls in data, push the converted point onto the array.\n                if (data[i][0] != null && data[i][1] != null) {\n                    this.gridData.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1])]);\n                }\n                // else if there is a null, preserve it.\n                else if (data[i][0] == null) {\n                    hasNull = true;\n                    this.gridData.push([null, yp.call(this._yaxis, data[i][1])]);\n                }\n                else if (data[i][1] == null) {\n                    hasNull = true;\n                    this.gridData.push([xp.call(this._xaxis, data[i][0]), null]);\n                }\n                // if not a line series or if no nulls in data, push the converted point onto the array.\n                if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] != null) {\n                    this._prevGridData.push([xp.call(this._xaxis, pdata[i][0]), yp.call(this._yaxis, pdata[i][1])]);\n                }\n                // else if there is a null, preserve it.\n                else if (pdata[i] != null && pdata[i][0] == null) {\n                    this._prevGridData.push([null, yp.call(this._yaxis, pdata[i][1])]);\n                }\n                else if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] == null) {\n                    this._prevGridData.push([xp.call(this._xaxis, pdata[i][0]), null]);\n                }\n            }\n\n            // don't do smoothing or bands on broken lines.\n            if (hasNull) {\n                this.renderer.smooth = false;\n                if (this._type === 'line') {\n                    bands.show = false;\n                }\n            }\n\n            if (this._type === 'line' && bands.show) {\n                for (var i = 0, l = bands.hiData.length; i < l; i++) {\n                    this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);\n                }\n                for (var i = 0, l = bands.lowData.length; i < l; i++) {\n                    this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);\n                }\n            }\n\n            // calculate smoothed data if enough points and no nulls\n            if (this._type === 'line' && this.renderer.smooth && this.gridData.length > 2) {\n                var ret;\n                if (this.renderer.constrainSmoothing) {\n                    ret = computeConstrainedSmoothedData.call(this, this.gridData);\n                    this.renderer._smoothedData = ret[0];\n                    this.renderer._smoothedPlotData = ret[1];\n\n                    if (bands.show) {\n                        ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData);\n                        this.renderer._hiBandSmoothedData = ret[0];\n                        ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData);\n                        this.renderer._lowBandSmoothedData = ret[0];\n                    }\n\n                    ret = null;\n                }\n                else {\n                    ret = computeHermiteSmoothedData.call(this, this.gridData);\n                    this.renderer._smoothedData = ret[0];\n                    this.renderer._smoothedPlotData = ret[1];\n\n                    if (bands.show) {\n                        ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);\n                        this.renderer._hiBandSmoothedData = ret[0];\n                        ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);\n                        this.renderer._lowBandSmoothedData = ret[0];\n                    }\n\n                    ret = null;\n                }\n            }\n        };\n\n        // makeGridData\n        // converts any arbitrary data values to grid coordinates and\n        // returns them.  This method exists so that plugins can use a series'\n        // linerenderer to generate grid data points without overwriting the\n        // grid data associated with that series.\n        // Called with scope of a series.\n        $.jqplot.LineRenderer.prototype.makeGridData = function (data, plot) {\n            // recalculate the grid data\n            var xp = this._xaxis.series_u2p;\n            var yp = this._yaxis.series_u2p;\n            var gd = [];\n            var pgd = [];\n            this.renderer._smoothedData = [];\n            this.renderer._smoothedPlotData = [];\n            this.renderer._hiBandGridData = [];\n            this.renderer._lowBandGridData = [];\n            this.renderer._hiBandSmoothedData = [];\n            this.renderer._lowBandSmoothedData = [];\n            var bands = this.renderer.bands;\n            var hasNull = false;\n            for (var i = 0; i < data.length; i++) {\n                // if not a line series or if no nulls in data, push the converted point onto the array.\n                if (data[i][0] != null && data[i][1] != null) {\n                    gd.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1])]);\n                }\n                // else if there is a null, preserve it.\n                else if (data[i][0] == null) {\n                    hasNull = true;\n                    gd.push([null, yp.call(this._yaxis, data[i][1])]);\n                }\n                else if (data[i][1] == null) {\n                    hasNull = true;\n                    gd.push([xp.call(this._xaxis, data[i][0]), null]);\n                }\n            }\n\n            // don't do smoothing or bands on broken lines.\n            if (hasNull) {\n                this.renderer.smooth = false;\n                if (this._type === 'line') {\n                    bands.show = false;\n                }\n            }\n\n            if (this._type === 'line' && bands.show) {\n                for (var i = 0, l = bands.hiData.length; i < l; i++) {\n                    this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);\n                }\n                for (var i = 0, l = bands.lowData.length; i < l; i++) {\n                    this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);\n                }\n            }\n\n            if (this._type === 'line' && this.renderer.smooth && gd.length > 2) {\n                var ret;\n                if (this.renderer.constrainSmoothing) {\n                    ret = computeConstrainedSmoothedData.call(this, gd);\n                    this.renderer._smoothedData = ret[0];\n                    this.renderer._smoothedPlotData = ret[1];\n\n                    if (bands.show) {\n                        ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData);\n                        this.renderer._hiBandSmoothedData = ret[0];\n                        ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData);\n                        this.renderer._lowBandSmoothedData = ret[0];\n                    }\n\n                    ret = null;\n                }\n                else {\n                    ret = computeHermiteSmoothedData.call(this, gd);\n                    this.renderer._smoothedData = ret[0];\n                    this.renderer._smoothedPlotData = ret[1];\n\n                    if (bands.show) {\n                        ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);\n                        this.renderer._hiBandSmoothedData = ret[0];\n                        ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);\n                        this.renderer._lowBandSmoothedData = ret[0];\n                    }\n\n                    ret = null;\n                }\n            }\n            return gd;\n        };\n\n\n        // called within scope of series.\n        $.jqplot.LineRenderer.prototype.draw = function (ctx, gd, options, plot) {\n            var i;\n            // get a copy of the options, so we don't modify the original object.\n            var opts = $.extend(true, {}, options);\n            var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;\n            var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;\n            var fill = (opts.fill != undefined) ? opts.fill : this.fill;\n            var fillAndStroke = (opts.fillAndStroke != undefined) ? opts.fillAndStroke : this.fillAndStroke;\n            var xmin, ymin, xmax, ymax;\n            ctx.save();\n            if (gd.length) {\n                if (showLine) {\n                    // if we fill, we'll have to add points to close the curve.\n                    if (fill) {\n                        if (this.fillToZero) {\n                            // have to break line up into shapes at axis crossings\n                            var negativeColor = this.negativeColor;\n                            if (!this.useNegativeColors) {\n                                negativeColor = opts.fillStyle;\n                            }\n                            var isnegative = false;\n                            var posfs = opts.fillStyle;\n\n                            // if stoking line as well as filling, get a copy of line data.\n                            if (fillAndStroke) {\n                                var fasgd = gd.slice(0);\n                            }\n                            // if not stacked, fill down to axis\n                            if (this.index == 0 || !this._stack) {\n\n                                var tempgd = [];\n                                var pd = (this.renderer.smooth) ? this.renderer._smoothedPlotData : this._plotData;\n                                this._areaPoints = [];\n                                var pyzero = this._yaxis.series_u2p(this.fillToValue);\n                                var pxzero = this._xaxis.series_u2p(this.fillToValue);\n\n                                opts.closePath = true;\n\n                                if (this.fillAxis == 'y') {\n                                    tempgd.push([gd[0][0], pyzero]);\n                                    this._areaPoints.push([gd[0][0], pyzero]);\n\n                                    for (var i = 0; i < gd.length - 1; i++) {\n                                        tempgd.push(gd[i]);\n                                        this._areaPoints.push(gd[i]);\n                                        // do we have an axis crossing?\n                                        if (pd[i][1] * pd[i + 1][1] <= 0) {\n                                            if (pd[i][1] < 0) {\n                                                isnegative = true;\n                                                opts.fillStyle = negativeColor;\n                                            }\n                                            else {\n                                                isnegative = false;\n                                                opts.fillStyle = posfs;\n                                            }\n\n                                            var xintercept = gd[i][0] + (gd[i + 1][0] - gd[i][0]) * (pyzero - gd[i][1]) / (gd[i + 1][1] - gd[i][1]);\n                                            tempgd.push([xintercept, pyzero]);\n                                            this._areaPoints.push([xintercept, pyzero]);\n                                            // now draw this shape and shadow.\n                                            if (shadow) {\n                                                this.renderer.shadowRenderer.draw(ctx, tempgd, opts);\n                                            }\n                                            this.renderer.shapeRenderer.draw(ctx, tempgd, opts);\n                                            // now empty temp array and continue\n                                            tempgd = [[xintercept, pyzero]];\n                                            // this._areaPoints = [[xintercept, pyzero]];\n                                        }\n                                    }\n                                    if (pd[gd.length - 1][1] < 0) {\n                                        isnegative = true;\n                                        opts.fillStyle = negativeColor;\n                                    }\n                                    else {\n                                        isnegative = false;\n                                        opts.fillStyle = posfs;\n                                    }\n                                    tempgd.push(gd[gd.length - 1]);\n                                    this._areaPoints.push(gd[gd.length - 1]);\n                                    tempgd.push([gd[gd.length - 1][0], pyzero]);\n                                    this._areaPoints.push([gd[gd.length - 1][0], pyzero]);\n                                }\n                                // now draw the last area.\n                                if (shadow) {\n                                    this.renderer.shadowRenderer.draw(ctx, tempgd, opts);\n                                }\n                                this.renderer.shapeRenderer.draw(ctx, tempgd, opts);\n\n\n                                // var gridymin = this._yaxis.series_u2p(0);\n                                // // IE doesn't return new length on unshift\n                                // gd.unshift([gd[0][0], gridymin]);\n                                // len = gd.length;\n                                // gd.push([gd[len - 1][0], gridymin]);\n                            }\n                            // if stacked, fill to line below\n                            else {\n                                var prev = this._prevGridData;\n                                for (var i = prev.length; i > 0; i--) {\n                                    gd.push(prev[i - 1]);\n                                    // this._areaPoints.push(prev[i-1]);\n                                }\n                                if (shadow) {\n                                    this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                                }\n                                this._areaPoints = gd;\n                                this.renderer.shapeRenderer.draw(ctx, gd, opts);\n                            }\n                        }\n                        /////////////////////////\n                        // Not filled to zero\n                        ////////////////////////\n                        else {\n                            // if stoking line as well as filling, get a copy of line data.\n                            if (fillAndStroke) {\n                                var fasgd = gd.slice(0);\n                            }\n                            // if not stacked, fill down to axis\n                            if (this.index == 0 || !this._stack) {\n                                // var gridymin = this._yaxis.series_u2p(this._yaxis.min) - this.gridBorderWidth / 2;\n                                var gridymin = ctx.canvas.height;\n                                // IE doesn't return new length on unshift\n                                gd.unshift([gd[0][0], gridymin]);\n                                var len = gd.length;\n                                gd.push([gd[len - 1][0], gridymin]);\n                            }\n                            // if stacked, fill to line below\n                            else {\n                                var prev = this._prevGridData;\n                                for (var i = prev.length; i > 0; i--) {\n                                    gd.push(prev[i - 1]);\n                                }\n                            }\n                            this._areaPoints = gd;\n\n                            if (shadow) {\n                                this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                            }\n\n                            this.renderer.shapeRenderer.draw(ctx, gd, opts);\n                        }\n                        if (fillAndStroke) {\n                            var fasopts = $.extend(true, {}, opts, {fill: false, closePath: false});\n                            this.renderer.shapeRenderer.draw(ctx, fasgd, fasopts);\n                            //////////\n                            // TODO: figure out some way to do shadows nicely\n                            // if (shadow) {\n                            //     this.renderer.shadowRenderer.draw(ctx, fasgd, fasopts);\n                            // }\n                            // now draw the markers\n                            if (this.markerRenderer.show) {\n                                if (this.renderer.smooth) {\n                                    fasgd = this.gridData;\n                                }\n                                for (i = 0; i < fasgd.length; i++) {\n                                    this.markerRenderer.draw(fasgd[i][0], fasgd[i][1], ctx, opts.markerOptions);\n                                }\n                            }\n                        }\n                    }\n                    else {\n\n                        if (this.renderer.bands.show) {\n                            var bdat;\n                            var bopts = $.extend(true, {}, opts);\n                            if (this.renderer.bands.showLines) {\n                                bdat = (this.renderer.smooth) ? this.renderer._hiBandSmoothedData : this.renderer._hiBandGridData;\n                                this.renderer.shapeRenderer.draw(ctx, bdat, opts);\n                                bdat = (this.renderer.smooth) ? this.renderer._lowBandSmoothedData : this.renderer._lowBandGridData;\n                                this.renderer.shapeRenderer.draw(ctx, bdat, bopts);\n                            }\n\n                            if (this.renderer.bands.fill) {\n                                if (this.renderer.smooth) {\n                                    bdat = this.renderer._hiBandSmoothedData.concat(this.renderer._lowBandSmoothedData.reverse());\n                                }\n                                else {\n                                    bdat = this.renderer._hiBandGridData.concat(this.renderer._lowBandGridData.reverse());\n                                }\n                                this._areaPoints = bdat;\n                                bopts.closePath = true;\n                                bopts.fill = true;\n                                bopts.fillStyle = this.renderer.bands.fillColor;\n                                this.renderer.shapeRenderer.draw(ctx, bdat, bopts);\n                            }\n                        }\n\n                        if (shadow) {\n                            this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                        }\n\n                        this.renderer.shapeRenderer.draw(ctx, gd, opts);\n                    }\n                }\n                // calculate the bounding box\n                var xmin = xmax = ymin = ymax = null;\n                for (i = 0; i < this._areaPoints.length; i++) {\n                    var p = this._areaPoints[i];\n                    if (xmin > p[0] || xmin == null) {\n                        xmin = p[0];\n                    }\n                    if (ymax < p[1] || ymax == null) {\n                        ymax = p[1];\n                    }\n                    if (xmax < p[0] || xmax == null) {\n                        xmax = p[0];\n                    }\n                    if (ymin > p[1] || ymin == null) {\n                        ymin = p[1];\n                    }\n                }\n\n                if (this.type === 'line' && this.renderer.bands.show) {\n                    ymax = this._yaxis.series_u2p(this.renderer.bands._min);\n                    ymin = this._yaxis.series_u2p(this.renderer.bands._max);\n                }\n\n                this._boundingBox = [[xmin, ymax], [xmax, ymin]];\n\n                // now draw the markers\n                if (this.markerRenderer.show && !fill) {\n                    if (this.renderer.smooth) {\n                        gd = this.gridData;\n                    }\n                    for (i = 0; i < gd.length; i++) {\n                        if (gd[i][0] != null && gd[i][1] != null) {\n                            this.markerRenderer.draw(gd[i][0], gd[i][1], ctx, opts.markerOptions);\n                        }\n                    }\n                }\n            }\n\n            ctx.restore();\n        };\n\n        $.jqplot.LineRenderer.prototype.drawShadow = function (ctx, gd, options) {\n            // This is a no-op, shadows drawn with lines.\n        };\n\n        // called with scope of plot.\n        // make sure to not leave anything highlighted.\n        function postInit(target, data, options) {\n            for (var i = 0; i < this.series.length; i++) {\n                if (this.series[i].renderer.constructor == $.jqplot.LineRenderer) {\n                    // don't allow mouseover and mousedown at same time.\n                    if (this.series[i].highlightMouseOver) {\n                        this.series[i].highlightMouseDown = false;\n                    }\n                }\n            }\n        }\n\n        // called within context of plot\n        // create a canvas which we can draw on.\n        // insert it before the eventCanvas, so eventCanvas will still capture events.\n        function postPlotDraw() {\n            // Memory Leaks patch\n            if (this.plugins.lineRenderer && this.plugins.lineRenderer.highlightCanvas) {\n                this.plugins.lineRenderer.highlightCanvas.resetCanvas();\n                this.plugins.lineRenderer.highlightCanvas = null;\n            }\n\n            this.plugins.lineRenderer.highlightedSeriesIndex = null;\n            this.plugins.lineRenderer.highlightCanvas = new $.jqplot.GenericCanvas();\n\n            this.eventCanvas._elem.before(this.plugins.lineRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-lineRenderer-highlight-canvas', this._plotDimensions, this));\n            this.plugins.lineRenderer.highlightCanvas.setContext();\n            this.eventCanvas._elem.bind('mouseleave', {plot: this}, function (ev) {\n                unhighlight(ev.data.plot);\n            });\n        }\n\n        function highlight(plot, sidx, pidx, points) {\n            var s = plot.series[sidx];\n            var canvas = plot.plugins.lineRenderer.highlightCanvas;\n            canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n            s._highlightedPoint = pidx;\n            plot.plugins.lineRenderer.highlightedSeriesIndex = sidx;\n            var opts = {fillStyle: s.highlightColor};\n            if (s.type === 'line' && s.renderer.bands.show) {\n                opts.fill = true;\n                opts.closePath = true;\n            }\n            s.renderer.shapeRenderer.draw(canvas._ctx, points, opts);\n            canvas = null;\n        }\n\n        function unhighlight(plot) {\n            var canvas = plot.plugins.lineRenderer.highlightCanvas;\n            canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n            for (var i = 0; i < plot.series.length; i++) {\n                plot.series[i]._highlightedPoint = null;\n            }\n            plot.plugins.lineRenderer.highlightedSeriesIndex = null;\n            plot.target.trigger('jqplotDataUnhighlight');\n            canvas = null;\n        }\n\n\n        function handleMove(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var evt1 = jQuery.Event('jqplotDataMouseOver');\n                evt1.pageX = ev.pageX;\n                evt1.pageY = ev.pageY;\n                plot.target.trigger(evt1, ins);\n                if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {\n                    var evt = jQuery.Event('jqplotDataHighlight');\n                    evt.which = ev.which;\n                    evt.pageX = ev.pageX;\n                    evt.pageY = ev.pageY;\n                    plot.target.trigger(evt, ins);\n                    highlight(plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n                }\n            }\n            else if (neighbor == null) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {\n                    var evt = jQuery.Event('jqplotDataHighlight');\n                    evt.which = ev.which;\n                    evt.pageX = ev.pageX;\n                    evt.pageY = ev.pageY;\n                    plot.target.trigger(evt, ins);\n                    highlight(plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n                }\n            }\n            else if (neighbor == null) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {\n            var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;\n            if (idx != null && plot.series[idx].highlightMouseDown) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleClick(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var evt = jQuery.Event('jqplotDataClick');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n            }\n        }\n\n        function handleRightClick(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;\n                if (idx != null && plot.series[idx].highlightMouseDown) {\n                    unhighlight(plot);\n                }\n                var evt = jQuery.Event('jqplotDataRightClick');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n            }\n        }\n\n\n        // class: $.jqplot.LinearAxisRenderer\n        // The default jqPlot axis renderer, creating a numeric axis.\n        $.jqplot.LinearAxisRenderer = function () {\n        };\n\n        // called with scope of axis object.\n        $.jqplot.LinearAxisRenderer.prototype.init = function (options) {\n            // prop: breakPoints\n            // EXPERIMENTAL!! Use at your own risk!\n            // Works only with linear axes and the default tick renderer.\n            // Array of [start, stop] points to create a broken axis.\n            // Broken axes have a \"jump\" in them, which is an immediate\n            // transition from a smaller value to a larger value.\n            // Currently, axis ticks MUST be manually assigned if using breakPoints\n            // by using the axis ticks array option.\n            this.breakPoints = null;\n            // prop: breakTickLabel\n            // Label to use at the axis break if breakPoints are specified.\n            this.breakTickLabel = \"&asymp;\";\n            // prop: drawBaseline\n            // True to draw the axis baseline.\n            this.drawBaseline = true;\n            // prop: baselineWidth\n            // width of the baseline in pixels.\n            this.baselineWidth = null;\n            // prop: baselineColor\n            // CSS color spec for the baseline.\n            this.baselineColor = null;\n            // prop: forceTickAt0\n            // This will ensure that there is always a tick mark at 0.\n            // If data range is strictly positive or negative,\n            // this will force 0 to be inside the axis bounds unless\n            // the appropriate axis pad (pad, padMin or padMax) is set\n            // to 0, then this will force an axis min or max value at 0.\n            // This has know effect when any of the following options\n            // are set:  autoscale, min, max, numberTicks or tickInterval.\n            this.forceTickAt0 = false;\n            // prop: forceTickAt100\n            // This will ensure that there is always a tick mark at 100.\n            // If data range is strictly above or below 100,\n            // this will force 100 to be inside the axis bounds unless\n            // the appropriate axis pad (pad, padMin or padMax) is set\n            // to 0, then this will force an axis min or max value at 100.\n            // This has know effect when any of the following options\n            // are set:  autoscale, min, max, numberTicks or tickInterval.\n            this.forceTickAt100 = false;\n            // prop: tickInset\n            // Controls the amount to inset the first and last ticks from\n            // the edges of the grid, in multiples of the tick interval.\n            // 0 is no inset, 0.5 is one half a tick interval, 1 is a full\n            // tick interval, etc.\n            this.tickInset = 0;\n            // prop: minorTicks\n            // Number of ticks to add between \"major\" ticks.\n            // Major ticks are ticks supplied by user or auto computed.\n            // Minor ticks cannot be created by user.\n            this.minorTicks = 0;\n            // prop: alignTicks\n            // true to align tick marks across opposed axes\n            // such as from the y2axis to yaxis.\n            this.alignTicks = false;\n            this._autoFormatString = '';\n            this._overrideFormatString = false;\n            this._scalefact = 1.0;\n            $.extend(true, this, options);\n            if (this.breakPoints) {\n                if (!$.isArray(this.breakPoints)) {\n                    this.breakPoints = null;\n                }\n                else if (this.breakPoints.length < 2 || this.breakPoints[1] <= this.breakPoints[0]) {\n                    this.breakPoints = null;\n                }\n            }\n            if (this.numberTicks != null && this.numberTicks < 2) {\n                this.numberTicks = 2;\n            }\n            this.resetDataBounds();\n        };\n\n        // called with scope of axis\n        $.jqplot.LinearAxisRenderer.prototype.draw = function (ctx, plot) {\n            if (this.show) {\n                // populate the axis label and value properties.\n                // createTicks is a method on the renderer, but\n                // call it within the scope of the axis.\n                this.renderer.createTicks.call(this, plot);\n                // fill a div with axes labels in the right direction.\n                // Need to pregenerate each axis to get its bounds and\n                // position it and the labels correctly on the plot.\n                var dim = 0;\n                var temp;\n                // Added for theming.\n                if (this._elem) {\n                    // Memory Leaks patch\n                    //this._elem.empty();\n                    this._elem.emptyForce();\n                    this._elem = null;\n                }\n\n                this._elem = $(document.createElement('div'));\n                this._elem.addClass('jqplot-axis jqplot-' + this.name);\n                this._elem.css('position', 'absolute');\n\n\n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    this._elem.width(this._plotDimensions.width);\n                }\n                else {\n                    this._elem.height(this._plotDimensions.height);\n                }\n\n                // create a _label object.\n                this.labelOptions.axis = this.name;\n                this._label = new this.labelRenderer(this.labelOptions);\n                if (this._label.show) {\n                    var elem = this._label.draw(ctx, plot);\n                    elem.appendTo(this._elem);\n                    elem = null;\n                }\n\n                var t = this._ticks;\n                var tick;\n                for (var i = 0; i < t.length; i++) {\n                    tick = t[i];\n                    if (tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                        this._elem.append(tick.draw(ctx, plot));\n                    }\n                }\n                tick = null;\n                t = null;\n            }\n            return this._elem;\n        };\n\n        // called with scope of an axis\n        $.jqplot.LinearAxisRenderer.prototype.reset = function () {\n            this.min = this._options.min;\n            this.max = this._options.max;\n            this.tickInterval = this._options.tickInterval;\n            this.numberTicks = this._options.numberTicks;\n            this._autoFormatString = '';\n            if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {\n                this.tickOptions.formatString = '';\n            }\n\n            // this._ticks = this.__ticks;\n        };\n\n        // called with scope of axis\n        $.jqplot.LinearAxisRenderer.prototype.set = function () {\n            var dim = 0;\n            var temp;\n            var w = 0;\n            var h = 0;\n            var lshow = (this._label == null) ? false : this._label.show;\n            if (this.show) {\n                var t = this._ticks;\n                var tick;\n                for (var i = 0; i < t.length; i++) {\n                    tick = t[i];\n                    if (!tick._breakTick && tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                        if (this.name == 'xaxis' || this.name == 'x2axis') {\n                            temp = tick._elem.outerHeight(true);\n                        }\n                        else {\n                            temp = tick._elem.outerWidth(true);\n                        }\n                        if (temp > dim) {\n                            dim = temp;\n                        }\n                    }\n                }\n                tick = null;\n                t = null;\n\n                if (lshow) {\n                    w = this._label._elem.outerWidth(true);\n                    h = this._label._elem.outerHeight(true);\n                }\n                if (this.name == 'xaxis') {\n                    dim = dim + h;\n                    this._elem.css({'height': dim + 'px', left: '0px', bottom: '0px'});\n                }\n                else if (this.name == 'x2axis') {\n                    dim = dim + h;\n                    this._elem.css({'height': dim + 'px', left: '0px', top: '0px'});\n                }\n                else if (this.name == 'yaxis') {\n                    dim = dim + w;\n                    this._elem.css({'width': dim + 'px', left: '0px', top: '0px'});\n                    if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                        this._label._elem.css('width', w + 'px');\n                    }\n                }\n                else {\n                    dim = dim + w;\n                    this._elem.css({'width': dim + 'px', right: '0px', top: '0px'});\n                    if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                        this._label._elem.css('width', w + 'px');\n                    }\n                }\n            }\n        };\n\n        // called with scope of axis\n        $.jqplot.LinearAxisRenderer.prototype.createTicks = function (plot) {\n            // we're are operating on an axis here\n            var ticks = this._ticks;\n            var userTicks = this.ticks;\n            var name = this.name;\n            // databounds were set on axis initialization.\n            var db = this._dataBounds;\n            var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;\n            var interval;\n            var min, max;\n            var pos1, pos2;\n            var tt, i;\n            // get a copy of user's settings for min/max.\n            var userMin = this.min;\n            var userMax = this.max;\n            var userNT = this.numberTicks;\n            var userTI = this.tickInterval;\n\n            var threshold = 30;\n            this._scalefact = (Math.max(dim, threshold + 1) - threshold) / 300.0;\n\n            // if we already have ticks, use them.\n            // ticks must be in order of increasing value.\n\n            if (userTicks.length) {\n                // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed\n                for (i = 0; i < userTicks.length; i++) {\n                    var ut = userTicks[i];\n                    var t = new this.tickRenderer(this.tickOptions);\n                    if ($.isArray(ut)) {\n                        t.value = ut[0];\n                        if (this.breakPoints) {\n                            if (ut[0] == this.breakPoints[0]) {\n                                t.label = this.breakTickLabel;\n                                t._breakTick = true;\n                                t.showGridline = false;\n                                t.showMark = false;\n                            }\n                            else if (ut[0] > this.breakPoints[0] && ut[0] <= this.breakPoints[1]) {\n                                t.show = false;\n                                t.showGridline = false;\n                                t.label = ut[1];\n                            }\n                            else {\n                                t.label = ut[1];\n                            }\n                        }\n                        else {\n                            t.label = ut[1];\n                        }\n                        t.setTick(ut[0], this.name);\n                        this._ticks.push(t);\n                    }\n\n                    else if ($.isPlainObject(ut)) {\n                        $.extend(true, t, ut);\n                        t.axis = this.name;\n                        this._ticks.push(t);\n                    }\n\n                    else {\n                        t.value = ut;\n                        if (this.breakPoints) {\n                            if (ut == this.breakPoints[0]) {\n                                t.label = this.breakTickLabel;\n                                t._breakTick = true;\n                                t.showGridline = false;\n                                t.showMark = false;\n                            }\n                            else if (ut > this.breakPoints[0] && ut <= this.breakPoints[1]) {\n                                t.show = false;\n                                t.showGridline = false;\n                            }\n                        }\n                        t.setTick(ut, this.name);\n                        this._ticks.push(t);\n                    }\n                }\n                this.numberTicks = userTicks.length;\n                this.min = this._ticks[0].value;\n                this.max = this._ticks[this.numberTicks - 1].value;\n                this.tickInterval = (this.max - this.min) / (this.numberTicks - 1);\n            }\n\n            // we don't have any ticks yet, let's make some!\n            else {\n                if (name == 'xaxis' || name == 'x2axis') {\n                    dim = this._plotDimensions.width;\n                }\n                else {\n                    dim = this._plotDimensions.height;\n                }\n\n                var _numberTicks = this.numberTicks;\n\n                // if aligning this axis, use number of ticks from previous axis.\n                // Do I need to reset somehow if alignTicks is changed and then graph is replotted??\n                if (this.alignTicks) {\n                    if (this.name === 'x2axis' && plot.axes.xaxis.show) {\n                        _numberTicks = plot.axes.xaxis.numberTicks;\n                    }\n                    else if (this.name.charAt(0) === 'y' && this.name !== 'yaxis' && this.name !== 'yMidAxis' && plot.axes.yaxis.show) {\n                        _numberTicks = plot.axes.yaxis.numberTicks;\n                    }\n                }\n\n                min = ((this.min != null) ? this.min : db.min);\n                max = ((this.max != null) ? this.max : db.max);\n\n                var range = max - min;\n                var rmin, rmax;\n                var temp;\n\n                if (this.tickOptions == null || !this.tickOptions.formatString) {\n                    this._overrideFormatString = true;\n                }\n\n                // Doing complete autoscaling\n                if (this.min == null || this.max == null && this.tickInterval == null && !this.autoscale) {\n                    // Check if user must have tick at 0 or 100 and ensure they are in range.\n                    // The autoscaling algorithm will always place ticks at 0 and 100 if they are in range.\n                    if (this.forceTickAt0) {\n                        if (min > 0) {\n                            min = 0;\n                        }\n                        if (max < 0) {\n                            max = 0;\n                        }\n                    }\n\n                    if (this.forceTickAt100) {\n                        if (min > 100) {\n                            min = 100;\n                        }\n                        if (max < 100) {\n                            max = 100;\n                        }\n                    }\n\n                    var keepMin = false,\n                        keepMax = false;\n\n                    if (this.min != null) {\n                        keepMin = true;\n                    }\n\n                    else if (this.max != null) {\n                        keepMax = true;\n                    }\n\n                    // var threshold = 30;\n                    // var tdim = Math.max(dim, threshold+1);\n                    // this._scalefact =  (tdim-threshold)/300.0;\n                    var ret = $.jqplot.LinearTickGenerator(min, max, this._scalefact, _numberTicks, keepMin, keepMax);\n                    // calculate a padded max and min, points should be less than these\n                    // so that they aren't too close to the edges of the plot.\n                    // User can adjust how much padding is allowed with pad, padMin and PadMax options.\n                    // If min or max is set, don't pad that end of axis.\n                    var tumin = (this.min != null) ? min : min + range * (this.padMin - 1);\n                    var tumax = (this.max != null) ? max : max - range * (this.padMax - 1);\n\n                    // if they're equal, we shouldn't have to do anything, right?\n                    // if (min <=tumin || max >= tumax) {\n                    if (min < tumin || max > tumax) {\n                        tumin = (this.min != null) ? min : min - range * (this.padMin - 1);\n                        tumax = (this.max != null) ? max : max + range * (this.padMax - 1);\n                        ret = $.jqplot.LinearTickGenerator(tumin, tumax, this._scalefact, _numberTicks, keepMin, keepMax);\n                    }\n\n                    this.min = ret[0];\n                    this.max = ret[1];\n                    // if numberTicks specified, it should return the same.\n                    this.numberTicks = ret[2];\n                    this._autoFormatString = ret[3];\n                    this.tickInterval = ret[4];\n                }\n\n                // User has specified some axis scale related option, can use auto algorithm\n                else {\n\n                    // if min and max are same, space them out a bit\n                    if (min == max) {\n                        var adj = 0.05;\n                        if (min > 0) {\n                            adj = Math.max(Math.log(min) / Math.LN10, 0.05);\n                        }\n                        min -= adj;\n                        max += adj;\n                    }\n\n                    // autoscale.  Can't autoscale if min or max is supplied.\n                    // Will use numberTicks and tickInterval if supplied.  Ticks\n                    // across multiple axes may not line up depending on how\n                    // bars are to be plotted.\n                    if (this.autoscale && this.min == null && this.max == null) {\n                        var rrange, ti, margin;\n                        var forceMinZero = false;\n                        var forceZeroLine = false;\n                        var intervals = {min: null, max: null, average: null, stddev: null};\n                        // if any series are bars, or if any are fill to zero, and if this\n                        // is the axis to fill toward, check to see if we can start axis at zero.\n                        for (var i = 0; i < this._series.length; i++) {\n                            var s = this._series[i];\n                            var faname = (s.fillAxis == 'x') ? s._xaxis.name : s._yaxis.name;\n                            // check to see if this is the fill axis\n                            if (this.name == faname) {\n                                var vals = s._plotValues[s.fillAxis];\n                                var vmin = vals[0];\n                                var vmax = vals[0];\n                                for (var j = 1; j < vals.length; j++) {\n                                    if (vals[j] < vmin) {\n                                        vmin = vals[j];\n                                    }\n                                    else if (vals[j] > vmax) {\n                                        vmax = vals[j];\n                                    }\n                                }\n                                var dp = (vmax - vmin) / vmax;\n                                // is this sries a bar?\n                                if (s.renderer.constructor == $.jqplot.BarRenderer) {\n                                    // if no negative values and could also check range.\n                                    if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {\n                                        forceMinZero = true;\n                                    }\n                                    else {\n                                        forceMinZero = false;\n                                        if (s.fill && s.fillToZero && vmin < 0 && vmax > 0) {\n                                            forceZeroLine = true;\n                                        }\n                                        else {\n                                            forceZeroLine = false;\n                                        }\n                                    }\n                                }\n\n                                // if not a bar and filling, use appropriate method.\n                                else if (s.fill) {\n                                    if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {\n                                        forceMinZero = true;\n                                    }\n                                    else if (vmin < 0 && vmax > 0 && s.fillToZero) {\n                                        forceMinZero = false;\n                                        forceZeroLine = true;\n                                    }\n                                    else {\n                                        forceMinZero = false;\n                                        forceZeroLine = false;\n                                    }\n                                }\n\n                                // if not a bar and not filling, only change existing state\n                                // if it doesn't make sense\n                                else if (vmin < 0) {\n                                    forceMinZero = false;\n                                }\n                            }\n                        }\n\n                        // check if we need make axis min at 0.\n                        if (forceMinZero) {\n                            // compute number of ticks\n                            this.numberTicks = 2 + Math.ceil((dim - (this.tickSpacing - 1)) / this.tickSpacing);\n                            this.min = 0;\n                            userMin = 0;\n                            // what order is this range?\n                            // what tick interval does that give us?\n                            ti = max / (this.numberTicks - 1);\n                            temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti) / Math.LN10)));\n                            if (ti / temp == parseInt(ti / temp, 10)) {\n                                ti += temp;\n                            }\n                            this.tickInterval = Math.ceil(ti / temp) * temp;\n                            this.max = this.tickInterval * (this.numberTicks - 1);\n                        }\n\n                        // check if we need to make sure there is a tick at 0.\n                        else if (forceZeroLine) {\n                            // compute number of ticks\n                            this.numberTicks = 2 + Math.ceil((dim - (this.tickSpacing - 1)) / this.tickSpacing);\n                            var ntmin = Math.ceil(Math.abs(min) / range * (this.numberTicks - 1));\n                            var ntmax = this.numberTicks - 1 - ntmin;\n                            ti = Math.max(Math.abs(min / ntmin), Math.abs(max / ntmax));\n                            temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti) / Math.LN10)));\n                            this.tickInterval = Math.ceil(ti / temp) * temp;\n                            this.max = this.tickInterval * ntmax;\n                            this.min = -this.tickInterval * ntmin;\n                        }\n\n                        // if nothing else, do autoscaling which will try to line up ticks across axes.\n                        else {\n                            if (this.numberTicks == null) {\n                                if (this.tickInterval) {\n                                    this.numberTicks = 3 + Math.ceil(range / this.tickInterval);\n                                }\n                                else {\n                                    this.numberTicks = 2 + Math.ceil((dim - (this.tickSpacing - 1)) / this.tickSpacing);\n                                }\n                            }\n\n                            if (this.tickInterval == null) {\n                                // get a tick interval\n                                ti = range / (this.numberTicks - 1);\n\n                                if (ti < 1) {\n                                    temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti) / Math.LN10)));\n                                }\n                                else {\n                                    temp = 1;\n                                }\n                                this.tickInterval = Math.ceil(ti * temp * this.pad) / temp;\n                            }\n                            else {\n                                temp = 1 / this.tickInterval;\n                            }\n\n                            // try to compute a nicer, more even tick interval\n                            // temp = Math.pow(10, Math.floor(Math.log(ti)/Math.LN10));\n                            // this.tickInterval = Math.ceil(ti/temp) * temp;\n                            rrange = this.tickInterval * (this.numberTicks - 1);\n                            margin = (rrange - range) / 2;\n\n                            if (this.min == null) {\n                                this.min = Math.floor(temp * (min - margin)) / temp;\n                            }\n                            if (this.max == null) {\n                                this.max = this.min + rrange;\n                            }\n                        }\n\n                        // Compute a somewhat decent format string if it is needed.\n                        // get precision of interval and determine a format string.\n                        var sf = $.jqplot.getSignificantFigures(this.tickInterval);\n\n                        var fstr;\n\n                        // if we have only a whole number, use integer formatting\n                        if (sf.digitsLeft >= sf.significantDigits) {\n                            fstr = '%d';\n                        }\n\n                        else {\n                            var temp = Math.max(0, 5 - sf.digitsLeft);\n                            temp = Math.min(temp, sf.digitsRight);\n                            fstr = '%.' + temp + 'f';\n                        }\n\n                        this._autoFormatString = fstr;\n                    }\n\n                    // Use the default algorithm which pads each axis to make the chart\n                    // centered nicely on the grid.\n                    else {\n\n                        rmin = (this.min != null) ? this.min : min - range * (this.padMin - 1);\n                        rmax = (this.max != null) ? this.max : max + range * (this.padMax - 1);\n                        range = rmax - rmin;\n\n                        if (this.numberTicks == null) {\n                            // if tickInterval is specified by user, we will ignore computed maximum.\n                            // max will be equal or greater to fit even # of ticks.\n                            if (this.tickInterval != null) {\n                                this.numberTicks = Math.ceil((rmax - rmin) / this.tickInterval) + 1;\n                            }\n                            else if (dim > 100) {\n                                this.numberTicks = parseInt(3 + (dim - 100) / 75, 10);\n                            }\n                            else {\n                                this.numberTicks = 2;\n                            }\n                        }\n\n                        if (this.tickInterval == null) {\n                            this.tickInterval = range / (this.numberTicks - 1);\n                        }\n\n                        if (this.max == null) {\n                            rmax = rmin + this.tickInterval * (this.numberTicks - 1);\n                        }\n                        if (this.min == null) {\n                            rmin = rmax - this.tickInterval * (this.numberTicks - 1);\n                        }\n\n                        // get precision of interval and determine a format string.\n                        var sf = $.jqplot.getSignificantFigures(this.tickInterval);\n\n                        var fstr;\n\n                        // if we have only a whole number, use integer formatting\n                        if (sf.digitsLeft >= sf.significantDigits) {\n                            fstr = '%d';\n                        }\n\n                        else {\n                            var temp = Math.max(0, 5 - sf.digitsLeft);\n                            temp = Math.min(temp, sf.digitsRight);\n                            fstr = '%.' + temp + 'f';\n                        }\n\n\n                        this._autoFormatString = fstr;\n\n                        this.min = rmin;\n                        this.max = rmax;\n                    }\n\n                    if (this.renderer.constructor == $.jqplot.LinearAxisRenderer && this._autoFormatString == '') {\n                        // fix for misleading tick display with small range and low precision.\n                        range = this.max - this.min;\n                        // figure out precision\n                        var temptick = new this.tickRenderer(this.tickOptions);\n                        // use the tick formatString or, the default.\n                        var fs = temptick.formatString || $.jqplot.config.defaultTickFormatString;\n                        var fs = fs.match($.jqplot.sprintf.regex)[0];\n                        var precision = 0;\n                        if (fs) {\n                            if (fs.search(/[fFeEgGpP]/) > -1) {\n                                var m = fs.match(/\\%\\.(\\d{0,})?[eEfFgGpP]/);\n                                if (m) {\n                                    precision = parseInt(m[1], 10);\n                                }\n                                else {\n                                    precision = 6;\n                                }\n                            }\n                            else if (fs.search(/[di]/) > -1) {\n                                precision = 0;\n                            }\n                            // fact will be <= 1;\n                            var fact = Math.pow(10, -precision);\n                            if (this.tickInterval < fact) {\n                                // need to correct underrange\n                                if (userNT == null && userTI == null) {\n                                    this.tickInterval = fact;\n                                    if (userMax == null && userMin == null) {\n                                        // this.min = Math.floor((this._dataBounds.min - this.tickInterval)/fact) * fact;\n                                        this.min = Math.floor(this._dataBounds.min / fact) * fact;\n                                        if (this.min == this._dataBounds.min) {\n                                            this.min = this._dataBounds.min - this.tickInterval;\n                                        }\n                                        // this.max = Math.ceil((this._dataBounds.max + this.tickInterval)/fact) * fact;\n                                        this.max = Math.ceil(this._dataBounds.max / fact) * fact;\n                                        if (this.max == this._dataBounds.max) {\n                                            this.max = this._dataBounds.max + this.tickInterval;\n                                        }\n                                        var n = (this.max - this.min) / this.tickInterval;\n                                        n = n.toFixed(11);\n                                        n = Math.ceil(n);\n                                        this.numberTicks = n + 1;\n                                    }\n                                    else if (userMax == null) {\n                                        // add one tick for top of range.\n                                        var n = (this._dataBounds.max - this.min) / this.tickInterval;\n                                        n = n.toFixed(11);\n                                        this.numberTicks = Math.ceil(n) + 2;\n                                        this.max = this.min + this.tickInterval * (this.numberTicks - 1);\n                                    }\n                                    else if (userMin == null) {\n                                        // add one tick for bottom of range.\n                                        var n = (this.max - this._dataBounds.min) / this.tickInterval;\n                                        n = n.toFixed(11);\n                                        this.numberTicks = Math.ceil(n) + 2;\n                                        this.min = this.max - this.tickInterval * (this.numberTicks - 1);\n                                    }\n                                    else {\n                                        // calculate a number of ticks so max is within axis scale\n                                        this.numberTicks = Math.ceil((userMax - userMin) / this.tickInterval) + 1;\n                                        // if user's min and max don't fit evenly in ticks, adjust.\n                                        // This takes care of cases such as user min set to 0, max set to 3.5 but tick\n                                        // format string set to %d (integer ticks)\n                                        this.min = Math.floor(userMin * Math.pow(10, precision)) / Math.pow(10, precision);\n                                        this.max = Math.ceil(userMax * Math.pow(10, precision)) / Math.pow(10, precision);\n                                        // this.max = this.min + this.tickInterval*(this.numberTicks-1);\n                                        this.numberTicks = Math.ceil((this.max - this.min) / this.tickInterval) + 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                }\n\n                if (this._overrideFormatString && this._autoFormatString != '') {\n                    this.tickOptions = this.tickOptions || {};\n                    this.tickOptions.formatString = this._autoFormatString;\n                }\n\n                var t, to;\n                for (var i = 0; i < this.numberTicks; i++) {\n                    tt = this.min + i * this.tickInterval;\n                    t = new this.tickRenderer(this.tickOptions);\n                    // var t = new $.jqplot.AxisTickRenderer(this.tickOptions);\n\n                    t.setTick(tt, this.name);\n                    this._ticks.push(t);\n\n                    if (i < this.numberTicks - 1) {\n                        for (var j = 0; j < this.minorTicks; j++) {\n                            tt += this.tickInterval / (this.minorTicks + 1);\n                            to = $.extend(true, {}, this.tickOptions, {\n                                name: this.name,\n                                value: tt,\n                                label: '',\n                                isMinorTick: true\n                            });\n                            t = new this.tickRenderer(to);\n                            this._ticks.push(t);\n                        }\n                    }\n                    t = null;\n                }\n            }\n\n            if (this.tickInset) {\n                this.min = this.min - this.tickInset * this.tickInterval;\n                this.max = this.max + this.tickInset * this.tickInterval;\n            }\n\n            ticks = null;\n        };\n\n        // Used to reset just the values of the ticks and then repack, which will\n        // recalculate the positioning functions.  It is assuemd that the\n        // number of ticks is the same and the values of the new array are at the\n        // proper interval.\n        // This method needs to be called with the scope of an axis object, like:\n        //\n        // > plot.axes.yaxis.renderer.resetTickValues.call(plot.axes.yaxis, yarr);\n        //\n        $.jqplot.LinearAxisRenderer.prototype.resetTickValues = function (opts) {\n            if ($.isArray(opts) && opts.length == this._ticks.length) {\n                var t;\n                for (var i = 0; i < opts.length; i++) {\n                    t = this._ticks[i];\n                    t.value = opts[i];\n                    t.label = t.formatter(t.formatString, opts[i]);\n                    t.label = t.prefix + t.label;\n                    t._elem.html(t.label);\n                }\n                t = null;\n                this.min = $.jqplot.arrayMin(opts);\n                this.max = $.jqplot.arrayMax(opts);\n                this.pack();\n            }\n            // Not implemented yet.\n            // else if ($.isPlainObject(opts)) {\n            //\n            // }\n        };\n\n        // called with scope of axis\n        $.jqplot.LinearAxisRenderer.prototype.pack = function (pos, offsets) {\n            // Add defaults for repacking from resetTickValues function.\n            pos = pos || {};\n            offsets = offsets || this._offsets;\n\n            var ticks = this._ticks;\n            var max = this.max;\n            var min = this.min;\n            var offmax = offsets.max;\n            var offmin = offsets.min;\n            var lshow = (this._label == null) ? false : this._label.show;\n\n            for (var p in pos) {\n                this._elem.css(p, pos[p]);\n            }\n\n            this._offsets = offsets;\n            // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.\n            var pixellength = offmax - offmin;\n            var unitlength = max - min;\n\n            // point to unit and unit to point conversions references to Plot DOM element top left corner.\n            if (this.breakPoints) {\n                unitlength = unitlength - this.breakPoints[1] + this.breakPoints[0];\n\n                this.p2u = function (p) {\n                    return (p - offmin) * unitlength / pixellength + min;\n                };\n\n                this.u2p = function (u) {\n                    if (u > this.breakPoints[0] && u < this.breakPoints[1]) {\n                        u = this.breakPoints[0];\n                    }\n                    if (u <= this.breakPoints[0]) {\n                        return (u - min) * pixellength / unitlength + offmin;\n                    }\n                    else {\n                        return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength + offmin;\n                    }\n                };\n\n                if (this.name.charAt(0) == 'x') {\n                    this.series_u2p = function (u) {\n                        if (u > this.breakPoints[0] && u < this.breakPoints[1]) {\n                            u = this.breakPoints[0];\n                        }\n                        if (u <= this.breakPoints[0]) {\n                            return (u - min) * pixellength / unitlength;\n                        }\n                        else {\n                            return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength;\n                        }\n                    };\n                    this.series_p2u = function (p) {\n                        return p * unitlength / pixellength + min;\n                    };\n                }\n\n                else {\n                    this.series_u2p = function (u) {\n                        if (u > this.breakPoints[0] && u < this.breakPoints[1]) {\n                            u = this.breakPoints[0];\n                        }\n                        if (u >= this.breakPoints[1]) {\n                            return (u - max) * pixellength / unitlength;\n                        }\n                        else {\n                            return (u + this.breakPoints[1] - this.breakPoints[0] - max) * pixellength / unitlength;\n                        }\n                    };\n                    this.series_p2u = function (p) {\n                        return p * unitlength / pixellength + max;\n                    };\n                }\n            }\n            else {\n                this.p2u = function (p) {\n                    return (p - offmin) * unitlength / pixellength + min;\n                };\n\n                this.u2p = function (u) {\n                    return (u - min) * pixellength / unitlength + offmin;\n                };\n\n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    this.series_u2p = function (u) {\n                        return (u - min) * pixellength / unitlength;\n                    };\n                    this.series_p2u = function (p) {\n                        return p * unitlength / pixellength + min;\n                    };\n                }\n\n                else {\n                    this.series_u2p = function (u) {\n                        return (u - max) * pixellength / unitlength;\n                    };\n                    this.series_p2u = function (p) {\n                        return p * unitlength / pixellength + max;\n                    };\n                }\n            }\n\n            if (this.show) {\n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    for (var i = 0; i < ticks.length; i++) {\n                        var t = ticks[i];\n                        if (t.show && t.showLabel) {\n                            var shim;\n\n                            if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                                // will need to adjust auto positioning based on which axis this is.\n                                var temp = (this.name == 'xaxis') ? 1 : -1;\n                                switch (t.labelPosition) {\n                                    case 'auto':\n                                        // position at end\n                                        if (temp * t.angle < 0) {\n                                            shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                        }\n                                        // position at start\n                                        else {\n                                            shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                        }\n                                        break;\n                                    case 'end':\n                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                        break;\n                                    case 'start':\n                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                        break;\n                                    case 'middle':\n                                        shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                        break;\n                                    default:\n                                        shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                        break;\n                                }\n                            }\n                            else {\n                                shim = -t.getWidth() / 2;\n                            }\n                            var val = this.u2p(t.value) + shim + 'px';\n                            t._elem.css('left', val);\n                            t.pack();\n                        }\n                    }\n                    if (lshow) {\n                        var w = this._label._elem.outerWidth(true);\n                        this._label._elem.css('left', offmin + pixellength / 2 - w / 2 + 'px');\n                        if (this.name == 'xaxis') {\n                            this._label._elem.css('bottom', '0px');\n                        }\n                        else {\n                            this._label._elem.css('top', '0px');\n                        }\n                        this._label.pack();\n                    }\n                }\n                else {\n                    for (var i = 0; i < ticks.length; i++) {\n                        var t = ticks[i];\n                        if (t.show && t.showLabel) {\n                            var shim;\n                            if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                                // will need to adjust auto positioning based on which axis this is.\n                                var temp = (this.name == 'yaxis') ? 1 : -1;\n                                switch (t.labelPosition) {\n                                    case 'auto':\n                                    // position at end\n                                    case 'end':\n                                        if (temp * t.angle < 0) {\n                                            shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                        }\n                                        else {\n                                            shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                        }\n                                        break;\n                                    case 'start':\n                                        if (t.angle > 0) {\n                                            shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                        }\n                                        else {\n                                            shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                        }\n                                        break;\n                                    case 'middle':\n                                        // if (t.angle > 0) {\n                                        //     shim = -t.getHeight()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                        // }\n                                        // else {\n                                        //     shim = -t.getHeight()/2 - t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                        // }\n                                        shim = -t.getHeight() / 2;\n                                        break;\n                                    default:\n                                        shim = -t.getHeight() / 2;\n                                        break;\n                                }\n                            }\n                            else {\n                                shim = -t.getHeight() / 2;\n                            }\n\n                            var val = this.u2p(t.value) + shim + 'px';\n                            t._elem.css('top', val);\n                            t.pack();\n                        }\n                    }\n                    if (lshow) {\n                        var h = this._label._elem.outerHeight(true);\n                        this._label._elem.css('top', offmax - pixellength / 2 - h / 2 + 'px');\n                        if (this.name == 'yaxis') {\n                            this._label._elem.css('left', '0px');\n                        }\n                        else {\n                            this._label._elem.css('right', '0px');\n                        }\n                        this._label.pack();\n                    }\n                }\n            }\n\n            ticks = null;\n        };\n\n\n        /**\n         * The following code was generaously given to me a while back by Scott Prahl.\n         * He did a good job at computing axes min, max and number of ticks for the\n         * case where the user has not set any scale related parameters (tickInterval,\n         * numberTicks, min or max).  I had ignored this use case for a long time,\n         * focusing on the more difficult case where user has set some option controlling\n         * tick generation.  Anyway, about time I got this into jqPlot.\n         * Thanks Scott!!\n         */\n\n        /**\n         * Copyright (c) 2010 Scott Prahl\n         * The next three routines are currently available for use in all personal\n         * or commercial projects under both the MIT and GPL version 2.0 licenses.\n         * This means that you can choose the license that best suits your project\n         * and use it accordingly.\n         */\n\n        // A good format string depends on the interval. If the interval is greater\n        // than 1 then there is no need to show any decimal digits. If it is < 1.0, then\n        // use the magnitude of the interval to determine the number of digits to show.\n        function bestFormatString(interval) {\n            var fstr;\n            interval = Math.abs(interval);\n            if (interval >= 10) {\n                fstr = '%d';\n            }\n\n            else if (interval > 1) {\n                if (interval === parseInt(interval, 10)) {\n                    fstr = '%d';\n                }\n                else {\n                    fstr = '%.1f';\n                }\n            }\n\n            else {\n                var expv = -Math.floor(Math.log(interval) / Math.LN10);\n                fstr = '%.' + expv + 'f';\n            }\n\n            return fstr;\n        }\n\n        var _factors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.8, 1, 2, 3, 4, 5];\n\n        var _getLowerFactor = function (f) {\n            var i = _factors.indexOf(f);\n            if (i > 0) {\n                return _factors[i - 1];\n            }\n            else {\n                return _factors[_factors.length - 1] / 100;\n            }\n        };\n\n        var _getHigherFactor = function (f) {\n            var i = _factors.indexOf(f);\n            if (i < _factors.length - 1) {\n                return _factors[i + 1];\n            }\n            else {\n                return _factors[0] * 100;\n            }\n        };\n\n        // Given a fixed minimum and maximum and a target number ot ticks\n        // figure out the best interval and\n        // return min, max, number ticks, format string and tick interval\n        function bestConstrainedInterval(min, max, nttarget) {\n            // run through possible number to ticks and see which interval is best\n            var low = Math.floor(nttarget / 2);\n            var hi = Math.ceil(nttarget * 1.5);\n            var badness = Number.MAX_VALUE;\n            var r = (max - min);\n            var temp;\n            var sd;\n            var bestNT;\n            var gsf = $.jqplot.getSignificantFigures;\n            var fsd;\n            var fs;\n            var currentNT;\n            var bestPrec;\n\n            for (var i = 0, l = hi - low + 1; i < l; i++) {\n                currentNT = low + i;\n                temp = r / (currentNT - 1);\n                sd = gsf(temp);\n\n                temp = Math.abs(nttarget - currentNT) + sd.digitsRight;\n                if (temp < badness) {\n                    badness = temp;\n                    bestNT = currentNT;\n                    bestPrec = sd.digitsRight;\n                }\n                else if (temp === badness) {\n                    // let nicer ticks trump number ot ticks\n                    if (sd.digitsRight < bestPrec) {\n                        bestNT = currentNT;\n                        bestPrec = sd.digitsRight;\n                    }\n                }\n\n            }\n\n            fsd = Math.max(bestPrec, Math.max(gsf(min).digitsRight, gsf(max).digitsRight));\n            if (fsd === 0) {\n                fs = '%d';\n            }\n            else {\n                fs = '%.' + fsd + 'f';\n            }\n            temp = r / (bestNT - 1);\n            // min, max, number ticks, format string, tick interval\n            return [min, max, bestNT, fs, temp];\n        }\n\n        // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n\n        // it is based soley on the range and number of ticks.  So if user specifies\n        // number of ticks, use this.\n        function bestInterval(range, numberTicks) {\n            numberTicks = numberTicks || 7;\n            var minimum = range / (numberTicks - 1);\n            var magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.LN10));\n            var residual = minimum / magnitude;\n            var interval;\n            // \"nicest\" ranges are 1, 2, 5 or powers of these.\n            // for magnitudes below 1, only allow these.\n            if (magnitude < 1) {\n                if (residual > 5) {\n                    interval = 10 * magnitude;\n                }\n                else if (residual > 2) {\n                    interval = 5 * magnitude;\n                }\n                else if (residual > 1) {\n                    interval = 2 * magnitude;\n                }\n                else {\n                    interval = magnitude;\n                }\n            }\n            // for large ranges (whole integers), allow intervals like 3, 4 or powers of these.\n            // this helps a lot with poor choices for number of ticks.\n            else {\n                if (residual > 5) {\n                    interval = 10 * magnitude;\n                }\n                else if (residual > 4) {\n                    interval = 5 * magnitude;\n                }\n                else if (residual > 3) {\n                    interval = 4 * magnitude;\n                }\n                else if (residual > 2) {\n                    interval = 3 * magnitude;\n                }\n                else if (residual > 1) {\n                    interval = 2 * magnitude;\n                }\n                else {\n                    interval = magnitude;\n                }\n            }\n\n            return interval;\n        }\n\n        // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n\n        // it is based soley on the range of data, number of ticks must be computed later.\n        function bestLinearInterval(range, scalefact) {\n            scalefact = scalefact || 1;\n            var expv = Math.floor(Math.log(range) / Math.LN10);\n            var magnitude = Math.pow(10, expv);\n            // 0 < f < 10\n            var f = range / magnitude;\n            var fact;\n            // for large plots, scalefact will decrease f and increase number of ticks.\n            // for small plots, scalefact will increase f and decrease number of ticks.\n            f = f / scalefact;\n\n            // for large plots, smaller interval, more ticks.\n            if (f <= 0.38) {\n                fact = 0.1;\n            }\n            else if (f <= 1.6) {\n                fact = 0.2;\n            }\n            else if (f <= 4.0) {\n                fact = 0.5;\n            }\n            else if (f <= 8.0) {\n                fact = 1.0;\n            }\n            // for very small plots, larger interval, less ticks in number ticks\n            else if (f <= 16.0) {\n                fact = 2;\n            }\n            else {\n                fact = 5;\n            }\n\n            return fact * magnitude;\n        }\n\n        function bestLinearComponents(range, scalefact) {\n            var expv = Math.floor(Math.log(range) / Math.LN10);\n            var magnitude = Math.pow(10, expv);\n            // 0 < f < 10\n            var f = range / magnitude;\n            var interval;\n            var fact;\n            // for large plots, scalefact will decrease f and increase number of ticks.\n            // for small plots, scalefact will increase f and decrease number of ticks.\n            f = f / scalefact;\n\n            // for large plots, smaller interval, more ticks.\n            if (f <= 0.38) {\n                fact = 0.1;\n            }\n            else if (f <= 1.6) {\n                fact = 0.2;\n            }\n            else if (f <= 4.0) {\n                fact = 0.5;\n            }\n            else if (f <= 8.0) {\n                fact = 1.0;\n            }\n            // for very small plots, larger interval, less ticks in number ticks\n            else if (f <= 16.0) {\n                fact = 2;\n            }\n            // else if (f<=20.0) {\n            //     fact = 3;\n            // }\n            // else if (f<=24.0) {\n            //     fact = 4;\n            // }\n            else {\n                fact = 5;\n            }\n\n            interval = fact * magnitude;\n\n            return [interval, fact, magnitude];\n        }\n\n        // Given the min and max for a dataset, return suitable endpoints\n        // for the graphing, a good number for the number of ticks, and a\n        // format string so that extraneous digits are not displayed.\n        // returned is an array containing [min, max, nTicks, format]\n        $.jqplot.LinearTickGenerator = function (axis_min, axis_max, scalefact, numberTicks, keepMin, keepMax) {\n            // Set to preserve EITHER min OR max.\n            // If min is preserved, max must be free.\n            keepMin = (keepMin === null) ? false : keepMin;\n            keepMax = (keepMax === null || keepMin) ? false : keepMax;\n            // if endpoints are equal try to include zero otherwise include one\n            if (axis_min === axis_max) {\n                axis_max = (axis_max) ? 0 : 1;\n            }\n\n            scalefact = scalefact || 1.0;\n\n            // make sure range is positive\n            if (axis_max < axis_min) {\n                var a = axis_max;\n                axis_max = axis_min;\n                axis_min = a;\n            }\n\n            var r = [];\n            var ss = bestLinearInterval(axis_max - axis_min, scalefact);\n\n            var gsf = $.jqplot.getSignificantFigures;\n\n            if (numberTicks == null) {\n\n                // Figure out the axis min, max and number of ticks\n                // the min and max will be some multiple of the tick interval,\n                // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the\n                // axis min is negative, 0 will be a tick.\n                if (!keepMin && !keepMax) {\n                    r[0] = Math.floor(axis_min / ss) * ss;  // min\n                    r[1] = Math.ceil(axis_max / ss) * ss;   // max\n                    r[2] = Math.round((r[1] - r[0]) / ss + 1.0);  // number of ticks\n                    r[3] = bestFormatString(ss);            // format string\n                    r[4] = ss;                              // tick Interval\n                }\n\n                else if (keepMin) {\n                    r[0] = axis_min;                                        // min\n                    r[2] = Math.ceil((axis_max - axis_min) / ss + 1.0);     // number of ticks\n                    r[1] = axis_min + (r[2] - 1) * ss;                      // max\n                    var digitsMin = gsf(axis_min).digitsRight;\n                    var digitsSS = gsf(ss).digitsRight;\n                    if (digitsMin < digitsSS) {\n                        r[3] = bestFormatString(ss);                        // format string\n                    }\n                    else {\n                        r[3] = '%.' + digitsMin + 'f';\n                    }\n                    r[4] = ss;                                              // tick Interval\n                }\n\n                else if (keepMax) {\n                    r[1] = axis_max;                                        // max\n                    r[2] = Math.ceil((axis_max - axis_min) / ss + 1.0);     // number of ticks\n                    r[0] = axis_max - (r[2] - 1) * ss;                      // min\n                    var digitsMax = gsf(axis_max).digitsRight;\n                    var digitsSS = gsf(ss).digitsRight;\n                    if (digitsMax < digitsSS) {\n                        r[3] = bestFormatString(ss);                        // format string\n                    }\n                    else {\n                        r[3] = '%.' + digitsMax + 'f';\n                    }\n                    r[4] = ss;                                              // tick Interval\n                }\n            }\n\n            else {\n                var tempr = [];\n\n                // Figure out the axis min, max and number of ticks\n                // the min and max will be some multiple of the tick interval,\n                // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the\n                // axis min is negative, 0 will be a tick.\n                tempr[0] = Math.floor(axis_min / ss) * ss;  // min\n                tempr[1] = Math.ceil(axis_max / ss) * ss;   // max\n                tempr[2] = Math.round((tempr[1] - tempr[0]) / ss + 1.0);    // number of ticks\n                tempr[3] = bestFormatString(ss);            // format string\n                tempr[4] = ss;                              // tick Interval\n\n                // first, see if we happen to get the right number of ticks\n                if (tempr[2] === numberTicks) {\n                    r = tempr;\n                }\n\n                else {\n\n                    var newti = bestInterval(tempr[1] - tempr[0], numberTicks);\n\n                    r[0] = tempr[0];                        // min\n                    r[2] = numberTicks;                     // number of ticks\n                    r[4] = newti;                           // tick interval\n                    r[3] = bestFormatString(newti);         // format string\n                    r[1] = r[0] + (r[2] - 1) * r[4];        // max\n                }\n            }\n\n            return r;\n        };\n\n        $.jqplot.LinearTickGenerator.bestLinearInterval = bestLinearInterval;\n        $.jqplot.LinearTickGenerator.bestInterval = bestInterval;\n        $.jqplot.LinearTickGenerator.bestLinearComponents = bestLinearComponents;\n        $.jqplot.LinearTickGenerator.bestConstrainedInterval = bestConstrainedInterval;\n\n\n        // class: $.jqplot.MarkerRenderer\n        // The default jqPlot marker renderer, rendering the points on the line.\n        $.jqplot.MarkerRenderer = function (options) {\n            // Group: Properties\n\n            // prop: show\n            // whether or not to show the marker.\n            this.show = true;\n            // prop: style\n            // One of diamond, circle, square, x, plus, dash, filledDiamond, filledCircle, filledSquare\n            this.style = 'filledCircle';\n            // prop: lineWidth\n            // size of the line for non-filled markers.\n            this.lineWidth = 2;\n            // prop: size\n            // Size of the marker (diameter or circle, length of edge of square, etc.)\n            this.size = 9.0;\n            // prop: color\n            // color of marker.  Will be set to color of series by default on init.\n            this.color = '#666666';\n            // prop: shadow\n            // whether or not to draw a shadow on the line\n            this.shadow = true;\n            // prop: shadowAngle\n            // Shadow angle in degrees\n            this.shadowAngle = 45;\n            // prop: shadowOffset\n            // Shadow offset from line in pixels\n            this.shadowOffset = 1;\n            // prop: shadowDepth\n            // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n            this.shadowDepth = 3;\n            // prop: shadowAlpha\n            // Alpha channel transparency of shadow.  0 = transparent.\n            this.shadowAlpha = '0.07';\n            // prop: shadowRenderer\n            // Renderer that will draws the shadows on the marker.\n            this.shadowRenderer = new $.jqplot.ShadowRenderer();\n            // prop: shapeRenderer\n            // Renderer that will draw the marker.\n            this.shapeRenderer = new $.jqplot.ShapeRenderer();\n\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n            var sdopt = {\n                angle: this.shadowAngle,\n                offset: this.shadowOffset,\n                alpha: this.shadowAlpha,\n                lineWidth: this.lineWidth,\n                depth: this.shadowDepth,\n                closePath: true\n            };\n            if (this.style.indexOf('filled') != -1) {\n                sdopt.fill = true;\n            }\n            if (this.style.indexOf('ircle') != -1) {\n                sdopt.isarc = true;\n                sdopt.closePath = false;\n            }\n            this.shadowRenderer.init(sdopt);\n\n            var shopt = {\n                fill: false,\n                isarc: false,\n                strokeStyle: this.color,\n                fillStyle: this.color,\n                lineWidth: this.lineWidth,\n                closePath: true\n            };\n            if (this.style.indexOf('filled') != -1) {\n                shopt.fill = true;\n            }\n            if (this.style.indexOf('ircle') != -1) {\n                shopt.isarc = true;\n                shopt.closePath = false;\n            }\n            this.shapeRenderer.init(shopt);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawDiamond = function (x, y, ctx, fill, options) {\n            var stretch = 1.2;\n            var dx = this.size / 2 / stretch;\n            var dy = this.size / 2 * stretch;\n            var points = [[x - dx, y], [x, y + dy], [x + dx, y], [x, y - dy]];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points);\n            }\n            this.shapeRenderer.draw(ctx, points, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawPlus = function (x, y, ctx, fill, options) {\n            var stretch = 1.0;\n            var dx = this.size / 2 * stretch;\n            var dy = this.size / 2 * stretch;\n            var points1 = [[x, y - dy], [x, y + dy]];\n            var points2 = [[x + dx, y], [x - dx, y]];\n            var opts = $.extend(true, {}, this.options, {closePath: false});\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points1, {closePath: false});\n                this.shadowRenderer.draw(ctx, points2, {closePath: false});\n            }\n            this.shapeRenderer.draw(ctx, points1, opts);\n            this.shapeRenderer.draw(ctx, points2, opts);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawX = function (x, y, ctx, fill, options) {\n            var stretch = 1.0;\n            var dx = this.size / 2 * stretch;\n            var dy = this.size / 2 * stretch;\n            var opts = $.extend(true, {}, this.options, {closePath: false});\n            var points1 = [[x - dx, y - dy], [x + dx, y + dy]];\n            var points2 = [[x - dx, y + dy], [x + dx, y - dy]];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points1, {closePath: false});\n                this.shadowRenderer.draw(ctx, points2, {closePath: false});\n            }\n            this.shapeRenderer.draw(ctx, points1, opts);\n            this.shapeRenderer.draw(ctx, points2, opts);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawDash = function (x, y, ctx, fill, options) {\n            var stretch = 1.0;\n            var dx = this.size / 2 * stretch;\n            var dy = this.size / 2 * stretch;\n            var points = [[x - dx, y], [x + dx, y]];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points);\n            }\n            this.shapeRenderer.draw(ctx, points, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawLine = function (p1, p2, ctx, fill, options) {\n            var points = [p1, p2];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points);\n            }\n            this.shapeRenderer.draw(ctx, points, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawSquare = function (x, y, ctx, fill, options) {\n            var stretch = 1.0;\n            var dx = this.size / 2 / stretch;\n            var dy = this.size / 2 * stretch;\n            var points = [[x - dx, y - dy], [x - dx, y + dy], [x + dx, y + dy], [x + dx, y - dy]];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points);\n            }\n            this.shapeRenderer.draw(ctx, points, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.drawCircle = function (x, y, ctx, fill, options) {\n            var radius = this.size / 2;\n            var end = 2 * Math.PI;\n            var points = [x, y, radius, 0, end, true];\n            if (this.shadow) {\n                this.shadowRenderer.draw(ctx, points);\n            }\n            this.shapeRenderer.draw(ctx, points, options);\n        };\n\n        $.jqplot.MarkerRenderer.prototype.draw = function (x, y, ctx, options) {\n            options = options || {};\n            // hack here b/c shape renderer uses canvas based color style options\n            // and marker uses css style names.\n            if (options.show == null || options.show != false) {\n                if (options.color && !options.fillStyle) {\n                    options.fillStyle = options.color;\n                }\n                if (options.color && !options.strokeStyle) {\n                    options.strokeStyle = options.color;\n                }\n                switch (this.style) {\n                    case 'diamond':\n                        this.drawDiamond(x, y, ctx, false, options);\n                        break;\n                    case 'filledDiamond':\n                        this.drawDiamond(x, y, ctx, true, options);\n                        break;\n                    case 'circle':\n                        this.drawCircle(x, y, ctx, false, options);\n                        break;\n                    case 'filledCircle':\n                        this.drawCircle(x, y, ctx, true, options);\n                        break;\n                    case 'square':\n                        this.drawSquare(x, y, ctx, false, options);\n                        break;\n                    case 'filledSquare':\n                        this.drawSquare(x, y, ctx, true, options);\n                        break;\n                    case 'x':\n                        this.drawX(x, y, ctx, true, options);\n                        break;\n                    case 'plus':\n                        this.drawPlus(x, y, ctx, true, options);\n                        break;\n                    case 'dash':\n                        this.drawDash(x, y, ctx, true, options);\n                        break;\n                    case 'line':\n                        this.drawLine(x, y, ctx, false, options);\n                        break;\n                    default:\n                        this.drawDiamond(x, y, ctx, false, options);\n                        break;\n                }\n            }\n        };\n\n        // class: $.jqplot.shadowRenderer\n        // The default jqPlot shadow renderer, rendering shadows behind shapes.\n        $.jqplot.ShadowRenderer = function (options) {\n            // Group: Properties\n\n            // prop: angle\n            // Angle of the shadow in degrees.  Measured counter-clockwise from the x axis.\n            this.angle = 45;\n            // prop: offset\n            // Pixel offset at the given shadow angle of each shadow stroke from the last stroke.\n            this.offset = 1;\n            // prop: alpha\n            // alpha transparency of shadow stroke.\n            this.alpha = 0.07;\n            // prop: lineWidth\n            // width of the shadow line stroke.\n            this.lineWidth = 1.5;\n            // prop: lineJoin\n            // How line segments of the shadow are joined.\n            this.lineJoin = 'miter';\n            // prop: lineCap\n            // how ends of the shadow line are rendered.\n            this.lineCap = 'round';\n            // prop; closePath\n            // whether line path segment is closed upon itself.\n            this.closePath = false;\n            // prop: fill\n            // whether to fill the shape.\n            this.fill = false;\n            // prop: depth\n            // how many times the shadow is stroked.  Each stroke will be offset by offset at angle degrees.\n            this.depth = 3;\n            this.strokeStyle = 'rgba(0,0,0,0.1)';\n            // prop: isarc\n            // whether the shadow is an arc or not.\n            this.isarc = false;\n\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.ShadowRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        // function: draw\n        // draws an transparent black (i.e. gray) shadow.\n        //\n        // ctx - canvas drawing context\n        // points - array of points or [x, y, radius, start angle (rad), end angle (rad)]\n        $.jqplot.ShadowRenderer.prototype.draw = function (ctx, points, options) {\n            ctx.save();\n            var opts = (options != null) ? options : {};\n            var fill = (opts.fill != null) ? opts.fill : this.fill;\n            var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;\n            var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;\n            var offset = (opts.offset != null) ? opts.offset : this.offset;\n            var alpha = (opts.alpha != null) ? opts.alpha : this.alpha;\n            var depth = (opts.depth != null) ? opts.depth : this.depth;\n            var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;\n            var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;\n            ctx.lineWidth = (opts.lineWidth != null) ? opts.lineWidth : this.lineWidth;\n            ctx.lineJoin = (opts.lineJoin != null) ? opts.lineJoin : this.lineJoin;\n            ctx.lineCap = (opts.lineCap != null) ? opts.lineCap : this.lineCap;\n            ctx.strokeStyle = opts.strokeStyle || this.strokeStyle || 'rgba(0,0,0,' + alpha + ')';\n            ctx.fillStyle = opts.fillStyle || this.fillStyle || 'rgba(0,0,0,' + alpha + ')';\n            for (var j = 0; j < depth; j++) {\n                var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);\n                ctx.translate(Math.cos(this.angle * Math.PI / 180) * offset, Math.sin(this.angle * Math.PI / 180) * offset);\n                ctxPattern.beginPath();\n                if (isarc) {\n                    ctx.arc(points[0], points[1], points[2], points[3], points[4], true);\n                }\n                else if (fillRect) {\n                    if (fillRect) {\n                        ctx.fillRect(points[0], points[1], points[2], points[3]);\n                    }\n                }\n                else if (points && points.length) {\n                    var move = true;\n                    for (var i = 0; i < points.length; i++) {\n                        // skip to the first non-null point and move to it.\n                        if (points[i][0] != null && points[i][1] != null) {\n                            if (move) {\n                                ctxPattern.moveTo(points[i][0], points[i][1]);\n                                move = false;\n                            }\n                            else {\n                                ctxPattern.lineTo(points[i][0], points[i][1]);\n                            }\n                        }\n                        else {\n                            move = true;\n                        }\n                    }\n\n                }\n                if (closePath) {\n                    ctxPattern.closePath();\n                }\n                if (fill) {\n                    ctx.fill();\n                }\n                else {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n\n        // class: $.jqplot.shapeRenderer\n        // The default jqPlot shape renderer.  Given a set of points will\n        // plot them and either stroke a line (fill = false) or fill them (fill = true).\n        // If a filled shape is desired, closePath = true must also be set to close\n        // the shape.\n        $.jqplot.ShapeRenderer = function (options) {\n\n            this.lineWidth = 1.5;\n            // prop: linePattern\n            // line pattern 'dashed', 'dotted', 'solid', some combination\n            // of '-' and '.' characters such as '.-.' or a numerical array like\n            // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line,\n            // [1, 10, 20, 10] to draw a dot-dash line, and so on.\n            this.linePattern = 'solid';\n            // prop: lineJoin\n            // How line segments of the shadow are joined.\n            this.lineJoin = 'miter';\n            // prop: lineCap\n            // how ends of the shadow line are rendered.\n            this.lineCap = 'round';\n            // prop; closePath\n            // whether line path segment is closed upon itself.\n            this.closePath = false;\n            // prop: fill\n            // whether to fill the shape.\n            this.fill = false;\n            // prop: isarc\n            // whether the shadow is an arc or not.\n            this.isarc = false;\n            // prop: fillRect\n            // true to draw shape as a filled rectangle.\n            this.fillRect = false;\n            // prop: strokeRect\n            // true to draw shape as a stroked rectangle.\n            this.strokeRect = false;\n            // prop: clearRect\n            // true to cear a rectangle.\n            this.clearRect = false;\n            // prop: strokeStyle\n            // css color spec for the stoke style\n            this.strokeStyle = '#999999';\n            // prop: fillStyle\n            // css color spec for the fill style.\n            this.fillStyle = '#999999';\n\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.ShapeRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        // function: draw\n        // draws the shape.\n        //\n        // ctx - canvas drawing context\n        // points - array of points for shapes or\n        // [x, y, width, height] for rectangles or\n        // [x, y, radius, start angle (rad), end angle (rad)] for circles and arcs.\n        $.jqplot.ShapeRenderer.prototype.draw = function (ctx, points, options) {\n            ctx.save();\n            var opts = (options != null) ? options : {};\n            var fill = (opts.fill != null) ? opts.fill : this.fill;\n            var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;\n            var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;\n            var strokeRect = (opts.strokeRect != null) ? opts.strokeRect : this.strokeRect;\n            var clearRect = (opts.clearRect != null) ? opts.clearRect : this.clearRect;\n            var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;\n            var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;\n            var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);\n            ctx.lineWidth = opts.lineWidth || this.lineWidth;\n            ctx.lineJoin = opts.lineJoin || this.lineJoin;\n            ctx.lineCap = opts.lineCap || this.lineCap;\n            ctx.strokeStyle = (opts.strokeStyle || opts.color) || this.strokeStyle;\n            ctx.fillStyle = opts.fillStyle || this.fillStyle;\n            ctx.beginPath();\n            if (isarc) {\n                ctx.arc(points[0], points[1], points[2], points[3], points[4], true);\n                if (closePath) {\n                    ctx.closePath();\n                }\n                if (fill) {\n                    ctx.fill();\n                }\n                else {\n                    ctx.stroke();\n                }\n                ctx.restore();\n                return;\n            }\n            else if (clearRect) {\n                ctx.clearRect(points[0], points[1], points[2], points[3]);\n                ctx.restore();\n                return;\n            }\n            else if (fillRect || strokeRect) {\n                if (fillRect) {\n                    ctx.fillRect(points[0], points[1], points[2], points[3]);\n                }\n                if (strokeRect) {\n                    ctx.strokeRect(points[0], points[1], points[2], points[3]);\n                    ctx.restore();\n                    return;\n                }\n            }\n            else if (points && points.length) {\n                var move = true;\n                for (var i = 0; i < points.length; i++) {\n                    // skip to the first non-null point and move to it.\n                    if (points[i][0] != null && points[i][1] != null) {\n                        if (move) {\n                            ctxPattern.moveTo(points[i][0], points[i][1]);\n                            move = false;\n                        }\n                        else {\n                            ctxPattern.lineTo(points[i][0], points[i][1]);\n                        }\n                    }\n                    else {\n                        move = true;\n                    }\n                }\n                if (closePath) {\n                    ctxPattern.closePath();\n                }\n                if (fill) {\n                    ctx.fill();\n                }\n                else {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n\n        // class $.jqplot.TableLegendRenderer\n        // The default legend renderer for jqPlot.\n        $.jqplot.TableLegendRenderer = function () {\n            //\n        };\n\n        $.jqplot.TableLegendRenderer.prototype.init = function (options) {\n            $.extend(true, this, options);\n        };\n\n        $.jqplot.TableLegendRenderer.prototype.addrow = function (label, color, pad, reverse) {\n            var rs = (pad) ? this.rowSpacing + 'px' : '0px';\n            var tr;\n            var td;\n            var elem;\n            var div0;\n            var div1;\n            elem = document.createElement('tr');\n            tr = $(elem);\n            tr.addClass('jqplot-table-legend');\n            elem = null;\n\n            if (reverse) {\n                tr.prependTo(this._elem);\n            }\n\n            else {\n                tr.appendTo(this._elem);\n            }\n\n            if (this.showSwatches) {\n                td = $(document.createElement('td'));\n                td.addClass('jqplot-table-legend jqplot-table-legend-swatch');\n                td.css({textAlign: 'center', paddingTop: rs});\n\n                div0 = $(document.createElement('div'));\n                div0.addClass('jqplot-table-legend-swatch-outline');\n                div1 = $(document.createElement('div'));\n                div1.addClass('jqplot-table-legend-swatch');\n                div1.css({backgroundColor: color, borderColor: color});\n\n                tr.append(td.append(div0.append(div1)));\n\n                // $('<td class=\"jqplot-table-legend\" style=\"text-align:center;padding-top:'+rs+';\">'+\n                // '<div><div class=\"jqplot-table-legend-swatch\" style=\"background-color:'+color+';border-color:'+color+';\"></div>'+\n                // '</div></td>').appendTo(tr);\n            }\n            if (this.showLabels) {\n                td = $(document.createElement('td'));\n                td.addClass('jqplot-table-legend jqplot-table-legend-label');\n                td.css('paddingTop', rs);\n                tr.append(td);\n\n                // elem = $('<td class=\"jqplot-table-legend\" style=\"padding-top:'+rs+';\"></td>');\n                // elem.appendTo(tr);\n                if (this.escapeHtml) {\n                    td.text(label);\n                }\n                else {\n                    td.html(label);\n                }\n            }\n            td = null;\n            div0 = null;\n            div1 = null;\n            tr = null;\n            elem = null;\n        };\n\n        // called with scope of legend\n        $.jqplot.TableLegendRenderer.prototype.draw = function () {\n            if (this._elem) {\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n\n            if (this.show) {\n                var series = this._series;\n                // make a table.  one line label per row.\n                var elem = document.createElement('table');\n                this._elem = $(elem);\n                this._elem.addClass('jqplot-table-legend');\n\n                var ss = {position: 'absolute'};\n                if (this.background) {\n                    ss['background'] = this.background;\n                }\n                if (this.border) {\n                    ss['border'] = this.border;\n                }\n                if (this.fontSize) {\n                    ss['fontSize'] = this.fontSize;\n                }\n                if (this.fontFamily) {\n                    ss['fontFamily'] = this.fontFamily;\n                }\n                if (this.textColor) {\n                    ss['textColor'] = this.textColor;\n                }\n                if (this.marginTop != null) {\n                    ss['marginTop'] = this.marginTop;\n                }\n                if (this.marginBottom != null) {\n                    ss['marginBottom'] = this.marginBottom;\n                }\n                if (this.marginLeft != null) {\n                    ss['marginLeft'] = this.marginLeft;\n                }\n                if (this.marginRight != null) {\n                    ss['marginRight'] = this.marginRight;\n                }\n\n\n                var pad = false,\n                    reverse = false,\n                    s;\n                for (var i = 0; i < series.length; i++) {\n                    s = series[i];\n                    if (s._stack || s.renderer.constructor == $.jqplot.BezierCurveRenderer) {\n                        reverse = true;\n                    }\n                    if (s.show && s.showLabel) {\n                        var lt = this.labels[i] || s.label.toString();\n                        if (lt) {\n                            var color = s.color;\n                            if (reverse && i < series.length - 1) {\n                                pad = true;\n                            }\n                            else if (reverse && i == series.length - 1) {\n                                pad = false;\n                            }\n                            this.renderer.addrow.call(this, lt, color, pad, reverse);\n                            pad = true;\n                        }\n                        // let plugins add more rows to legend.  Used by trend line plugin.\n                        for (var j = 0; j < $.jqplot.addLegendRowHooks.length; j++) {\n                            var item = $.jqplot.addLegendRowHooks[j].call(this, s);\n                            if (item) {\n                                this.renderer.addrow.call(this, item.label, item.color, pad);\n                                pad = true;\n                            }\n                        }\n                        lt = null;\n                    }\n                }\n            }\n            return this._elem;\n        };\n\n        $.jqplot.TableLegendRenderer.prototype.pack = function (offsets) {\n            if (this.show) {\n                if (this.placement == 'insideGrid') {\n                    switch (this.location) {\n                        case 'nw':\n                            var a = offsets.left;\n                            var b = offsets.top;\n                            this._elem.css('left', a);\n                            this._elem.css('top', b);\n                            break;\n                        case 'n':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            var b = offsets.top;\n                            this._elem.css('left', a);\n                            this._elem.css('top', b);\n                            break;\n                        case 'ne':\n                            var a = offsets.right;\n                            var b = offsets.top;\n                            this._elem.css({right: a, top: b});\n                            break;\n                        case 'e':\n                            var a = offsets.right;\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({right: a, top: b});\n                            break;\n                        case 'se':\n                            var a = offsets.right;\n                            var b = offsets.bottom;\n                            this._elem.css({right: a, bottom: b});\n                            break;\n                        case 's':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            var b = offsets.bottom;\n                            this._elem.css({left: a, bottom: b});\n                            break;\n                        case 'sw':\n                            var a = offsets.left;\n                            var b = offsets.bottom;\n                            this._elem.css({left: a, bottom: b});\n                            break;\n                        case 'w':\n                            var a = offsets.left;\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({left: a, top: b});\n                            break;\n                        default:  // same as 'se'\n                            var a = offsets.right;\n                            var b = offsets.bottom;\n                            this._elem.css({right: a, bottom: b});\n                            break;\n                    }\n\n                }\n                else if (this.placement == 'outside') {\n                    switch (this.location) {\n                        case 'nw':\n                            var a = this._plotDimensions.width - offsets.left;\n                            var b = offsets.top;\n                            this._elem.css('right', a);\n                            this._elem.css('top', b);\n                            break;\n                        case 'n':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            var b = this._plotDimensions.height - offsets.top;\n                            this._elem.css('left', a);\n                            this._elem.css('bottom', b);\n                            break;\n                        case 'ne':\n                            var a = this._plotDimensions.width - offsets.right;\n                            var b = offsets.top;\n                            this._elem.css({left: a, top: b});\n                            break;\n                        case 'e':\n                            var a = this._plotDimensions.width - offsets.right;\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({left: a, top: b});\n                            break;\n                        case 'se':\n                            var a = this._plotDimensions.width - offsets.right;\n                            var b = offsets.bottom;\n                            this._elem.css({left: a, bottom: b});\n                            break;\n                        case 's':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            var b = this._plotDimensions.height - offsets.bottom;\n                            this._elem.css({left: a, top: b});\n                            break;\n                        case 'sw':\n                            var a = this._plotDimensions.width - offsets.left;\n                            var b = offsets.bottom;\n                            this._elem.css({right: a, bottom: b});\n                            break;\n                        case 'w':\n                            var a = this._plotDimensions.width - offsets.left;\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({right: a, top: b});\n                            break;\n                        default:  // same as 'se'\n                            var a = offsets.right;\n                            var b = offsets.bottom;\n                            this._elem.css({right: a, bottom: b});\n                            break;\n                    }\n                }\n                else {\n                    switch (this.location) {\n                        case 'nw':\n                            this._elem.css({left: 0, top: offsets.top});\n                            break;\n                        case 'n':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            this._elem.css({left: a, top: offsets.top});\n                            break;\n                        case 'ne':\n                            this._elem.css({right: 0, top: offsets.top});\n                            break;\n                        case 'e':\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({right: offsets.right, top: b});\n                            break;\n                        case 'se':\n                            this._elem.css({right: offsets.right, bottom: offsets.bottom});\n                            break;\n                        case 's':\n                            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;\n                            this._elem.css({left: a, bottom: offsets.bottom});\n                            break;\n                        case 'sw':\n                            this._elem.css({left: offsets.left, bottom: offsets.bottom});\n                            break;\n                        case 'w':\n                            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;\n                            this._elem.css({left: offsets.left, top: b});\n                            break;\n                        default:  // same as 'se'\n                            this._elem.css({right: offsets.right, bottom: offsets.bottom});\n                            break;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Class: $.jqplot.ThemeEngine\n         * Theme Engine provides a programatic way to change some of the  more\n         * common jqplot styling options such as fonts, colors and grid options.\n         * A theme engine instance is created with each plot.  The theme engine\n         * manages a collection of themes which can be modified, added to, or\n         * applied to the plot.\n         *\n         * The themeEngine class is not instantiated directly.\n         * When a plot is initialized, the current plot options are scanned\n         * an a default theme named \"Default\" is created.  This theme is\n         * used as the basis for other themes added to the theme engine and\n         * is always available.\n         *\n         * A theme is a simple javascript object with styling parameters for\n         * various entities of the plot.  A theme has the form:\n         *\n         *\n         * > {\n     * >     _name:f \"Default\",\n     * >     target: {\n     * >         backgroundColor: \"transparent\"\n     * >     },\n     * >     legend: {\n     * >         textColor: null,\n     * >         fontFamily: null,\n     * >         fontSize: null,\n     * >         border: null,\n     * >         background: null\n     * >     },\n     * >     title: {\n     * >         textColor: \"rgb(102, 102, 102)\",\n     * >         fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\",\n     * >         fontSize: \"19.2px\",\n     * >         textAlign: \"center\"\n     * >     },\n     * >     seriesStyles: {},\n     * >     series: [{\n     * >         color: \"#4bb2c5\",\n     * >         lineWidth: 2.5,\n     * >         linePattern: \"solid\",\n     * >         shadow: true,\n     * >         fillColor: \"#4bb2c5\",\n     * >         showMarker: true,\n     * >         markerOptions: {\n     * >             color: \"#4bb2c5\",\n     * >             show: true,\n     * >             style: 'filledCircle',\n     * >             lineWidth: 1.5,\n     * >             size: 4,\n     * >             shadow: true\n     * >         }\n     * >     }],\n     * >     grid: {\n     * >         drawGridlines: true,\n     * >         gridLineColor: \"#cccccc\",\n     * >         gridLineWidth: 1,\n     * >         backgroundColor: \"#fffdf6\",\n     * >         borderColor: \"#999999\",\n     * >         borderWidth: 2,\n     * >         shadow: true\n     * >     },\n     * >     axesStyles: {\n     * >         label: {},\n     * >         ticks: {}\n     * >     },\n     * >     axes: {\n     * >         xaxis: {\n     * >             borderColor: \"#999999\",\n     * >             borderWidth: 2,\n     * >             ticks: {\n     * >                 show: true,\n     * >                 showGridline: true,\n     * >                 showLabel: true,\n     * >                 showMark: true,\n     * >                 size: 4,\n     * >                 textColor: \"\",\n     * >                 whiteSpace: \"nowrap\",\n     * >                 fontSize: \"12px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\"\n     * >             },\n     * >             label: {\n     * >                 textColor: \"rgb(102, 102, 102)\",\n     * >                 whiteSpace: \"normal\",\n     * >                 fontSize: \"14.6667px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\",\n     * >                 fontWeight: \"400\"\n     * >             }\n     * >         },\n     * >         yaxis: {\n     * >             borderColor: \"#999999\",\n     * >             borderWidth: 2,\n     * >             ticks: {\n     * >                 show: true,\n     * >                 showGridline: true,\n     * >                 showLabel: true,\n     * >                 showMark: true,\n     * >                 size: 4,\n     * >                 textColor: \"\",\n     * >                 whiteSpace: \"nowrap\",\n     * >                 fontSize: \"12px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\"\n     * >             },\n     * >             label: {\n     * >                 textColor: null,\n     * >                 whiteSpace: null,\n     * >                 fontSize: null,\n     * >                 fontFamily: null,\n     * >                 fontWeight: null\n     * >             }\n     * >         },\n     * >         x2axis: {...\n     * >         },\n     * >         ...\n     * >         y9axis: {...\n     * >         }\n     * >     }\n     * > }\n         *\n         * \"seriesStyles\" is a style object that will be applied to all series in the plot.\n         * It will forcibly override any styles applied on the individual series.  \"axesStyles\" is\n         * a style object that will be applied to all axes in the plot.  It will also forcibly\n         * override any styles on the individual axes.\n         *\n         * The example shown above has series options for a line series.  Options for other\n         * series types are shown below:\n         *\n         * Bar Series:\n         *\n         * > {\n     * >     color: \"#4bb2c5\",\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     lineWidth: 2.5,\n     * >     shadow: true,\n     * >     barPadding: 2,\n     * >     barMargin: 10,\n     * >     barWidth: 15.09375,\n     * >     highlightColors: [\"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\"]\n     * > }\n         *\n         * Pie Series:\n         *\n         * > {\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     padding: 20,\n     * >     sliceMargin: 0,\n     * >     fill: true,\n     * >     shadow: true,\n     * >     startAngle: 0,\n     * >     lineWidth: 2.5,\n     * >     highlightColors: [\"rgb(129,201,214)\", \"rgb(240,189,104)\", \"rgb(214,202,165)\", \"rgb(137,180,158)\", \"rgb(168,180,137)\", \"rgb(180,174,89)\", \"rgb(180,113,161)\", \"rgb(129,141,236)\", \"rgb(227,205,120)\", \"rgb(255,138,76)\", \"rgb(76,169,219)\", \"rgb(215,126,190)\", \"rgb(220,232,135)\", \"rgb(200,167,96)\", \"rgb(103,202,235)\", \"rgb(208,154,215)\"]\n     * > }\n         *\n         * Funnel Series:\n         *\n         * > {\n     * >     color: \"#4bb2c5\",\n     * >     lineWidth: 2,\n     * >     shadow: true,\n     * >     padding: {\n     * >         top: 20,\n     * >         right: 20,\n     * >         bottom: 20,\n     * >         left: 20\n     * >     },\n     * >     sectionMargin: 6,\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     highlightColors: [\"rgb(147,208,220)\", \"rgb(242,199,126)\", \"rgb(220,210,178)\", \"rgb(154,191,172)\", \"rgb(180,191,154)\", \"rgb(191,186,112)\", \"rgb(191,133,174)\", \"rgb(147,157,238)\", \"rgb(231,212,139)\", \"rgb(255,154,102)\", \"rgb(102,181,224)\", \"rgb(221,144,199)\", \"rgb(225,235,152)\", \"rgb(200,167,96)\", \"rgb(124,210,238)\", \"rgb(215,169,221)\"]\n     * > }\n         *\n         */\n        $.jqplot.ThemeEngine = function () {\n            // Group: Properties\n            //\n            // prop: themes\n            // hash of themes managed by the theme engine.\n            // Indexed by theme name.\n            this.themes = {};\n            // prop: activeTheme\n            // Pointer to currently active theme\n            this.activeTheme = null;\n\n        };\n\n        // called with scope of plot\n        $.jqplot.ThemeEngine.prototype.init = function () {\n            // get the Default theme from the current plot settings.\n            var th = new $.jqplot.Theme({_name: 'Default'});\n            var n, i, nn;\n\n            for (n in th.target) {\n                if (n == \"textColor\") {\n                    th.target[n] = this.target.css('color');\n                }\n                else {\n                    th.target[n] = this.target.css(n);\n                }\n            }\n\n            if (this.title.show && this.title._elem) {\n                for (n in th.title) {\n                    if (n == \"textColor\") {\n                        th.title[n] = this.title._elem.css('color');\n                    }\n                    else {\n                        th.title[n] = this.title._elem.css(n);\n                    }\n                }\n            }\n\n            for (n in th.grid) {\n                th.grid[n] = this.grid[n];\n            }\n            if (th.grid.backgroundColor == null && this.grid.background != null) {\n                th.grid.backgroundColor = this.grid.background;\n            }\n            if (this.legend.show && this.legend._elem) {\n                for (n in th.legend) {\n                    if (n == 'textColor') {\n                        th.legend[n] = this.legend._elem.css('color');\n                    }\n                    else {\n                        th.legend[n] = this.legend._elem.css(n);\n                    }\n                }\n            }\n            var s;\n\n            for (i = 0; i < this.series.length; i++) {\n                s = this.series[i];\n                if (s.renderer.constructor == $.jqplot.LineRenderer) {\n                    th.series.push(new LineSeriesProperties());\n                }\n                else if (s.renderer.constructor == $.jqplot.BarRenderer) {\n                    th.series.push(new BarSeriesProperties());\n                }\n                else if (s.renderer.constructor == $.jqplot.PieRenderer) {\n                    th.series.push(new PieSeriesProperties());\n                }\n                else if (s.renderer.constructor == $.jqplot.DonutRenderer) {\n                    th.series.push(new DonutSeriesProperties());\n                }\n                else if (s.renderer.constructor == $.jqplot.FunnelRenderer) {\n                    th.series.push(new FunnelSeriesProperties());\n                }\n                else if (s.renderer.constructor == $.jqplot.MeterGaugeRenderer) {\n                    th.series.push(new MeterSeriesProperties());\n                }\n                else {\n                    th.series.push({});\n                }\n                for (n in th.series[i]) {\n                    th.series[i][n] = s[n];\n                }\n            }\n            var a, ax;\n            for (n in this.axes) {\n                ax = this.axes[n];\n                a = th.axes[n] = new AxisProperties();\n                a.borderColor = ax.borderColor;\n                a.borderWidth = ax.borderWidth;\n                if (ax._ticks && ax._ticks[0]) {\n                    for (nn in a.ticks) {\n                        if (ax._ticks[0].hasOwnProperty(nn)) {\n                            a.ticks[nn] = ax._ticks[0][nn];\n                        }\n                        else if (ax._ticks[0]._elem) {\n                            a.ticks[nn] = ax._ticks[0]._elem.css(nn);\n                        }\n                    }\n                }\n                if (ax._label && ax._label.show) {\n                    for (nn in a.label) {\n                        // a.label[nn] = ax._label._elem.css(nn);\n                        if (ax._label[nn]) {\n                            a.label[nn] = ax._label[nn];\n                        }\n                        else if (ax._label._elem) {\n                            if (nn == 'textColor') {\n                                a.label[nn] = ax._label._elem.css('color');\n                            }\n                            else {\n                                a.label[nn] = ax._label._elem.css(nn);\n                            }\n                        }\n                    }\n                }\n            }\n            this.themeEngine._add(th);\n            this.themeEngine.activeTheme = this.themeEngine.themes[th._name];\n        };\n        /**\n         * Group: methods\n         *\n         * method: get\n         *\n         * Get and return the named theme or the active theme if no name given.\n         *\n         * parameter:\n         *\n         * name - name of theme to get.\n         *\n         * returns:\n         *\n         * Theme instance of given name.\n         */\n        $.jqplot.ThemeEngine.prototype.get = function (name) {\n            if (!name) {\n                // return the active theme\n                return this.activeTheme;\n            }\n            else {\n                return this.themes[name];\n            }\n        };\n\n        function numericalOrder(a, b) {\n            return a - b;\n        }\n\n        /**\n         * method: getThemeNames\n         *\n         * Return the list of theme names in this manager in alpha-numerical order.\n         *\n         * parameter:\n         *\n         * None\n         *\n         * returns:\n         *\n         * A the list of theme names in this manager in alpha-numerical order.\n         */\n        $.jqplot.ThemeEngine.prototype.getThemeNames = function () {\n            var tn = [];\n            for (var n in this.themes) {\n                tn.push(n);\n            }\n            return tn.sort(numericalOrder);\n        };\n\n        /**\n         * method: getThemes\n         *\n         * Return a list of themes in alpha-numerical order by name.\n         *\n         * parameter:\n         *\n         * None\n         *\n         * returns:\n         *\n         * A list of themes in alpha-numerical order by name.\n         */\n        $.jqplot.ThemeEngine.prototype.getThemes = function () {\n            var tn = [];\n            var themes = [];\n            for (var n in this.themes) {\n                tn.push(n);\n            }\n            tn.sort(numericalOrder);\n            for (var i = 0; i < tn.length; i++) {\n                themes.push(this.themes[tn[i]]);\n            }\n            return themes;\n        };\n\n        $.jqplot.ThemeEngine.prototype.activate = function (plot, name) {\n            // sometimes need to redraw whole plot.\n            var redrawPlot = false;\n            if (!name && this.activeTheme && this.activeTheme._name) {\n                name = this.activeTheme._name;\n            }\n            if (!this.themes.hasOwnProperty(name)) {\n                throw new Error(\"No theme of that name\");\n            }\n            else {\n                var th = this.themes[name];\n                this.activeTheme = th;\n                var val, checkBorderColor = false, checkBorderWidth = false;\n                var arr = ['xaxis', 'x2axis', 'yaxis', 'y2axis'];\n\n                for (i = 0; i < arr.length; i++) {\n                    var ax = arr[i];\n                    if (th.axesStyles.borderColor != null) {\n                        plot.axes[ax].borderColor = th.axesStyles.borderColor;\n                    }\n                    if (th.axesStyles.borderWidth != null) {\n                        plot.axes[ax].borderWidth = th.axesStyles.borderWidth;\n                    }\n                }\n\n                for (var axname in plot.axes) {\n                    var axis = plot.axes[axname];\n                    if (axis.show) {\n                        var thaxis = th.axes[axname] || {};\n                        var thaxstyle = th.axesStyles;\n                        var thax = $.jqplot.extend(true, {}, thaxis, thaxstyle);\n                        val = (th.axesStyles.borderColor != null) ? th.axesStyles.borderColor : thax.borderColor;\n                        if (thax.borderColor != null) {\n                            axis.borderColor = thax.borderColor;\n                            redrawPlot = true;\n                        }\n                        val = (th.axesStyles.borderWidth != null) ? th.axesStyles.borderWidth : thax.borderWidth;\n                        if (thax.borderWidth != null) {\n                            axis.borderWidth = thax.borderWidth;\n                            redrawPlot = true;\n                        }\n                        if (axis._ticks && axis._ticks[0]) {\n                            for (var nn in thax.ticks) {\n                                // val = null;\n                                // if (th.axesStyles.ticks && th.axesStyles.ticks[nn] != null) {\n                                //     val = th.axesStyles.ticks[nn];\n                                // }\n                                // else if (thax.ticks[nn] != null){\n                                //     val = thax.ticks[nn]\n                                // }\n                                val = thax.ticks[nn];\n                                if (val != null) {\n                                    axis.tickOptions[nn] = val;\n                                    axis._ticks = [];\n                                    redrawPlot = true;\n                                }\n                            }\n                        }\n                        if (axis._label && axis._label.show) {\n                            for (var nn in thax.label) {\n                                // val = null;\n                                // if (th.axesStyles.label && th.axesStyles.label[nn] != null) {\n                                //     val = th.axesStyles.label[nn];\n                                // }\n                                // else if (thax.label && thax.label[nn] != null){\n                                //     val = thax.label[nn]\n                                // }\n                                val = thax.label[nn];\n                                if (val != null) {\n                                    axis.labelOptions[nn] = val;\n                                    redrawPlot = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n                for (var n in th.grid) {\n                    if (th.grid[n] != null) {\n                        plot.grid[n] = th.grid[n];\n                    }\n                }\n                if (!redrawPlot) {\n                    plot.grid.draw();\n                }\n\n                if (plot.legend.show) {\n                    for (n in th.legend) {\n                        if (th.legend[n] != null) {\n                            plot.legend[n] = th.legend[n];\n                        }\n                    }\n                }\n                if (plot.title.show) {\n                    for (n in th.title) {\n                        if (th.title[n] != null) {\n                            plot.title[n] = th.title[n];\n                        }\n                    }\n                }\n\n                var i;\n                for (i = 0; i < th.series.length; i++) {\n                    var opts = {};\n                    var redrawSeries = false;\n                    for (n in th.series[i]) {\n                        val = (th.seriesStyles[n] != null) ? th.seriesStyles[n] : th.series[i][n];\n                        if (val != null) {\n                            opts[n] = val;\n                            if (n == 'color') {\n                                plot.series[i].renderer.shapeRenderer.fillStyle = val;\n                                plot.series[i].renderer.shapeRenderer.strokeStyle = val;\n                                plot.series[i][n] = val;\n                            }\n                            else if ((n == 'lineWidth') || (n == 'linePattern')) {\n                                plot.series[i].renderer.shapeRenderer[n] = val;\n                                plot.series[i][n] = val;\n                            }\n                            else if (n == 'markerOptions') {\n                                merge(plot.series[i].markerOptions, val);\n                                merge(plot.series[i].markerRenderer, val);\n                            }\n                            else {\n                                plot.series[i][n] = val;\n                            }\n                            redrawPlot = true;\n                        }\n                    }\n                }\n\n                if (redrawPlot) {\n                    plot.target.empty();\n                    plot.draw();\n                }\n\n                for (n in th.target) {\n                    if (th.target[n] != null) {\n                        plot.target.css(n, th.target[n]);\n                    }\n                }\n            }\n\n        };\n\n        $.jqplot.ThemeEngine.prototype._add = function (theme, name) {\n            if (name) {\n                theme._name = name;\n            }\n            if (!theme._name) {\n                theme._name = Date.parse(new Date());\n            }\n            if (!this.themes.hasOwnProperty(theme._name)) {\n                this.themes[theme._name] = theme;\n            }\n            else {\n                throw new Error(\"jqplot.ThemeEngine Error: Theme already in use\");\n            }\n        };\n\n        // method remove\n        // Delete the named theme, return true on success, false on failure.\n\n\n        /**\n         * method: remove\n         *\n         * Remove the given theme from the themeEngine.\n         *\n         * parameters:\n         *\n         * name - name of the theme to remove.\n         *\n         * returns:\n         *\n         * true on success, false on failure.\n         */\n        $.jqplot.ThemeEngine.prototype.remove = function (name) {\n            if (name == 'Default') {\n                return false;\n            }\n            return delete this.themes[name];\n        };\n\n        /**\n         * method: newTheme\n         *\n         * Create a new theme based on the default theme, adding it the themeEngine.\n         *\n         * parameters:\n         *\n         * name - name of the new theme.\n         * obj - optional object of styles to be applied to this new theme.\n         *\n         * returns:\n         *\n         * new Theme object.\n         */\n        $.jqplot.ThemeEngine.prototype.newTheme = function (name, obj) {\n            if (typeof(name) == 'object') {\n                obj = obj || name;\n                name = null;\n            }\n            if (obj && obj._name) {\n                name = obj._name;\n            }\n            else {\n                name = name || Date.parse(new Date());\n            }\n            // var th = new $.jqplot.Theme(name);\n            var th = this.copy(this.themes['Default']._name, name);\n            $.jqplot.extend(th, obj);\n            return th;\n        };\n\n        // function clone(obj) {\n        //     return eval(obj.toSource());\n        // }\n\n        function clone(obj) {\n            if (obj == null || typeof(obj) != 'object') {\n                return obj;\n            }\n\n            var temp = new obj.constructor();\n            for (var key in obj) {\n                temp[key] = clone(obj[key]);\n            }\n            return temp;\n        }\n\n        $.jqplot.clone = clone;\n\n        function merge(obj1, obj2) {\n            if (obj2 == null || typeof(obj2) != 'object') {\n                return;\n            }\n            for (var key in obj2) {\n                if (key == 'highlightColors') {\n                    obj1[key] = clone(obj2[key]);\n                }\n                if (obj2[key] != null && typeof(obj2[key]) == 'object') {\n                    if (!obj1.hasOwnProperty(key)) {\n                        obj1[key] = {};\n                    }\n                    merge(obj1[key], obj2[key]);\n                }\n                else {\n                    obj1[key] = obj2[key];\n                }\n            }\n        }\n\n        $.jqplot.merge = merge;\n\n        // Use the jQuery 1.3.2 extend function since behaviour in jQuery 1.4 seems problematic\n        $.jqplot.extend = function () {\n            // copy reference to target object\n            var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;\n\n            // Handle a deep copy situation\n            if (typeof target === \"boolean\") {\n                deep = target;\n                target = arguments[1] || {};\n                // skip the boolean and the target\n                i = 2;\n            }\n\n            // Handle case when target is a string or something (possible in deep copy)\n            if (typeof target !== \"object\" && !toString.call(target) === \"[object Function]\") {\n                target = {};\n            }\n\n            for (; i < length; i++) {\n                // Only deal with non-null/undefined values\n                if ((options = arguments[i]) != null) {\n                    // Extend the base object\n                    for (var name in options) {\n                        var src = target[name], copy = options[name];\n\n                        // Prevent never-ending loop\n                        if (target === copy) {\n                            continue;\n                        }\n\n                        // Recurse if we're merging object values\n                        if (deep && copy && typeof copy === \"object\" && !copy.nodeType) {\n                            target[name] = $.jqplot.extend(deep,\n                                // Never move original objects, clone them\n                                src || ( copy.length != null ? [] : {} )\n                                , copy);\n                        }\n                        // Don't bring in undefined values\n                        else if (copy !== undefined) {\n                            target[name] = copy;\n                        }\n                    }\n                }\n            }\n            // Return the modified object\n            return target;\n        };\n\n        /**\n         * method: rename\n         *\n         * Rename a theme.\n         *\n         * parameters:\n         *\n         * oldName - current name of the theme.\n         * newName - desired name of the theme.\n         *\n         * returns:\n         *\n         * new Theme object.\n         */\n        $.jqplot.ThemeEngine.prototype.rename = function (oldName, newName) {\n            if (oldName == 'Default' || newName == 'Default') {\n                throw new Error(\"jqplot.ThemeEngine Error: Cannot rename from/to Default\");\n            }\n            if (this.themes.hasOwnProperty(newName)) {\n                throw new Error(\"jqplot.ThemeEngine Error: New name already in use.\");\n            }\n            else if (this.themes.hasOwnProperty(oldName)) {\n                var th = this.copy (oldName, newName);\n                this.remove(oldName);\n                return th;\n            }\n            throw new Error(\"jqplot.ThemeEngine Error: Old name or new name invalid\");\n        };\n\n        /**\n         * method: copy\n         *\n         * Create a copy of an existing theme in the themeEngine, adding it the themeEngine.\n         *\n         * parameters:\n         *\n         * sourceName - name of the existing theme.\n         * targetName - name of the copy.\n         * obj - optional object of style parameter to apply to the new theme.\n         *\n         * returns:\n         *\n         * new Theme object.\n         */\n        $.jqplot.ThemeEngine.prototype.copy = function (sourceName, targetName, obj) {\n            if (targetName == 'Default') {\n                throw new Error(\"jqplot.ThemeEngine Error: Cannot copy over Default theme\");\n            }\n            if (!this.themes.hasOwnProperty(sourceName)) {\n                var s = \"jqplot.ThemeEngine Error: Source name invalid\";\n                throw new Error(s);\n            }\n            if (this.themes.hasOwnProperty(targetName)) {\n                var s = \"jqplot.ThemeEngine Error: Target name invalid\";\n                throw new Error(s);\n            }\n            else {\n                var th = clone(this.themes[sourceName]);\n                th._name = targetName;\n                $.jqplot.extend(true, th, obj);\n                this._add(th);\n                return th;\n            }\n        };\n\n\n        $.jqplot.Theme = function (name, obj) {\n            if (typeof(name) == 'object') {\n                obj = obj || name;\n                name = null;\n            }\n            name = name || Date.parse(new Date());\n            this._name = name;\n            this.target = {\n                backgroundColor: null\n            };\n            this.legend = {\n                textColor: null,\n                fontFamily: null,\n                fontSize: null,\n                border: null,\n                background: null\n            };\n            this.title = {\n                textColor: null,\n                fontFamily: null,\n                fontSize: null,\n                textAlign: null\n            };\n            this.seriesStyles = {};\n            this.series = [];\n            this.grid = {\n                drawGridlines: null,\n                gridLineColor: null,\n                gridLineWidth: null,\n                backgroundColor: null,\n                borderColor: null,\n                borderWidth: null,\n                shadow: null\n            };\n            this.axesStyles = {label: {}, ticks: {}};\n            this.axes = {};\n            if (typeof(obj) == 'string') {\n                this._name = obj;\n            }\n            else if (typeof(obj) == 'object') {\n                $.jqplot.extend(true, this, obj);\n            }\n        };\n\n        var AxisProperties = function () {\n            this.borderColor = null;\n            this.borderWidth = null;\n            this.ticks = new AxisTicks();\n            this.label = new AxisLabel();\n        };\n\n        var AxisTicks = function () {\n            this.show = null;\n            this.showGridline = null;\n            this.showLabel = null;\n            this.showMark = null;\n            this.size = null;\n            this.textColor = null;\n            this.whiteSpace = null;\n            this.fontSize = null;\n            this.fontFamily = null;\n        };\n\n        var AxisLabel = function () {\n            this.textColor = null;\n            this.whiteSpace = null;\n            this.fontSize = null;\n            this.fontFamily = null;\n            this.fontWeight = null;\n        };\n\n        var LineSeriesProperties = function () {\n            this.color = null;\n            this.lineWidth = null;\n            this.linePattern = null;\n            this.shadow = null;\n            this.fillColor = null;\n            this.showMarker = null;\n            this.markerOptions = new MarkerOptions();\n        };\n\n        var MarkerOptions = function () {\n            this.show = null;\n            this.style = null;\n            this.lineWidth = null;\n            this.size = null;\n            this.color = null;\n            this.shadow = null;\n        };\n\n        var BarSeriesProperties = function () {\n            this.color = null;\n            this.seriesColors = null;\n            this.lineWidth = null;\n            this.shadow = null;\n            this.barPadding = null;\n            this.barMargin = null;\n            this.barWidth = null;\n            this.highlightColors = null;\n        };\n\n        var PieSeriesProperties = function () {\n            this.seriesColors = null;\n            this.padding = null;\n            this.sliceMargin = null;\n            this.fill = null;\n            this.shadow = null;\n            this.startAngle = null;\n            this.lineWidth = null;\n            this.highlightColors = null;\n        };\n\n        var DonutSeriesProperties = function () {\n            this.seriesColors = null;\n            this.padding = null;\n            this.sliceMargin = null;\n            this.fill = null;\n            this.shadow = null;\n            this.startAngle = null;\n            this.lineWidth = null;\n            this.innerDiameter = null;\n            this.thickness = null;\n            this.ringMargin = null;\n            this.highlightColors = null;\n        };\n\n        var FunnelSeriesProperties = function () {\n            this.color = null;\n            this.lineWidth = null;\n            this.shadow = null;\n            this.padding = null;\n            this.sectionMargin = null;\n            this.seriesColors = null;\n            this.highlightColors = null;\n        };\n\n        var MeterSeriesProperties = function () {\n            this.padding = null;\n            this.backgroundColor = null;\n            this.ringColor = null;\n            this.tickColor = null;\n            this.ringWidth = null;\n            this.intervalColors = null;\n            this.intervalInnerRadius = null;\n            this.intervalOuterRadius = null;\n            this.hubRadius = null;\n            this.needleThickness = null;\n            this.needlePad = null;\n        };\n\n\n        $.fn.jqplotChildText = function () {\n            return $(this).contents().filter(function () {\n                return this.nodeType == 3;  // Node.TEXT_NODE not defined in I7\n            }).text();\n        };\n\n        // Returns font style as abbreviation for \"font\" property.\n        $.fn.jqplotGetComputedFontStyle = function () {\n            var css = window.getComputedStyle ? window.getComputedStyle(this[0], \"\") : this[0].currentStyle;\n            var attrs = css['font-style'] ? ['font-style', 'font-weight', 'font-size', 'font-family'] : ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily'];\n            var style = [];\n\n            for (var i = 0; i < attrs.length; ++i) {\n                var attr = String(css[attrs[i]]);\n\n                if (attr && attr != 'normal') {\n                    style.push(attr);\n                }\n            }\n            return style.join(' ');\n        };\n\n        /**\n         * Namespace: $.fn\n         * jQuery namespace to attach functions to jQuery elements.\n         *\n         */\n\n        $.fn.jqplotToImageCanvas = function (options) {\n\n            options = options || {};\n            var x_offset = (options.x_offset == null) ? 0 : options.x_offset;\n            var y_offset = (options.y_offset == null) ? 0 : options.y_offset;\n            var backgroundColor = (options.backgroundColor == null) ? 'rgb(255,255,255)' : options.backgroundColor;\n\n            if ($(this).width() == 0 || $(this).height() == 0) {\n                return null;\n            }\n\n            // excanvas and hence IE < 9 do not support toDataURL and cannot export images.\n            if ($.jqplot.use_excanvas) {\n                return null;\n            }\n\n            var newCanvas = document.createElement(\"canvas\");\n            var h = $(this).outerHeight(true);\n            var w = $(this).outerWidth(true);\n            var offs = $(this).offset();\n            var plotleft = offs.left;\n            var plottop = offs.top;\n            var transx = 0, transy = 0;\n\n            // have to check if any elements are hanging outside of plot area before rendering,\n            // since changing width of canvas will erase canvas.\n\n            var clses = ['jqplot-table-legend', 'jqplot-xaxis-tick', 'jqplot-x2axis-tick', 'jqplot-yaxis-tick', 'jqplot-y2axis-tick', 'jqplot-y3axis-tick',\n                'jqplot-y4axis-tick', 'jqplot-y5axis-tick', 'jqplot-y6axis-tick', 'jqplot-y7axis-tick', 'jqplot-y8axis-tick', 'jqplot-y9axis-tick',\n                'jqplot-xaxis-label', 'jqplot-x2axis-label', 'jqplot-yaxis-label', 'jqplot-y2axis-label', 'jqplot-y3axis-label', 'jqplot-y4axis-label',\n                'jqplot-y5axis-label', 'jqplot-y6axis-label', 'jqplot-y7axis-label', 'jqplot-y8axis-label', 'jqplot-y9axis-label'];\n\n            var temptop, templeft, tempbottom, tempright;\n\n            for (var i = 0; i < clses.length; i++) {\n                $(this).find('.' + clses[i]).each(function () {\n                    temptop = $(this).offset().top - plottop;\n                    templeft = $(this).offset().left - plotleft;\n                    tempright = templeft + $(this).outerWidth(true) + transx;\n                    tempbottom = temptop + $(this).outerHeight(true) + transy;\n                    if (templeft < -transx) {\n                        w = w - transx - templeft;\n                        transx = -templeft;\n                    }\n                    if (temptop < -transy) {\n                        h = h - transy - temptop;\n                        transy = -temptop;\n                    }\n                    if (tempright > w) {\n                        w = tempright;\n                    }\n                    if (tempbottom > h) {\n                        h = tempbottom;\n                    }\n                });\n            }\n\n            newCanvas.width = w + Number(x_offset);\n            newCanvas.height = h + Number(y_offset);\n\n            var newContext = newCanvas.getContext(\"2d\");\n\n            newContext.save();\n            newContext.fillStyle = backgroundColor;\n            newContext.fillRect(0, 0, newCanvas.width, newCanvas.height);\n            newContext.restore();\n\n            newContext.translate(transx, transy);\n            newContext.textAlign = 'left';\n            newContext.textBaseline = 'top';\n\n            function getLineheight(el) {\n                var lineheight = parseInt($(el).css('line-height'), 10);\n\n                if (isNaN(lineheight)) {\n                    lineheight = parseInt($(el).css('font-size'), 10) * 1.2;\n                }\n                return lineheight;\n            }\n\n            function writeWrappedText(el, context, text, left, top, canvasWidth) {\n                var lineheight = getLineheight(el);\n                var tagwidth = $(el).innerWidth();\n                var tagheight = $(el).innerHeight();\n                var words = text.split(/\\s+/);\n                var wl = words.length;\n                var w = '';\n                var breaks = [];\n                var temptop = top;\n                var templeft = left;\n\n                for (var i = 0; i < wl; i++) {\n                    w += words[i];\n                    if (context.measureText(w).width > tagwidth) {\n                        breaks.push(i);\n                        w = '';\n                        i--;\n                    }\n                }\n                if (breaks.length === 0) {\n                    // center text if necessary\n                    if ($(el).css('textAlign') === 'center') {\n                        templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx;\n                    }\n                    context.fillText(text, templeft, top);\n                }\n                else {\n                    w = words.slice(0, breaks[0]).join(' ');\n                    // center text if necessary\n                    if ($(el).css('textAlign') === 'center') {\n                        templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx;\n                    }\n                    context.fillText(w, templeft, temptop);\n                    temptop += lineheight;\n                    for (var i = 1, l = breaks.length; i < l; i++) {\n                        w = words.slice(breaks[i - 1], breaks[i]).join(' ');\n                        // center text if necessary\n                        if ($(el).css('textAlign') === 'center') {\n                            templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx;\n                        }\n                        context.fillText(w, templeft, temptop);\n                        temptop += lineheight;\n                    }\n                    w = words.slice(breaks[i - 1], words.length).join(' ');\n                    // center text if necessary\n                    if ($(el).css('textAlign') === 'center') {\n                        templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx;\n                    }\n                    context.fillText(w, templeft, temptop);\n                }\n\n            }\n\n            function _jqpToImage(el, x_offset, y_offset) {\n                var tagname = el.tagName.toLowerCase();\n                var p = $(el).position();\n                var css = window.getComputedStyle ? window.getComputedStyle(el, \"\") : el.currentStyle; // for IE < 9\n                var left = x_offset + p.left + parseInt(css.marginLeft, 10) + parseInt(css.borderLeftWidth, 10) + parseInt(css.paddingLeft, 10);\n                var top = y_offset + p.top + parseInt(css.marginTop, 10) + parseInt(css.borderTopWidth, 10) + parseInt(css.paddingTop, 10);\n                var w = newCanvas.width;\n                // var left = x_offset + p.left + $(el).css('marginLeft') + $(el).css('borderLeftWidth')\n\n                // somehow in here, for divs within divs, the width of the inner div should be used instead of the canvas.\n\n                if ((tagname == 'div' || tagname == 'span') && !$(el).hasClass('jqplot-highlighter-tooltip')) {\n                    $(el).children().each(function () {\n                        _jqpToImage(this, left, top);\n                    });\n                    var text = $(el).jqplotChildText();\n\n                    if (text) {\n                        newContext.font = $(el).jqplotGetComputedFontStyle();\n                        newContext.fillStyle = $(el).css('color');\n\n                        writeWrappedText(el, newContext, text, left, top, w);\n                    }\n                }\n\n                // handle the standard table legend\n\n                else if (tagname === 'table' && $(el).hasClass('jqplot-table-legend')) {\n                    newContext.strokeStyle = $(el).css('border-top-color');\n                    newContext.fillStyle = $(el).css('background-color');\n                    newContext.fillRect(left, top, $(el).innerWidth(), $(el).innerHeight());\n                    if (parseInt($(el).css('border-top-width'), 10) > 0) {\n                        newContext.strokeRect(left, top, $(el).innerWidth(), $(el).innerHeight());\n                    }\n\n                    // find all the swatches\n                    $(el).find('div.jqplot-table-legend-swatch-outline').each(function () {\n                        // get the first div and stroke it\n                        var elem = $(this);\n                        newContext.strokeStyle = elem.css('border-top-color');\n                        var l = left + elem.position().left;\n                        var t = top + elem.position().top;\n                        newContext.strokeRect(l, t, elem.innerWidth(), elem.innerHeight());\n\n                        // now fill the swatch\n\n                        l += parseInt(elem.css('padding-left'), 10);\n                        t += parseInt(elem.css('padding-top'), 10);\n                        var h = elem.innerHeight() - 2 * parseInt(elem.css('padding-top'), 10);\n                        var w = elem.innerWidth() - 2 * parseInt(elem.css('padding-left'), 10);\n\n                        var swatch = elem.children('div.jqplot-table-legend-swatch');\n                        newContext.fillStyle = swatch.css('background-color');\n                        newContext.fillRect(l, t, w, h);\n                    });\n\n                    // now add text\n\n                    $(el).find('td.jqplot-table-legend-label').each(function () {\n                        var elem = $(this);\n                        var l = left + elem.position().left;\n                        var t = top + elem.position().top + parseInt(elem.css('padding-top'), 10);\n                        newContext.font = elem.jqplotGetComputedFontStyle();\n                        newContext.fillStyle = elem.css('color');\n                        writeWrappedText(elem, newContext, elem.text(), l, t, w);\n                    });\n\n                    var elem = null;\n                }\n\n                else if (tagname == 'canvas') {\n                    newContext.drawImage(el, left, top);\n                }\n            }\n\n            $(this).children().each(function () {\n                _jqpToImage(this, x_offset, y_offset);\n            });\n            return newCanvas;\n        };\n\n        // return the raw image data string.\n        // Should work on canvas supporting browsers.\n        $.fn.jqplotToImageStr = function (options) {\n            var imgCanvas = $(this).jqplotToImageCanvas(options);\n            if (imgCanvas) {\n                return imgCanvas.toDataURL(\"image/png\");\n            }\n            else {\n                return null;\n            }\n        };\n\n        // return a DOM <img> element and return it.\n        // Should work on canvas supporting browsers.\n        $.fn.jqplotToImageElem = function (options) {\n            var elem = document.createElement(\"img\");\n            var str = $(this).jqplotToImageStr(options);\n            elem.src = str;\n            return elem;\n        };\n\n        // return a string for an <img> element and return it.\n        // Should work on canvas supporting browsers.\n        $.fn.jqplotToImageElemStr = function (options) {\n            var str = '<img src=' + $(this).jqplotToImageStr(options) + ' />';\n            return str;\n        };\n\n        // Not guaranteed to work, even on canvas supporting browsers due to\n        // limitations with location.href and browser support.\n        $.fn.jqplotSaveImage = function () {\n            var imgData = $(this).jqplotToImageStr({});\n            if (imgData) {\n                window.location.href = imgData.replace(\"image/png\", \"image/octet-stream\");\n            }\n\n        };\n\n        // Not guaranteed to work, even on canvas supporting browsers due to\n        // limitations with window.open and arbitrary data.\n        $.fn.jqplotViewImage = function () {\n            var imgStr = $(this).jqplotToImageElemStr({});\n            var imgData = $(this).jqplotToImageStr({});\n            if (imgStr) {\n                var w = window.open('');\n                w.document.open(\"image/png\");\n                w.document.write(imgStr);\n                w.document.close();\n                w = null;\n            }\n        };\n\n\n        /**\n         * @description\n         * <p>Object with extended date parsing and formatting capabilities.\n         * This library borrows many concepts and ideas from the Date Instance\n         * Methods by Ken Snyder along with some parts of Ken's actual code.</p>\n         *\n         * <p>jsDate takes a different approach by not extending the built-in\n         * Date Object, improving date parsing, allowing for multiple formatting\n         * syntaxes and multiple and more easily expandable localization.</p>\n         *\n         * @author Chris Leonello\n         * @date #date#\n         * @version #VERSION#\n         * @copyright (c) 2010-2013 Chris Leonello\n         * jsDate is currently available for use in all personal or commercial projects\n         * under both the MIT and GPL version 2.0 licenses. This means that you can\n         * choose the license that best suits your project and use it accordingly.\n         *\n         * <p>Ken's original Date Instance Methods and copyright notice:</p>\n         * <pre>\n         * Ken Snyder (ken d snyder at gmail dot com)\n         * 2008-09-10\n         * version 2.0.2 (http://kendsnyder.com/sandbox/date/)\n         * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)\n         * </pre>\n         *\n         * @class\n         * @name jsDate\n         * @param  {String | Number | Array | Date&nbsp;Object | Options&nbsp;Object} arguments Optional arguments, either a parsable date/time string,\n         * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],\n         * a Date object, or an options object of form {syntax: \"perl\", date:some Date} where all options are optional.\n         */\n\n        var jsDate = function () {\n\n            this.syntax = jsDate.config.syntax;\n            this._type = \"jsDate\";\n            this.proxy = new Date();\n            this.options = {};\n            this.locale = jsDate.regional.getLocale();\n            this.formatString = '';\n            this.defaultCentury = jsDate.config.defaultCentury;\n\n            switch (arguments.length) {\n                case 0:\n                    break;\n                case 1:\n                    // other objects either won't have a _type property or,\n                    // if they do, it shouldn't be set to \"jsDate\", so\n                    // assume it is an options argument.\n                    if (get_type(arguments[0]) == \"[object Object]\" && arguments[0]._type != \"jsDate\") {\n                        var opts = this.options = arguments[0];\n                        this.syntax = opts.syntax || this.syntax;\n                        this.defaultCentury = opts.defaultCentury || this.defaultCentury;\n                        this.proxy = jsDate.createDate(opts.date);\n                    }\n                    else {\n                        this.proxy = jsDate.createDate(arguments[0]);\n                    }\n                    break;\n                default:\n                    var a = [];\n                    for (var i = 0; i < arguments.length; i++) {\n                        a.push(arguments[i]);\n                    }\n                    // this should be the current date/time?\n                    this.proxy = new Date();\n                    this.proxy.setFullYear.apply(this.proxy, a.slice(0, 3));\n                    if (a.slice(3).length) {\n                        this.proxy.setHours.apply(this.proxy, a.slice(3));\n                    }\n                    break;\n            }\n        };\n\n        /**\n         * @namespace Configuration options that will be used as defaults for all instances on the page.\n         * @property {String} defaultLocale The default locale to use [en].\n         * @property {String} syntax The default syntax to use [perl].\n         * @property {Number} defaultCentury The default centry for 2 digit dates.\n         */\n        jsDate.config = {\n            defaultLocale: 'en',\n            syntax: 'perl',\n            defaultCentury: 1900\n        };\n\n        /**\n         * Add an arbitrary amount to the currently stored date\n         *\n         * @param {Number} number\n         * @param {String} unit\n         * @returns {jsDate}\n         */\n\n        jsDate.prototype.add = function (number, unit) {\n            var factor = multipliers[unit] || multipliers.day;\n            if (typeof factor == 'number') {\n                this.proxy.setTime(this.proxy.getTime() + (factor * number));\n            } else {\n                factor.add(this, number);\n            }\n            return this;\n        };\n\n        /**\n         * Create a new jqplot.date object with the same date\n         *\n         * @returns {jsDate}\n         */\n\n        jsDate.prototype.clone = function () {\n            return new jsDate(this.proxy.getTime());\n        };\n\n        /**\n         * Get the UTC TimeZone Offset of this date in milliseconds.\n         *\n         * @returns {Number}\n         */\n\n        jsDate.prototype.getUtcOffset = function () {\n            return this.proxy.getTimezoneOffset() * 60000;\n        };\n\n        /**\n         * Find the difference between this jsDate and another date.\n         *\n         * @param {String| Number| Array| jsDate&nbsp;Object| Date&nbsp;Object} dateObj\n         * @param {String} unit\n         * @param {Boolean} allowDecimal\n         * @returns {Number} Number of units difference between dates.\n         */\n\n        jsDate.prototype.diff = function (dateObj, unit, allowDecimal) {\n            // ensure we have a Date object\n            dateObj = new jsDate(dateObj);\n            if (dateObj === null) {\n                return null;\n            }\n            // get the multiplying factor integer or factor function\n            var factor = multipliers[unit] || multipliers.day;\n            if (typeof factor == 'number') {\n                // multiply\n                var unitDiff = (this.proxy.getTime() - dateObj.proxy.getTime()) / factor;\n            } else {\n                // run function\n                var unitDiff = factor.diff(this.proxy, dateObj.proxy);\n            }\n            // if decimals are not allowed, round toward zero\n            return (allowDecimal ? unitDiff : Math[unitDiff > 0 ? 'floor' : 'ceil'](unitDiff));\n        };\n\n        /**\n         * Get the abbreviated name of the current week day\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getAbbrDayName = function () {\n            return jsDate.regional[this.locale][\"dayNamesShort\"][this.proxy.getDay()];\n        };\n\n        /**\n         * Get the abbreviated name of the current month\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getAbbrMonthName = function () {\n            return jsDate.regional[this.locale][\"monthNamesShort\"][this.proxy.getMonth()];\n        };\n\n        /**\n         * Get UPPER CASE AM or PM for the current time\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getAMPM = function () {\n            return this.proxy.getHours() >= 12 ? 'PM' : 'AM';\n        };\n\n        /**\n         * Get lower case am or pm for the current time\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getAmPm = function () {\n            return this.proxy.getHours() >= 12 ? 'pm' : 'am';\n        };\n\n        /**\n         * Get the century (19 for 20th Century)\n         *\n         * @returns {Integer} Century (19 for 20th century).\n         */\n        jsDate.prototype.getCentury = function () {\n            return parseInt(this.proxy.getFullYear() / 100, 10);\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getDate = function () {\n            return this.proxy.getDate();\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getDay = function () {\n            return this.proxy.getDay();\n        };\n\n        /**\n         * Get the Day of week 1 (Monday) thru 7 (Sunday)\n         *\n         * @returns {Integer} Day of week 1 (Monday) thru 7 (Sunday)\n         */\n        jsDate.prototype.getDayOfWeek = function () {\n            var dow = this.proxy.getDay();\n            return dow === 0 ? 7 : dow;\n        };\n\n        /**\n         * Get the day of the year\n         *\n         * @returns {Integer} 1 - 366, day of the year\n         */\n        jsDate.prototype.getDayOfYear = function () {\n            var d = this.proxy;\n            var ms = d - new Date('' + d.getFullYear() + '/1/1 GMT');\n            ms += d.getTimezoneOffset() * 60000;\n            d = null;\n            return parseInt(ms / 60000 / 60 / 24, 10) + 1;\n        };\n\n        /**\n         * Get the name of the current week day\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getDayName = function () {\n            return jsDate.regional[this.locale][\"dayNames\"][this.proxy.getDay()];\n        };\n\n        /**\n         * Get the week number of the given year, starting with the first Sunday as the first week\n         * @returns {Integer} Week number (13 for the 13th full week of the year).\n         */\n        jsDate.prototype.getFullWeekOfYear = function () {\n            var d = this.proxy;\n            var doy = this.getDayOfYear();\n            var rdow = 6 - d.getDay();\n            var woy = parseInt((doy + rdow) / 7, 10);\n            return woy;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getFullYear = function () {\n            return this.proxy.getFullYear();\n        };\n\n        /**\n         * Get the GMT offset in hours and minutes (e.g. +06:30)\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getGmtOffset = function () {\n            // divide the minutes offset by 60\n            var hours = this.proxy.getTimezoneOffset() / 60;\n            // decide if we are ahead of or behind GMT\n            var prefix = hours < 0 ? '+' : '-';\n            // remove the negative sign if any\n            hours = Math.abs(hours);\n            // add the +/- to the padded number of hours to : to the padded minutes\n            return prefix + addZeros(Math.floor(hours), 2) + ':' + addZeros((hours % 1) * 60, 2);\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getHours = function () {\n            return this.proxy.getHours();\n        };\n\n        /**\n         * Get the current hour on a 12-hour scheme\n         *\n         * @returns {Integer}\n         */\n\n        jsDate.prototype.getHours12 = function () {\n            var hours = this.proxy.getHours();\n            return hours > 12 ? hours - 12 : (hours == 0 ? 12 : hours);\n        };\n\n\n        jsDate.prototype.getIsoWeek = function () {\n            var d = this.proxy;\n            var woy = this.getWeekOfYear();\n            var dow1_1 = (new Date('' + d.getFullYear() + '/1/1')).getDay();\n            // First week is 01 and not 00 as in the case of %U and %W,\n            // so we add 1 to the final result except if day 1 of the year\n            // is a Monday (then %W returns 01).\n            // We also need to subtract 1 if the day 1 of the year is\n            // Friday-Sunday, so the resulting equation becomes:\n            var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);\n            if (idow == 53 && (new Date('' + d.getFullYear() + '/12/31')).getDay() < 4) {\n                idow = 1;\n            }\n            else if (idow === 0) {\n                d = new jsDate(new Date('' + (d.getFullYear() - 1) + '/12/31'));\n                idow = d.getIsoWeek();\n            }\n            d = null;\n            return idow;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getMilliseconds = function () {\n            return this.proxy.getMilliseconds();\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getMinutes = function () {\n            return this.proxy.getMinutes();\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getMonth = function () {\n            return this.proxy.getMonth();\n        };\n\n        /**\n         * Get the name of the current month\n         *\n         * @returns {String}\n         */\n\n        jsDate.prototype.getMonthName = function () {\n            return jsDate.regional[this.locale][\"monthNames\"][this.proxy.getMonth()];\n        };\n\n        /**\n         * Get the number of the current month, 1-12\n         *\n         * @returns {Integer}\n         */\n\n        jsDate.prototype.getMonthNumber = function () {\n            return this.proxy.getMonth() + 1;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getSeconds = function () {\n            return this.proxy.getSeconds();\n        };\n\n        /**\n         * Return a proper two-digit year integer\n         *\n         * @returns {Integer}\n         */\n\n        jsDate.prototype.getShortYear = function () {\n            return this.proxy.getYear() % 100;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getTime = function () {\n            return this.proxy.getTime();\n        };\n\n        /**\n         * Get the timezone abbreviation\n         *\n         * @returns {String} Abbreviation for the timezone\n         */\n        jsDate.prototype.getTimezoneAbbr = function () {\n            return this.proxy.toString().replace(/^.*\\(([^)]+)\\)$/, '$1');\n        };\n\n        /**\n         * Get the browser-reported name for the current timezone (e.g. MDT, Mountain Daylight Time)\n         *\n         * @returns {String}\n         */\n        jsDate.prototype.getTimezoneName = function () {\n            var match = /(?:\\((.+)\\)$| ([A-Z]{3}) )/.exec(this.toString());\n            return match[1] || match[2] || 'GMT' + this.getGmtOffset();\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getTimezoneOffset = function () {\n            return this.proxy.getTimezoneOffset();\n        };\n\n\n        /**\n         * Get the week number of the given year, starting with the first Monday as the first week\n         * @returns {Integer} Week number (13 for the 13th week of the year).\n         */\n        jsDate.prototype.getWeekOfYear = function () {\n            var doy = this.getDayOfYear();\n            var rdow = 7 - this.getDayOfWeek();\n            var woy = parseInt((doy + rdow) / 7, 10);\n            return woy;\n        };\n\n        /**\n         * Get the current date as a Unix timestamp\n         *\n         * @returns {Integer}\n         */\n\n        jsDate.prototype.getUnix = function () {\n            return Math.round(this.proxy.getTime() / 1000, 0);\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.getYear = function () {\n            return this.proxy.getYear();\n        };\n\n        /**\n         * Return a date one day ahead (or any other unit)\n         *\n         * @param {String} unit Optional, year | month | day | week | hour | minute | second | millisecond\n         * @returns {jsDate}\n         */\n\n        jsDate.prototype.next = function (unit) {\n            unit = unit || 'day';\n            return this.clone().add(1, unit);\n        };\n\n        /**\n         * Set the jsDate instance to a new date.\n         *\n         * @param  {String | Number | Array | Date Object | jsDate Object | Options Object} arguments Optional arguments,\n         * either a parsable date/time string,\n         * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],\n         * a Date object, jsDate Object or an options object of form {syntax: \"perl\", date:some Date} where all options are optional.\n         */\n        jsDate.prototype.set = function () {\n            switch (arguments.length) {\n                case 0:\n                    this.proxy = new Date();\n                    break;\n                case 1:\n                    // other objects either won't have a _type property or,\n                    // if they do, it shouldn't be set to \"jsDate\", so\n                    // assume it is an options argument.\n                    if (get_type(arguments[0]) == \"[object Object]\" && arguments[0]._type != \"jsDate\") {\n                        var opts = this.options = arguments[0];\n                        this.syntax = opts.syntax || this.syntax;\n                        this.defaultCentury = opts.defaultCentury || this.defaultCentury;\n                        this.proxy = jsDate.createDate(opts.date);\n                    }\n                    else {\n                        this.proxy = jsDate.createDate(arguments[0]);\n                    }\n                    break;\n                default:\n                    var a = [];\n                    for (var i = 0; i < arguments.length; i++) {\n                        a.push(arguments[i]);\n                    }\n                    // this should be the current date/time\n                    this.proxy = new Date();\n                    this.proxy.setFullYear.apply(this.proxy, a.slice(0, 3));\n                    if (a.slice(3).length) {\n                        this.proxy.setHours.apply(this.proxy, a.slice(3));\n                    }\n                    break;\n            }\n            return this;\n        };\n\n        /**\n         * Sets the day of the month for a specified date according to local time.\n         * @param {Integer} dayValue An integer from 1 to 31, representing the day of the month.\n         */\n        jsDate.prototype.setDate = function (n) {\n            this.proxy.setDate(n);\n            return this;\n        };\n\n        /**\n         * Sets the full year for a specified date according to local time.\n         * @param {Integer} yearValue The numeric value of the year, for example, 1995.\n         * @param {Integer} monthValue Optional, between 0 and 11 representing the months January through December.\n         * @param {Integer} dayValue Optional, between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.\n         */\n        jsDate.prototype.setFullYear = function () {\n            this.proxy.setFullYear.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Sets the hours for a specified date according to local time.\n         *\n         * @param {Integer} hoursValue An integer between 0 and 23, representing the hour.\n         * @param {Integer} minutesValue Optional, An integer between 0 and 59, representing the minutes.\n         * @param {Integer} secondsValue Optional, An integer between 0 and 59, representing the seconds.\n         * If you specify the secondsValue parameter, you must also specify the minutesValue.\n         * @param {Integer} msValue Optional, A number between 0 and 999, representing the milliseconds.\n         * If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.\n         */\n        jsDate.prototype.setHours = function () {\n            this.proxy.setHours.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setMilliseconds = function (n) {\n            this.proxy.setMilliseconds(n);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setMinutes = function () {\n            this.proxy.setMinutes.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setMonth = function () {\n            this.proxy.setMonth.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setSeconds = function () {\n            this.proxy.setSeconds.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setTime = function (n) {\n            this.proxy.setTime(n);\n            return this;\n        };\n\n        /**\n         * Implements Date functionality\n         */\n        jsDate.prototype.setYear = function () {\n            this.proxy.setYear.apply(this.proxy, arguments);\n            return this;\n        };\n\n        /**\n         * Provide a formatted string representation of this date.\n         *\n         * @param {String} formatString A format string.\n         * See: {@link jsDate.formats}.\n         * @returns {String} Date String.\n         */\n\n        jsDate.prototype.strftime = function (formatString) {\n            formatString = formatString || this.formatString || jsDate.regional[this.locale]['formatString'];\n            return jsDate.strftime(this, formatString, this.syntax);\n        };\n\n        /**\n         * Return a String representation of this jsDate object.\n         * @returns {String} Date string.\n         */\n\n        jsDate.prototype.toString = function () {\n            return this.proxy.toString();\n        };\n\n        /**\n         * Convert the current date to an 8-digit integer (%Y%m%d)\n         *\n         * @returns {Integer}\n         */\n\n        jsDate.prototype.toYmdInt = function () {\n            return (this.proxy.getFullYear() * 10000) + (this.getMonthNumber() * 100) + this.proxy.getDate();\n        };\n\n        /**\n         * @namespace Holds localizations for month/day names.\n         * <p>jsDate attempts to detect locale when loaded and defaults to 'en'.\n         * If a localization is detected which is not available, jsDate defaults to 'en'.\n         * Additional localizations can be added after jsDate loads.  After adding a localization,\n         * call the jsDate.regional.getLocale() method.  Currently, en, fr and de are defined.</p>\n         *\n         * <p>Localizations must be an object and have the following properties defined:  monthNames, monthNamesShort, dayNames, dayNamesShort and Localizations are added like:</p>\n         * <pre class=\"code\">\n         * jsDate.regional['en'] = {\n     * monthNames      : 'January February March April May June July August September October November December'.split(' '),\n     * monthNamesShort : 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' '),\n     * dayNames        : 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' '),\n     * dayNamesShort   : 'Sun Mon Tue Wed Thu Fri Sat'.split(' ')\n     * };\n         * </pre>\n         * <p>After adding localizations, call <code>jsDate.regional.getLocale();</code> to update the locale setting with the\n         * new localizations.</p>\n         */\n\n        jsDate.regional = {\n            'en': {\n                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n                dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'fr': {\n                monthNames: ['Janvier', 'F\u00e9vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao\u00fbt', 'Septembre', 'Octobre', 'Novembre', 'D\u00e9cembre'],\n                monthNamesShort: ['Jan', 'F\u00e9v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Ao\u00fb', 'Sep', 'Oct', 'Nov', 'D\u00e9c'],\n                dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],\n                dayNamesShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'de': {\n                monthNames: ['Januar', 'Februar', 'M\u00e4rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],\n                monthNamesShort: ['Jan', 'Feb', 'M\u00e4r', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],\n                dayNames: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],\n                dayNamesShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'es': {\n                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\n                dayNames: ['Domingo', 'Lunes', 'Martes', 'Mi&eacute;rcoles', 'Jueves', 'Viernes', 'S&aacute;bado'],\n                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mi&eacute;', 'Juv', 'Vie', 'S&aacute;b'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'ru': {\n                monthNames: ['\u042f\u043d\u0432\u0430\u0440\u044c', '\u0424\u0435\u0432\u0440\u0430\u043b\u044c', '\u041c\u0430\u0440\u0442', '\u0410\u043f\u0440\u0435\u043b\u044c', '\u041c\u0430\u0439', '\u0418\u044e\u043d\u044c', '\u0418\u044e\u043b\u044c', '\u0410\u0432\u0433\u0443\u0441\u0442', '\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c', '\u041e\u043a\u0442\u044f\u0431\u0440\u044c', '\u041d\u043e\u044f\u0431\u0440\u044c', '\u0414\u0435\u043a\u0430\u0431\u0440\u044c'],\n                monthNamesShort: ['\u042f\u043d\u0432', '\u0424\u0435\u0432', '\u041c\u0430\u0440', '\u0410\u043f\u0440', '\u041c\u0430\u0439', '\u0418\u044e\u043d', '\u0418\u044e\u043b', '\u0410\u0432\u0433', '\u0421\u0435\u043d', '\u041e\u043a\u0442', '\u041d\u043e\u044f', '\u0414\u0435\u043a'],\n                dayNames: ['\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435', '\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a', '\u0432\u0442\u043e\u0440\u043d\u0438\u043a', '\u0441\u0440\u0435\u0434\u0430', '\u0447\u0435\u0442\u0432\u0435\u0440\u0433', '\u043f\u044f\u0442\u043d\u0438\u0446\u0430', '\u0441\u0443\u0431\u0431\u043e\u0442\u0430'],\n                dayNamesShort: ['\u0432\u0441\u043a', '\u043f\u043d\u0434', '\u0432\u0442\u0440', '\u0441\u0440\u0434', '\u0447\u0442\u0432', '\u043f\u0442\u043d', '\u0441\u0431\u0442'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'ar': {\n                monthNames: ['\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062b\u0627\u0646\u064a', '\u0634\u0628\u0627\u0637', '\u0622\u0630\u0627\u0631', '\u0646\u064a\u0633\u0627\u0646', '\u0622\u0630\u0627\u0631', '\u062d\u0632\u064a\u0631\u0627\u0646', '\u062a\u0645\u0648\u0632', '\u0622\u0628', '\u0623\u064a\u0644\u0648\u0644', '\u062a\u0634\u0631\u064a\u0646 \u0627\u0644\u0623\u0648\u0644', '\u062a\u0634\u0631\u064a\u0646 \u0627\u0644\u062b\u0627\u0646\u064a', '\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644'],\n                monthNamesShort: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n                dayNames: ['\u0627\u0644\u0633\u0628\u062a', '\u0627\u0644\u0623\u062d\u062f', '\u0627\u0644\u0627\u062b\u0646\u064a\u0646', '\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621', '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621', '\u0627\u0644\u062e\u0645\u064a\u0633', '\u0627\u0644\u062c\u0645\u0639\u0629'],\n                dayNamesShort: ['\u0633\u0628\u062a', '\u0623\u062d\u062f', '\u0627\u062b\u0646\u064a\u0646', '\u062b\u0644\u0627\u062b\u0627\u0621', '\u0623\u0631\u0628\u0639\u0627\u0621', '\u062e\u0645\u064a\u0633', '\u062c\u0645\u0639\u0629'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'pt': {\n                monthNames: ['Janeiro', 'Fevereiro', 'Mar&ccedil;o', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n                monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n                dayNames: ['Domingo', 'Segunda-feira', 'Ter&ccedil;a-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S&aacute;bado'],\n                dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S&aacute;b'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'pt-BR': {\n                monthNames: ['Janeiro', 'Fevereiro', 'Mar&ccedil;o', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n                monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n                dayNames: ['Domingo', 'Segunda-feira', 'Ter&ccedil;a-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S&aacute;bado'],\n                dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S&aacute;b'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'pl': {\n                monthNames: ['Stycze\u0144', 'Luty', 'Marzec', 'Kwiecie\u0144', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpie\u0144', 'Wrzesie\u0144', 'Pa\u017adziernik', 'Listopad', 'Grudzie\u0144'],\n                monthNamesShort: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Pa\u017a', 'Lis', 'Gru'],\n                dayNames: ['Niedziela', 'Poniedzia\u0142ek', 'Wtorek', '\u015aroda', 'Czwartek', 'Pi\u0105tek', 'Sobota'],\n                dayNamesShort: ['Ni', 'Pn', 'Wt', '\u015ar', 'Cz', 'Pt', 'Sb'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'nl': {\n                monthNames: ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 'July', 'Augustus', 'September', 'Oktober', 'November', 'December'],\n                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],\n                dayNames: ','['Zondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'],\n                dayNamesShort: ['Zo', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            },\n\n            'sv': {\n                monthNames: ['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december'],\n                monthNamesShort: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],\n                dayNames: ['s\u00f6ndag', 'm\u00e5ndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'l\u00f6rdag'],\n                dayNamesShort: ['s\u00f6n', 'm\u00e5n', 'tis', 'ons', 'tor', 'fre', 'l\u00f6r'],\n                formatString: '%Y-%m-%d %H:%M:%S'\n            }\n\n        };\n\n        // Set english variants to 'en'\n        jsDate.regional['en-US'] = jsDate.regional['en-GB'] = jsDate.regional['en'];\n\n        /**\n         * Try to determine the users locale based on the lang attribute of the html page.  Defaults to 'en'\n         * if it cannot figure out a locale of if the locale does not have a localization defined.\n         * @returns {String} locale\n         */\n\n        jsDate.regional.getLocale = function () {\n            var l = jsDate.config.defaultLocale;\n\n            if (document && document.getElementsByTagName('html') && document.getElementsByTagName('html')[0].lang) {\n                l = document.getElementsByTagName('html')[0].lang;\n                if (!jsDate.regional.hasOwnProperty(l)) {\n                    l = jsDate.config.defaultLocale;\n                }\n            }\n\n            return l;\n        };\n\n        // ms in day\n        var day = 24 * 60 * 60 * 1000;\n\n        // padd a number with zeros\n        var addZeros = function (num, digits) {\n            num = String(num);\n            var i = digits - num.length;\n            var s = String(Math.pow(10, i)).slice(1);\n            return s.concat(num);\n        };\n\n        // representations used for calculating differences between dates.\n        // This borrows heavily from Ken Snyder's work.\n        var multipliers = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60 * 1000,\n            hour: 60 * 60 * 1000,\n            day: day,\n            week: 7 * day,\n            month: {\n                // add a number of months\n                add: function (d, number) {\n                    // add any years needed (increments of 12)\n                    multipliers.year.add(d, Math[number > 0 ? 'floor' : 'ceil'](number / 12));\n                    // ensure that we properly wrap betwen December and January\n                    // 11 % 12 = 11\n                    // 12 % 12 = 0\n                    var prevMonth = d.getMonth() + (number % 12);\n                    if (prevMonth == 12) {\n                        prevMonth = 0;\n                        d.setYear(d.getFullYear() + 1);\n                    } else if (prevMonth == -1) {\n                        prevMonth = 11;\n                        d.setYear(d.getFullYear() - 1);\n                    }\n                    d.setMonth(prevMonth);\n                },\n                // get the number of months between two Date objects (decimal to the nearest day)\n                diff: function (d1, d2) {\n                    // get the number of years\n                    var diffYears = d1.getFullYear() - d2.getFullYear();\n                    // get the number of remaining months\n                    var diffMonths = d1.getMonth() - d2.getMonth() + (diffYears * 12);\n                    // get the number of remaining days\n                    var diffDays = d1.getDate() - d2.getDate();\n                    // return the month difference with the days difference as a decimal\n                    return diffMonths + (diffDays / 30);\n                }\n            },\n            year: {\n                // add a number of years\n                add: function (d, number) {\n                    d.setYear(d.getFullYear() + Math[number > 0 ? 'floor' : 'ceil'](number));\n                },\n                // get the number of years between two Date objects (decimal to the nearest day)\n                diff: function (d1, d2) {\n                    return multipliers.month.diff(d1, d2) / 12;\n                }\n            }\n        };\n        //\n        // Alias each multiplier with an 's' to allow 'year' and 'years' for example.\n        // This comes from Ken Snyders work.\n        //\n        for (var unit in multipliers) {\n            if (unit.substring(unit.length - 1) != 's') { // IE will iterate newly added properties :|\n                multipliers[unit + 's'] = multipliers[unit];\n            }\n        }\n\n        //\n        // take a jsDate instance and a format code and return the formatted value.\n        // This is a somewhat modified version of Ken Snyder's method.\n        //\n        var format = function (d, code, syntax) {\n            // if shorcut codes are used, recursively expand those.\n            if (jsDate.formats[syntax][\"shortcuts\"][code]) {\n                return jsDate.strftime(d, jsDate.formats[syntax][\"shortcuts\"][code], syntax);\n            } else {\n                // get the format code function and addZeros() argument\n                var getter = (jsDate.formats[syntax][\"codes\"][code] || '').split('.');\n                var nbr = d['get' + getter[0]] ? d['get' + getter[0]]() : '';\n                if (getter[1]) {\n                    nbr = addZeros(nbr, getter[1]);\n                }\n                return nbr;\n            }\n        };\n\n        /**\n         * @static\n         * Static function for convert a date to a string according to a given format.  Also acts as namespace for strftime format codes.\n         * <p>strftime formatting can be accomplished without creating a jsDate object by calling jsDate.strftime():</p>\n         * <pre class=\"code\">\n         * var formattedDate = jsDate.strftime('Feb 8, 2006 8:48:32', '%Y-%m-%d %H:%M:%S');\n         * </pre>\n         * @param {String | Number | Array | jsDate&nbsp;Object | Date&nbsp;Object} date A parsable date string, JavaScript time stamp, Array of form [year, month, day, hours, minutes, seconds, milliseconds], jsDate Object or Date object.\n         * @param {String} formatString String with embedded date formatting codes.\n         * See: {@link jsDate.formats}.\n         * @param {String} syntax Optional syntax to use [default perl].\n         * @param {String} locale Optional locale to use.\n         * @returns {String} Formatted representation of the date.\n         */\n            //\n            // Logic as implemented here is very similar to Ken Snyder's Date Instance Methods.\n            //\n        jsDate.strftime = function (d, formatString, syntax, locale) {\n            var syn = 'perl';\n            var loc = jsDate.regional.getLocale();\n\n            // check if syntax and locale are available or reversed\n            if (syntax && jsDate.formats.hasOwnProperty(syntax)) {\n                syn = syntax;\n            }\n            else if (syntax && jsDate.regional.hasOwnProperty(syntax)) {\n                loc = syntax;\n            }\n\n            if (locale && jsDate.formats.hasOwnProperty(locale)) {\n                syn = locale;\n            }\n            else if (locale && jsDate.regional.hasOwnProperty(locale)) {\n                loc = locale;\n            }\n\n            if (get_type(d) != \"[object Object]\" || d._type != \"jsDate\") {\n                d = new jsDate(d);\n                d.locale = loc;\n            }\n            if (!formatString) {\n                formatString = d.formatString || jsDate.regional[loc]['formatString'];\n            }\n            // default the format string to year-month-day\n            var source = formatString || '%Y-%m-%d',\n                result = '',\n                match;\n            // replace each format code\n            while (source.length > 0) {\n                if (match = source.match(jsDate.formats[syn].codes.matcher)) {\n                    result += source.slice(0, match.index);\n                    result += (match[1] || '') + format(d, match[2], syn);\n                    source = source.slice(match.index + match[0].length);\n                } else {\n                    result += source;\n                    source = '';\n                }\n            }\n            return result;\n        };\n\n        /**\n         * @namespace\n         * Namespace to hold format codes and format shortcuts.  \"perl\" and \"php\" format codes\n         * and shortcuts are defined by default.  Additional codes and shortcuts can be\n         * added like:\n         *\n         * <pre class=\"code\">\n         * jsDate.formats[\"perl\"] = {\n     *     \"codes\": {\n     *         matcher: /someregex/,\n     *         Y: \"fullYear\",  // name of \"get\" method without the \"get\",\n     *         ...,            // more codes\n     *     },\n     *     \"shortcuts\": {\n     *         F: '%Y-%m-%d',\n     *         ...,            // more shortcuts\n     *     }\n     * };\n         * </pre>\n         *\n         * <p>Additionally, ISO and SQL shortcuts are defined and can be accesses via:\n         * <code>jsDate.formats.ISO</code> and <code>jsDate.formats.SQL</code>\n         */\n\n        jsDate.formats = {\n            ISO: '%Y-%m-%dT%H:%M:%S.%N%G',\n            SQL: '%Y-%m-%d %H:%M:%S'\n        };\n\n        /**\n         * Perl format codes and shortcuts for strftime.\n         *\n         * A hash (object) of codes where each code must be an array where the first member is\n         * the name of a Date.prototype or jsDate.prototype function to call\n         * and optionally a second member indicating the number to pass to addZeros()\n         *\n         * <p>The following format codes are defined:</p>\n         *\n         * <pre class=\"code\">\n         * Code    Result                    Description\n         * == Years ==\n         * %Y      2008                      Four-digit year\n         * %y      08                        Two-digit year\n         *\n         * == Months ==\n         * %m      09                        Two-digit month\n         * %#m     9                         One or two-digit month\n         * %B      September                 Full month name\n         * %b      Sep                       Abbreviated month name\n         *\n         * == Days ==\n         * %d      05                        Two-digit day of month\n         * %#d     5                         One or two-digit day of month\n         * %e      5                         One or two-digit day of month\n         * %A      Sunday                    Full name of the day of the week\n         * %a      Sun                       Abbreviated name of the day of the week\n         * %w      0                         Number of the day of the week (0 = Sunday, 6 = Saturday)\n         *\n         * == Hours ==\n         * %H      23                        Hours in 24-hour format (two digits)\n         * %#H     3                         Hours in 24-hour integer format (one or two digits)\n         * %I      11                        Hours in 12-hour format (two digits)\n         * %#I     3                         Hours in 12-hour integer format (one or two digits)\n         * %p      PM                        AM or PM\n         *\n         * == Minutes ==\n         * %M      09                        Minutes (two digits)\n         * %#M     9                         Minutes (one or two digits)\n         *\n         * == Seconds ==\n         * %S      02                        Seconds (two digits)\n         * %#S     2                         Seconds (one or two digits)\n         * %s      1206567625723             Unix timestamp (Seconds past 1970-01-01 00:00:00)\n         *\n         * == Milliseconds ==\n         * %N      008                       Milliseconds (three digits)\n         * %#N     8                         Milliseconds (one to three digits)\n         *\n         * == Timezone ==\n         * %O      360                       difference in minutes between local time and GMT\n         * %Z      Mountain Standard Time    Name of timezone as reported by browser\n         * %G      06:00                     Hours and minutes between GMT\n         *\n         * == Shortcuts ==\n         * %F      2008-03-26                %Y-%m-%d\n         * %T      05:06:30                  %H:%M:%S\n         * %X      05:06:30                  %H:%M:%S\n         * %x      03/26/08                  %m/%d/%y\n         * %D      03/26/08                  %m/%d/%y\n         * %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y\n         * %v      3-Sep-2008                %e-%b-%Y\n         * %R      15:31                     %H:%M\n         * %r      03:31:00 PM               %I:%M:%S %p\n         *\n         * == Characters ==\n         * %n      \\n                        Newline\n         * %t      \\t                        Tab\n         * %%      %                         Percent Symbol\n         * </pre>\n         *\n         * <p>Formatting shortcuts that will be translated into their longer version.\n         * Be sure that format shortcuts do not refer to themselves: this will cause an infinite loop.</p>\n         *\n         * <p>Format codes and format shortcuts can be redefined after the jsDate\n         * module is imported.</p>\n         *\n         * <p>Note that if you redefine the whole hash (object), you must supply a \"matcher\"\n         * regex for the parser.  The default matcher is:</p>\n         *\n         * <code>/()%(#?(%|[a-z]))/i</code>\n         *\n         * <p>which corresponds to the Perl syntax used by default.</p>\n         *\n         * <p>By customizing the matcher and format codes, nearly any strftime functionality is possible.</p>\n         */\n\n        jsDate.formats.perl = {\n            codes: {\n                //\n                // 2-part regex matcher for format codes\n                //\n                // first match must be the character before the code (to account for escaping)\n                // second match must be the format code character(s)\n                //\n                matcher: /()%(#?(%|[a-z]))/i,\n                // year\n                Y: 'FullYear',\n                y: 'ShortYear.2',\n                // month\n                m: 'MonthNumber.2',\n                '#m': 'MonthNumber',\n                B: 'MonthName',\n                b: 'AbbrMonthName',\n                // day\n                d: 'Date.2',\n                '#d': 'Date',\n                e: 'Date',\n                A: 'DayName',\n                a: 'AbbrDayName',\n                w: 'Day',\n                // hours\n                H: 'Hours.2',\n                '#H': 'Hours',\n                I: 'Hours12.2',\n                '#I': 'Hours12',\n                p: 'AMPM',\n                // minutes\n                M: 'Minutes.2',\n                '#M': 'Minutes',\n                // seconds\n                S: 'Seconds.2',\n                '#S': 'Seconds',\n                s: 'Unix',\n                // milliseconds\n                N: 'Milliseconds.3',\n                '#N': 'Milliseconds',\n                // timezone\n                O: 'TimezoneOffset',\n                Z: 'TimezoneName',\n                G: 'GmtOffset'\n            },\n\n            shortcuts: {\n                // date\n                F: '%Y-%m-%d',\n                // time\n                T: '%H:%M:%S',\n                X: '%H:%M:%S',\n                // local format date\n                x: '%m/%d/%y',\n                D: '%m/%d/%y',\n                // local format extended\n                '#c': '%a %b %e %H:%M:%S %Y',\n                // local format short\n                v: '%e-%b-%Y',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                // tab and newline\n                t: '\\t',\n                n: '\\n',\n                '%': '%'\n            }\n        };\n\n        /**\n         * PHP format codes and shortcuts for strftime.\n         *\n         * A hash (object) of codes where each code must be an array where the first member is\n         * the name of a Date.prototype or jsDate.prototype function to call\n         * and optionally a second member indicating the number to pass to addZeros()\n         *\n         * <p>The following format codes are defined:</p>\n         *\n         * <pre class=\"code\">\n         * Code    Result                    Description\n         * === Days ===\n         * %a      Sun through Sat           An abbreviated textual representation of the day\n         * %A      Sunday - Saturday         A full textual representation of the day\n         * %d      01 to 31                  Two-digit day of the month (with leading zeros)\n         * %e      1 to 31                   Day of the month, with a space preceding single digits.\n         * %j      001 to 366                Day of the year, 3 digits with leading zeros\n         * %u      1 - 7 (Mon - Sun)         ISO-8601 numeric representation of the day of the week\n         * %w      0 - 6 (Sun - Sat)         Numeric representation of the day of the week\n         *\n         * === Week ===\n         * %U      13                        Full Week number, starting with the first Sunday as the first week\n         * %V      01 through 53             ISO-8601:1988 week number, starting with the first week of the year\n         *                                   with at least 4 weekdays, with Monday being the start of the week\n         * %W      46                        A numeric representation of the week of the year,\n         *                                   starting with the first Monday as the first week\n         * === Month ===\n         * %b      Jan through Dec           Abbreviated month name, based on the locale\n         * %B      January - December        Full month name, based on the locale\n         * %h      Jan through Dec           Abbreviated month name, based on the locale (an alias of %b)\n         * %m      01 - 12 (Jan - Dec)       Two digit representation of the month\n         *\n         * === Year ===\n         * %C      19                        Two digit century (year/100, truncated to an integer)\n         * %y      09 for 2009               Two digit year\n         * %Y      2038                      Four digit year\n         *\n         * === Time ===\n         * %H      00 through 23             Two digit representation of the hour in 24-hour format\n         * %I      01 through 12             Two digit representation of the hour in 12-hour format\n         * %l      1 through 12              Hour in 12-hour format, with a space preceeding single digits\n         * %M      00 through 59             Two digit representation of the minute\n         * %p      AM/PM                     UPPER-CASE 'AM' or 'PM' based on the given time\n         * %P      am/pm                     lower-case 'am' or 'pm' based on the given time\n         * %r      09:34:17 PM               Same as %I:%M:%S %p\n         * %R      00:35                     Same as %H:%M\n         * %S      00 through 59             Two digit representation of the second\n         * %T      21:34:17                  Same as %H:%M:%S\n         * %X      03:59:16                  Preferred time representation based on locale, without the date\n         * %z      -0500 or EST              Either the time zone offset from UTC or the abbreviation\n         * %Z      -0500 or EST              The time zone offset/abbreviation option NOT given by %z\n         *\n         * === Time and Date ===\n         * %D      02/05/09                  Same as %m/%d/%y\n         * %F      2009-02-05                Same as %Y-%m-%d (commonly used in database datestamps)\n         * %s      305815200                 Unix Epoch Time timestamp (same as the time() function)\n         * %x      02/05/09                  Preferred date representation, without the time\n         *\n         * === Miscellaneous ===\n         * %n        ---                     A newline character (\\n)\n         * %t        ---                     A Tab character (\\t)\n         * %%        ---                     A literal percentage character (%)\n         * </pre>\n         */\n\n        jsDate.formats.php = {\n            codes: {\n                //\n                // 2-part regex matcher for format codes\n                //\n                // first match must be the character before the code (to account for escaping)\n                // second match must be the format code character(s)\n                //\n                matcher: /()%((%|[a-z]))/i,\n                // day\n                a: 'AbbrDayName',\n                A: 'DayName',\n                d: 'Date.2',\n                e: 'Date',\n                j: 'DayOfYear.3',\n                u: 'DayOfWeek',\n                w: 'Day',\n                // week\n                U: 'FullWeekOfYear.2',\n                V: 'IsoWeek.2',\n                W: 'WeekOfYear.2',\n                // month\n                b: 'AbbrMonthName',\n                B: 'MonthName',\n                m: 'MonthNumber.2',\n                h: 'AbbrMonthName',\n                // year\n                C: 'Century.2',\n                y: 'ShortYear.2',\n                Y: 'FullYear',\n                // time\n                H: 'Hours.2',\n                I: 'Hours12.2',\n                l: 'Hours12',\n                p: 'AMPM',\n                P: 'AmPm',\n                M: 'Minutes.2',\n                S: 'Seconds.2',\n                s: 'Unix',\n                O: 'TimezoneOffset',\n                z: 'GmtOffset',\n                Z: 'TimezoneAbbr'\n            },\n\n            shortcuts: {\n                D: '%m/%d/%y',\n                F: '%Y-%m-%d',\n                T: '%H:%M:%S',\n                X: '%H:%M:%S',\n                x: '%m/%d/%y',\n                R: '%H:%M',\n                r: '%I:%M:%S %p',\n                t: '\\t',\n                n: '\\n',\n                '%': '%'\n            }\n        };\n        //\n        // Conceptually, the logic implemented here is similar to Ken Snyder's Date Instance Methods.\n        // I use his idea of a set of parsers which can be regular expressions or functions,\n        // iterating through those, and then seeing if Date.parse() will create a date.\n        // The parser expressions and functions are a little different and some bugs have been\n        // worked out.  Also, a lot of \"pre-parsing\" is done to fix implementation\n        // variations of Date.parse() between browsers.\n        //\n        jsDate.createDate = function (date) {\n            // if passing in multiple arguments, try Date constructor\n            if (date == null) {\n                return new Date();\n            }\n            // If the passed value is already a date object, return it\n            if (date instanceof Date) {\n                return date;\n            }\n            // if (typeof date == 'number') return new Date(date * 1000);\n            // If the passed value is an integer, interpret it as a javascript timestamp\n            if (typeof date == 'number') {\n                return new Date(date);\n            }\n\n            // Before passing strings into Date.parse(), have to normalize them for certain conditions.\n            // If strings are not formatted staccording to the EcmaScript spec, results from Date parse will be implementation dependent.\n            //\n            // For example:\n            //  * FF and Opera assume 2 digit dates are pre y2k, Chome assumes <50 is pre y2k, 50+ is 21st century.\n            //  * Chrome will correctly parse '1984-1-25' into localtime, FF and Opera will not parse.\n            //  * Both FF, Chrome and Opera will parse '1984/1/25' into localtime.\n\n            // remove leading and trailing spaces\n            var parsable = String(date).replace(/^\\s*(.+)\\s*$/g, '$1');\n\n            // replace dahses (-) with slashes (/) in dates like n[nnn]/n[n]/n[nnn]\n            parsable = parsable.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/, \"$1/$2/$3\");\n\n            /////////\n            // Need to check for '15-Dec-09' also.\n            // FF will not parse, but Chrome will.\n            // Chrome will set date to 2009 as well.\n            /////////\n\n            // first check for 'dd-mmm-yyyy' or 'dd/mmm/yyyy' like '15-Dec-2010'\n            parsable = parsable.replace(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{4})/i, \"$1 $2 $3\");\n\n            // Now check for 'dd-mmm-yy' or 'dd/mmm/yy' and normalize years to default century.\n            var match = parsable.match(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{2})\\D*/i);\n            if (match && match.length > 3) {\n                var m3 = parseFloat(match[3]);\n                var ny = jsDate.config.defaultCentury + m3;\n                ny = String(ny);\n\n                // now replace 2 digit year with 4 digit year\n                parsable = parsable.replace(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{2})\\D*/i, match[1] + ' ' + match[2] + ' ' + ny);\n\n            }\n\n            // Check for '1/19/70 8:14PM'\n            // where starts with mm/dd/yy or yy/mm/dd and have something after\n            // Check if 1st postiion is greater than 31, assume it is year.\n            // Assme all 2 digit years are 1900's.\n            // Finally, change them into US style mm/dd/yyyy representations.\n            match = parsable.match(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})[^0-9]/);\n\n            function h1(parsable, match) {\n                var m1 = parseFloat(match[1]);\n                var m2 = parseFloat(match[2]);\n                var m3 = parseFloat(match[3]);\n                var cent = jsDate.config.defaultCentury;\n                var ny, nd, nm, str;\n\n                if (m1 > 31) { // first number is a year\n                    nd = m3;\n                    nm = m2;\n                    ny = cent + m1;\n                }\n\n                else { // last number is the year\n                    nd = m2;\n                    nm = m1;\n                    ny = cent + m3;\n                }\n\n                str = nm + '/' + nd + '/' + ny;\n\n                // now replace 2 digit year with 4 digit year\n                return parsable.replace(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})/, str);\n\n            }\n\n            if (match && match.length > 3) {\n                parsable = h1(parsable, match);\n            }\n\n            // Now check for '1/19/70' with nothing after and do as above\n            var match = parsable.match(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})$/);\n\n            if (match && match.length > 3) {\n                parsable = h1(parsable, match);\n            }\n\n\n            var i = 0;\n            var length = jsDate.matchers.length;\n            var pattern,\n                ms,\n                current = parsable,\n                obj;\n            while (i < length) {\n                ms = Date.parse(current);\n                if (!isNaN(ms)) {\n                    return new Date(ms);\n                }\n                pattern = jsDate.matchers[i];\n                if (typeof pattern == 'function') {\n                    obj = pattern.call(jsDate, current);\n                    if (obj instanceof Date) {\n                        return obj;\n                    }\n                } else {\n                    current = parsable.replace(pattern[0], pattern[1]);\n                }\n                i++;\n            }\n            return NaN;\n        };\n\n\n        /**\n         * @static\n         * Handy static utility function to return the number of days in a given month.\n         * @param {Integer} year Year\n         * @param {Integer} month Month (1-12)\n         * @returns {Integer} Number of days in the month.\n         */\n            //\n            // handy utility method Borrowed right from Ken Snyder's Date Instance Mehtods.\n            //\n        jsDate.daysInMonth = function (year, month) {\n            if (month == 2) {\n                return new Date(year, 1, 29).getDate() == 29 ? 29 : 28;\n            }\n            return [undefined, 31, undefined, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n        };\n\n\n        //\n        // An Array of regular expressions or functions that will attempt to match the date string.\n        // Functions are called with scope of a jsDate instance.\n        //\n        jsDate.matchers = [\n            // convert dd.mmm.yyyy to mm/dd/yyyy (world date to US date).\n            [/(3[01]|[0-2]\\d)\\s*\\.\\s*(1[0-2]|0\\d)\\s*\\.\\s*([1-9]\\d{3})/, '$2/$1/$3'],\n            // convert yyyy-mm-dd to mm/dd/yyyy (ISO date to US date).\n            [/([1-9]\\d{3})\\s*-\\s*(1[0-2]|0\\d)\\s*-\\s*(3[01]|[0-2]\\d)/, '$2/$3/$1'],\n            // Handle 12 hour or 24 hour time with milliseconds am/pm and optional date part.\n            function (str) {\n                var match = str.match(/^(?:(.+)\\s+)?([012]?\\d)(?:\\s*\\:\\s*(\\d\\d))?(?:\\s*\\:\\s*(\\d\\d(\\.\\d*)?))?\\s*(am|pm)?\\s*$/i);\n                //                   opt. date      hour       opt. minute     opt. second       opt. msec   opt. am or pm\n                if (match) {\n                    if (match[1]) {\n                        var d = this.createDate(match[1]);\n                        if (isNaN(d)) {\n                            return;\n                        }\n                    } else {\n                        var d = new Date();\n                        d.setMilliseconds(0);\n                    }\n                    var hour = parseFloat(match[2]);\n                    if (match[6]) {\n                        hour = match[6].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);\n                    }\n                    d.setHours(hour, parseInt(match[3] || 0, 10), parseInt(match[4] || 0, 10), ((parseFloat(match[5] || 0)) || 0) * 1000);\n                    return d;\n                }\n                else {\n                    return str;\n                }\n            },\n            // Handle ISO timestamp with time zone.\n            function (str) {\n                var match = str.match(/^(?:(.+))[T|\\s+]([012]\\d)(?:\\:(\\d\\d))(?:\\:(\\d\\d))(?:\\.\\d+)([\\+\\-]\\d\\d\\:\\d\\d)$/i);\n                if (match) {\n                    if (match[1]) {\n                        var d = this.createDate(match[1]);\n                        if (isNaN(d)) {\n                            return;\n                        }\n                    } else {\n                        var d = new Date();\n                        d.setMilliseconds(0);\n                    }\n                    var hour = parseFloat(match[2]);\n                    d.setHours(hour, parseInt(match[3], 10), parseInt(match[4], 10), parseFloat(match[5]) * 1000);\n                    return d;\n                }\n                else {\n                    return str;\n                }\n            },\n            // Try to match ambiguous strings like 12/8/22.\n            // Use FF date assumption that 2 digit years are 20th century (i.e. 1900's).\n            // This may be redundant with pre processing of date already performed.\n            function (str) {\n                var match = str.match(/^([0-3]?\\d)\\s*[-\\/.\\s]{1}\\s*([a-zA-Z]{3,9})\\s*[-\\/.\\s]{1}\\s*([0-3]?\\d)$/);\n                if (match) {\n                    var d = new Date();\n                    var cent = jsDate.config.defaultCentury;\n                    var m1 = parseFloat(match[1]);\n                    var m3 = parseFloat(match[3]);\n                    var ny, nd, nm;\n                    if (m1 > 31) { // first number is a year\n                        nd = m3;\n                        ny = cent + m1;\n                    }\n\n                    else { // last number is the year\n                        nd = m1;\n                        ny = cent + m3;\n                    }\n\n                    var nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()][\"monthNamesShort\"]);\n\n                    if (nm == -1) {\n                        nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()][\"monthNames\"]);\n                    }\n\n                    d.setFullYear(ny, nm, nd);\n                    d.setHours(0, 0, 0, 0);\n                    return d;\n                }\n\n                else {\n                    return str;\n                }\n            }\n        ];\n\n        //\n        // I think John Reisig published this method on his blog, ejohn.\n        //\n        function inArray(elem, array) {\n            if (array.indexOf) {\n                return array.indexOf(elem);\n            }\n\n            for (var i = 0, length = array.length; i < length; i++) {\n                if (array[i] === elem) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        //\n        // Thanks to Kangax, Christian Sciberras and Stack Overflow for this method.\n        //\n        function get_type(thing) {\n            if (thing === null) return \"[object Null]\"; // special case\n            return Object.prototype.toString.call(thing);\n        }\n\n        $.jsDate = jsDate;\n\n\n        /**\n         * JavaScript printf/sprintf functions.\n         *\n         * This code has been adapted from the publicly available sprintf methods\n         * by Ash Searle. His original header follows:\n         *\n         *     This code is unrestricted: you are free to use it however you like.\n         *\n         *     The functions should work as expected, performing left or right alignment,\n         *     truncating strings, outputting numbers with a required precision etc.\n         *\n         *     For complex cases, these functions follow the Perl implementations of\n         *     (s)printf, allowing arguments to be passed out-of-order, and to set the\n         *     precision or length of the output based on arguments instead of fixed\n         *     numbers.\n         *\n         *     See http://perldoc.perl.org/functions/sprintf.html for more information.\n         *\n         *     Implemented:\n         *     - zero and space-padding\n         *     - right and left-alignment,\n         *     - base X prefix (binary, octal and hex)\n         *     - positive number prefix\n         *     - (minimum) width\n         *     - precision / truncation / maximum width\n         *     - out of order arguments\n         *\n         *     Not implemented (yet):\n         *     - vector flag\n         *     - size (bytes, words, long-words etc.)\n         *\n         *     Will not implement:\n         *     - %n or %p (no pass-by-reference in JavaScript)\n         *\n         *     @version 2007.04.27\n         *     @author Ash Searle\n         *\n         * You can see the original work and comments on his blog:\n         * http://hexmen.com/blog/2007/03/printf-sprintf/\n         * http://hexmen.com/js/sprintf.js\n         */\n\n        /**\n         * @Modifications 2009.05.26\n         * @author Chris Leonello\n         *\n         * Added %p %P specifier\n         * Acts like %g or %G but will not add more significant digits to the output than present in the input.\n         * Example:\n         * Format: '%.3p', Input: 0.012, Output: 0.012\n         * Format: '%.3g', Input: 0.012, Output: 0.0120\n         * Format: '%.4p', Input: 12.0, Output: 12.0\n         * Format: '%.4g', Input: 12.0, Output: 12.00\n         * Format: '%.4p', Input: 4.321e-5, Output: 4.321e-5\n         * Format: '%.4g', Input: 4.321e-5, Output: 4.3210e-5\n         *\n         * Example:\n         * >>> $.jqplot.sprintf('%.2f, %d', 23.3452, 43.23)\n         * \"23.35, 43\"\n         * >>> $.jqplot.sprintf(\"no value: %n, decimal with thousands separator: %'d\", 23.3452, 433524)\n         * \"no value: , decimal with thousands separator: 433,524\"\n         */\n        $.jqplot.sprintf = function () {\n            function pad(str, len, chr, leftJustify) {\n                var padding = (str.length >= len) ? '' : Array(1 + len - str.length >>> 0).join(chr);\n                return leftJustify ? str + padding : padding + str;\n\n            }\n\n            function thousand_separate(value) {\n                var value_str = new String(value);\n                for (var i = 10; i > 0; i--) {\n                    if (value_str == (value_str = value_str.replace(/^(\\d+)(\\d{3})/, \"$1\" + $.jqplot.sprintf.thousandsSeparator + \"$2\"))) break;\n                }\n                return value_str;\n            }\n\n            function justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace) {\n                var diff = minWidth - value.length;\n                if (diff > 0) {\n                    var spchar = ' ';\n                    if (htmlSpace) {\n                        spchar = '&nbsp;';\n                    }\n                    if (leftJustify || !zeroPad) {\n                        value = pad(value, minWidth, spchar, leftJustify);\n                    } else {\n                        value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\n                    }\n                }\n                return value;\n            }\n\n            function formatBaseX(value, base, prefix, leftJustify, minWidth, precision, zeroPad, htmlSpace) {\n                // Note: casts negative numbers to positive ones\n                var number = value >>> 0;\n                prefix = prefix && number && {'2': '0b', '8': '0', '16': '0x'}[base] || '';\n                value = prefix + pad(number.toString(base), precision || 0, '0', false);\n                return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n            }\n\n            function formatString(value, leftJustify, minWidth, precision, zeroPad, htmlSpace) {\n                if (precision != null) {\n                    value = value.slice(0, precision);\n                }\n                return justify(value, '', leftJustify, minWidth, zeroPad, htmlSpace);\n            }\n\n            var a = arguments, i = 0, format = a[i++];\n\n            return format.replace($.jqplot.sprintf.regex, function (substring, valueIndex, flags, minWidth, _, precision, type) {\n                if (substring == '%%') {\n                    return '%';\n                }\n\n                // parse flags\n                var leftJustify = false, positivePrefix = '', zeroPad = false, prefixBaseX = false, htmlSpace = false, thousandSeparation = false;\n                for (var j = 0; flags && j < flags.length; j++) switch (flags.charAt(j)) {\n                    case ' ':\n                        positivePrefix = ' ';\n                        break;\n                    case '+':\n                        positivePrefix = '+';\n                        break;\n                    case '-':\n                        leftJustify = true;\n                        break;\n                    case '0':\n                        zeroPad = true;\n                        break;\n                    case '#':\n                        prefixBaseX = true;\n                        break;\n                    case '&':\n                        htmlSpace = true;\n                        break;\n                    case '\\'':\n                        thousandSeparation = true;\n                        break;\n                }\n\n                // parameters may be null, undefined, empty-string or real valued\n                // we want to ignore null, undefined and empty-string values\n\n                if (!minWidth) {\n                    minWidth = 0;\n                }\n                else if (minWidth == '*') {\n                    minWidth = +a[i++];\n                }\n                else if (minWidth.charAt(0) == '*') {\n                    minWidth = +a[minWidth.slice(1, -1)];\n                }\n                else {\n                    minWidth = +minWidth;\n                }\n\n                // Note: undocumented perl feature:\n                if (minWidth < 0) {\n                    minWidth = -minWidth;\n                    leftJustify = true;\n                }\n\n                if (!isFinite(minWidth)) {\n                    throw new Error('$.jqplot.sprintf: (minimum-)width must be finite');\n                }\n\n                if (!precision) {\n                    precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type == 'd') ? 0 : void(0);\n                }\n                else if (precision == '*') {\n                    precision = +a[i++];\n                }\n                else if (precision.charAt(0) == '*') {\n                    precision = +a[precision.slice(1, -1)];\n                }\n                else {\n                    precision = +precision;\n                }\n\n                // grab value using valueIndex if required?\n                var value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\n\n                switch (type) {\n                    case 's':\n                    {\n                        if (value == null) {\n                            return '';\n                        }\n                        return formatString(String(value), leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    }\n                    case 'c':\n                        return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    case 'b':\n                        return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    case 'o':\n                        return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    case 'x':\n                        return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    case 'X':\n                        return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace).toUpperCase();\n                    case 'u':\n                        return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n                    case 'i':\n                    {\n                        var number = parseInt(+value, 10);\n                        if (isNaN(number)) {\n                            return '';\n                        }\n                        var prefix = number < 0 ? '-' : positivePrefix;\n                        var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))) : String(Math.abs(number));\n                        value = prefix + pad(number_str, precision, '0', false);\n                        //value = prefix + pad(String(Math.abs(number)), precision, '0', false);\n                        return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n                    }\n                    case 'd':\n                    {\n                        var number = Math.round(+value);\n                        if (isNaN(number)) {\n                            return '';\n                        }\n                        var prefix = number < 0 ? '-' : positivePrefix;\n                        var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))) : String(Math.abs(number));\n                        value = prefix + pad(number_str, precision, '0', false);\n                        return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n                    }\n                    case 'e':\n                    case 'E':\n                    case 'f':\n                    case 'F':\n                    case 'g':\n                    case 'G':\n                    {\n                        var number = +value;\n                        if (isNaN(number)) {\n                            return '';\n                        }\n                        var prefix = number < 0 ? '-' : positivePrefix;\n                        var method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\n                        var textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\n                        var number_str = Math.abs(number)[method](precision);\n\n                        // Apply the decimal mark properly by splitting the number by the\n                        //   decimalMark, applying thousands separator, and then placing it\n                        //   back in.\n                        var parts = number_str.toString().split('.');\n                        parts[0] = thousandSeparation ? thousand_separate(parts[0]) : parts[0];\n                        number_str = parts.join($.jqplot.sprintf.decimalMark);\n\n                        value = prefix + number_str;\n                        var justified = justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();\n\n                        return justified;\n                    }\n                    case 'p':\n                    case 'P':\n                    {\n                        // make sure number is a number\n                        var number = +value;\n                        if (isNaN(number)) {\n                            return '';\n                        }\n                        var prefix = number < 0 ? '-' : positivePrefix;\n\n                        var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);\n                        var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : String(number).length;\n                        var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;\n\n                        if (Math.abs(number) < 1) {\n                            if (sd + zeros <= precision) {\n                                value = prefix + Math.abs(number).toPrecision(sd);\n                            }\n                            else {\n                                if (sd <= precision - 1) {\n                                    value = prefix + Math.abs(number).toExponential(sd - 1);\n                                }\n                                else {\n                                    value = prefix + Math.abs(number).toExponential(precision - 1);\n                                }\n                            }\n                        }\n                        else {\n                            var prec = (sd <= precision) ? sd : precision;\n                            value = prefix + Math.abs(number).toPrecision(prec);\n                        }\n                        var textTransform = ['toString', 'toUpperCase']['pP'.indexOf(type) % 2];\n                        return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();\n                    }\n                    case 'n':\n                        return '';\n                    default:\n                        return substring;\n                }\n            });\n        };\n\n        $.jqplot.sprintf.thousandsSeparator = ',';\n        // Specifies the decimal mark for floating point values. By default a period '.'\n        // is used. If you change this value to for example a comma be sure to also\n        // change the thousands separator or else this won't work since a simple String\n        // replace is used (replacing all periods with the mark specified here).\n        $.jqplot.sprintf.decimalMark = '.';\n\n        $.jqplot.sprintf.regex = /%%|%(\\d+\\$)?([-+#0&\\' ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([nAscboxXuidfegpEGP])/g;\n\n        $.jqplot.getSignificantFigures = function (number) {\n            var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);\n            // total significant digits\n            var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : parts[0].length;\n            var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;\n            // exponent\n            var expn = parseInt(parts[1], 10);\n            // digits to the left of the decimal place\n            var dleft = (expn + 1 > 0) ? expn + 1 : 0;\n            // digits to the right of the decimal place\n            var dright = (sd <= dleft) ? 0 : sd - expn - 1;\n            return {significantDigits: sd, digitsLeft: dleft, digitsRight: dright, zeros: zeros, exponent: expn};\n        };\n\n        $.jqplot.getPrecision = function (number) {\n            return $.jqplot.getSignificantFigures(number).digitsRight;\n        };\n\n\n        var backCompat = $.uiBackCompat !== false;\n\n        $.jqplot.effects = {\n            effect: {}\n        };\n\n        // prefix used for storing data on .data()\n        var dataSpace = \"jqplot.storage.\";\n\n        /******************************************************************************/\n        /*********************************** EFFECTS **********************************/\n        /******************************************************************************/\n\n        $.extend($.jqplot.effects, {\n            version: \"1.9pre\",\n\n            // Saves a set of properties in a data storage\n            save: function (element, set) {\n                for (var i = 0; i < set.length; i++) {\n                    if (set[i] !== null) {\n                        element.data(dataSpace + set[i], element[0].style[set[i]]);\n                    }\n                }\n            },\n\n            // Restores a set of previously saved properties from a data storage\n            restore: function (element, set) {\n                for (var i = 0; i < set.length; i++) {\n                    if (set[i] !== null) {\n                        element.css(set[i], element.data(dataSpace + set[i]));\n                    }\n                }\n            },\n\n            setMode: function (el, mode) {\n                if (mode === \"toggle\") {\n                    mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n                }\n                return mode;\n            },\n\n            // Wraps the element around a wrapper that copies position properties\n            createWrapper: function (element) {\n\n                // if the element is already wrapped, return it\n                if (element.parent().is(\".ui-effects-wrapper\")) {\n                    return element.parent();\n                }\n\n                // wrap the element\n                var props = {\n                        width: element.outerWidth(true),\n                        height: element.outerHeight(true),\n                        \"float\": element.css(\"float\")\n                    },\n                    wrapper = $(\"<div></div>\")\n                        .addClass(\"ui-effects-wrapper\")\n                        .css({\n                            fontSize: \"100%\",\n                            background: \"transparent\",\n                            border: \"none\",\n                            margin: 0,\n                            padding: 0\n                        }),\n                // Store the size in case width/height are defined in % - Fixes #5245\n                    size = {\n                        width: element.width(),\n                        height: element.height()\n                    },\n                    active = document.activeElement;\n\n                element.wrap(wrapper);\n\n                // Fixes #7595 - Elements lose focus when wrapped.\n                if (element[0] === active || $.contains(element[0], active)) {\n                    $(active).focus();\n                }\n\n                wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually loose the reference to the wrapped element\n\n                // transfer positioning properties to the wrapper\n                if (element.css(\"position\") === \"static\") {\n                    wrapper.css({position: \"relative\"});\n                    element.css({position: \"relative\"});\n                } else {\n                    $.extend(props, {\n                        position: element.css(\"position\"),\n                        zIndex: element.css(\"z-index\")\n                    });\n                    $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n                        props[pos] = element.css(pos);\n                        if (isNaN(parseInt(props[pos], 10))) {\n                            props[pos] = \"auto\";\n                        }\n                    });\n                    element.css({\n                        position: \"relative\",\n                        top: 0,\n                        left: 0,\n                        right: \"auto\",\n                        bottom: \"auto\"\n                    });\n                }\n                element.css(size);\n\n                return wrapper.css(props).show();\n            },\n\n            removeWrapper: function (element) {\n                var active = document.activeElement;\n\n                if (element.parent().is(\".ui-effects-wrapper\")) {\n                    element.parent().replaceWith(element);\n\n                    // Fixes #7595 - Elements lose focus when wrapped.\n                    if (element[0] === active || $.contains(element[0], active)) {\n                        $(active).focus();\n                    }\n                }\n\n\n                return element;\n            }\n        });\n\n        // return an effect options object for the given parameters:\n        function _normalizeArguments(effect, options, speed, callback) {\n\n            // short path for passing an effect options object:\n            if ($.isPlainObject(effect)) {\n                return effect;\n            }\n\n            // convert to an object\n            effect = {effect: effect};\n\n            // catch (effect)\n            if (options === undefined) {\n                options = {};\n            }\n\n            // catch (effect, callback)\n            if ($.isFunction(options)) {\n                callback = options;\n                speed = null;\n                options = {};\n            }\n\n            // catch (effect, speed, ?)\n            if ($.type(options) === \"number\" || $.fx.speeds[options]) {\n                callback = speed;\n                speed = options;\n                options = {};\n            }\n\n            // catch (effect, options, callback)\n            if ($.isFunction(speed)) {\n                callback = speed;\n                speed = null;\n            }\n\n            // add options to effect\n            if (options) {\n                $.extend(effect, options);\n            }\n\n            speed = speed || options.duration;\n            effect.duration = $.fx.off ? 0 : typeof speed === \"number\"\n                ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n\n            effect.complete = callback || options.complete;\n\n            return effect;\n        }\n\n        function standardSpeed(speed) {\n            // valid standard speeds\n            if (!speed || typeof speed === \"number\" || $.fx.speeds[speed]) {\n                return true;\n            }\n\n            // invalid strings - treat as \"normal\" speed\n            if (typeof speed === \"string\" && !$.jqplot.effects.effect[speed]) {\n                // TODO: remove in 2.0 (#7115)\n                if (backCompat && $.jqplot.effects[speed]) {\n                    return false;\n                }\n                return true;\n            }\n\n            return false;\n        }\n\n        $.fn.extend({\n            jqplotEffect: function (effect, options, speed, callback) {\n                var args = _normalizeArguments.apply(this, arguments),\n                    mode = args.mode,\n                    queue = args.queue,\n                    effectMethod = $.jqplot.effects.effect[args.effect],\n\n                // DEPRECATED: remove in 2.0 (#7115)\n                    oldEffectMethod = !effectMethod && backCompat && $.jqplot.effects[args.effect];\n\n                if ($.fx.off || !( effectMethod || oldEffectMethod )) {\n                    // delegate to the original method (e.g., .show()) if possible\n                    if (mode) {\n                        return this[mode](args.duration, args.complete);\n                    } else {\n                        return this.each(function () {\n                            if (args.complete) {\n                                args.complete.call(this);\n                            }\n                        });\n                    }\n                }\n\n                function run(next) {\n                    var elem = $(this),\n                        complete = args.complete,\n                        mode = args.mode;\n\n                    function done() {\n                        if ($.isFunction(complete)) {\n                            complete.call(elem[0]);\n                        }\n                        if ($.isFunction(next)) {\n                            next();\n                        }\n                    }\n\n                    // if the element is hiddden and mode is hide,\n                    // or element is visible and mode is show\n                    if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n                        done();\n                    } else {\n                        effectMethod.call(elem[0], args, done);\n                    }\n                }\n\n                // TODO: remove this check in 2.0, effectMethod will always be true\n                if (effectMethod) {\n                    return queue === false ? this.each(run) : this.queue(queue || \"fx\", run);\n                } else {\n                    // DEPRECATED: remove in 2.0 (#7115)\n                    return oldEffectMethod.call(this, {\n                        options: args,\n                        duration: args.duration,\n                        callback: args.complete,\n                        mode: args.mode\n                    });\n                }\n            }\n        });\n\n\n        var rvertical = /up|down|vertical/,\n            rpositivemotion = /up|left|vertical|horizontal/;\n\n        $.jqplot.effects.effect.blind = function (o, done) {\n            // Create element\n            var el = $(this),\n                props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n                mode = $.jqplot.effects.setMode(el, o.mode || \"hide\"),\n                direction = o.direction || \"up\",\n                vertical = rvertical.test(direction),\n                ref = vertical ? \"height\" : \"width\",\n                ref2 = vertical ? \"top\" : \"left\",\n                motion = rpositivemotion.test(direction),\n                animation = {},\n                show = mode === \"show\",\n                wrapper, distance, top;\n\n            // // if already wrapped, the wrapper's properties are my property. #6245\n            if (el.parent().is(\".ui-effects-wrapper\")) {\n                $.jqplot.effects.save(el.parent(), props);\n            } else {\n                $.jqplot.effects.save(el, props);\n            }\n            el.show();\n            top = parseInt(el.css('top'), 10);\n            wrapper = $.jqplot.effects.createWrapper(el).css({\n                overflow: \"hidden\"\n            });\n\n            distance = vertical ? wrapper[ref]() + top : wrapper[ref]();\n\n            animation[ref] = show ? String(distance) : '0';\n            if (!motion) {\n                el\n                    .css(vertical ? \"bottom\" : \"right\", 0)\n                    .css(vertical ? \"top\" : \"left\", \"\")\n                    .css({position: \"absolute\"});\n                animation[ref2] = show ? '0' : String(distance);\n            }\n\n            // // start at 0 if we are showing\n            if (show) {\n                wrapper.css(ref, 0);\n                if (!motion) {\n                    wrapper.css(ref2, distance);\n                }\n            }\n\n            // // Animate\n            wrapper.animate(animation, {\n                duration: o.duration,\n                easing: o.easing,\n                queue: false,\n                complete: function () {\n                    if (mode === \"hide\") {\n                        el.hide();\n                    }\n                    $.jqplot.effects.restore(el, props);\n                    $.jqplot.effects.removeWrapper(el);\n                    done();\n                }\n            });\n\n        };\n\n    })(jQuery);\n\n});\n\n","Amasty_CustomerAttributes/js/jqplot.pieRenderer.js":"/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: 1.0.8\n * Revision: 1250\n *\n * Copyright (c) 2009-2013 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\ndefine([\n    \"jquery\",\n    'Amasty_CustomerAttributes/js/jquery.jqplot'\n], function ($, jqplot) {\n\n    (function ($) {\n        /**\n         * Class: $.jqplot.PieRenderer\n         * Plugin renderer to draw a pie chart.\n         * x values, if present, will be used as slice labels.\n         * y values give slice size.\n         *\n         * To use this renderer, you need to include the\n         * pie renderer plugin, for example:\n         *\n         * > <script type=\"text/javascript\" src=\"plugins/jqplot.pieRenderer.js\"></script>\n         *\n         * Properties described here are passed into the $.jqplot function\n         * as options on the series renderer.  For example:\n         *\n         * > plot2 = $.jqplot('chart2', [s1, s2], {\n     * >     seriesDefaults: {\n     * >         renderer:$.jqplot.PieRenderer,\n     * >         rendererOptions:{\n     * >              sliceMargin: 2,\n     * >              startAngle: -90\n     * >          }\n     * >      }\n     * > });\n         *\n         * A pie plot will trigger events on the plot target\n         * according to user interaction.  All events return the event object,\n         * the series index, the point (slice) index, and the point data for\n         * the appropriate slice.\n         *\n         * 'jqplotDataMouseOver' - triggered when user mouseing over a slice.\n         * 'jqplotDataHighlight' - triggered the first time user mouses over a slice,\n         * if highlighting is enabled.\n         * 'jqplotDataUnhighlight' - triggered when a user moves the mouse out of\n         * a highlighted slice.\n         * 'jqplotDataClick' - triggered when the user clicks on a slice.\n         * 'jqplotDataRightClick' - tiggered when the user right clicks on a slice if\n         * the \"captureRightClick\" option is set to true on the plot.\n         */\n        $.jqplot.PieRenderer = function () {\n            $.jqplot.LineRenderer.call(this);\n        };\n\n        $.jqplot.PieRenderer.prototype = new $.jqplot.LineRenderer();\n        $.jqplot.PieRenderer.prototype.constructor = $.jqplot.PieRenderer;\n\n        // called with scope of a series\n        $.jqplot.PieRenderer.prototype.init = function (options, plot) {\n            // Group: Properties\n            //\n            // prop: diameter\n            // Outer diameter of the pie, auto computed by default\n            this.diameter = null;\n            // prop: padding\n            // padding between the pie and plot edges, legend, etc.\n            this.padding = 20;\n            // prop: sliceMargin\n            // angular spacing between pie slices in degrees.\n            this.sliceMargin = 0;\n            // prop: fill\n            // true or false, whether to fil the slices.\n            this.fill = true;\n            // prop: shadowOffset\n            // offset of the shadow from the slice and offset of\n            // each succesive stroke of the shadow from the last.\n            this.shadowOffset = 2;\n            // prop: shadowAlpha\n            // transparency of the shadow (0 = transparent, 1 = opaque)\n            this.shadowAlpha = 0.07;\n            // prop: shadowDepth\n            // number of strokes to apply to the shadow,\n            // each stroke offset shadowOffset from the last.\n            this.shadowDepth = 5;\n            // prop: highlightMouseOver\n            // True to highlight slice when moused over.\n            // This must be false to enable highlightMouseDown to highlight when clicking on a slice.\n            this.highlightMouseOver = true;\n            // prop: highlightMouseDown\n            // True to highlight when a mouse button is pressed over a slice.\n            // This will be disabled if highlightMouseOver is true.\n            this.highlightMouseDown = false;\n            // prop: highlightColors\n            // an array of colors to use when highlighting a slice.\n            this.highlightColors = [];\n            // prop: dataLabels\n            // Either 'label', 'value', 'percent' or an array of labels to place on the pie slices.\n            // Defaults to percentage of each pie slice.\n            this.dataLabels = 'percent';\n            // prop: showDataLabels\n            // true to show data labels on slices.\n            this.showDataLabels = false;\n            // prop: dataLabelFormatString\n            // Format string for data labels.  If none, '%s' is used for \"label\" and for arrays, '%d' for value and '%d%%' for percentage.\n            this.dataLabelFormatString = null;\n            // prop: dataLabelThreshold\n            // Threshhold in percentage (0-100) of pie area, below which no label will be displayed.\n            // This applies to all label types, not just to percentage labels.\n            this.dataLabelThreshold = 3;\n            // prop: dataLabelPositionFactor\n            // A Multiplier (0-1) of the pie radius which controls position of label on slice.\n            // Increasing will slide label toward edge of pie, decreasing will slide label toward center of pie.\n            this.dataLabelPositionFactor = 0.52;\n            // prop: dataLabelNudge\n            // Number of pixels to slide the label away from (+) or toward (-) the center of the pie.\n            this.dataLabelNudge = 2;\n            // prop: dataLabelCenterOn\n            // True to center the data label at its position.\n            // False to set the inside facing edge of the label at its position.\n            this.dataLabelCenterOn = true;\n            // prop: startAngle\n            // Angle to start drawing pie in degrees.\n            // According to orientation of canvas coordinate system:\n            // 0 = on the positive x axis\n            // -90 = on the positive y axis.\n            // 90 = on the negaive y axis.\n            // 180 or - 180 = on the negative x axis.\n            this.startAngle = 0;\n            this.tickRenderer = $.jqplot.PieTickRenderer;\n            // Used as check for conditions where pie shouldn't be drawn.\n            this._drawData = true;\n            this._type = 'pie';\n\n            // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver\n            if (options.highlightMouseDown && options.highlightMouseOver == null) {\n                options.highlightMouseOver = false;\n            }\n\n            $.extend(true, this, options);\n\n            if (this.sliceMargin < 0) {\n                this.sliceMargin = 0;\n            }\n\n            this._diameter = null;\n            this._radius = null;\n            // array of [start,end] angles arrays, one for each slice.  In radians.\n            this._sliceAngles = [];\n            // index of the currenty highlighted point, if any\n            this._highlightedPoint = null;\n\n            // set highlight colors if none provided\n            if (this.highlightColors.length == 0) {\n                for (var i = 0; i < this.seriesColors.length; i++) {\n                    var rgba = $.jqplot.getColorComponents(this.seriesColors[i]);\n                    var newrgb = [rgba[0], rgba[1], rgba[2]];\n                    var sum = newrgb[0] + newrgb[1] + newrgb[2];\n                    for (var j = 0; j < 3; j++) {\n                        // when darkening, lowest color component can be is 60.\n                        newrgb[j] = (sum > 570) ? newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);\n                        newrgb[j] = parseInt(newrgb[j], 10);\n                    }\n                    this.highlightColors.push('rgb(' + newrgb[0] + ',' + newrgb[1] + ',' + newrgb[2] + ')');\n                }\n            }\n\n            this.highlightColorGenerator = new $.jqplot.ColorGenerator(this.highlightColors);\n\n            plot.postParseOptionsHooks.addOnce(postParseOptions);\n            plot.postInitHooks.addOnce(postInit);\n            plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);\n            plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);\n            plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);\n            plot.eventListenerHooks.addOnce('jqplotClick', handleClick);\n            plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);\n            plot.postDrawHooks.addOnce(postPlotDraw);\n        };\n\n        $.jqplot.PieRenderer.prototype.setGridData = function (plot) {\n            // set gridData property.  This will hold angle in radians of each data point.\n            var stack = [];\n            var td = [];\n            var sa = this.startAngle / 180 * Math.PI;\n            var tot = 0;\n            // don't know if we have any valid data yet, so set plot to not draw.\n            this._drawData = false;\n            for (var i = 0; i < this.data.length; i++) {\n                if (this.data[i][1] != 0) {\n                    // we have data, O.K. to draw.\n                    this._drawData = true;\n                }\n                stack.push(this.data[i][1]);\n                td.push([this.data[i][0]]);\n                if (i > 0) {\n                    stack[i] += stack[i - 1];\n                }\n                tot += this.data[i][1];\n            }\n            var fact = Math.PI * 2 / stack[stack.length - 1];\n\n            for (var i = 0; i < stack.length; i++) {\n                td[i][1] = stack[i] * fact;\n                td[i][2] = this.data[i][1] / tot;\n            }\n            this.gridData = td;\n        };\n\n        $.jqplot.PieRenderer.prototype.makeGridData = function (data, plot) {\n            var stack = [];\n            var td = [];\n            var tot = 0;\n            var sa = this.startAngle / 180 * Math.PI;\n            // don't know if we have any valid data yet, so set plot to not draw.\n            this._drawData = false;\n            for (var i = 0; i < data.length; i++) {\n                if (this.data[i][1] != 0) {\n                    // we have data, O.K. to draw.\n                    this._drawData = true;\n                }\n                stack.push(data[i][1]);\n                td.push([data[i][0]]);\n                if (i > 0) {\n                    stack[i] += stack[i - 1];\n                }\n                tot += data[i][1];\n            }\n            var fact = Math.PI * 2 / stack[stack.length - 1];\n\n            for (var i = 0; i < stack.length; i++) {\n                td[i][1] = stack[i] * fact;\n                td[i][2] = data[i][1] / tot;\n            }\n            return td;\n        };\n\n        function calcRadiusAdjustment(ang) {\n            return Math.sin((ang - (ang - Math.PI) / 8 / Math.PI ) / 2.0);\n        }\n\n        function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth) {\n            var rprime = 0;\n            var ang = ang2 - ang1;\n            var absang = Math.abs(ang);\n            var sm = sliceMargin;\n            if (fill == false) {\n                sm += lineWidth;\n            }\n\n            if (sm > 0 && absang > 0.01 && absang < 6.282) {\n                rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(ang);\n            }\n\n            return rprime;\n        }\n\n        $.jqplot.PieRenderer.prototype.drawSlice = function (ctx, ang1, ang2, color, isShadow) {\n            if (this._drawData) {\n                var r = this._radius;\n                var fill = this.fill;\n                var lineWidth = this.lineWidth;\n                var sm = this.sliceMargin;\n                if (this.fill == false) {\n                    sm += this.lineWidth;\n                }\n                ctx.save();\n                ctx.translate(this._center[0], this._center[1]);\n\n                var rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);\n\n                var transx = rprime * Math.cos((ang1 + ang2) / 2.0);\n                var transy = rprime * Math.sin((ang1 + ang2) / 2.0);\n\n                if ((ang2 - ang1) <= Math.PI) {\n                    r -= rprime;\n                }\n                else {\n                    r += rprime;\n                }\n\n                ctx.translate(transx, transy);\n\n                if (isShadow) {\n                    for (var i = 0, l = this.shadowDepth; i < l; i++) {\n                        ctx.save();\n                        ctx.translate(this.shadowOffset * Math.cos(this.shadowAngle / 180 * Math.PI), this.shadowOffset * Math.sin(this.shadowAngle / 180 * Math.PI));\n                        doDraw(r);\n                    }\n                    for (var i = 0, l = this.shadowDepth; i < l; i++) {\n                        ctx.restore();\n                    }\n                }\n\n                else {\n                    doDraw(r);\n                }\n                ctx.restore();\n            }\n\n            function doDraw(rad) {\n                // Fix for IE and Chrome that can't seem to draw circles correctly.\n                // ang2 should always be <= 2 pi since that is the way the data is converted.\n                // 2Pi = 6.2831853, Pi = 3.1415927\n                if (ang2 > 6.282 + this.startAngle) {\n                    ang2 = 6.282 + this.startAngle;\n                    if (ang1 > ang2) {\n                        ang1 = 6.281 + this.startAngle;\n                    }\n                }\n                // Fix for IE, where it can't seem to handle 0 degree angles.  Also avoids\n                // ugly line on unfilled pies.\n                if (ang1 >= ang2) {\n                    return;\n                }\n\n                ctx.beginPath();\n                ctx.fillStyle = color;\n                ctx.strokeStyle = color;\n                ctx.lineWidth = lineWidth;\n                ctx.arc(0, 0, rad, ang1, ang2, false);\n                ctx.lineTo(0, 0);\n                ctx.closePath();\n\n                if (fill) {\n                    ctx.fill();\n                }\n                else {\n                    ctx.stroke();\n                }\n            }\n        };\n\n        // called with scope of series\n        $.jqplot.PieRenderer.prototype.draw = function (ctx, gd, options, plot) {\n            var i;\n            var opts = (options != undefined) ? options : {};\n            // offset and direction of offset due to legend placement\n            var offx = 0;\n            var offy = 0;\n            var trans = 1;\n            var colorGenerator = new $.jqplot.ColorGenerator(this.seriesColors);\n            if (options.legendInfo && options.legendInfo.placement == 'insideGrid') {\n                var li = options.legendInfo;\n                switch (li.location) {\n                    case 'nw':\n                        offx = li.width + li.xoffset;\n                        break;\n                    case 'w':\n                        offx = li.width + li.xoffset;\n                        break;\n                    case 'sw':\n                        offx = li.width + li.xoffset;\n                        break;\n                    case 'ne':\n                        offx = li.width + li.xoffset;\n                        trans = -1;\n                        break;\n                    case 'e':\n                        offx = li.width + li.xoffset;\n                        trans = -1;\n                        break;\n                    case 'se':\n                        offx = li.width + li.xoffset;\n                        trans = -1;\n                        break;\n                    case 'n':\n                        offy = li.height + li.yoffset;\n                        break;\n                    case 's':\n                        offy = li.height + li.yoffset;\n                        trans = -1;\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;\n            var fill = (opts.fill != undefined) ? opts.fill : this.fill;\n            var cw = ctx.canvas.width;\n            var ch = ctx.canvas.height;\n            var w = cw - offx - 2 * this.padding;\n            var h = ch - offy - 2 * this.padding;\n            var mindim = Math.min(w, h);\n            var d = mindim;\n\n            // Fixes issue #272.  Thanks hugwijst!\n            // reset slice angles array.\n            this._sliceAngles = [];\n\n            var sm = this.sliceMargin;\n            if (this.fill == false) {\n                sm += this.lineWidth;\n            }\n\n            var rprime;\n            var maxrprime = 0;\n\n            var ang, ang1, ang2, shadowColor;\n            var sa = this.startAngle / 180 * Math.PI;\n\n            // have to pre-draw shadows, so loop throgh here and calculate some values also.\n            for (var i = 0, l = gd.length; i < l; i++) {\n                ang1 = (i == 0) ? sa : gd[i - 1][1] + sa;\n                ang2 = gd[i][1] + sa;\n\n                this._sliceAngles.push([ang1, ang2]);\n\n                rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);\n\n                if (Math.abs(ang2 - ang1) > Math.PI) {\n                    maxrprime = Math.max(rprime, maxrprime);\n                }\n            }\n\n            if (this.diameter != null && this.diameter > 0) {\n                this._diameter = this.diameter - 2 * maxrprime;\n            }\n            else {\n                this._diameter = d - 2 * maxrprime;\n            }\n\n            // Need to check for undersized pie.  This can happen if\n            // plot area too small and legend is too big.\n            if (this._diameter < 6) {\n                $.jqplot.log('Diameter of pie too small, not rendering.');\n                return;\n            }\n\n            var r = this._radius = this._diameter / 2;\n\n            this._center = [(cw - trans * offx) / 2 + trans * offx + maxrprime * Math.cos(sa), (ch - trans * offy) / 2 + trans * offy + maxrprime * Math.sin(sa)];\n\n            if (this.shadow) {\n                for (var i = 0, l = gd.length; i < l; i++) {\n                    shadowColor = 'rgba(0,0,0,' + this.shadowAlpha + ')';\n                    this.renderer.drawSlice.call (this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], shadowColor, true);\n                }\n            }\n\n            for (var i = 0; i < gd.length; i++) {\n\n                this.renderer.drawSlice.call (this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], colorGenerator.next(), false);\n\n                if (this.showDataLabels && gd[i][2] * 100 >= this.dataLabelThreshold) {\n                    var fstr, avgang = (this._sliceAngles[i][0] + this._sliceAngles[i][1]) / 2, label;\n\n                    if (this.dataLabels == 'label') {\n                        fstr = this.dataLabelFormatString || '%s';\n                        label = $.jqplot.sprintf(fstr, gd[i][0]);\n                    }\n                    else if (this.dataLabels == 'value') {\n                        fstr = this.dataLabelFormatString || '%d';\n                        label = $.jqplot.sprintf(fstr, this.data[i][1]);\n                    }\n                    else if (this.dataLabels == 'percent') {\n                        fstr = this.dataLabelFormatString || '%d%%';\n                        label = $.jqplot.sprintf(fstr, gd[i][2] * 100);\n                    }\n                    else if (this.dataLabels.constructor == Array) {\n                        fstr = this.dataLabelFormatString || '%s';\n                        label = $.jqplot.sprintf(fstr, this.dataLabels[i]);\n                    }\n                    else if (this.dataLabels == 'both') {\n                        fstr = this.dataLabelFormatString || '%d (%0.1f%%)';\n                        label = $.jqplot.sprintf(fstr, this.data[i][1], gd[i][2] * 100);\n                    }\n                    else if (this.dataLabels == 'decimal') {\n                        fstr = this.dataLabelFormatString || '%0.1f%%';\n                        label = $.jqplot.sprintf(fstr, gd[i][2] * 100);\n                    }\n\n                    var fact = (this._radius ) * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge;\n\n                    var x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left;\n                    var y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;\n\n                    var labelelem = $('<div class=\"jqplot-pie-series jqplot-data-label\" style=\"position:absolute;\">' + label + '</div>').insertBefore(plot.eventCanvas._elem);\n                    if (this.dataLabelCenterOn) {\n                        x -= labelelem.width() / 2;\n                        y -= labelelem.height() / 2;\n                    }\n                    else {\n                        x -= labelelem.width() * Math.sin(avgang / 2);\n                        y -= labelelem.height() / 2;\n                    }\n                    x = Math.round(x);\n                    y = Math.round(y);\n                    labelelem.css({left: x, top: y});\n                }\n            }\n        };\n\n        $.jqplot.PieAxisRenderer = function () {\n            $.jqplot.LinearAxisRenderer.call(this);\n        };\n\n        $.jqplot.PieAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();\n        $.jqplot.PieAxisRenderer.prototype.constructor = $.jqplot.PieAxisRenderer;\n\n\n        // There are no traditional axes on a pie chart.  We just need to provide\n        // dummy objects with properties so the plot will render.\n        // called with scope of axis object.\n        $.jqplot.PieAxisRenderer.prototype.init = function (options) {\n            //\n            this.tickRenderer = $.jqplot.PieTickRenderer;\n            $.extend(true, this, options);\n            // I don't think I'm going to need _dataBounds here.\n            // have to go Axis scaling in a way to fit chart onto plot area\n            // and provide u2p and p2u functionality for mouse cursor, etc.\n            // for convienence set _dataBounds to 0 and 100 and\n            // set min/max to 0 and 100.\n            this._dataBounds = {min: 0, max: 100};\n            this.min = 0;\n            this.max = 100;\n            this.showTicks = false;\n            this.ticks = [];\n            this.showMark = false;\n            this.show = false;\n        };\n\n\n        $.jqplot.PieLegendRenderer = function () {\n            $.jqplot.TableLegendRenderer.call(this);\n        };\n\n        $.jqplot.PieLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();\n        $.jqplot.PieLegendRenderer.prototype.constructor = $.jqplot.PieLegendRenderer;\n\n        /**\n         * Class: $.jqplot.PieLegendRenderer\n         * Legend Renderer specific to pie plots.  Set by default\n         * when user creates a pie plot.\n         */\n        $.jqplot.PieLegendRenderer.prototype.init = function (options) {\n            // Group: Properties\n            //\n            // prop: numberRows\n            // Maximum number of rows in the legend.  0 or null for unlimited.\n            this.numberRows = null;\n            // prop: numberColumns\n            // Maximum number of columns in the legend.  0 or null for unlimited.\n            this.numberColumns = null;\n            $.extend(true, this, options);\n        };\n\n        // called with context of legend\n        $.jqplot.PieLegendRenderer.prototype.draw = function () {\n            var legend = this;\n            if (this.show) {\n                var series = this._series;\n\n\n                this._elem = $(document.createElement('table'));\n                this._elem.addClass('jqplot-table-legend');\n\n                var ss = {position: 'absolute'};\n                if (this.background) {\n                    ss['background'] = this.background;\n                }\n                if (this.border) {\n                    ss['border'] = this.border;\n                }\n                if (this.fontSize) {\n                    ss['fontSize'] = this.fontSize;\n                }\n                if (this.fontFamily) {\n                    ss['fontFamily'] = this.fontFamily;\n                }\n                if (this.textColor) {\n                    ss['textColor'] = this.textColor;\n                }\n                if (this.marginTop != null) {\n                    ss['marginTop'] = this.marginTop;\n                }\n                if (this.marginBottom != null) {\n                    ss['marginBottom'] = this.marginBottom;\n                }\n                if (this.marginLeft != null) {\n                    ss['marginLeft'] = this.marginLeft;\n                }\n                if (this.marginRight != null) {\n                    ss['marginRight'] = this.marginRight;\n                }\n\n                this._elem.css(ss);\n\n                // Pie charts legends don't go by number of series, but by number of data points\n                // in the series.  Refactor things here for that.\n\n                var pad = false,\n                    reverse = false,\n                    nr,\n                    nc;\n                var s = series[0];\n                var colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);\n\n                if (s.show) {\n                    var pd = s.data;\n                    if (this.numberRows) {\n                        nr = this.numberRows;\n                        if (!this.numberColumns) {\n                            nc = Math.ceil(pd.length / nr);\n                        }\n                        else {\n                            nc = this.numberColumns;\n                        }\n                    }\n                    else if (this.numberColumns) {\n                        nc = this.numberColumns;\n                        nr = Math.ceil(pd.length / this.numberColumns);\n                    }\n                    else {\n                        nr = pd.length;\n                        nc = 1;\n                    }\n\n                    var i, j;\n                    var tr, td1, td2;\n                    var lt, rs, color;\n                    var idx = 0;\n                    var div0, div1;\n\n                    for (i = 0; i < nr; i++) {\n                        tr = $(document.createElement('tr'));\n                        tr.addClass('jqplot-table-legend');\n\n                        if (reverse) {\n                            tr.prependTo(this._elem);\n                        }\n\n                        else {\n                            tr.appendTo(this._elem);\n                        }\n\n                        for (j = 0; j < nc; j++) {\n                            if (idx < pd.length) {\n                                lt = this.labels[idx] || pd[idx][0].toString();\n                                color = colorGenerator.next();\n                                if (!reverse) {\n                                    if (i > 0) {\n                                        pad = true;\n                                    }\n                                    else {\n                                        pad = false;\n                                    }\n                                }\n                                else {\n                                    if (i == nr - 1) {\n                                        pad = false;\n                                    }\n                                    else {\n                                        pad = true;\n                                    }\n                                }\n                                rs = (pad) ? this.rowSpacing : '0';\n\n\n                                td1 = $(document.createElement('td'));\n                                td1.addClass('jqplot-table-legend jqplot-table-legend-swatch');\n                                td1.css({textAlign: 'center', paddingTop: rs});\n\n                                div0 = $(document.createElement('div'));\n                                div0.addClass('jqplot-table-legend-swatch-outline');\n                                div1 = $(document.createElement('div'));\n                                div1.addClass('jqplot-table-legend-swatch');\n                                div1.css({backgroundColor: color, borderColor: color});\n                                td1.append(div0.append(div1));\n\n                                td2 = $(document.createElement('td'));\n                                td2.addClass('jqplot-table-legend jqplot-table-legend-label');\n                                td2.css('paddingTop', rs);\n\n                                if (this.escapeHtml) {\n                                    td2.text(lt);\n                                }\n                                else {\n                                    td2.html(lt);\n                                }\n                                if (reverse) {\n                                    td2.prependTo(tr);\n                                    td1.prependTo(tr);\n                                }\n                                else {\n                                    td1.appendTo(tr);\n                                    td2.appendTo(tr);\n                                }\n                                pad = true;\n                            }\n                            idx++;\n                        }\n                    }\n                }\n            }\n            return this._elem;\n        };\n\n        $.jqplot.PieRenderer.prototype.handleMove = function (ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                plot.target.trigger('jqplotDataMouseOver', ins);\n                if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {\n                    plot.target.trigger('jqplotDataHighlight', ins);\n                    highlight(plot, ins[0], ins[1]);\n                }\n            }\n            else if (neighbor == null) {\n                unhighlight(plot);\n            }\n        };\n\n\n        // this.eventCanvas._elem.bind($.jqplot.eventListenerHooks[i][0], {plot:this}, $.jqplot.eventListenerHooks[i][1]);\n\n        // setup default renderers for axes and legend so user doesn't have to\n        // called with scope of plot\n        function preInit(target, data, options) {\n            options = options || {};\n            options.axesDefaults = options.axesDefaults || {};\n            options.legend = options.legend || {};\n            options.seriesDefaults = options.seriesDefaults || {};\n            // only set these if there is a pie series\n            var setopts = false;\n            if (options.seriesDefaults.renderer == $.jqplot.PieRenderer) {\n                setopts = true;\n            }\n            else if (options.series) {\n                for (var i = 0; i < options.series.length; i++) {\n                    if (options.series[i].renderer == $.jqplot.PieRenderer) {\n                        setopts = true;\n                    }\n                }\n            }\n\n            if (setopts) {\n                options.axesDefaults.renderer = $.jqplot.PieAxisRenderer;\n                options.legend.renderer = $.jqplot.PieLegendRenderer;\n                options.legend.preDraw = true;\n                options.seriesDefaults.pointLabels = {show: false};\n            }\n        }\n\n        function postInit(target, data, options) {\n            for (var i = 0; i < this.series.length; i++) {\n                if (this.series[i].renderer.constructor == $.jqplot.PieRenderer) {\n                    // don't allow mouseover and mousedown at same time.\n                    if (this.series[i].highlightMouseOver) {\n                        this.series[i].highlightMouseDown = false;\n                    }\n                }\n            }\n        }\n\n        // called with scope of plot\n        function postParseOptions(options) {\n            for (var i = 0; i < this.series.length; i++) {\n                this.series[i].seriesColors = this.seriesColors;\n                this.series[i].colorGenerator = $.jqplot.colorGenerator;\n            }\n        }\n\n        function highlight(plot, sidx, pidx) {\n            var s = plot.series[sidx];\n            var canvas = plot.plugins.pieRenderer.highlightCanvas;\n            canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n            s._highlightedPoint = pidx;\n            plot.plugins.pieRenderer.highlightedSeriesIndex = sidx;\n            s.renderer.drawSlice.call(s, canvas._ctx, s._sliceAngles[pidx][0], s._sliceAngles[pidx][1], s.highlightColorGenerator.get(pidx), false);\n        }\n\n        function unhighlight(plot) {\n            var canvas = plot.plugins.pieRenderer.highlightCanvas;\n            canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n            for (var i = 0; i < plot.series.length; i++) {\n                plot.series[i]._highlightedPoint = null;\n            }\n            plot.plugins.pieRenderer.highlightedSeriesIndex = null;\n            plot.target.trigger('jqplotDataUnhighlight');\n        }\n\n        function handleMove(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var evt1 = jQuery.Event('jqplotDataMouseOver');\n                evt1.pageX = ev.pageX;\n                evt1.pageY = ev.pageY;\n                plot.target.trigger(evt1, ins);\n                if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {\n                    var evt = jQuery.Event('jqplotDataHighlight');\n                    evt.which = ev.which;\n                    evt.pageX = ev.pageX;\n                    evt.pageY = ev.pageY;\n                    plot.target.trigger(evt, ins);\n                    highlight(plot, ins[0], ins[1]);\n                }\n            }\n            else if (neighbor == null) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {\n                    var evt = jQuery.Event('jqplotDataHighlight');\n                    evt.which = ev.which;\n                    evt.pageX = ev.pageX;\n                    evt.pageY = ev.pageY;\n                    plot.target.trigger(evt, ins);\n                    highlight(plot, ins[0], ins[1]);\n                }\n            }\n            else if (neighbor == null) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {\n            var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;\n            if (idx != null && plot.series[idx].highlightMouseDown) {\n                unhighlight(plot);\n            }\n        }\n\n        function handleClick(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var evt = jQuery.Event('jqplotDataClick');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n            }\n        }\n\n        function handleRightClick(ev, gridpos, datapos, neighbor, plot) {\n            if (neighbor) {\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n                var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;\n                if (idx != null && plot.series[idx].highlightMouseDown) {\n                    unhighlight(plot);\n                }\n                var evt = jQuery.Event('jqplotDataRightClick');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n            }\n        }\n\n        // called within context of plot\n        // create a canvas which we can draw on.\n        // insert it before the eventCanvas, so eventCanvas will still capture events.\n        function postPlotDraw() {\n            // Memory Leaks patch\n            if (this.plugins.pieRenderer && this.plugins.pieRenderer.highlightCanvas) {\n                this.plugins.pieRenderer.highlightCanvas.resetCanvas();\n                this.plugins.pieRenderer.highlightCanvas = null;\n            }\n\n            this.plugins.pieRenderer = {highlightedSeriesIndex: null};\n            this.plugins.pieRenderer.highlightCanvas = new $.jqplot.GenericCanvas();\n\n            // do we have any data labels?  if so, put highlight canvas before those\n            var labels = $(this.targetId + ' .jqplot-data-label');\n            if (labels.length) {\n                $(labels[0]).before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));\n            }\n            // else put highlight canvas before event canvas.\n            else {\n                this.eventCanvas._elem.before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));\n            }\n\n            var hctx = this.plugins.pieRenderer.highlightCanvas.setContext();\n            this.eventCanvas._elem.bind('mouseleave', {plot: this}, function (ev) {\n                unhighlight(ev.data.plot);\n            });\n        }\n\n        $.jqplot.preInitHooks.push(preInit);\n\n        $.jqplot.PieTickRenderer = function () {\n            $.jqplot.AxisTickRenderer.call(this);\n        };\n\n        $.jqplot.PieTickRenderer.prototype = new $.jqplot.AxisTickRenderer();\n        $.jqplot.PieTickRenderer.prototype.constructor = $.jqplot.PieTickRenderer;\n\n    })(jQuery);\n\n});\n\n    \n","Amasty_CustomerAttributes/js/filesupload.js":"define([\n    \"jquery\"\n], function($) {\n    function main(data) {\n        $(document).on('change', 'input:file', function (event) {\n            var formData = new FormData(),\n                requestUrl = data.baseUrl;\n            formData.append(event.target.name, event.target.files[0]);\n            formData.append('name', event.target.name);\n            formData.append('form_key', data.form_key);\n            $.ajax({\n                showLoader: true,\n                url: requestUrl,\n                processData: false,\n                contentType: false,\n                data: formData,\n                dataType: 'text',\n                method: \"POST\"\n            })  .success(function (result) {\n                var data = JSON.parse(result),\n                    field = $(\"[name='am_file[\" + data.name + \"]']\");\n\n                if (field.length === 0) {\n                    $('<input>').attr({\n                        type: 'hidden',\n                        name: 'am_file[' + data.name + ']'\n                    }).val(data.path).appendTo('form');\n                }\n                delete(formData);\n            });\n        });\n    }\n\n    return main;\n});","Amasty_CustomerAttributes/js/form/relationAbstract.js":"define([\n    'ko',\n    'underscore',\n    'uiRegistry',\n    'Amasty_CustomerAttributes/js/form/relationRegistry'\n], function (ko, _, registry, relationRegistry) {\n    'use strict';\n\n    /**\n     * @abstract\n     */\n    return {\n        hidedByDepend: false,\n        hidedByRate: false,\n        /**\n         * @param {Object[]} relations\n         * @param {string} relations[].attribute_name - element name of parent attribute\n         * @param {string} relations[].dependent_name - element name of depend attribute\n         * @param {string} relations[].option_value   - value which Parent should have to show Depend\n         */\n        relations: [],\n\n        /**\n         * check attribute dependencies on value change\n         */\n        onUpdate: function () {\n            this._super();\n            // relationRegistry.clear();\n            this.checkDependencies();\n        },\n        /**\n         * run check dependency and clear relations\n         */\n        initCheck: function () {\n            if (this.relations && this.relations.length) {\n                relationRegistry.clear();\n                this.checkDependencies();\n            }\n        },\n        checkDependencies: function () {\n            if (this.relations && this.relations.length) {\n                var fieldset = registry.get(this.parentName);\n                var localRegitry = registry;\n                var localRelationRegistry = relationRegistry;\n                this.relations.map(function (relation) {\n                    var dependElement = fieldset.getChild(relation.dependent_name);\n                    if (!dependElement) {\n                        // get element by full name if in fieldset element is not ready\n                        var elementFullNme = fieldset.name + '.' + relation.dependent_name;\n                        dependElement = localRegitry.get(elementFullNme);\n                    }\n                    if (dependElement) {\n                        dependElement.hidedByDepend = false;\n                        if (!localRelationRegistry.isExist(relation.dependent_name, this.value())) {\n                            if (this.isCanShow(relation, this)) {\n                                this.showDepend(dependElement, relation);\n                            } else {\n                                /** hide element only if no relation rules to show. On one check */\n                                this.hideDepend(dependElement);\n                            }\n                        } else if (this.hidedByDepend === false) {\n                            this.showDepend(dependElement, relation);\n                        } else {\n                            this.hideDepend(dependElement);\n                        }\n                    }\n                }.bind(this));\n            }\n        },\n        /**\n         * Is element value eq relation value\n         *\n         * @param relationToShow\n         * @param field\n         * @returns {boolean}\n         */\n        isCanShow: function (relationToShow, field) {\n            var result = true;\n\n            if (result && field.relations != void (0) && field.relations.length) {\n                field.relations.map(function (relation) {\n                    // search for all parent attributes of current relation\n                    if (relation.dependent_name == relationToShow.dependent_name) {\n                        result = !!(field.elementCheck(relation));\n                    }\n                });\n            }\n\n            return result;\n        },\n        elementCheck: function (relation) {\n            return (this.value() == relation.option_value && this.visible());\n        },\n        showDepend: function (dependElement, relation) {\n            if (dependElement.hidedByDepend && dependElement.hidedByDepend != this.index) {\n                return;\n            }\n            dependElement.hidedByDepend = false;\n            if (dependElement.hidedByRate) {\n                return false;\n            }\n            dependElement.show();\n            relationRegistry.add(relation.dependent_name, relation.option_value);\n            if (_.isFunction(dependElement.checkDependencies)) {\n                dependElement.checkDependencies();\n            }\n        },\n        hideDepend: function (dependElement) {\n            dependElement.hidedByDepend = this.index;\n            dependElement.hide();\n            if (_.isFunction(dependElement.checkDependencies)) {\n                dependElement.checkDependencies();\n            }\n        }\n    };\n});\n","Amasty_CustomerAttributes/js/form/relationRegistry.js":"define([\n    'ko'\n], function (ko) {\n    'use strict';\n\n    /**\n     * @abstract\n     */\n    return {\n        dependsToShow: [],\n        clear: function () {\n            this.dependsToShow = [];\n        },\n        add: function (relationName, optionValue) {\n            var result = false;\n            jQuery.each(this.dependsToShow, function(index, value) {\n                if (value[0] === relationName && value[1] === optionValue) {\n                    result = true;\n                }\n            });\n\n            if (result === false) {\n                this.dependsToShow.push([relationName, optionValue]);\n            }\n        },\n        get: function () {\n            return this.dependsToShow;\n        },\n        isExist: function (relationName, optionValue) {\n            var result = false;\n            jQuery.each(this.dependsToShow, function(index, value) {\n                if (value[0] === relationName && value[1] === optionValue) {\n                    result = true;\n                    return false;\n                }\n            });\n\n            return result;\n        }\n    };\n});","Amasty_CustomerAttributes/js/form/element/checkboxes.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'ko',\n    'underscore',\n    'uiRegistry',\n    'mageUtils',\n    'Magento_Ui/js/form/element/abstract',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (ko, _, registry, utils, Abstract, relationAbstract) {\n    'use strict';\n\n    return Abstract.extend(relationAbstract).extend({\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            var defaultValue = this.value;\n            this._super();\n            var value = this.value;\n            this.value = ko.observableArray([]).extend(value);\n            this.value(this.normalizeData(defaultValue));\n            return this;\n        },\n\n        /**\n         * Splits incoming string value.\n         *\n         * @returns {Array}\n         */\n        normalizeData: function (value) {\n            if (utils.isEmpty(value)) {\n                value = [];\n            }\n\n            return _.isString(value) ? value.split(',') : value;\n        },\n\n        /**\n         * Defines if value has changed\n         *\n         * @returns {Boolean}\n         */\n        hasChanged       : function () {\n            var value = this.value(),\n                initial = this.initialValue;\n\n            return !utils.equalArrays(value, initial);\n        },\n        elementCheck: function(relation) {\n            return (this.value().indexOf(relation.option_value) >= 0 && this.visible());\n        }\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/date.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'ko',\n    'underscore',\n    'mageUtils',\n    'Magento_Ui/js/form/element/date',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (ko, _, utils, Date, relationAbstract) {\n    'use strict';\n\n    return Date.extend(relationAbstract).extend({\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n            return this;\n        }\n\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/multiselect.js":"\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/multiselect',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (_, registry, Multiselect, relationAbstract) {\n    'use strict';\n\n    return Multiselect.extend(relationAbstract).extend({\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/textarea.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'ko',\n    'underscore',\n    'mageUtils',\n    'Magento_Ui/js/form/element/textarea',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (ko, _, utils, TextArea, relationAbstract) {\n    'use strict';\n\n    return TextArea.extend(relationAbstract).extend({\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n            return this;\n        }\n\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/file.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/media'\n], function (_, registry, Media) {\n    'use strict';\n\n    return Media.extend({\n        defaults: {\n            elementTmpl: 'Amasty_CustomerAttributes/form/element/media',\n            links: {\n                value: '${ $.provider }:${ $.dataScope }'\n            }\n        },\n\n        initialize: function () {\n            this._super();\n            if (this.value()) {\n                this.value(this.path + this.value());\n            }\n\n            return this;\n        }\n\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/select.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/select',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (_, registry, Select, relationAbstract) {\n    'use strict';\n\n    return Select.extend(relationAbstract).extend({\n    });\n});\n","Amasty_CustomerAttributes/js/form/element/abstract.js":"/**\n * @author Amasty Team\n * @copyright Copyright (c) 2016 Amasty (http://www.amasty.com)\n * @package Amasty_CustomerAttributes\n */\n\ndefine([\n    'ko',\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/abstract',\n    'Amasty_CustomerAttributes/js/form/relationAbstract'\n], function (ko, _, registry, Abstract, relationAbstract) {\n    'use strict';\n\n    return Abstract.extend(relationAbstract).extend({\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n            return this;\n        }\n    });\n});\n","Amasty_CustomerAttributes/js/relation/edit/parent_attribute.js":"define([\n    'underscore',\n    'uiRegistry',\n    'mage/storage',\n    'Magento_Ui/js/lib/spinner',\n    'Magento_Ui/js/form/element/select'\n], function (_, registry, storage, loader, AbstractSelect) {\n    'use strict';\n    // make Ajax for new Attribute options\n    function reloadOptions (url) {\n        loader.show();\n        storage.get(url).done(setOptions);\n    }\n    // set New Attribute Options\n    function setOptions(response) {\n        if (response.error) {\n            alert(response.error);\n        } else if(response.attribute_options != void(0) && response.dependent_attributes != void(0)) {\n            registry.get('amcustomerattr_relation_form.amcustomerattr_relation_form.general.attribute_options', function (input) {\n                input.setOptions(response.attribute_options);\n                input.clear();\n            });\n            registry.get('amcustomerattr_relation_form.amcustomerattr_relation_form.general.dependent_attributes', function (input) {\n                input.setOptions(response.dependent_attributes);\n                input.clear();\n            });\n        }\n        loader.hide();\n    }\n\n    return AbstractSelect.extend({\n        onUpdate: function (data) {\n            this._super();\n\n            reloadOptions(this.update_url.replace(\"__aid__\", data));\n        }\n    });\n});","Magento_Translation/js/i18n-config.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n(function () {\n    'use strict';\n\n    require.config({\n        config: {\n            'Magento_Ui/js/lib/knockout/bindings/i18n': {\n                inlineTranslation: true\n            }\n        }\n    });\n})();\n","Magento_Translation/js/mage-translation-dictionary.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'text!js-translation.json'\n], function (dict) {\n    'use strict';\n\n    return JSON.parse(dict);\n});\n","Amasty_ShopbyLite/js/chosen/chosen.jquery.js":"/*!\nChosen, a Select Box Enhancer for jQuery and Prototype\nby Patrick Filler for Harvest, http://getharvest.com\n\nVersion 1.6.2\nFull source at https://github.com/harvesthq/chosen\nCopyright (c) 2011-2016 Harvest http://getharvest.com\n\nMIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md\nThis file is generated by `grunt build`, do not edit it by hand.\n*/\ndefine([\n  \"jquery\",\n], function (jQuery) {\n(function() {\n  var $, AbstractChosen, Chosen, SelectParser, _ref,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  SelectParser = (function() {\n    function SelectParser() {\n      this.options_index = 0;\n      this.parsed = [];\n    }\n\n    SelectParser.prototype.add_node = function(child) {\n      if (child.nodeName.toUpperCase() === \"OPTGROUP\") {\n        return this.add_group(child);\n      } else {\n        return this.add_option(child);\n      }\n    };\n\n    SelectParser.prototype.add_group = function(group) {\n      var group_position, option, _i, _len, _ref, _results;\n      group_position = this.parsed.length;\n      this.parsed.push({\n        array_index: group_position,\n        group: true,\n        label: this.escapeExpression(group.label),\n        title: group.title ? group.title : void 0,\n        children: 0,\n        disabled: group.disabled,\n        classes: group.className\n      });\n      _ref = group.childNodes;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        option = _ref[_i];\n        _results.push(this.add_option(option, group_position, group.disabled));\n      }\n      return _results;\n    };\n\n    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {\n      if (option.nodeName.toUpperCase() === \"OPTION\") {\n        if (option.text !== \"\") {\n          if (group_position != null) {\n            this.parsed[group_position].children += 1;\n          }\n          this.parsed.push({\n            array_index: this.parsed.length,\n            options_index: this.options_index,\n            value: option.value,\n            text: option.text,\n            html: option.innerHTML,\n            title: option.title ? option.title : void 0,\n            selected: option.selected,\n            disabled: group_disabled === true ? group_disabled : option.disabled,\n            group_array_index: group_position,\n            group_label: group_position != null ? this.parsed[group_position].label : null,\n            classes: option.className,\n            style: option.style.cssText\n          });\n        } else {\n          this.parsed.push({\n            array_index: this.parsed.length,\n            options_index: this.options_index,\n            empty: true\n          });\n        }\n        return this.options_index += 1;\n      }\n    };\n\n    SelectParser.prototype.escapeExpression = function(text) {\n      var map, unsafe_chars;\n      if ((text == null) || text === false) {\n        return \"\";\n      }\n      if (!/[\\&\\<\\>\\\"\\'\\`]/.test(text)) {\n        return text;\n      }\n      map = {\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#x27;\",\n        \"`\": \"&#x60;\"\n      };\n      unsafe_chars = /&(?!\\w+;)|[\\<\\>\\\"\\'\\`]/g;\n      return text.replace(unsafe_chars, function(chr) {\n        return map[chr] || \"&amp;\";\n      });\n    };\n\n    return SelectParser;\n\n  })();\n\n  SelectParser.select_to_array = function(select) {\n    var child, parser, _i, _len, _ref;\n    parser = new SelectParser();\n    _ref = select.childNodes;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      child = _ref[_i];\n      parser.add_node(child);\n    }\n    return parser.parsed;\n  };\n\n  AbstractChosen = (function() {\n    function AbstractChosen(form_field, options) {\n      this.form_field = form_field;\n      this.options = options != null ? options : {};\n      if (!AbstractChosen.browser_is_supported()) {\n        return;\n      }\n      this.is_multiple = this.form_field.multiple;\n      this.set_default_text();\n      this.set_default_values();\n      this.setup();\n      this.set_up_html();\n      this.register_observers();\n      this.on_ready();\n    }\n\n    AbstractChosen.prototype.set_default_values = function() {\n      var _this = this;\n      this.click_test_action = function(evt) {\n        return _this.test_active_click(evt);\n      };\n      this.activate_action = function(evt) {\n        return _this.activate_field(evt);\n      };\n      this.active_field = false;\n      this.mouse_on_container = false;\n      this.results_showing = false;\n      this.result_highlighted = null;\n      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === \"\" ? this.options.allow_single_deselect : false;\n      this.disable_search_threshold = this.options.disable_search_threshold || 0;\n      this.disable_search = this.options.disable_search || false;\n      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;\n      this.group_search = this.options.group_search != null ? this.options.group_search : true;\n      this.search_contains = this.options.search_contains || false;\n      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;\n      this.max_selected_options = this.options.max_selected_options || Infinity;\n      this.inherit_select_classes = this.options.inherit_select_classes || false;\n      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;\n      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;\n      this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;\n      this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;\n      return this.case_sensitive_search = this.options.case_sensitive_search || false;\n    };\n\n    AbstractChosen.prototype.set_default_text = function() {\n      if (this.form_field.getAttribute(\"data-placeholder\")) {\n        this.default_text = this.form_field.getAttribute(\"data-placeholder\");\n      } else if (this.is_multiple) {\n        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;\n      } else {\n        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;\n      }\n      return this.results_none_found = this.form_field.getAttribute(\"data-no_results_text\") || this.options.no_results_text || AbstractChosen.default_no_result_text;\n    };\n\n    AbstractChosen.prototype.choice_label = function(item) {\n      if (this.include_group_label_in_selected && (item.group_label != null)) {\n        return \"<b class='group-name'>\" + item.group_label + \"</b>\" + item.html;\n      } else {\n        return item.html;\n      }\n    };\n\n    AbstractChosen.prototype.mouse_enter = function() {\n      return this.mouse_on_container = true;\n    };\n\n    AbstractChosen.prototype.mouse_leave = function() {\n      return this.mouse_on_container = false;\n    };\n\n    AbstractChosen.prototype.input_focus = function(evt) {\n      var _this = this;\n      if (this.is_multiple) {\n        if (!this.active_field) {\n          return setTimeout((function() {\n            return _this.container_mousedown();\n          }), 50);\n        }\n      } else {\n        if (!this.active_field) {\n          return this.activate_field();\n        }\n      }\n    };\n\n    AbstractChosen.prototype.input_blur = function(evt) {\n      var _this = this;\n      if (!this.mouse_on_container) {\n        this.active_field = false;\n        return setTimeout((function() {\n          return _this.blur_test();\n        }), 100);\n      }\n    };\n\n    AbstractChosen.prototype.results_option_build = function(options) {\n      var content, data, data_content, shown_results, _i, _len, _ref;\n      content = '';\n      shown_results = 0;\n      _ref = this.results_data;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        data = _ref[_i];\n        data_content = '';\n        if (data.group) {\n          data_content = this.result_add_group(data);\n        } else {\n          data_content = this.result_add_option(data);\n        }\n        if (data_content !== '') {\n          shown_results++;\n          content += data_content;\n        }\n        if (options != null ? options.first : void 0) {\n          if (data.selected && this.is_multiple) {\n            this.choice_build(data);\n          } else if (data.selected && !this.is_multiple) {\n            this.single_set_selected_text(this.choice_label(data));\n          }\n        }\n        if (shown_results >= this.max_shown_results) {\n          break;\n        }\n      }\n      return content;\n    };\n\n    AbstractChosen.prototype.result_add_option = function(option) {\n      var classes, option_el;\n      if (!option.search_match) {\n        return '';\n      }\n      if (!this.include_option_in_results(option)) {\n        return '';\n      }\n      classes = [];\n      if (!option.disabled && !(option.selected && this.is_multiple)) {\n        classes.push(\"active-result\");\n      }\n      if (option.disabled && !(option.selected && this.is_multiple)) {\n        classes.push(\"disabled-result\");\n      }\n      if (option.selected) {\n        classes.push(\"result-selected\");\n      }\n      if (option.group_array_index != null) {\n        classes.push(\"group-option\");\n      }\n      if (option.classes !== \"\") {\n        classes.push(option.classes);\n      }\n      option_el = document.createElement(\"li\");\n      option_el.className = classes.join(\" \");\n      option_el.style.cssText = option.style;\n      option_el.setAttribute(\"data-option-array-index\", option.array_index);\n      option_el.innerHTML = option.search_text;\n      if (option.title) {\n        option_el.title = option.title;\n      }\n      return this.outerHTML(option_el);\n    };\n\n    AbstractChosen.prototype.result_add_group = function(group) {\n      var classes, group_el;\n      if (!(group.search_match || group.group_match)) {\n        return '';\n      }\n      if (!(group.active_options > 0)) {\n        return '';\n      }\n      classes = [];\n      classes.push(\"group-result\");\n      if (group.classes) {\n        classes.push(group.classes);\n      }\n      group_el = document.createElement(\"li\");\n      group_el.className = classes.join(\" \");\n      group_el.innerHTML = group.search_text;\n      if (group.title) {\n        group_el.title = group.title;\n      }\n      return this.outerHTML(group_el);\n    };\n\n    AbstractChosen.prototype.results_update_field = function() {\n      this.set_default_text();\n      if (!this.is_multiple) {\n        this.results_reset_cleanup();\n      }\n      this.result_clear_highlight();\n      this.results_build();\n      if (this.results_showing) {\n        return this.winnow_results();\n      }\n    };\n\n    AbstractChosen.prototype.reset_single_select_options = function() {\n      var result, _i, _len, _ref, _results;\n      _ref = this.results_data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        result = _ref[_i];\n        if (result.selected) {\n          _results.push(result.selected = false);\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    AbstractChosen.prototype.results_toggle = function() {\n      if (this.results_showing) {\n        return this.results_hide();\n      } else {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.results_search = function(evt) {\n      if (this.results_showing) {\n        return this.winnow_results();\n      } else {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.winnow_results = function() {\n      var escapedSearchText, option, regex, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;\n      this.no_results_clear();\n      results = 0;\n      searchText = this.get_search_text();\n      escapedSearchText = searchText.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n      zregex = new RegExp(escapedSearchText, 'i');\n      regex = this.get_search_regex(escapedSearchText);\n      _ref = this.results_data;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        option = _ref[_i];\n        option.search_match = false;\n        results_group = null;\n        if (this.include_option_in_results(option)) {\n          if (option.group) {\n            option.group_match = false;\n            option.active_options = 0;\n          }\n          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {\n            results_group = this.results_data[option.group_array_index];\n            if (results_group.active_options === 0 && results_group.search_match) {\n              results += 1;\n            }\n            results_group.active_options += 1;\n          }\n          option.search_text = option.group ? option.label : option.html;\n          if (!(option.group && !this.group_search)) {\n            option.search_match = this.search_string_match(option.search_text, regex);\n            if (option.search_match && !option.group) {\n              results += 1;\n            }\n            if (option.search_match) {\n              if (searchText.length) {\n                startpos = option.search_text.search(zregex);\n                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);\n                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);\n              }\n              if (results_group != null) {\n                results_group.group_match = true;\n              }\n            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {\n              option.search_match = true;\n            }\n          }\n        }\n      }\n      this.result_clear_highlight();\n      if (results < 1 && searchText.length) {\n        this.update_results_content(\"\");\n        return this.no_results(searchText);\n      } else {\n        this.update_results_content(this.results_option_build());\n        return this.winnow_results_set_highlight();\n      }\n    };\n\n    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {\n      var regex_anchor, regex_flag;\n      regex_anchor = this.search_contains ? \"\" : \"^\";\n      regex_flag = this.case_sensitive_search ? \"\" : \"i\";\n      return new RegExp(regex_anchor + escaped_search_string, regex_flag);\n    };\n\n    AbstractChosen.prototype.search_string_match = function(search_string, regex) {\n      var part, parts, _i, _len;\n      if (regex.test(search_string)) {\n        return true;\n      } else if (this.enable_split_word_search && (search_string.indexOf(\" \") >= 0 || search_string.indexOf(\"[\") === 0)) {\n        parts = search_string.replace(/\\[|\\]/g, \"\").split(\" \");\n        if (parts.length) {\n          for (_i = 0, _len = parts.length; _i < _len; _i++) {\n            part = parts[_i];\n            if (regex.test(part)) {\n              return true;\n            }\n          }\n        }\n      }\n    };\n\n    AbstractChosen.prototype.choices_count = function() {\n      var option, _i, _len, _ref;\n      if (this.selected_option_count != null) {\n        return this.selected_option_count;\n      }\n      this.selected_option_count = 0;\n      _ref = this.form_field.options;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        option = _ref[_i];\n        if (option.selected) {\n          this.selected_option_count += 1;\n        }\n      }\n      return this.selected_option_count;\n    };\n\n    AbstractChosen.prototype.choices_click = function(evt) {\n      evt.preventDefault();\n      if (!(this.results_showing || this.is_disabled)) {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.keyup_checker = function(evt) {\n      var stroke, _ref;\n      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;\n      this.search_field_scale();\n      switch (stroke) {\n        case 8:\n          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {\n            return this.keydown_backstroke();\n          } else if (!this.pending_backstroke) {\n            this.result_clear_highlight();\n            return this.results_search();\n          }\n          break;\n        case 13:\n          evt.preventDefault();\n          if (this.results_showing) {\n            return this.result_select(evt);\n          }\n          break;\n        case 27:\n          if (this.results_showing) {\n            this.results_hide();\n          }\n          return true;\n        case 9:\n        case 38:\n        case 40:\n        case 16:\n        case 91:\n        case 17:\n        case 18:\n          break;\n        default:\n          return this.results_search();\n      }\n    };\n\n    AbstractChosen.prototype.clipboard_event_checker = function(evt) {\n      var _this = this;\n      return setTimeout((function() {\n        return _this.results_search();\n      }), 50);\n    };\n\n    AbstractChosen.prototype.container_width = function() {\n      if (this.options.width != null) {\n        return this.options.width;\n      } else {\n        return \"\" + this.form_field.offsetWidth + \"px\";\n      }\n    };\n\n    AbstractChosen.prototype.include_option_in_results = function(option) {\n      if (this.is_multiple && (!this.display_selected_options && option.selected)) {\n        return false;\n      }\n      if (!this.display_disabled_options && option.disabled) {\n        return false;\n      }\n      if (option.empty) {\n        return false;\n      }\n      return true;\n    };\n\n    AbstractChosen.prototype.search_results_touchstart = function(evt) {\n      this.touch_started = true;\n      return this.search_results_mouseover(evt);\n    };\n\n    AbstractChosen.prototype.search_results_touchmove = function(evt) {\n      this.touch_started = false;\n      return this.search_results_mouseout(evt);\n    };\n\n    AbstractChosen.prototype.search_results_touchend = function(evt) {\n      if (this.touch_started) {\n        return this.search_results_mouseup(evt);\n      }\n    };\n\n    AbstractChosen.prototype.outerHTML = function(element) {\n      var tmp;\n      if (element.outerHTML) {\n        return element.outerHTML;\n      }\n      tmp = document.createElement(\"div\");\n      tmp.appendChild(element);\n      return tmp.innerHTML;\n    };\n\n    AbstractChosen.browser_is_supported = function() {\n      if (\"Microsoft Internet Explorer\" === window.navigator.appName) {\n        return document.documentMode >= 8;\n      }\n      if (/iP(od|hone)/i.test(window.navigator.userAgent) || /IEMobile/i.test(window.navigator.userAgent) || /Windows Phone/i.test(window.navigator.userAgent) || /BlackBerry/i.test(window.navigator.userAgent) || /BB10/i.test(window.navigator.userAgent) || /Android.*Mobile/i.test(window.navigator.userAgent)) {\n        return false;\n      }\n      return true;\n    };\n\n    AbstractChosen.default_multiple_text = \"Select Some Options\";\n\n    AbstractChosen.default_single_text = \"Select an Option\";\n\n    AbstractChosen.default_no_result_text = \"No results match\";\n\n    return AbstractChosen;\n\n  })();\n\n  $ = jQuery;\n\n  $.fn.extend({\n    chosen: function(options) {\n      if (!AbstractChosen.browser_is_supported()) {\n        return this;\n      }\n      return this.each(function(input_field) {\n        var $this, chosen;\n        $this = $(this);\n        chosen = $this.data('chosen');\n        if (options === 'destroy') {\n          if (chosen instanceof Chosen) {\n            chosen.destroy();\n          }\n          return;\n        }\n        if (!(chosen instanceof Chosen)) {\n          $this.data('chosen', new Chosen(this, options));\n        }\n      });\n    }\n  });\n\n  Chosen = (function(_super) {\n    __extends(Chosen, _super);\n\n    function Chosen() {\n      _ref = Chosen.__super__.constructor.apply(this, arguments);\n      return _ref;\n    }\n\n    Chosen.prototype.setup = function() {\n      this.form_field_jq = $(this.form_field);\n      this.current_selectedIndex = this.form_field.selectedIndex;\n      return this.is_rtl = this.form_field_jq.hasClass(\"chosen-rtl\");\n    };\n\n    Chosen.prototype.set_up_html = function() {\n      var container_classes, container_props;\n      container_classes = [\"chosen-container\"];\n      container_classes.push(\"chosen-container-\" + (this.is_multiple ? \"multi\" : \"single\"));\n      if (this.inherit_select_classes && this.form_field.className) {\n        container_classes.push(this.form_field.className);\n      }\n      if (this.is_rtl) {\n        container_classes.push(\"chosen-rtl\");\n      }\n      container_props = {\n        'class': container_classes.join(' '),\n        'style': \"width: \" + (this.container_width()) + \";\",\n        'title': this.form_field.title\n      };\n      if (this.form_field.id.length) {\n        container_props.id = this.form_field.id.replace(/[^\\w]/g, '_') + \"_chosen\";\n      }\n      this.container = $(\"<div />\", container_props);\n      if (this.is_multiple) {\n        this.container.html('<ul class=\"chosen-choices\"><li class=\"search-field\"><input type=\"text\" value=\"' + this.default_text + '\" class=\"default\" autocomplete=\"off\" style=\"width:25px;\" /></li></ul><div class=\"chosen-drop\"><ul class=\"chosen-results\"></ul></div>');\n      } else {\n        this.container.html('<a class=\"chosen-single chosen-default\"><span>' + this.default_text + '</span><div><b></b></div></a><div class=\"chosen-drop\"><div class=\"chosen-search\"><input type=\"text\" autocomplete=\"off\" /></div><ul class=\"chosen-results\"></ul></div>');\n      }\n      this.form_field_jq.hide().after(this.container);\n      this.dropdown = this.container.find('div.chosen-drop').first();\n      this.search_field = this.container.find('input').first();\n      this.search_results = this.container.find('ul.chosen-results').first();\n      this.search_field_scale();\n      this.search_no_results = this.container.find('li.no-results').first();\n      if (this.is_multiple) {\n        this.search_choices = this.container.find('ul.chosen-choices').first();\n        this.search_container = this.container.find('li.search-field').first();\n      } else {\n        this.search_container = this.container.find('div.chosen-search').first();\n        this.selected_item = this.container.find('.chosen-single').first();\n      }\n      this.results_build();\n      this.set_tab_index();\n      return this.set_label_behavior();\n    };\n\n    Chosen.prototype.on_ready = function() {\n      return this.form_field_jq.trigger(\"chosen:ready\", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.register_observers = function() {\n      var _this = this;\n      this.container.bind('touchstart.chosen', function(evt) {\n        _this.container_mousedown(evt);\n        return evt.preventDefault();\n      });\n      this.container.bind('touchend.chosen', function(evt) {\n        _this.container_mouseup(evt);\n        return evt.preventDefault();\n      });\n      this.container.bind('mousedown.chosen', function(evt) {\n        _this.container_mousedown(evt);\n      });\n      this.container.bind('mouseup.chosen', function(evt) {\n        _this.container_mouseup(evt);\n      });\n      this.container.bind('mouseenter.chosen', function(evt) {\n        _this.mouse_enter(evt);\n      });\n      this.container.bind('mouseleave.chosen', function(evt) {\n        _this.mouse_leave(evt);\n      });\n      this.search_results.bind('mouseup.chosen', function(evt) {\n        _this.search_results_mouseup(evt);\n      });\n      this.search_results.bind('mouseover.chosen', function(evt) {\n        _this.search_results_mouseover(evt);\n      });\n      this.search_results.bind('mouseout.chosen', function(evt) {\n        _this.search_results_mouseout(evt);\n      });\n      this.search_results.bind('mousewheel.chosen DOMMouseScroll.chosen', function(evt) {\n        _this.search_results_mousewheel(evt);\n      });\n      this.search_results.bind('touchstart.chosen', function(evt) {\n        _this.search_results_touchstart(evt);\n      });\n      this.search_results.bind('touchmove.chosen', function(evt) {\n        _this.search_results_touchmove(evt);\n      });\n      this.search_results.bind('touchend.chosen', function(evt) {\n        _this.search_results_touchend(evt);\n      });\n      this.form_field_jq.bind(\"chosen:updated.chosen\", function(evt) {\n        _this.results_update_field(evt);\n      });\n      this.form_field_jq.bind(\"chosen:activate.chosen\", function(evt) {\n        _this.activate_field(evt);\n      });\n      this.form_field_jq.bind(\"chosen:open.chosen\", function(evt) {\n        _this.container_mousedown(evt);\n      });\n      this.form_field_jq.bind(\"chosen:close.chosen\", function(evt) {\n        _this.input_blur(evt);\n      });\n      this.search_field.bind('blur.chosen', function(evt) {\n        _this.input_blur(evt);\n      });\n      this.search_field.bind('keyup.chosen', function(evt) {\n        _this.keyup_checker(evt);\n      });\n      this.search_field.bind('keydown.chosen', function(evt) {\n        _this.keydown_checker(evt);\n      });\n      this.search_field.bind('focus.chosen', function(evt) {\n        _this.input_focus(evt);\n      });\n      this.search_field.bind('cut.chosen', function(evt) {\n        _this.clipboard_event_checker(evt);\n      });\n      this.search_field.bind('paste.chosen', function(evt) {\n        _this.clipboard_event_checker(evt);\n      });\n      if (this.is_multiple) {\n        return this.search_choices.bind('click.chosen', function(evt) {\n          _this.choices_click(evt);\n        });\n      } else {\n        return this.container.bind('click.chosen', function(evt) {\n          evt.preventDefault();\n        });\n      }\n    };\n\n    Chosen.prototype.destroy = function() {\n      $(this.container[0].ownerDocument).unbind(\"click.chosen\", this.click_test_action);\n      if (this.search_field[0].tabIndex) {\n        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;\n      }\n      this.container.remove();\n      this.form_field_jq.removeData('chosen');\n      return this.form_field_jq.show();\n    };\n\n    Chosen.prototype.search_field_disabled = function() {\n      this.is_disabled = this.form_field_jq[0].disabled;\n      if (this.is_disabled) {\n        this.container.addClass('chosen-disabled');\n        this.search_field[0].disabled = true;\n        if (!this.is_multiple) {\n          this.selected_item.unbind(\"focus.chosen\", this.activate_action);\n        }\n        return this.close_field();\n      } else {\n        this.container.removeClass('chosen-disabled');\n        this.search_field[0].disabled = false;\n        if (!this.is_multiple) {\n          return this.selected_item.bind(\"focus.chosen\", this.activate_action);\n        }\n      }\n    };\n\n    Chosen.prototype.container_mousedown = function(evt) {\n      if (!this.is_disabled) {\n        if (evt && evt.type === \"mousedown\" && !this.results_showing) {\n          evt.preventDefault();\n        }\n        if (!((evt != null) && ($(evt.target)).hasClass(\"search-choice-close\"))) {\n          if (!this.active_field) {\n            if (this.is_multiple) {\n              this.search_field.val(\"\");\n            }\n            $(this.container[0].ownerDocument).bind('click.chosen', this.click_test_action);\n            this.results_show();\n          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents(\"a.chosen-single\").length)) {\n            evt.preventDefault();\n            this.results_toggle();\n          }\n          return this.activate_field();\n        }\n      }\n    };\n\n    Chosen.prototype.container_mouseup = function(evt) {\n      if (evt.target.nodeName === \"ABBR\" && !this.is_disabled) {\n        return this.results_reset(evt);\n      }\n    };\n\n    Chosen.prototype.search_results_mousewheel = function(evt) {\n      var delta;\n      if (evt.originalEvent) {\n        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;\n      }\n      if (delta != null) {\n        evt.preventDefault();\n        if (evt.type === 'DOMMouseScroll') {\n          delta = delta * 40;\n        }\n        return this.search_results.scrollTop(delta + this.search_results.scrollTop());\n      }\n    };\n\n    Chosen.prototype.blur_test = function(evt) {\n      if (!this.active_field && this.container.hasClass(\"chosen-container-active\")) {\n        return this.close_field();\n      }\n    };\n\n    Chosen.prototype.close_field = function() {\n      $(this.container[0].ownerDocument).unbind(\"click.chosen\", this.click_test_action);\n      this.active_field = false;\n      this.results_hide();\n      this.container.removeClass(\"chosen-container-active\");\n      this.clear_backstroke();\n      this.show_search_field_default();\n      return this.search_field_scale();\n    };\n\n    Chosen.prototype.activate_field = function() {\n      this.container.addClass(\"chosen-container-active\");\n      this.active_field = true;\n      this.search_field.val(this.search_field.val());\n      return this.search_field.focus();\n    };\n\n    Chosen.prototype.test_active_click = function(evt) {\n      var active_container;\n      active_container = $(evt.target).closest('.chosen-container');\n      if (active_container.length && this.container[0] === active_container[0]) {\n        return this.active_field = true;\n      } else {\n        return this.close_field();\n      }\n    };\n\n    Chosen.prototype.results_build = function() {\n      this.parsing = true;\n      this.selected_option_count = null;\n      this.results_data = SelectParser.select_to_array(this.form_field);\n      if (this.is_multiple) {\n        this.search_choices.find(\"li.search-choice\").remove();\n      } else if (!this.is_multiple) {\n        this.single_set_selected_text();\n        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {\n          this.search_field[0].readOnly = true;\n          this.container.addClass(\"chosen-container-single-nosearch\");\n        } else {\n          this.search_field[0].readOnly = false;\n          this.container.removeClass(\"chosen-container-single-nosearch\");\n        }\n      }\n      this.update_results_content(this.results_option_build({\n        first: true\n      }));\n      this.search_field_disabled();\n      this.show_search_field_default();\n      this.search_field_scale();\n      return this.parsing = false;\n    };\n\n    Chosen.prototype.result_do_highlight = function(el) {\n      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;\n      if (el.length) {\n        this.result_clear_highlight();\n        this.result_highlight = el;\n        this.result_highlight.addClass(\"highlighted\");\n        maxHeight = parseInt(this.search_results.css(\"maxHeight\"), 10);\n        visible_top = this.search_results.scrollTop();\n        visible_bottom = maxHeight + visible_top;\n        high_top = this.result_highlight.position().top + this.search_results.scrollTop();\n        high_bottom = high_top + this.result_highlight.outerHeight();\n        if (high_bottom >= visible_bottom) {\n          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);\n        } else if (high_top < visible_top) {\n          return this.search_results.scrollTop(high_top);\n        }\n      }\n    };\n\n    Chosen.prototype.result_clear_highlight = function() {\n      if (this.result_highlight) {\n        this.result_highlight.removeClass(\"highlighted\");\n      }\n      return this.result_highlight = null;\n    };\n\n    Chosen.prototype.results_show = function() {\n      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {\n        this.form_field_jq.trigger(\"chosen:maxselected\", {\n          chosen: this\n        });\n        return false;\n      }\n      this.container.addClass(\"chosen-with-drop\");\n      this.results_showing = true;\n      this.search_field.focus();\n      this.search_field.val(this.search_field.val());\n      this.winnow_results();\n      return this.form_field_jq.trigger(\"chosen:showing_dropdown\", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.update_results_content = function(content) {\n      return this.search_results.html(content);\n    };\n\n    Chosen.prototype.results_hide = function() {\n      if (this.results_showing) {\n        this.result_clear_highlight();\n        this.container.removeClass(\"chosen-with-drop\");\n        this.form_field_jq.trigger(\"chosen:hiding_dropdown\", {\n          chosen: this\n        });\n      }\n      return this.results_showing = false;\n    };\n\n    Chosen.prototype.set_tab_index = function(el) {\n      var ti;\n      if (this.form_field.tabIndex) {\n        ti = this.form_field.tabIndex;\n        this.form_field.tabIndex = -1;\n        return this.search_field[0].tabIndex = ti;\n      }\n    };\n\n    Chosen.prototype.set_label_behavior = function() {\n      var _this = this;\n      this.form_field_label = this.form_field_jq.parents(\"label\");\n      if (!this.form_field_label.length && this.form_field.id.length) {\n        this.form_field_label = $(\"label[for='\" + this.form_field.id + \"']\");\n      }\n      if (this.form_field_label.length > 0) {\n        return this.form_field_label.bind('click.chosen', function(evt) {\n          if (_this.is_multiple) {\n            return _this.container_mousedown(evt);\n          } else {\n            return _this.activate_field();\n          }\n        });\n      }\n    };\n\n    Chosen.prototype.show_search_field_default = function() {\n      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {\n        this.search_field.val(this.default_text);\n        return this.search_field.addClass(\"default\");\n      } else {\n        this.search_field.val(\"\");\n        return this.search_field.removeClass(\"default\");\n      }\n    };\n\n    Chosen.prototype.search_results_mouseup = function(evt) {\n      var target;\n      target = $(evt.target).hasClass(\"active-result\") ? $(evt.target) : $(evt.target).parents(\".active-result\").first();\n      if (target.length) {\n        this.result_highlight = target;\n        this.result_select(evt);\n        return this.search_field.focus();\n      }\n    };\n\n    Chosen.prototype.search_results_mouseover = function(evt) {\n      var target;\n      target = $(evt.target).hasClass(\"active-result\") ? $(evt.target) : $(evt.target).parents(\".active-result\").first();\n      if (target) {\n        return this.result_do_highlight(target);\n      }\n    };\n\n    Chosen.prototype.search_results_mouseout = function(evt) {\n      if ($(evt.target).hasClass(\"active-result\" || $(evt.target).parents('.active-result').first())) {\n        return this.result_clear_highlight();\n      }\n    };\n\n    Chosen.prototype.choice_build = function(item) {\n      var choice, close_link,\n        _this = this;\n      choice = $('<li />', {\n        \"class\": \"search-choice\"\n      }).html(\"<span>\" + (this.choice_label(item)) + \"</span>\");\n      if (item.disabled) {\n        choice.addClass('search-choice-disabled');\n      } else {\n        close_link = $('<a />', {\n          \"class\": 'search-choice-close',\n          'data-option-array-index': item.array_index\n        });\n        close_link.bind('click.chosen', function(evt) {\n          return _this.choice_destroy_link_click(evt);\n        });\n        choice.append(close_link);\n      }\n      return this.search_container.before(choice);\n    };\n\n    Chosen.prototype.choice_destroy_link_click = function(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      if (!this.is_disabled) {\n        return this.choice_destroy($(evt.target));\n      }\n    };\n\n    Chosen.prototype.choice_destroy = function(link) {\n      if (this.result_deselect(link[0].getAttribute(\"data-option-array-index\"))) {\n        this.show_search_field_default();\n        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {\n          this.results_hide();\n        }\n        link.parents('li').first().remove();\n        return this.search_field_scale();\n      }\n    };\n\n    Chosen.prototype.results_reset = function() {\n      this.reset_single_select_options();\n      this.form_field.options[0].selected = true;\n      this.single_set_selected_text();\n      this.show_search_field_default();\n      this.results_reset_cleanup();\n      this.form_field_jq.trigger(\"change\");\n      if (this.active_field) {\n        return this.results_hide();\n      }\n    };\n\n    Chosen.prototype.results_reset_cleanup = function() {\n      this.current_selectedIndex = this.form_field.selectedIndex;\n      return this.selected_item.find(\"abbr\").remove();\n    };\n\n    Chosen.prototype.result_select = function(evt) {\n      var high, item;\n      if (this.result_highlight) {\n        high = this.result_highlight;\n        this.result_clear_highlight();\n        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {\n          this.form_field_jq.trigger(\"chosen:maxselected\", {\n            chosen: this\n          });\n          return false;\n        }\n        if (this.is_multiple) {\n          high.removeClass(\"active-result\");\n        } else {\n          this.reset_single_select_options();\n        }\n        high.addClass(\"result-selected\");\n        item = this.results_data[high[0].getAttribute(\"data-option-array-index\")];\n        item.selected = true;\n        this.form_field.options[item.options_index].selected = true;\n        this.selected_option_count = null;\n        if (this.is_multiple) {\n          this.choice_build(item);\n        } else {\n          this.single_set_selected_text(this.choice_label(item));\n        }\n        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {\n          this.results_hide();\n        }\n        this.show_search_field_default();\n        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {\n          this.form_field_jq.trigger(\"change\", {\n            'selected': this.form_field.options[item.options_index].value\n          });\n        }\n        this.current_selectedIndex = this.form_field.selectedIndex;\n        evt.preventDefault();\n        return this.search_field_scale();\n      }\n    };\n\n    Chosen.prototype.single_set_selected_text = function(text) {\n      if (text == null) {\n        text = this.default_text;\n      }\n      if (text === this.default_text) {\n        this.selected_item.addClass(\"chosen-default\");\n      } else {\n        this.single_deselect_control_build();\n        this.selected_item.removeClass(\"chosen-default\");\n      }\n      return this.selected_item.find(\"span\").html(text);\n    };\n\n    Chosen.prototype.result_deselect = function(pos) {\n      var result_data;\n      result_data = this.results_data[pos];\n      if (!this.form_field.options[result_data.options_index].disabled) {\n        result_data.selected = false;\n        this.form_field.options[result_data.options_index].selected = false;\n        this.selected_option_count = null;\n        this.result_clear_highlight();\n        if (this.results_showing) {\n          this.winnow_results();\n        }\n        this.form_field_jq.trigger(\"change\", {\n          deselected: this.form_field.options[result_data.options_index].value\n        });\n        this.search_field_scale();\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    Chosen.prototype.single_deselect_control_build = function() {\n      if (!this.allow_single_deselect) {\n        return;\n      }\n      if (!this.selected_item.find(\"abbr\").length) {\n        this.selected_item.find(\"span\").first().after(\"<abbr class=\\\"search-choice-close\\\"></abbr>\");\n      }\n      return this.selected_item.addClass(\"chosen-single-with-deselect\");\n    };\n\n    Chosen.prototype.get_search_text = function() {\n      return $('<div/>').text($.trim(this.search_field.val())).html();\n    };\n\n    Chosen.prototype.winnow_results_set_highlight = function() {\n      var do_high, selected_results;\n      selected_results = !this.is_multiple ? this.search_results.find(\".result-selected.active-result\") : [];\n      do_high = selected_results.length ? selected_results.first() : this.search_results.find(\".active-result\").first();\n      if (do_high != null) {\n        return this.result_do_highlight(do_high);\n      }\n    };\n\n    Chosen.prototype.no_results = function(terms) {\n      var no_results_html;\n      no_results_html = $('<li class=\"no-results\">' + this.results_none_found + ' \"<span></span>\"</li>');\n      no_results_html.find(\"span\").first().html(terms);\n      this.search_results.append(no_results_html);\n      return this.form_field_jq.trigger(\"chosen:no_results\", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.no_results_clear = function() {\n      return this.search_results.find(\".no-results\").remove();\n    };\n\n    Chosen.prototype.keydown_arrow = function() {\n      var next_sib;\n      if (this.results_showing && this.result_highlight) {\n        next_sib = this.result_highlight.nextAll(\"li.active-result\").first();\n        if (next_sib) {\n          return this.result_do_highlight(next_sib);\n        }\n      } else {\n        return this.results_show();\n      }\n    };\n\n    Chosen.prototype.keyup_arrow = function() {\n      var prev_sibs;\n      if (!this.results_showing && !this.is_multiple) {\n        return this.results_show();\n      } else if (this.result_highlight) {\n        prev_sibs = this.result_highlight.prevAll(\"li.active-result\");\n        if (prev_sibs.length) {\n          return this.result_do_highlight(prev_sibs.first());\n        } else {\n          if (this.choices_count() > 0) {\n            this.results_hide();\n          }\n          return this.result_clear_highlight();\n        }\n      }\n    };\n\n    Chosen.prototype.keydown_backstroke = function() {\n      var next_available_destroy;\n      if (this.pending_backstroke) {\n        this.choice_destroy(this.pending_backstroke.find(\"a\").first());\n        return this.clear_backstroke();\n      } else {\n        next_available_destroy = this.search_container.siblings(\"li.search-choice\").last();\n        if (next_available_destroy.length && !next_available_destroy.hasClass(\"search-choice-disabled\")) {\n          this.pending_backstroke = next_available_destroy;\n          if (this.single_backstroke_delete) {\n            return this.keydown_backstroke();\n          } else {\n            return this.pending_backstroke.addClass(\"search-choice-focus\");\n          }\n        }\n      }\n    };\n\n    Chosen.prototype.clear_backstroke = function() {\n      if (this.pending_backstroke) {\n        this.pending_backstroke.removeClass(\"search-choice-focus\");\n      }\n      return this.pending_backstroke = null;\n    };\n\n    Chosen.prototype.keydown_checker = function(evt) {\n      var stroke, _ref1;\n      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;\n      this.search_field_scale();\n      if (stroke !== 8 && this.pending_backstroke) {\n        this.clear_backstroke();\n      }\n      switch (stroke) {\n        case 8:\n          this.backstroke_length = this.search_field.val().length;\n          break;\n        case 9:\n          if (this.results_showing && !this.is_multiple) {\n            this.result_select(evt);\n          }\n          this.mouse_on_container = false;\n          break;\n        case 13:\n          if (this.results_showing) {\n            evt.preventDefault();\n          }\n          break;\n        case 32:\n          if (this.disable_search) {\n            evt.preventDefault();\n          }\n          break;\n        case 38:\n          evt.preventDefault();\n          this.keyup_arrow();\n          break;\n        case 40:\n          evt.preventDefault();\n          this.keydown_arrow();\n          break;\n      }\n    };\n\n    Chosen.prototype.search_field_scale = function() {\n      var div, f_width, h, style, style_block, styles, w, _i, _len;\n      if (this.is_multiple) {\n        h = 0;\n        w = 0;\n        style_block = \"position:absolute; left: -1000px; top: -1000px; display:none;\";\n        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];\n        for (_i = 0, _len = styles.length; _i < _len; _i++) {\n          style = styles[_i];\n          style_block += style + \":\" + this.search_field.css(style) + \";\";\n        }\n        div = $('<div />', {\n          'style': style_block\n        });\n        div.text(this.search_field.val());\n        $('body').append(div);\n        w = div.width() + 25;\n        div.remove();\n        f_width = this.container.outerWidth();\n        if (w > f_width - 10) {\n          w = f_width - 10;\n        }\n        return this.search_field.css({\n          'width': w + 'px'\n        });\n      }\n    };\n\n    return Chosen;\n\n  })(AbstractChosen);\n\n}).call(this);\n\n\n});\n","Amasty_CustomTabs/js/grid/columns/checkbox.js":"define([\n    'underscore',\n    'mage/translate',\n    'Magento_Ui/js/grid/columns/column',\n    'jquery'\n], function (_, $t, Column, jQuery) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Amasty_CustomTabs/grid/cells/checkbox',\n            draggable: false,\n            sortable: false\n        },\n\n        /**\n         * Remove disable class from Insert Attribute button after Attribute has been chosen.\n         *\n         * @return {Boolean}\n         */\n        selectAttribute: function () {\n            if (jQuery('#insert_attribute').hasClass('disabled')) {\n                jQuery('#insert_attribute').removeClass('disabled');\n            }\n\n            return true;\n        }\n    });\n});\n","Amasty_CustomTabs/js/wysiwyg/tiny_mce/plugins/editor_plugin.js":"/* global tinymce, varienGlobalEvents, Base64 */\n/* eslint-disable strict */\ndefine('customTabEditorPlugin', [\n    'Amasty_CustomTabs/js/variable/attribute-directive-generator',\n    'wysiwygAdapter',\n    'jquery'\n], function (attributeDirectiveGenerator, wysiwyg, jQuery) {\n    return function (config) {\n        tinymce.create('tinymce.plugins.amcustomtabs_attribute', {\n\n            /**\n             * Initialize editor plugin.\n             *\n             * @param {tinymce.editor} editor - Editor instance that the plugin is initialized in.\n             * @param {String} url - Absolute URL to where the plugin is located.\n             */\n            init: function (editor, url) {\n                var self = this;\n\n                /**\n                 * Add new command to open attributes selector slideout.\n                 */\n                editor.addCommand('openAttributesSlideout', function (commandConfig) {\n                    var selectedElement;\n\n                    if (commandConfig) {\n                        selectedElement = commandConfig.selectedElement;\n                    } else {\n                        selectedElement = tinymce.activeEditor.selection.getNode();\n                    }\n                    AmastyProductTabsAttributePlugin.setEditor(editor);\n                    AmastyProductTabsAttributePlugin.loadChooser(\n                        config.url,\n                        wysiwyg.getId(),\n                        selectedElement\n                    );\n                });\n\n                /**\n                 * Add button to the editor toolbar.\n                 */\n                editor.addButton('amcustomtabs_attribute', {\n                    title: jQuery.mage.__('Insert Attribute'),\n                    tooltip: jQuery.mage.__('Insert Attribute'),\n                    cmd: 'openAttributesSlideout',\n                    image: url + '/img/icon.png',\n\n                    /**\n                     * Highlight or dismiss Insert Attribute button when attribute is selected or deselected.\n                     */\n                    onPostRender: function () {\n                        var _this = this,\n\n                        /**\n                         * Toggle active state of Insert Attribute button.\n                         *\n                         * @param {Object} e\n                         */\n                        toggleAttributeButton = function (e) {\n                            _this.active(false);\n\n                            if (jQuery(e.target).hasClass('amcustomtabs-attribute')) {\n                                _this.active(true);\n                            }\n                        };\n\n                        editor.on('click', toggleAttributeButton);\n                        editor.on('change', toggleAttributeButton);\n                    }\n                });\n\n                /**\n                 * Double click handler on the editor to handle dbl click on attribute placeholder.\n                 */\n                editor.on('dblclick', function (evt) {\n                    if (jQuery(evt.target).hasClass('amcustomtabs-attribute')) {\n                        editor.selection.collapse(false);\n                        editor.execCommand('openAttributesSlideout', {\n                            ui: true,\n                            selectedElement: evt.target\n                        });\n                    }\n                });\n\n                /**\n                 * Attach event handler for when wysiwyg editor is about to encode its content\n                 */\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\n                    content = self.encodeAttributes(content);\n\n                    return content;\n                });\n\n                /**\n                 * Attach event handler for when wysiwyg editor is about to decode its content\n                 */\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\n                    content = self.decodeAttributes(content);\n\n                    return content;\n                });\n            },\n\n            /**\n             * Encode attributes in content\n             *\n             * @param {String} content\n             * @returns {*}\n             */\n            encodeAttributes: function (content) {\n                content = content.gsub(/\\{\\{amcustomtabs_attribute code=\\\"([^\\\"]+)\\\"\\}\\}/i, function (match) {\n                    var path = match[1],\n                        amAttributes,\n                        imageHtml;\n\n                    amAttributes = JSON.parse(config.placeholders);\n\n                    if (amAttributes[match[1]]) {\n                        imageHtml = '<span id=\"%id\" class=\"amcustomtabs-attribute magento-placeholder mceNonEditable\">' +\n                            '%s</span>';\n                        imageHtml = imageHtml.replace('%s', amAttributes[match[1]]['label']);\n                    } else {\n                        imageHtml = '<span id=\"%id\" class=\"' +\n                            'amcustomtabs-attribute magento-placeholder magento-placeholder-error ' +\n                            'mceNonEditable' +\n                            '\">' +\n                            'Not found' +\n                            '</span>';\n                    }\n\n                    return imageHtml.replace('%id', Base64.idEncode(path));\n                });\n\n                return content;\n            },\n\n            /**\n             * Decode attributes in content.\n             *\n             * @param {String} content\n             * @returns {String}\n             */\n            decodeAttributes: function (content) {\n                var doc = (new DOMParser()).parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html');\n\n                [].forEach.call(doc.querySelectorAll('span.amcustomtabs-attribute'), function (el) {\n                    var $el = jQuery(el);\n\n                    $el.replaceWith(\n                        attributeDirectiveGenerator.processConfig(\n                            Base64.idDecode(\n                                $el.attr('id')\n                            )\n                        )\n                    );\n                });\n\n                return doc.body ? doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : content;\n            },\n\n            /**\n             * @return {Object}\n             */\n            getInfo: function () {\n                return {\n                    longname: 'Amasty Product Tab Attribute Manager Plugin',\n                    author: 'Amasty Team',\n                    authorurl: 'http://amasty.com',\n                    infourl: 'http://amasty.com',\n                    version: '1.0'\n                };\n            }\n        });\n\n        /**\n         * Register plugin\n         */\n        tinymce.PluginManager.add('amcustomtabs_attribute', tinymce.plugins.amcustomtabs_attribute);\n    };\n});\n","Amasty_CustomTabs/js/variable/attribute-directive-generator.js":"define([\n    'underscore'\n], function (_) {\n    'use strict';\n\n    return _.extend({\n        directiveTemplate: '{{amcustomtabs_attribute code=\"%s\"}}',\n\n        /**\n         * @param {String} path\n         * @return {String}\n         */\n        processConfig: function (path) {\n            return this.directiveTemplate.replace('%s', path);\n\n        }\n\n    });\n});\n","Amasty_CustomTabs/js/variable/editor.js":"require([\n    'Amasty_CustomTabs/js/variable/attributes'\n]);\n","Amasty_CustomTabs/js/variable/attributes.js":"define([\n    'jquery',\n    'mage/backend/notification',\n    'mage/translate',\n    'uiRegistry',\n    'mage/apply/main',\n    'mageUtils',\n    'Amasty_CustomTabs/js/variable/attribute-directive-generator',\n    'Magento_Ui/js/lib/spinner',\n    'jquery/ui',\n    'prototype'\n], function (jQuery, notification, $t, registry, mageApply, utils, attributeDirectiveGenerator, loader) {\n    'use strict';\n\n    window.AmastyProductTabsAttribute = {\n        textareaElementId: null,\n        attributesContent: null,\n        dialogWindow: null,\n        dialogWindowId: 'attributes-chooser',\n        overlayShowEffectOptions: null,\n        overlayHideEffectOptions: null,\n        insertFunction: 'Attributes.insertAttribute',\n        selectedPlaceholder: null,\n        isEditMode: null,\n        editor: null,\n\n        /**\n         * Initialize Attributes handler.\n         *\n         * @param {*} textareaElementId\n         * @param {Function} insertFunction\n         * @param {Object} editor\n         * @param {Object} selectedPlaceholder\n         */\n        init: function (textareaElementId, insertFunction, editor, selectedPlaceholder) {\n            if ($(textareaElementId)) {\n                this.textareaElementId = textareaElementId;\n            }\n\n            if (insertFunction) {\n                this.insertFunction = insertFunction;\n            }\n\n            if (selectedPlaceholder) {\n                this.selectedPlaceholder = selectedPlaceholder;\n            }\n\n            if (editor) {\n                this.editor = editor;\n            }\n        },\n\n        /**\n         * Reset data.\n         */\n        resetData: function () {\n            this.attributesContent = null;\n            this.dialogWindow = null;\n        },\n\n        /**\n         * Open attributes chooser slideout.\n         *\n         * @param {Object} attributes\n         */\n        openAttributeChooser: function (attributes) {\n            if (attributes) {\n                this.openDialogWindow(attributes);\n            }\n        },\n\n        /**\n         * Close attributes chooser slideout dialog window.\n         */\n        closeDialogWindow: function () {\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\n        },\n\n        /**\n         * Init ui component grid on the form\n         *\n         * @return void\n         */\n        initUiGrid: function () {\n            mageApply.apply(document.getElementById(this.dialogWindow));\n            jQuery('#' + this.dialogWindowId).applyBindings();\n            loader.get('amcustomtabs_attributes_modal.amcustomtabs_attributes_modal.attributes').hide();\n        },\n\n        /**\n         * Open slideout dialog window.\n         *\n         * @param {*} attributesContent\n         * @param {Object} selectedElement\n         */\n        openDialogWindow: function (attributesContent, selectedElement) {\n\n            var html = utils.copy(attributesContent),\n                self = this;\n\n            jQuery('<div id=\"' + this.dialogWindowId + '\">' + html + '</div>').modal({\n                title: self.isEditMode ? $t('Edit Attribute') : $t('Insert Attribute'),\n                type: 'slide',\n                buttons: self.getButtonsConfig(self.isEditMode),\n\n                /**\n                 * @param {jQuery.Event} e\n                 * @param {Object} modal\n                 */\n                closed: function (e, modal) {\n                    modal.modal.remove();\n                }\n            });\n\n            this.selectedPlaceholder = selectedElement;\n\n            this.addNotAvailableMessage(selectedElement);\n\n            jQuery('#' + this.dialogWindowId).modal('openModal');\n        },\n\n        /**\n         * Add message to slide out that attribute is no longer available\n         *\n         * @param {Object} selectedElement\n         */\n        addNotAvailableMessage: function (selectedElement) {\n            var name,\n                msg,\n                attributePath,\n                $wrapper,\n                lostAttributeClass = 'magento-placeholder-error';\n\n            if (\n                this.isEditMode &&\n                typeof selectedElement !== 'undefined' &&\n                jQuery(selectedElement).hasClass(lostAttributeClass)\n            ) {\n\n                attributePath = AmastyProductTabsAttributePlugin.getElementAttributePath(selectedElement);\n                name = attributePath.split(':');\n                msg = $t('The attribute %1 is no longer available. Select a different attribute.')\n                    .replace('%1', name[1]);\n\n                jQuery('body').notification('clear')\n                    .notification('add', {\n                        error: true,\n                        message: msg,\n\n                        /**\n                         * @param {String} message\n                         */\n                        insertMethod: function (message) {\n                            $wrapper = jQuery('<div/>').html(message);\n\n                            jQuery('.modal-header .page-main-actions').after($wrapper);\n                        }\n                    });\n            }\n        },\n\n        /**\n         * Get selected attribute directive.\n         *\n         * @returns {*}\n         */\n        getSelectedCheckboxes: function () {\n            return jQuery('[name=\"attribute-select\"]:checked');\n        },\n\n        /**\n         * Get buttons configuration for slideout dialog.\n         *\n         * @param {Boolean} isEditMode\n         *\n         * @returns {Array}\n         */\n        getButtonsConfig: function (isEditMode) {\n\n            var self = this,\n                buttonsData;\n\n            buttonsData = [\n                {\n\n                    text: $t('Cancel'),\n                    'class': 'action-scalable cancel',\n\n                    /**\n                     * @param {jQuery.Event} event\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                },\n                {\n\n                    text: isEditMode ? $t('Save') : $t('Insert Attribute'),\n                    class: 'action-primary ' + (isEditMode ? '' : 'disabled'),\n                    attr: {\n                        'id': 'insert_attribute'\n                    },\n\n                    /**\n                     * Insert Attribute\n                     */\n                    click: function () {\n                        self.insertAttribute(self.getSelectedCheckboxes());\n                    }\n                }\n            ];\n\n            return buttonsData;\n        },\n\n        /**\n         * Prepare attributes row.\n         *\n         * @param {String} varValue\n         * @param {*} varLabel\n         * @return {String}\n         * @deprecated This method isn't relevant after ui changes\n         */\n        prepareAttributeRow: function (varValue, varLabel) {\n            var value = varValue.replace(/\"/g, '&quot;').replace(/'/g, '\\\\&#39;');\n\n            return '<a href=\"#\" onclick=\"' +\n                this.insertFunction +\n                '(\\'' +\n                value +\n                '\\');return false;\">' +\n                varLabel +\n                '</a>';\n        },\n\n        /**\n         * Insert attribute into WYSIWYG editor.\n         *\n         * @param selected\n         * @return {Object}\n         */\n        insertAttribute: function (selected) {\n            var windowId = this.dialogWindowId,\n                textareaElm;\n\n            jQuery('#' + windowId).modal('closeModal');\n            textareaElm = $(this.textareaElementId);\n            if (require.defined('wysiwygAdapter')) {\n                require(['wysiwygAdapter'], function (wysiwyg) {\n                    //to support switching between wysiwyg editors\n                    var wysiwygEditorFocused = wysiwyg && wysiwyg.activeEditor();\n\n                    if (wysiwygEditorFocused && wysiwyg.get(this.textareaElementId)) {\n                        if (jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')) {\n                            wysiwyg.setCaretOnElement(this.selectedPlaceholder, 1);\n                        }\n                        selected.each(function () {\n                            wysiwyg.insertContent(attributeDirectiveGenerator.processConfig(this.value), false);\n                        });\n\n                        if (this.selectedPlaceholder\n                            && jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')\n                        ) {\n                            this.selectedPlaceholder.remove();\n                        }\n                    } else if (textareaElm) {\n                        var shouldToggle = textareaElm.visible() === false;\n                        if (shouldToggle) {\n                            wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                        }\n\n                        this.insertAttributeViaTextarea(textareaElm, selected);\n                        if (shouldToggle) {\n                            wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                        }\n                    }\n                }.bind(this));\n            } else if (textareaElm) {\n                var shouldToggle = textareaElm.visible() === false;\n                if (shouldToggle) {\n                    wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                }\n                this.insertAttributeViaTextarea(textareaElm, selected);\n                if (shouldToggle) {\n                    wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                }\n            }\n\n            return this;\n        },\n\n        insertAttributeViaTextarea: function (textareaElm, selected) {\n            var scrollPos = textareaElm.scrollTop;\n            selected.each(function () {\n                updateElementAtCursor(textareaElm, attributeDirectiveGenerator.processConfig(this.value));\n            });\n            textareaElm.focus();\n            textareaElm.scrollTop = scrollPos;\n            jQuery(textareaElm).change();\n            textareaElm = null;\n        }\n    };\n\n    window.AmastyProductTabsAttributePlugin = {\n        editor: null,\n        attributes: null,\n        textareaId: null,\n\n        /**\n         * Bind editor.\n         *\n         * @param {*} editor\n         */\n        setEditor: function (editor) {\n            this.editor = editor;\n        },\n\n        /**\n         * Load attributes chooser.\n         *\n         * @param {String} url\n         * @param {*} textareaId\n         * @param {Object} selectedElement\n         *\n         * @return {Object}\n         */\n        loadChooser: function (url, textareaId, selectedElement) {\n            this.textareaId = textareaId;\n\n            new Ajax.Request(url, {\n                parameters: {},\n                onComplete: function (transport) {\n                    AmastyProductTabsAttribute.init(this.textareaId, 'AmastyProductTabsAttributePlugin.insertAttribute', this.editor);\n                    AmastyProductTabsAttribute.isEditMode = !!this.getElementAttributePath(selectedElement);\n                    this.attributesContent = transport.responseText;\n                    AmastyProductTabsAttribute.openDialogWindow(this.attributesContent, selectedElement);\n                    AmastyProductTabsAttribute.initUiGrid();\n                }.bind(this)\n            });\n\n            return this;\n        },\n\n        /**\n         * Open attributes chooser window.\n         *\n         * @param {*} attributes\n         * @deprecated This method isn't relevant after ui changes\n         */\n        openChooser: function (attributes) {\n            AmastyProductTabsAttribute.openAttributeChooser(attributes);\n        },\n\n        /**\n         * Insert Attribute.\n         *\n         * @param {*} value\n         *\n         * @return {Object}\n         */\n        insertAttribute: function (value) {\n            if (this.textareaId) {\n                AmastyProductTabsAttribute.init(this.textareaId);\n                AmastyProductTabsAttribute.insertAttribute(value);\n            } else {\n                AmastyProductTabsAttribute.closeDialogWindow();\n                AmastyProductTabsAttribute.insertAttribute(value);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get element Attribute path.\n         *\n         * @param {Object} element\n         * @returns {String}\n         */\n        getElementAttributePath: function (element) {\n            var type, code;\n\n            if (!element || !jQuery(element).hasClass('amcustomtabs-attribute')) {\n                return '';\n            }\n            code = Base64.idDecode(element.getAttribute('id'));\n\n            return code;\n        }\n    };\n});\n","Amasty_CustomTabs/js/form/element/type.js":"define([\n    'Magento_Ui/js/form/element/select'\n], function (select) {\n    return select.extend({\n        getOption: function () {\n            var option = this._super(this.source.data.type),\n                newOption = {\n                    'value': option.value,\n                    'label': option.label\n                };\n            if (this.source.data.type == 2) {\n                newOption.label += ' ' + this.source.data.module_name;\n            }\n\n            return newOption;\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/load-sdk.js":"define(['jquery'], function (jQuery) {\n    return function (container, params, sdkUrl, token, customerId) {\n        return jQuery.Deferred(function (defer) {\n            require([sdkUrl], function () {\n                if (typeof params !== 'object') {\n                    params = {};\n                }\n\n                params.token = token;\n                params.customer_number = customerId;\n\n                window.GenCert.init(container, params);\n                defer.resolve(window.GenCert);\n            });\n        });\n    }\n});\n","ClassyLlama_AvaTax/js/tax-code-update.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\n\ndefine(['jquery', 'domReady!'], function ($) {\n    return function () {\n\t\t$(document).ready(function() {\n\t\t\t// executes when HTML-Document is loaded and DOM is ready\n\t\t\t$('body').on('click', '.search-taxcode-menu li.item', function (event) {\n\t\t\t\tvar taxCode = $(this).attr('data-tax-code');\n\t\t\t\t// remove active class from other element and add it on current element\n\t\t\t\t$('.search-taxcode-menu li.item').removeClass('_active');\n\t\t\t\t$(this).addClass('_active');\n\n\t\t\t\t// update input box value and close dropdown\n\t\t\t\t$('.avatax-tax-code').val(taxCode);\n\t\t\t\t$('.autocomplete-results').html('');\n\t\t\t});\n\n\t\t\t// update input box value and close dropdown on enter\n\t\t\t$('body').on('keyup', '#avatax_code, #tax_avatax_configuration_sales_tax_shipping_tax_code', function (event) {\n\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t$('.autocomplete-results').html('');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n    };\n});\n","ClassyLlama_AvaTax/js/admin-account-add-exemption.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\n\ndefine(['ClassyLlama_AvaTax/js/certificates-sdk'], function (certificatesSdk) {\n    'use strict';\n\n    return function (addExemptionComponent) {\n        addExemptionComponent.prototype.renderSdk = function (element) {\n            certificatesSdk(this.tokenUrl, this.customerId, element, this.sdkParameters).then(this.onSdkLoad);\n        };\n\n        return addExemptionComponent;\n    };\n});\n","ClassyLlama_AvaTax/js/certificates-sdk.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\n\ndefine(['ClassyLlama_AvaTax/js/action/get-sdk-token', 'ClassyLlama_AvaTax/js/load-sdk'], function (sdkToken, loadSdk) {\n    return function (tokenUrl, customerId, container, params) {\n        return sdkToken(tokenUrl, customerId).then(function (sdkUrl, token, customerId) {\n            return loadSdk(container, params, sdkUrl, token, customerId);\n        });\n    }\n});\n","ClassyLlama_AvaTax/js/action/account-add-exemption.js":"define(['jquery', 'uiComponent', 'Magento_Ui/js/modal/modal', 'mage/translate'], function (jQuery, Component, modal, $t) {\n    return Component.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/action/account-add-exemption',\n            exemptionZone: '',\n            availableExemptionZones: [],\n            showSdkView: false,\n            certificateUploadSuccess: false,\n            sdkParameters: {}\n        },\n\n        initialize: function initialize() {\n            this._super();\n\n            this.observe(['showSdkView', 'exemptionZone', 'certificateUploadSuccess']);\n            this.optionsCaption = $t('Select an Exemption Zone');\n            this.onCertificateComplete = this.onCertificateComplete.bind(this);\n            this.onSdkLoad = this.onSdkLoad.bind(this);\n\n            /**\n             * Possible SDK parameters:\n             * - submit_to_stack. Sends the new document to be validated in CertCapture. New certificates are automatically\n             *              validated, unless this behavior is altered using the \"submit_to_stack\". Default is false.\n             * - preview. Allows user to quickly view their new certificate so they can save or print it. Certificate is\n             *              not generated in CertCapture. Default is false.\n             * - customer_list. Appends a page to the generated file that includes \"Customer Number\", \"Customer Name\",\n             *              and \"Customer Address\" of each customer associated with the certificate. Must be called at\n             *              initialization of GenCert API. Default is false.\n             * - upload_only. Disables the ability to complete documents by submitting information to form fields.\n             *              Customers can only upload prefilled documents. Default is false.\n             * - fill_only. Disables the upload of prefilled documents. Customers can only complete documents by\n             *              submitting information to form fields.\n             * - show_files. Displays a download link after document submission.\n             * - edit_purchaser. Allows the customer to edit their information on return visits. To allow customers\n             *              to edit their existing information, use edit_purchaser:true. Default is false.\n             *\n             *  Callback functions (https://app.certcapture.com/gencert2/js):\n             *  - onUpload. Called when a document is uploaded. Access the generated certificate id with \"GenCert.certificateIds\".\n             *  - onCancel. Used to reinitialize GenCert or provide user navigation\n             *  - onManualSubmit. Used to reinitialize GenCert or navigate the user elsewhere. This occurs when nexus\n             *              (exemption matrix) is set to manually collect a document. The user can upload a form when this happens.\n             *  - onInit. After constructor has finished loading\n             *  - beforeShow. Called before the form is shown\n             *  - afterShow. Called after the form is shown\n             *  - beforeValidate. Before form validation\n             *  - onValidateSuccess. After form validation success, before submit\n             *  - onValidateFailure. After form validation failure\n             *  - onCertSuccess. After submission, when certificate is successful.  Access the generated certificate id\n             *              with \"GenCert.certificateIds\"\n             *  - onCertFailure. After submission, when certificate is failure\n             *  - onCancel. User cancels the certificate generation process\n             *  - onNotNeeded. Called when a Zone that does not charge sales tax is chosen\n             *  - onSaveCustomer.\n             *  - onSaveSignature.\n             */\n\n            this.sdkParameters = jQuery.extend({\n                // Include if cert is a renewal?\n                upload: true,\n                submit_to_stack: Boolean(Number(this.certificatesAutoValidationDisabled)),\n\n                onCertSuccess: this.onCertificateComplete,\n                onManualSubmit: this.onCertificateComplete,\n                onUpload: this.onCertificateComplete\n            }, this.sdkParameters);\n\n            return this;\n        },\n\n        setModalElement: function setModalElement(element) {\n            this.modalElement = element;\n            modal(\n                {\n                    'type': 'popup',\n                    'modalClass': 'account-add-exemption-modal',\n                    'responsive': true,\n                    'innerScroll': true,\n                    'buttons': []\n                },\n                jQuery(this.modalElement)\n            );\n\n            jQuery(this.modalElement).on('modalclosed', function () {\n                this.exemptionZone('');\n                this.showSdkView(false);\n\n                if (this.certificateUploadSuccess() === true) {\n                    window.location.reload();\n                }\n            }.bind(this));\n        },\n\n        onCertificateComplete: function onCertificateComplete() {\n            this.certificateUploadSuccess(true);\n        },\n\n        onSdkLoad: function onSdkLoad(GenCert) {\n            GenCert.setShipZone(this.exemptionZone());\n            GenCert.show();\n        },\n\n        renderSdk: function renderSdk(element) {\n            // This should be implemented through a mixin at the frontend or adminhtml area level\n            throw new Error('Must be implemented');\n        },\n\n        addExemption: function addExemption() {\n            jQuery(this.modalElement).modal('openModal');\n        },\n\n        closeModal: function addExemption() {\n            jQuery(this.modalElement).modal('closeModal');\n        },\n\n        proceedToSdk: function proceedToSdk() {\n            if (this.exemptionZone() === '' || this.exemptionZone() === void(0)) {\n                return;\n            }\n\n            this.showSdkView(true);\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/action/get-sdk-token.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(['jquery'], function (jQuery) {\n    'use strict';\n\n    // Grab a new token 5 minutes before the previous one expires to ensure our requests will have a valid token\n    var expirationBuffer = 5 * 60 * 1000;\n    var avaTaxTokenStorageKey = 'admin-avatax-token';\n    var requiredInfo = [\n        'token',\n        'customer',\n        'expires',\n        'sdk_url'\n    ];\n\n    function generateTokenResolve(tokenInfo) {\n        return jQuery.Deferred().resolve(tokenInfo.sdk_url, tokenInfo.token);\n    }\n\n    return function getSdkToken(tokenUrl, customerId) {\n        var tokenInfo = window.localStorage.getItem(avaTaxTokenStorageKey);\n\n        if(tokenInfo === null) {\n            tokenInfo = '{}';\n        }\n\n        tokenInfo = JSON.parse(tokenInfo);\n\n        if(tokenInfo === false) {\n            tokenInfo = {};\n        }\n\n        if (tokenInfo[customerId] !== void(0) && tokenInfo[customerId].expires * 1000 > Date.now() + expirationBuffer) {\n            return generateTokenResolve(tokenInfo[customerId]);\n        }\n\n        // Token has expired (or never existed), so remove it from storage\n        delete tokenInfo[customerId];\n\n        return jQuery.ajax({url: tokenUrl, type: 'post', data: {customer_id: customerId}}).then(\n            function (response) {\n                // If we don't have token info, return early\n                if (!requiredInfo.every(function (key) {\n                    return response.hasOwnProperty(key);\n                })) {\n                    return jQuery.Deferred().reject();\n                }\n\n                tokenInfo[customerId] = response;\n\n                // Cache the token in local storage\n                window.localStorage.setItem(avaTaxTokenStorageKey, JSON.stringify(tokenInfo));\n\n                return generateTokenResolve(tokenInfo[customerId]);\n            }\n        );\n    }\n});\n","ClassyLlama_AvaTax/js/action/avalara-customer-information-update.js":"\ndefine([\n    'uiComponent'\n], function (Component) {\n    'use strict';\n\n    return Component.extend({\n\n        /**\n         * @inheritDoc\n         */\n        initialize: function () {\n            this._super();\n        },\n\n        /**\n         * Update customer information at Avalara service\n         */\n        updateCustomerInformationAvalara: function () {\n            if (\"\" !== this.customerUpdateUrl) {\n                window.location.href = this.customerUpdateUrl;\n            }\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/action/avatax-invite-account.js":"define(['jquery', 'uiComponent', 'Magento_Ui/js/modal/modal', 'mage/translate'], function (jQuery, Component, modal, $t) {\n    return Component.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/action/avatax-invite-account',\n            customerId: null,\n            hasDefaultBillingAddress: false,\n            inviteUrl: null\n        },\n\n        inviteCustomer: function addExemption() {\n            jQuery(this.modalElement).modal('openModal');\n        },\n\n        setModalElement: function setModalElement(element) {\n            this.modalElement = element;\n            modal(\n                {\n                    'type': 'popup',\n                    'modalClass': 'avatax-invite-account-modal',\n                    'responsive': true,\n                    'innerScroll': true,\n                    'buttons': []\n                },\n                jQuery(this.modalElement)\n            );\n        },\n\n        closeModal: function addExemption() {\n            jQuery(this.modalElement).modal('closeModal');\n        },\n\n        sendInvite: function sendInvite() {\n            if (confirm('This customer will be synced to AvaTax (using the customer\\'s email and default billing address) and AvaTax will send an email to the customer, asking them to add an exemption certificate in the AvaTax interface. Would you like to proceed?')) {\n                window.location.href = this.inviteUrl;\n            }\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/action/validate-address-request.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(\n    [\n        'jquery',\n        'ClassyLlama_AvaTax/js/model/address-model'\n    ],\n    function (\n        $,\n        addressModel\n    ) {\n        'use strict';\n        return function(url) {\n            var payload = {\n                address: addressModel.originalAddress()\n            };\n            return $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: payload\n            });\n        }\n    }\n);\n","ClassyLlama_AvaTax/js/model/address-model.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(\n    ['ko'],\n    function (ko) {\n        'use strict';\n        var originalAddress = ko.observable(null);\n        var validAddress = ko.observable(null);\n        var selectedAddress = ko.observable(null);\n        var error = ko.observable(null);\n        var isDifferent = ko.observable(null);\n        return {\n            originalAddress: originalAddress,\n            validAddress: validAddress,\n            selectedAddress: selectedAddress,\n            error: error,\n            isDifferent: isDifferent,\n            resetValues: function () {\n                this.originalAddress(null);\n                this.validAddress(null);\n                this.selectedAddress(null);\n                this.error(null);\n                this.isDifferent(null);\n            }\n        };\n    }\n);\n","ClassyLlama_AvaTax/js/model/region-model.js":"/**\n * @category    ClassyLlama\n * @copyright   Copyright (c) 2018 Classy Llama Studios, LLC\n */\ndefine(\n    [\n        'jquery'\n    ],\n    function(\n        $\n    ) {\n        'use strict';\n\n        return {\n            /**\n             * Get list of regions\n             * @returns {Object}\n             */\n            regions: null,\n            setRegions: function(url) {\n                this.regions = $.ajax({\n                    showLoader: false,\n                    url: url,\n                    type: \"POST\",\n                    dataType: 'json',\n                    success: function (response) {\n                        return response;\n                    }\n                });\n            }\n        };\n    }\n);\n","ClassyLlama_AvaTax/js/view/address-validation-form.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(\n    [\n        'jquery',\n        'ko',\n        'mageUtils',\n        'ClassyLlama_AvaTax/js/model/address-model'\n    ],\n    function (\n        $,\n        ko,\n        utils,\n        addressModel\n    ) {\n        'use strict';\n\n        return {\n            validAddressRadioSelector: '.validAddress',\n            originalAddressRadioSelector: '.originalAddress',\n            originalAddressTextSelector: \".originalAddressText\",\n            validAddressTextSelector: \".validAddressText\",\n            errorMessageContainerSelector: '.errorMessageContainer',\n            addressOptionSelector: '.addressOption',\n            addressRadioGroupName: 'addressToUse',\n            selectedAddressClass: 'selected',\n            addressValidationFormSelector: '.validateAddressForm',\n            validationForm: '#co-validate-form',\n\n            bindTemplate: function (containerSelector, config, templateName) {\n                var template = $(\"<div class='\" + this.addressValidationFormSelector.replace('.', '') + \"' data-bind=\\\"template: { name: '\" + templateName + \"', data: data }\\\"/>\");\n\n                function ViewModel() {\n                    this.data = {\n                        choice: config.hasChoice,\n                        instructions: config.instructions,\n                        errorInstructions: config.errorInstructions,\n                        uid: utils.uniqueid()\n                    }\n                }\n\n                ko.applyBindings(new ViewModel(), template.get(0));\n\n                $(containerSelector).html(template);\n            },\n\n            fillValidateForm: function (form) {\n                this.reset(form);\n\n                if (addressModel.error() != null) {\n                    $(form).find(this.errorMessageContainerSelector).show();\n                    $(form).find(this.errorMessageContainerSelector + \" .instructions .error-message\").html(addressModel.error());\n                    $(form).find(this.errorMessageContainerSelector + \" \" + this.originalAddressTextSelector).html(this.buildOriginalAddress(addressModel.originalAddress()));\n                    $(form).find('.yesError').show();\n                    $(form).find('.noError').hide();\n                    $(form).find(this.addressValidationFormSelector).show();\n                    return;\n                } else {\n                    $(form).find('.yesError').hide();\n                    $(form).find('.noError').show();\n                    $(form).find(this.errorMessageContainerSelector).hide();\n                }\n\n                var originalAddress = this.buildOriginalAddress(addressModel.originalAddress());\n                var validAddress = this.buildValidAddress(addressModel.originalAddress(), addressModel.validAddress());\n\n                if (!addressModel.isDifferent()) {\n                    $(form).find(this.addressValidationFormSelector).hide();\n                    return;\n                }\n\n                var userCanChooseOriginalAddress = $(this.originalAddressTextSelector).length;\n                if (userCanChooseOriginalAddress) {\n                    $(form).find(this.originalAddressTextSelector).html(originalAddress);\n                    this.toggleRadioSelected(form, this.addressRadioGroupName, this.selectedAddressClass);\n                }\n\n                $(form).find(this.validAddressTextSelector).html(validAddress);\n                $(form).find(this.addressValidationFormSelector).show();\n            },\n\n            buildValidAddress: function (originalAddress, validAddress) {\n                var result = \"\";\n\n                // Name\n                result += this.encodeHtml(originalAddress.firstname + \" \" + originalAddress.lastname) + \"<br/>\";\n\n                // Streets\n                var maxStreets = 3;\n                for (var i = 0; i < maxStreets; i++) {\n                    var originalStreet = typeof originalAddress.street[i] === 'undefined' ? '' : originalAddress.street[i];\n                    var validStreet = typeof validAddress.street[i] === 'undefined' ? '' : validAddress.street[i];\n                    var validatedStreet = this.diffAddressField(originalStreet, validStreet);\n                    result += validatedStreet;\n                    result += validatedStreet.length ? \"<br/>\" : \"\";\n                }\n\n                // City\n                result += this.diffAddressField(originalAddress.city, validAddress.city) + \", \";\n\n                // State - The region_code isn't used for customer addresses\n                if (typeof originalAddress.region_code !== 'undefined') {\n                    result += this.diffAddressField(originalAddress.region_code, validAddress.region_code) + \" \";\n                } else {\n                    result += this.diffAddressField(originalAddress.region, validAddress.region) + \" \";\n                }\n\n                // Postal code\n                result += this.diffAddressField(originalAddress.postcode, validAddress.postcode);\n\n                return result;\n            },\n\n            buildOriginalAddress: function (originalAddress) {\n                var result = \"\";\n\n                var parent = this;\n\n                // Name\n                result += this.encodeHtml(originalAddress.firstname + \" \" + originalAddress.lastname) + \"<br/>\";\n\n                // Streets\n                $.each(originalAddress.street, function (index, value) {\n                    if (value !== \"\") {\n                        result += parent.encodeHtml(value) + \"<br/>\";\n                    }\n                });\n\n                // City\n                result += this.encodeHtml(originalAddress.city) + \", \";\n\n                // State - The region_code isn't used for customer addresses\n                if (typeof originalAddress.region_code !== 'undefined') {\n                    result += this.encodeHtml(originalAddress.region_code) + \" \";\n                } else {\n                    result += this.encodeHtml(originalAddress.region) + \" \";\n                }\n\n                // Postal code\n                result += this.encodeHtml(originalAddress.postcode);\n\n                return result;\n            },\n\n            /**\n             * @param form\n             * @param radioGroupName\n             * @param selectedClass\n             */\n            toggleRadioSelected: function (form, radioGroupName, selectedClass) {\n                var self = this;\n                $(form).find('input[name=' + radioGroupName + ']:radio').on('change', function () {\n                    $(form).find(self.validationForm + \" .selected\")\n                        .removeClass(selectedClass)\n                        .parent()\n                        .find('input[name=' + radioGroupName + ']:checked')\n                        .parents(self.addressOptionSelector)\n                        .addClass(selectedClass);\n\n                    if ($(form).find(self.validAddressRadioSelector).is(':checked')) {\n                        addressModel.selectedAddress(addressModel.validAddress());\n                    } else {\n                        addressModel.selectedAddress(addressModel.originalAddress());\n                    }\n                });\n            },\n\n            updateFormFields: function (form) {\n                var field = 'street';\n                $(form).find(\"input[name*=\" + field + \"]\").each(function (index) {\n                    var street;\n                    if (index < addressModel.selectedAddress()[field].length) {\n                        street = $(form).find(\"input[name*=\" + field + \"]\").eq(index);\n                    } else {\n                        street = $(form).find(\"input[name*=\" + field + \"]\").eq(index).attr('value', '');\n                    }\n\n                    if (street.val() !== addressModel.selectedAddress()[field][index]) {\n                        $(street).val(addressModel.selectedAddress()[field][index]).trigger('change');\n                    }\n                });\n\n                this.updateFieldValue(form, 'city');\n                this.updateFieldValue(form, 'region');\n                this.updateFieldValue(form, 'region_id');\n                this.updateFieldValue(form, 'country_id');\n                this.updateFieldValue(form, 'postcode');\n            },\n\n            updateFieldValue: function (form, field) {\n                var fieldElement = $(form).find(\"input[name*=\" + field + \"]\");\n                if (['country_id', 'region_id'].indexOf(field) > -1) {\n                    fieldElement = $(form).find(\"select[name*=\" + field + \"]\");\n                }\n                if (typeof addressModel.selectedAddress()[field] !== \"undefined\" && fieldElement.val() !== addressModel.selectedAddress()[field]) {\n                    $(fieldElement).val(addressModel.selectedAddress()[field]).trigger('change');\n                }\n            },\n\n            diffAddressField: function (o, n) {\n                o = this.encodeHtml(o);\n                n = this.encodeHtml(n);\n                if(o !== n) {\n                    addressModel.isDifferent(true);\n                    if (n.length) {\n                        n = '<span class=\"address-field-changed\">' + n + '</span>';\n                    }\n                }\n                return n;\n            },\n\n            reset: function (form) {\n                // isDifferent() must be reset to false every time an address is validated or you could get a false\n                // positive saying the address is different because it was in the last address that was validated\n                addressModel.isDifferent(false);\n                addressModel.selectedAddress(addressModel.validAddress());\n                $(form).find(this.originalAddressRadioSelector).prop('checked', false);\n                $(form).find(this.validAddressRadioSelector).prop('checked', true);\n                $(form).find(this.originalAddressRadioSelector).parents(this.addressOptionSelector).removeClass(this.selectedAddressClass);\n                $(form).find(this.validAddressRadioSelector).parents(this.addressOptionSelector).addClass(this.selectedAddressClass);\n                $(form).find(this.addressValidationFormSelector).hide();\n            },\n\n            encodeHtml: function (str) {\n                // This function will escape the contents of the provided string\n                // Sourced from http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/#the-best-way-to-escape-html-in-javascript\n                var div = document.createElement('div');\n                div.appendChild(document.createTextNode(str));\n                return div.innerHTML;\n            }\n        }\n    }\n);\n","ClassyLlama_AvaTax/js/view/validation-response-handler.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(\n    [\n        'jquery',\n        'Magento_Ui/js/modal/alert',\n        'ClassyLlama_AvaTax/js/model/address-model',\n        'ClassyLlama_AvaTax/js/view/address-validation-form-admin'\n    ],\n    function (\n        $,\n        alert,\n        addressModel,\n        addressValidationForm\n    ) {\n        'use strict';\n\n        return {\n            validationResponseHandler: function (response, settings, form) {\n                addressModel.error(null);\n                if (typeof response !== 'undefined') {\n                    if (typeof response === 'string') {\n                        addressModel.error(response);\n                    } else {\n                        addressModel.validAddress(response);\n                    }\n                    addressValidationForm.fillValidateForm(form, settings);\n                    if (addressModel.error() == null && !addressModel.isDifferent()) {\n                        alert({\n                            title: $.mage.__('Success'),\n                            content: $.mage.__('This address is already valid.')\n                        });\n                    }\n                }\n            }\n        };\n    }\n);\n","ClassyLlama_AvaTax/js/view/address-validation-modal.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'ClassyLlama_AvaTax/js/view/address-validation-form',\n    'ClassyLlama_AvaTax/js/model/address-model',\n    'ClassyLlama_AvaTax/js/action/validate-address-request',\n    'ClassyLlama_AvaTax/js/view/validation-response-handler',\n\n    // No object assigned to below dependencies\n    'ClassyLlama_AvaTax/js/lib/serialize-form',\n    'ClassyLlama_AvaTax/js/lib/event.simulate',\n    'Magento_Ui/js/modal/modal',\n    'prototype'\n], function(\n    jQuery,\n    alert,\n    addressValidationForm,\n    addressModel,\n    validateAddressRequest,\n    validationResponseHandler\n){\n\n    jQuery.widget('ClassyLlama_AvaTax.addressValidationButton', jQuery.mage.modal, {\n        options: {\n            title: jQuery.mage.__('Verify Customer Address'),\n            modalClass: 'validationModal',\n            focus: '.validationModal .action-primary',\n            responsive: true,\n            closeText: jQuery.mage.__('Close'),\n            buttons: [\n                {\n                    text: jQuery.mage.__('Edit This Address'),\n                    class: 'action-secondary action-dismiss',\n                    click: function () {\n                        this.closeModal();\n                    }\n                },\n                {\n                    text: jQuery.mage.__('Use This Address'),\n                    class: 'action-primary action primary',\n                    click: function () {\n                        if (addressModel.error() == null) {\n                            addressValidationForm.updateFormFields(this.addressForm);\n                            if (addressModel.isDifferent() && addressModel.selectedAddress() == addressModel.validAddress()) {\n                                if (this.addressType == 'billing' && jQuery('#order-shipping_same_as_billing').is(':checked')) {\n                                    // Update shipping address with billing newly validation billing information.\n                                    // Need to use Prototype to trigger event since events are bound with Prototype and\n                                    // jQuery.trigger() doesn't work. See AdminOrder.bindAddressFields for bind logic.\n                                    $('order-billing_address_fields')\n                                        .select('input', 'select', 'textarea')\n                                        .first()\n                                        .simulate('change');\n                                }\n                                if (this.addressType == 'shipping') {\n                                    // A simulated change is also necessary when changes are made to the shipping\n                                    // address in order to update the available shipping methods.\n                                    $('order-shipping_address_fields')\n                                        .select('input', 'select', 'textarea')\n                                        .first()\n                                        .simulate('change');\n                                }\n                            }\n                        }\n                        this.closeModal();\n                    }\n                }\n            ],\n            hasChoice: 1\n        },\n        validationButtonContainer: \".validateAddressButton\",\n        validationContainer: '.validationModal .modal-content > div',\n        validationForm: '#co-validate-form',\n        editAddressLink: '.validateAddressForm a',\n        addressForm: null,\n        addressType: null,\n\n        _create: function () {\n            this._super();\n            var self = this;\n\n            addressValidationForm.bindTemplate(this.validationContainer, this.options, 'ClassyLlama_AvaTax/baseValidateAddress');\n\n            jQuery(document).on('click', self.validationButtonContainer, function(event) {\n                self.validateAddress(event);\n            });\n            // When the 'Edit this address' link in the instructions is clicked, close the modal\n            jQuery(document).on('click', self.validationContainer + ' .instructions .edit-address', function () {\n                self.closeModal();\n            });\n        },\n\n        validateAddress: function (event) {\n            var settings = {\n                validationEnabled: this.options.validationEnabled,\n                errorInstructions: this.options.errorInstructions,\n                hasChoice: this.options.hasChoice,\n                countriesEnabled: this.options.countriesEnabled\n            };\n            this.addressType = jQuery(event.target).data('address-type');\n            var form = jQuery('#order-' + this.addressType + '_address');\n            this.addressForm = form;\n            var addressObject = jQuery(form).find(\" *:input\").serializeObject()['order'][this.addressType + \"_address\"];\n            // The region field is empty initially and updated with js as the page loads but the value change is not\n            // reflected in the dom so it is necessary to set the region field manually\n            addressObject['region'] = jQuery(\"#order-\" + this.addressType + \"_address_region_id option[value='\" + addressObject.region_id + \"']\").attr('title');\n            addressModel.resetValues();\n            var inCountry = jQuery.inArray(addressObject.country_id, settings.countriesEnabled.split(',')) >= 0;\n            if (inCountry) {\n                addressModel.originalAddress(addressObject);\n                jQuery('body').trigger('processStart');\n                var self = this;\n                validateAddressRequest(this.options.baseUrl).done(function (response) {\n                    addressModel.selectedAddress(addressModel.validAddress());\n                    validationResponseHandler.validationResponseHandler(response, settings, self.validationContainer);\n                    jQuery('.validateAddressForm').show();\n                    if (addressModel.isDifferent() || addressModel.error() != null) {\n                        self.openModal();\n                    }\n                    jQuery('body').trigger('processStop');\n                }).fail(function () {\n                    alert({\n                        title: jQuery.mage.__('Error'),\n                        content: jQuery.mage.__('The address could not be validated as entered. Please make sure all required fields have values and contain properly formatted values.')\n                    });\n                    jQuery('body').trigger('processStop');\n                });\n            } else {\n                jQuery(form).find(this.validationContainer).hide();\n                alert({\n                    title: jQuery.mage.__('Error'),\n                    content: jQuery.mage.__('Address validation is not enabled for the country you selected.')\n                });\n            }\n        }\n    });\n\n    return jQuery.ClassyLlama_AvaTax.addressValidationButton;\n});\n","ClassyLlama_AvaTax/js/view/address-validation-form-admin.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(\n    [\n        'underscore',\n        'ClassyLlama_AvaTax/js/view/address-validation-form',\n        'ClassyLlama_AvaTax/js/model/region-model'\n    ],\n    function (\n        _,\n        addressValidationForm,\n        regionModel\n    ) {\n        'use strict';\n\n        return _.extend({}, addressValidationForm, {\n\n            // Override the base function to add the additional region data that is missing in the backend\n            buildOriginalAddress: function (originalAddress) {\n                try {\n                    // Get country data JSON from region model\n                    var countryData = regionModel.regions.responseJSON;\n\n                    if (originalAddress.region_id && countryData[originalAddress.country_id]) {\n                        // A region ID was provided and the provided country ID has region data set\n                        var region = countryData[originalAddress.country_id][originalAddress.region_id];\n                        if (region) {\n                            // Found a matching region\n                            originalAddress.region = region['name'];\n                        }\n                    }\n                } catch (error) {\n                    // Don't need to do anything here\n                }\n\n                // Call through to the parent to proceed normally\n                return addressValidationForm.buildOriginalAddress.call(this, originalAddress);\n\n            }\n        });\n    }\n);\n","ClassyLlama_AvaTax/js/view/certificates-grid.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract',\n    'mage/translate',\n    'Magento_Ui/js/modal/confirm'\n], function (\n    $,\n    Abstract,\n    $t,\n    confirm\n) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/view/certificates-grid',\n            shouldShowWarning: false\n        },\n\n        handleDelete: function(unlinkUrl) {\n            confirm({\n                title: $t('Invalidate Certificate'),\n                content: $t('Are you sure you\u2019d like to invalidate this certificate?'),\n                actions: {\n                    confirm: function() {\n                        //make delete request.\n                        window.location = unlinkUrl;\n                    }\n                }\n            });\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/lib/serialize-form.js":"/**\n * jQuery serializeObject\n * @copyright 2014, macek <paulmacek@gmail.com>\n * @link https://github.com/macek/jquery-serialize-object\n * @license BSD\n * @version 2.5.0\n */\n!function(e,i){if(\"function\"==typeof define&&define.amd)define([\"exports\",\"jquery\"],function(e,r){return i(e,r)});else if(\"undefined\"!=typeof exports){var r=require(\"jquery\");i(exports,r)}else i(e,e.jQuery||e.Zepto||e.ender||e.$)}(this,function(e,i){function r(e,r){function n(e,i,r){return e[i]=r,e}function a(e,i){for(var r,a=e.match(t.key);void 0!==(r=a.pop());)if(t.push.test(r)){var u=s(e.replace(/\\[\\]$/,\"\"));i=n([],u,i)}else t.fixed.test(r)?i=n([],r,i):t.named.test(r)&&(i=n({},r,i));return i}function s(e){return void 0===h[e]&&(h[e]=0),h[e]++}function u(e){switch(i('[name=\"'+e.name+'\"]',r).attr(\"type\")){case\"checkbox\":return\"on\"===e.value?!0:e.value;default:return e.value}}function f(i){if(!t.validate.test(i.name))return this;var r=a(i.name,u(i));return l=e.extend(!0,l,r),this}function d(i){if(!e.isArray(i))throw new Error(\"formSerializer.addPairs expects an Array\");for(var r=0,t=i.length;t>r;r++)this.addPair(i[r]);return this}function o(){return l}function c(){return JSON.stringify(o())}var l={},h={};this.addPair=f,this.addPairs=d,this.serialize=o,this.serializeJSON=c}var t={validate:/^[a-z_][a-z0-9_]*(?:\\[(?:\\d*|[a-z0-9_]+)\\])*$/i,key:/[a-z0-9_]+|(?=\\[\\])/gi,push:/^$/,fixed:/^\\d+$/,named:/^[a-z0-9_]+$/i};return r.patterns=t,r.serializeObject=function(){return new r(i,this).addPairs(this.serializeArray()).serialize()},r.serializeJSON=function(){return new r(i,this).addPairs(this.serializeArray()).serializeJSON()},\"undefined\"!=typeof i.fn&&(i.fn.serializeObject=r.serializeObject,i.fn.serializeJSON=r.serializeJSON),e.FormSerializer=r,r});\n","ClassyLlama_AvaTax/js/lib/event.simulate.js":"/**\n * Event.simulate(@element, eventName[, options]) -> Element\n *\n * - @element: element to fire event on\n * - eventName: name of event to fire (only MouseEvents and HTMLEvents interfaces are supported)\n * - options: optional object to fine-tune event properties - pointerX, pointerY, ctrlKey, etc.\n *\n *    $('foo').simulate('click'); // => fires \"click\" event on an element with id=foo\n *\n **/\n(function(){\n\n    var eventMatchers = {\n        'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,\n        'MouseEvents': /^(?:click|mouse(?:down|up|over|move|out))$/\n    }\n    var defaultOptions = {\n        pointerX: 0,\n        pointerY: 0,\n        button: 0,\n        ctrlKey: false,\n        altKey: false,\n        shiftKey: false,\n        metaKey: false,\n        bubbles: true,\n        cancelable: true\n    }\n\n    Event.simulate = function(element, eventName) {\n        var options = Object.extend(defaultOptions, arguments[2] || { });\n        var oEvent, eventType = null;\n\n        element = $(element);\n\n        for (var name in eventMatchers) {\n            if (eventMatchers[name].test(eventName)) { eventType = name; break; }\n        }\n\n        if (!eventType)\n            throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');\n\n        if (document.createEvent) {\n            oEvent = document.createEvent(eventType);\n            if (eventType == 'HTMLEvents') {\n                oEvent.initEvent(eventName, options.bubbles, options.cancelable);\n            }\n            else {\n                oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,\n                    options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,\n                    options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);\n            }\n            element.dispatchEvent(oEvent);\n        }\n        else {\n            options.clientX = options.pointerX;\n            options.clientY = options.pointerY;\n            oEvent = Object.extend(document.createEventObject(), options);\n            element.fireEvent('on' + eventName, oEvent);\n        }\n        return element;\n    }\n\n    Element.addMethods({ simulate: Event.simulate });\n})()\n","ClassyLlama_AvaTax/js/ui/grid/columns/comma-separated.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'ClassyLlama_AvaTax/ui/grid/cells/comma-separated'\n        },\n\n        hasValues: function(row) {\n            return (row[this.index].length > 0);\n        },\n\n        /**\n         * @param {Object} row - Data to be preprocessed\n         * @returns {String}\n         */\n        getLabel: function(row) {\n            return row[this.index].join(', ');\n        },\n    });\n\n});","ClassyLlama_AvaTax/js/form/certificates-fieldset.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(['Magento_Ui/js/form/components/fieldset'], function (Fieldset) {\n    'use strict';\n\n    return Fieldset.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/form/certificates-fieldset'\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/form/address/element/validationForm.js":"\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract'\n], function ($, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/form/address/element/adminValidateAddress'\n        },\n        baseTemplate: 'ClassyLlama_AvaTax/form/address/element/baseValidateAddress',\n        choice: 1,\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super();\n            $(document).on('click', '.avataxValidateAddressForm .instructions[data-uid=\"' + this.uid + '\"] .edit-address', function () {\n                $('.modal-inner-wrap').animate({scrollTop: $('.modal-slide').offset().top}, 1000);\n            });\n            return this;\n        },\n\n        /**\n         * @returns {string}\n         */\n        getBaseValidateAddressTemplate: function () {\n            return this.baseTemplate;\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/form/address/element/button.js":"\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract',\n    'Magento_Ui/js/modal/alert',\n    'ClassyLlama_AvaTax/js/action/validate-address-request',\n    'ClassyLlama_AvaTax/js/model/address-model',\n    'ClassyLlama_AvaTax/js/view/validation-response-handler',\n    'ClassyLlama_AvaTax/js/view/address-validation-form-admin',\n    'ClassyLlama_AvaTax/js/lib/serialize-form'                      // jQuery serializeObject\n], function (\n    $,\n    Abstract,\n    alert,\n    validateAddressRequest,\n    addressModel,\n    validationResponseHandler,\n    addressValidationForm\n) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            template: 'ClassyLlama_AvaTax/form/address/element/button'\n        },\n        formSelector: 'aside .modal-component .form-inline fieldset',\n        addressValidationFormSelector: '.avataxValidateAddressForm',\n        radioGroupName: 'addressToUse',\n\n        /**\n         * Validate address\n         *\n         * @param data\n         * @param event\n         */\n        validateAddress: function (data, event) {\n            var self = this,\n                settings = {\n                validationEnabled: this.validationEnabled,\n                hasChoice: 1,\n                countriesEnabled: this.countriesEnabled,\n                errorInstructions: this.errorInstructions,\n                validationFormSelector: this.addressValidationFormSelector\n                },\n                form = $(event.target).closest(this.formSelector),\n                hasErrors = form.find('.admin__field-error:visible').length;\n\n            if (!hasErrors) {\n                var addressObject = $(form).serializeObject(),\n                    inCountry = $.inArray(addressObject.country_id, settings.countriesEnabled.split(',')) >= 0;\n                if (inCountry) {\n                    addressModel.originalAddress(addressObject);\n                    $('body').trigger('processStart');\n                    validateAddressRequest(this.baseUrl)\n                        .done(function (response) {\n                            addressModel.selectedAddress(addressModel.validAddress());\n                            validationResponseHandler.validationResponseHandler(response, settings, form);\n                            self.toggleAddressToUse(form);\n                            if (addressModel.isDifferent() && addressModel.error() == null) {\n                                addressValidationForm.updateFormFields(form);\n                            }\n                            jQuery('body').trigger('processStop');\n                        })\n                        .fail(function () {\n                            alert({\n                                title: $.mage.__('Error'),\n                                content: $.mage.__('The address could not be validated as entered. Please make sure all required fields have values and contain properly formatted values.')\n                            });\n                            $('body').trigger('processStop');\n                        });\n                } else {\n                    $(form).find(this.addressValidationFormSelector).hide();\n                    alert({\n                        title: $.mage.__('Error'),\n                        content: $.mage.__('Address validation is not enabled for the country you selected.')\n                    });\n                }\n            } else {\n                $(form).find(this.addressValidationFormSelector).hide();\n                alert({\n                    title: $.mage.__('Error'),\n                    content: $.mage.__('Please fix the form validation errors above and try again.')\n                });\n            }\n        },\n\n        /**\n         * Toggle addresses\n         *\n         * @param form\n         */\n        toggleAddressToUse: function (form) {\n            var self = this;\n            $(form).find('input[name=' + self.radioGroupName + ']:radio').on('change', function () {\n                addressValidationForm.updateFormFields(form);\n            });\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/form/element/validationForm.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract'\n], function (\n    $,\n    Abstract\n) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            links: {\n                value: ''\n            },\n            template: 'ClassyLlama_AvaTax/form/element/adminValidateAddress'\n        },\n        baseTemplate: 'ClassyLlama_AvaTax/baseValidateAddress',\n        choice: 1,\n\n        initialize: function () {\n            this._super()\n                .initFormId();\n            $(document).on('click', '.validateAddressForm .instructions[data-uid=\"' + this.uid + '\"] .edit-address', function () {\n                $('html, body').animate({scrollTop: $(\"#container\").offset().top}, 1000);\n            });\n\n            return this;\n        },\n\n        initFormId: function () {\n            var namespace;\n\n            if (this.formId) {\n                return this;\n            }\n\n            namespace = this.name.split('.');\n            this.formId = namespace[0];\n\n            return this;\n        },\n\n        getBaseValidateAddressTemplate: function () {\n            return this.baseTemplate;\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/form/element/button.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2016 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract',\n    'Magento_Ui/js/modal/alert',\n    'ClassyLlama_AvaTax/js/action/validate-address-request',\n    'ClassyLlama_AvaTax/js/model/address-model',\n    'ClassyLlama_AvaTax/js/view/validation-response-handler',\n    'ClassyLlama_AvaTax/js/view/address-validation-form-admin',\n\n    // No object assigned to below dependencies\n    'ClassyLlama_AvaTax/js/lib/serialize-form'\n], function (\n    $,\n    Abstract,\n    alert,\n    validateAddressRequest,\n    addressModel,\n    validationResponseHandler,\n    addressValidationForm\n) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            links: {\n                value: ''\n            },\n            template: 'ClassyLlama_AvaTax/form/element/button'\n        },\n\n        addressComponentSelector: '.address-item-edit',\n        formSelector: '.address-item-edit-content fieldset',\n        validateButtonSelector: '.validateButton',\n        addressValidationFormSelector: '.validateAddressForm',\n        radioGroupName: 'addressToUse',\n        selectedClass: 'selected',\n\n        initialize: function () {\n            this._super()\n                .initFormId();\n\n            return this;\n        },\n\n        initFormId: function () {\n            var namespace;\n\n            if (this.formId) {\n                return this;\n            }\n\n            namespace = this.name.split('.');\n            this.formId = namespace[0];\n\n            return this;\n        },\n\n        validateAddress: function (data, event) {\n            var self = this;\n            var settings = {\n                validationEnabled: this.validationEnabled,\n                hasChoice: 1,\n                countriesEnabled: this.countriesEnabled,\n                errorInstructions: this.errorInstructions,\n                validationFormSelector: this.addressValidationFormSelector\n            };\n            var form = $(event.target).closest(this.formSelector);\n            var hasErrors = form.find('.admin__field-error:visible').length;\n            if (!hasErrors) {\n                // Match numbers\n                var addressId = data.parentScope.split('.')[2];\n                var addressObject = $(form).serializeObject()['address'][addressId];\n                var inCountry = $.inArray(addressObject.country_id, settings.countriesEnabled.split(',')) >= 0;\n                if (inCountry) {\n                    addressModel.originalAddress(addressObject);\n                    $('body').trigger('processStart');\n                    validateAddressRequest(this.baseUrl).done(function (response) {\n                        addressModel.selectedAddress(addressModel.validAddress());\n                        validationResponseHandler.validationResponseHandler(response, settings, form);\n                        self.toggleAddressToUse(form);\n                        if (addressModel.isDifferent() && addressModel.error() == null) {\n                            addressValidationForm.updateFormFields(form);\n                        }\n                        jQuery('body').trigger('processStop');\n                    }).fail(function () {\n                        alert({\n                            title: $.mage.__('Error'),\n                            content: $.mage.__('The address could not be validated as entered. Please make sure all required fields have values and contain properly formatted values.')\n                        });\n                        $('body').trigger('processStop');\n                    });\n                } else {\n                    $(form).find(this.addressValidationFormSelector).hide();\n                    alert({\n                        title: $.mage.__('Error'),\n                        content: $.mage.__('Address validation is not enabled for the country you selected.')\n                    });\n                }\n            } else {\n                $(form).find(this.addressValidationFormSelector).hide();\n                alert({\n                    title: $.mage.__('Error'),\n                    content: $.mage.__('Please fix the form validation errors above and try again.')\n                });\n            }\n        },\n\n        toggleAddressToUse: function (form) {\n            var self = this;\n            $(form).find('input[name=' + self.radioGroupName + ']:radio').on('change', function () {\n                addressValidationForm.updateFormFields(form);\n            });\n        }\n    });\n});\n","ClassyLlama_AvaTax/js/form/field/company-code.js":"/**\n * ClassyLlama_AvaTax\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n *\n * @copyright  Copyright (c) 2018 Avalara, Inc.\n * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n */\ndefine(['jquery', 'uiElement', 'underscore', 'mage/translate', 'mage/url'], function (jQuery, Element, _, $t) {\n    return Element.extend({\n        defaults: {\n            url: null,\n            companyIdToCompanyCodeMap: [],\n            accountNumberId: null,\n            licenseKeyId: null,\n            companyCodeId: null\n        },\n\n        /**\n         * Initialize component\n         *\n         * @param {Object} config\n         * @param {HTMLElement} idElement\n         * @returns {Element}\n         */\n        initialize: function initialize(config, idElement) {\n            this._super();\n\n            _.bindAll(this, 'fetchAndUpdateCompanies', 'updateCompanyCodeFromCompanyId');\n\n            this.idElement = idElement;\n            this.accountNumberElement = document.getElementById(this.accountNumberId);\n            this.licenseKeyElement = document.getElementById(this.licenseKeyId);\n            this.companyCodeElement = document.getElementById(this.companyCodeId);\n\n            if (this.accountNumberElement === null || this.licenseKeyElement === null || this.companyCodeElement === null) {\n                return this;\n            }\n\n            // Watch for changes so we can provide instant company codes without the user needing to save the config\n            this.accountNumberElement.addEventListener('change', this.fetchAndUpdateCompanies);\n            this.licenseKeyElement.addEventListener('change', this.fetchAndUpdateCompanies);\n            this.idElement.addEventListener('change', this.updateCompanyCodeFromCompanyId);\n\n            // If we already have values for credentials, fetch company ids\n            if (this.accountNumberElement.value !== null && this.licenseKeyElement.value !== null) {\n                this.fetchAndUpdateCompanies();\n            }\n\n            return this;\n        },\n\n        /**\n         * Returns the scope from the form action to determine how to load the save config settings\n         *\n         * @returns {Object}\n         */\n        getScope: function getScope() {\n            var formScope = document.getElementById('config-edit-form').action.match(/section\\/\\w+\\/(website|store)\\/(\\d+)/i);\n\n            if (formScope === null) {\n                return {\n                    scope_type: 'global'\n                };\n            }\n\n            return {\n                scope: formScope[2],\n                scope_type: formScope[1]\n            };\n        },\n\n        /**\n         * Set the company code hidden input based on the selected company\n         */\n        updateCompanyCodeFromCompanyId: function updateCompanyCodeFromCompanyId() {\n            this.companyCodeElement.value = this.companyIdToCompanyCodeMap[this.idElement.item(this.idElement.selectedIndex).value];\n        },\n\n        /**\n         * Build the company select, and select the currently saved company\n         *\n         * @param {Array} companies\n         * @param {int} currentId\n         */\n        updateCompanyIds: function updateCompanyIds(companies, currentId) {\n            this.idElement.innerHTML = '';\n\n            this.idElement.add(new Option(companies.length > 0 ? $t('--Select a Company--') : $t('No available companies'), '', true, true));\n\n            companies.forEach(function (company) {\n                var companyNameDisplay = company.name;\n\n                if (company.company_code !== null) {\n                    companyNameDisplay = company.company_code + ' - ' + companyNameDisplay;\n                }\n\n                this.companyIdToCompanyCodeMap[company.company_id] = company.company_code;\n                this.idElement.add(new Option(companyNameDisplay, company.company_id, false, company.company_id === currentId));\n                this.updateCompanyCodeFromCompanyId();\n            }.bind(this))\n        },\n\n        /**\n         * Fetch company options and update the drop-down\n         *\n         * @returns {Deferred}\n         */\n        fetchAndUpdateCompanies: function fetchAndUpdateCompanies() {\n            // If account number, license key, or url is null, we can't make any request\n            if (this.url === null || this.accountNumberElement.value === '' || this.licenseKeyElement.value === '') {\n                return jQuery.Deferred().reject();\n            }\n\n            var data = this.getScope();\n\n            data['account_number'] = this.accountNumberElement.value;\n\n            // If license key is obscured, don't send it and use the saved config value\n            if (!RegExp(\"^[*]+$\").test(this.licenseKeyElement.value)) {\n                data['license_key'] = this.licenseKeyElement.value;\n            }\n\n            // We have to manually build the request and prevent native Magento's beforeSend handler,\n            // otherwise the first request when the page loads doesn't work\n            return jQuery.ajax({\n                url: this.url,\n                showLoader: true,\n                type: 'post',\n                data: data\n            }).then((function (response) {\n                this.updateCompanyIds(response.companies, response.current_id)\n            }).bind(this));\n        }\n    });\n});","Meetanshi_ImageClean/js/grid/columns/popup.js":"define([\n    'Magento_Ui/js/grid/columns/column',\n    'jquery',\n    'mage/template',\n    'text!Meetanshi_ImageClean/templates/grid/cells/custom/popup.html',\n    'Magento_Ui/js/modal/modal'\n], function (Column, $, mageTemplate, imagePreviewTemplate) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'ui/grid/cells/html',\n            fieldClass: {\n                'data-grid-html-cell': true\n            }\n        },\n        gethtml: function (row) {\n            return row[this.index + '_img'];\n        },\n        getImages: function (row) {\n            return row[this.index+'_img'];\n        },\n        preview: function (row) {\n            var modalHtml = mageTemplate(\n                imagePreviewTemplate,\n                {\n                    html: this.gethtml(row),\n                    label: '',\n                    customerid:'01',\n                    img: this.getImages(row),\n                }\n            );\n            var previewPopup = $('<div/>').html(modalHtml);\n            previewPopup.modal({\n                title: '',\n                innerScroll: true,\n                modalClass: '_image-box',\n                buttons: []}).trigger('openModal');\n        },\n        getFieldHandler: function (row) {\n            return this.preview.bind(this, row);\n        }\n    });\n});","Magento_AsynchronousOperations/js/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form',\n    'uiRegistry'\n], function (Insert, registry) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            modalProvider: '${ $.parentName }',\n            titlePrefix: '',\n            imports: {\n                changeModalTitle: '${ $.modalProvider }:state'\n            },\n            listens: {\n                responseData: 'afterRetry'\n            },\n            modules: {\n                modal: '${ $.modalProvider }',\n                notificationListing: '${ $.columnsProvider }'\n            }\n        },\n\n        /** @inheritdoc */\n        initConfig: function () {\n            var modalTitleProvider;\n\n            this._super();\n            modalTitleProvider = this.modalTitleProvider.split(':');\n            this.modalTitleTarget = modalTitleProvider[0];\n            this.modalTitlePath = modalTitleProvider[1];\n        },\n\n        /**\n         * Change modal title.\n         *\n         * @param {Boolean} change\n         */\n        changeModalTitle: function (change) {\n            if (change) {\n                registry.get(this.modalTitleTarget, function (target) {\n                    this.modal().setTitle(this.titlePrefix + target.get(this.modalTitlePath));\n                }.bind(this));\n            } else {\n                this.modal().setTitle('');\n            }\n        },\n\n        /**\n         * Action after retry operation.\n         *\n         * @param {Object} data\n         */\n        afterRetry: function (data) {\n            if (!data.error) {\n                this.modal().closeModal();\n                this.notificationListing().reload();\n            }\n        }\n    });\n});\n","Magento_AsynchronousOperations/js/form/error.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        /** @inheritdoc */\n        onUpdate: function () {\n            this.bubble('update', this.hasChanged());\n        }\n    });\n});\n","Magento_AsynchronousOperations/js/grid/listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_AdminNotification/js/grid/listing',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate',\n    'underscore',\n    'jquery'\n], function (Listing, uiAlert, $t, _, $) {\n    'use strict';\n\n    return Listing.extend({\n        defaults: {\n            isAllowed: true,\n            ajaxSettings: {\n                method: 'POST',\n                data: {},\n                url: '${ $.dismissUrl }'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            _.bindAll(this, 'reload', 'onError');\n\n            return this._super();\n        },\n\n        /**\n         * Dismiss all items.\n         */\n        dismissAll: function () {\n            var toDismiss = [];\n\n            _.each(this.rows, function (row) {\n                if (row.dismiss) {\n                    toDismiss.push(row.uuid);\n                }\n            });\n            toDismiss.length && this.dismiss(toDismiss);\n        },\n\n        /**\n         * Dismiss action.\n         *\n         * @param {Array} items\n         */\n        dismiss: function (items) {\n            var config = _.extend({}, this.ajaxSettings);\n\n            config.data.uuid = items;\n            this.showLoader();\n\n            $.ajax(config)\n                .done(this.reload)\n                .fail(this.onError);\n        },\n\n        /**\n         * Success callback for dismiss request.\n         */\n        reload: function () {\n            this.source.reload({\n                refresh: true\n            });\n        },\n\n        /**\n         * Error callback for dismiss request.\n         *\n         * @param {Object} xhr\n         */\n        onError: function (xhr) {\n            this.hideLoader();\n\n            if (xhr.statusText === 'abort') {\n                return;\n            }\n\n            uiAlert({\n                content: $t('Something went wrong.')\n            });\n        }\n    });\n});\n","Magento_Backend/js/delete-with-confirm.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Backend/js/validate-store'\n], function ($, validateStore) {\n    'use strict';\n\n    $.widget('mage.deleteWithConfirm', validateStore, {});\n\n    return $.mage.deleteWithConfirm;\n});\n","Magento_Backend/js/media-uploader.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\n/*global byteConvert*/\ndefine([\n    'jquery',\n    'mage/template',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/form/element/file-uploader',\n    'mage/translate',\n    'jquery/file-uploader'\n], function ($, mageTemplate, alert, FileUploader) {\n    'use strict';\n\n    var fileUploader = new FileUploader({\n        dataScope: '',\n        isMultipleFiles: true\n    });\n\n    fileUploader.initUploader();\n\n    $.widget('mage.mediaUploader', {\n\n        /**\n         *\n         * @private\n         */\n        _create: function () {\n            var self = this,\n                progressTmpl = mageTemplate('[data-template=\"uploader\"]'),\n                isResizeEnabled = this.options.isResizeEnabled,\n                resizeConfiguration = {\n                    action: 'resizeImage',\n                    maxWidth: this.options.maxWidth,\n                    maxHeight: this.options.maxHeight\n                };\n\n            if (!isResizeEnabled) {\n                resizeConfiguration = {\n                    action: 'resizeImage'\n                };\n            }\n\n            this.element.find('input[type=file]').fileupload({\n                dataType: 'json',\n                formData: {\n                    'form_key': window.FORM_KEY\n                },\n                dropZone: this.element.find('input[type=file]').closest('[role=\"dialog\"]'),\n                sequentialUploads: true,\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n                maxFileSize: this.options.maxFileSize,\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                add: function (e, data) {\n                    var fileSize,\n                        tmpl;\n\n                    $.each(data.files, function (index, file) {\n                        fileSize = typeof file.size == 'undefined' ?\n                            $.mage.__('We could not detect a size.') :\n                            byteConvert(file.size);\n\n                        data.fileId = Math.random().toString(33).substr(2, 18);\n\n                        tmpl = progressTmpl({\n                            data: {\n                                name: file.name,\n                                size: fileSize,\n                                id: data.fileId\n                            }\n                        });\n\n                        $(tmpl).appendTo(self.element);\n                    });\n\n                    $(this).fileupload('process', data).done(function () {\n                        data.submit();\n                    });\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                done: function (e, data) {\n                    if (data.result && !data.result.error) {\n                        self.element.trigger('addItem', data.result);\n                    } else {\n                        fileUploader.aggregateError(data.files[0].name, data.result.error);\n                    }\n\n                    self.element.find('#' + data.fileId).remove();\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                progress: function (e, data) {\n                    var progress = parseInt(data.loaded / data.total * 100, 10),\n                        progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\n\n                    self.element.find(progressSelector).css('width', progress + '%');\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                fail: function (e, data) {\n                    var progressSelector = '#' + data.fileId;\n\n                    self.element.find(progressSelector).removeClass('upload-progress').addClass('upload-failure')\n                        .delay(2000)\n                        .hide('highlight')\n                        .remove();\n                },\n\n                stop: fileUploader.uploaderConfig.stop\n            });\n\n            this.element.find('input[type=file]').fileupload('option', {\n                processQueue: [{\n                    action: 'loadImage',\n                    fileTypes: /^image\\/(gif|jpeg|png)$/\n                },\n                resizeConfiguration,\n                {\n                    action: 'saveImage'\n                }]\n            });\n        }\n    });\n\n    return $.mage.mediaUploader;\n});\n","Magento_Backend/js/save-with-confirm.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Backend/js/validate-store'\n], function ($, validateStore) {\n    'use strict';\n\n    $.widget('mage.saveWithConfirm', validateStore, {\n\n        /**\n         * Check is it need to show confirmation popup\n         *\n         * @returns {Boolean}\n         */\n        _needConfirm: function () {\n\n            var storeData = this.settings.storeData,\n\n            /* edit store view*/\n                storeViewEdit = $('[name=\"store[store_id]\"]').length,\n                groupId = $('[name=\"store[group_id]\"]').val(),\n                isNewStoreView = !$('[name=\"store[store_id]\"]').val(),\n\n            /* edit store */\n                storeEdit = $('[name=\"group[group_id]\"]').length,\n                storeId = $('[name=\"group[group_id]\"]').val(),\n                rootCategoryId = $('[name=\"group[root_category_id]\"]').val(),\n                defaultStoreView = $('[name=\"group[default_store_id]\"]').val(),\n\n            /* edit website */\n                websiteEdit = $('[name=\"website[website_id]\"]').length,\n                defaultStore = $('[name=\"website[default_group_id]\"]').val(),\n\n            /* conditions */\n                storeViewUpdated = storeViewEdit && (isNewStoreView || storeData['group_id'] !== groupId),\n                storeUpdated = storeEdit && storeId &&\n                    (rootCategoryId !== null  && storeData['root_category_id'] !== rootCategoryId ||\n                    defaultStoreView !== null && storeData['default_store_id'] !== defaultStoreView),\n                websiteUpdated = websiteEdit && defaultStore !== null && storeData['default_group_id'] !== defaultStore;\n\n            return storeViewUpdated || storeUpdated || websiteUpdated;\n        }\n    });\n\n    return $.mage.saveWithConfirm;\n});\n","Magento_Backend/js/store-switcher.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * @param {Object} storeSwitchConfig\n     */\n    return function (storeSwitchConfig) {\n        var scopeSwitcherHandler;\n\n        (function () {\n            var storesList = $('[data-role=stores-list]');\n\n            storesList.on('click', '[data-value]', function (event) {\n                var val = $(event.target).data('value'),\n                    role = $(event.target).data('role'),\n                    switcher = $('[data-role=' + role + ']');\n\n                event.preventDefault();\n\n                if (!switcher.val() || val !== switcher.val()) {\n\n                    /* Set the value & trigger event */\n                    switcher.val(val).trigger('change');\n                }\n            });\n        })($);\n\n        /**\n         * Switch store scope\n         *\n         * @param {Object} obj\n         * @return void\n         */\n        function switchScope(obj) {\n            var switcher = $(obj),\n                scopeId = switcher.val(),\n                scopeParams = '',\n                switcherParams = {};\n\n            if (scopeId) {\n                scopeParams = switcher.data('param') + '/' + scopeId + '/';\n            }\n\n            if (obj.switchParams) {\n                scopeParams += obj.switchParams;\n            }\n\n            /**\n             * Reload function for switcher\n             */\n            function reload() {\n                var url;\n\n                if (!storeSwitchConfig.isUsingIframe) {\n\n                    if (storeSwitchConfig.switchUrl && storeSwitchConfig.switchUrl.length > 0) {\n                        url = storeSwitchConfig.switchUrl + scopeParams;\n\n                        /* eslint-disable no-undef */\n                        setLocation(url);\n                    }\n\n                } else {\n                    $('#preview_selected_store').val(scopeId);\n                    $('#preview_form').trigger('submit');\n\n                    $('.store-switcher .dropdown-menu li a').each(function () {\n                        var $this = $(this);\n\n                        if ($this.data('role') === 'store-view-id' && $this.data('value') === scopeId) {\n                            $('#store-change-button').html($this.text());\n                        }\n                    });\n\n                    $('#store-change-button').trigger('click');\n                }\n            }\n\n            if (typeof scopeSwitcherHandler !== 'undefined') {\n                switcherParams = {\n                    scopeId: scopeId,\n                    scopeParams: scopeParams,\n                    useConfirm: storeSwitchConfig.useConfirm\n                };\n\n                scopeSwitcherHandler(switcherParams);\n            } else if (storeSwitchConfig.useConfirm) {\n                require([\n                    'Magento_Ui/js/modal/confirm',\n                    'mage/translate'\n                ], function (confirm, $t) {\n                    confirm({\n                        content: $t('Please confirm scope switching. All data that hasn\\'t been saved will be lost.'),\n                        actions: {\n\n                            /**\n                             * Confirm action\n                             */\n                            confirm: function () {\n                                reload();\n                            },\n\n                            /**\n                             * Cancel action\n                             */\n                            cancel: function () {\n                                obj.value = storeSwitchConfig.storeId ? storeSwitchConfig.storeId : '';\n                            }\n                        }\n                    });\n                });\n            } else {\n                reload();\n            }\n        }\n\n        window.scopeSwitcherHandler = scopeSwitcherHandler;\n        window.switchScope = switchScope;\n    };\n});\n","Magento_Backend/js/translate.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* eslint-disable strict */\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    $.extend(true, $, {\n        mage: {\n            translate: (function () {\n                /**\n                 * Key-value translations storage\n                 * @type {Object}\n                 * @private\n                 */\n                var _data = {};\n\n                /**\n                 * Add new translation (two string parameters) or several translations (object)\n                 */\n                this.add = function () {\n                    if (arguments.length > 1) {\n                        _data[arguments[0]] = arguments[1];\n                    } else if (typeof arguments[0] === 'object') {\n                        $.extend(_data, arguments[0]);\n                    }\n                };\n\n                /**\n                 * Make a translation with parsing (to handle case when _data represents tuple)\n                 * @param {String} text\n                 * @return {String}\n                 */\n                this.translate = function (text) {\n                    return typeof _data[text] === 'string' ? _data[text] : text;\n                };\n\n                return this;\n            }())\n        }\n    });\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\n\n    return $.mage.__;\n});\n","Magento_Backend/js/validate-store.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/dataPost',\n    'mage/backend/validation',\n    'Magento_Ui/js/modal/confirm'\n], function ($, jqueryUi, dataPost, validation, modalConfirm) {\n    'use strict';\n\n    $.widget('mage.storeValidation', {\n\n        /**\n         * Validation creation\n         * @protected\n         */\n        _create: function () {\n            var form = this.element[0],\n                validator = $.data(form, 'validator');\n\n            if (validator && validator.settings) {\n                validator.settings.submitHandler = this._saveHandler;\n                validator.settings.confirmCallback = this._needConfirm;\n                $.extend(validator.settings, this.options);\n                $.data(form, 'validator', validator);\n            }\n        },\n\n        /**\n         * Check is it need to show confirmation popup\n         *\n         * @returns {Boolean}\n         */\n        _needConfirm: function () {\n            return true;\n        },\n\n        /**\n         * Save form with confirmation if needed\n         *\n         * @param {Object} form\n         * @private\n         */\n        _saveHandler: function (form) {\n            var formData = {},\n                requestData = {},\n                options = $.data(form, 'validator').settings;\n\n            if ($(form).validation('isValid')) {\n                $.each($(form).serializeArray(), function () {\n                    formData[this.name] = this.value || '';\n                });\n                requestData = {\n                    action: $(form).attr('action'),\n                    data: formData\n                };\n\n                if (options.confirmCallback.call(this)) {\n                    modalConfirm({\n                        title: $.mage.__('Warning message'),\n                        content: $.mage.__('This operation can take a long time'),\n                        actions: {\n                            /**\n                             * 'Confirm' action handler.\n                             */\n                            confirm: function () {\n                                $('body').trigger('processStart');\n                                dataPost().postData(requestData);\n                            }\n                        }\n                    });\n                } else {\n                    dataPost().postData(requestData);\n                }\n            }\n        }\n    });\n\n    return $.mage.storeValidation;\n});\n","Magento_Backend/js/bootstrap/editor.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Variable/variables',\n    'mage/adminhtml/browser'\n]);\n","Magento_Backend/js/dashboard/chart.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*global FORM_KEY*/\ndefine([\n    'jquery',\n    'chartJs',\n    'jquery-ui-modules/widget',\n    'chartjs/chartjs-adapter-moment',\n    'chartjs/es6-shim.min',\n    'moment'\n], function ($, Chart) {\n    'use strict';\n\n    $.widget('mage.dashboardChart', {\n        options: {\n            updateUrl: '',\n            periodSelect: null,\n            periodUnits: [],\n            precision: 0,\n            type: ''\n        },\n        chart: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.createChart();\n\n            if (this.options.periodSelect) {\n                $(document).on('change', this.options.periodSelect, this.refreshChartData.bind(this));\n\n                this.period = $(this.options.periodSelect).val();\n            }\n        },\n\n        /**\n         * @public\n         */\n        createChart: function () {\n            this.chart = new Chart(this.element, this.getChartSettings());\n            this.refreshChartData();\n        },\n\n        /**\n         * @public\n         */\n        refreshChartData: function () {\n            var data = {\n                'form_key': FORM_KEY\n            };\n\n            if (this.options.periodSelect) {\n                this.period = data.period = $(this.options.periodSelect).val();\n            }\n\n            $.ajax({\n                url: this.options.updateUrl,\n                showLoader: true,\n                data: data,\n                dataType: 'json',\n                type: 'POST',\n                success: this.updateChart.bind(this)\n            });\n        },\n\n        /**\n         * @public\n         * @param {Object} response\n         */\n        updateChart: function (response) {\n            $(this.element).toggle(response.data.length > 0);\n            $(this.element).next('.dashboard-diagram-nodata').toggle(response.data.length === 0);\n\n            this.chart.options.scales.xAxis.time.unit = this.options.periodUnits[this.period] ?\n                this.options.periodUnits[this.period] : 'hour';\n            this.chart.data.datasets[0].data = response.data;\n            this.chart.data.datasets[0].label = response.label;\n            this.chart.update();\n        },\n\n        /**\n         * @returns {Object} chart object configuration\n         */\n        getChartSettings: function () {\n            return {\n                type: 'bar',\n                data: {\n                    datasets: [{\n                        yAxisID: 'yAxis',\n                        xAxisID: 'xAxis',\n                        data: [],\n                        backgroundColor: '#f1d4b3',\n                        borderColor: '#eb5202',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    legend: {\n                        onClick: this.handleChartLegendClick,\n                        position: 'bottom'\n                    },\n                    scales: {\n                        xAxis: {\n                            offset: true,\n                            type: 'time',\n                            ticks: {\n                                source: 'data'\n                            }\n                        },\n                        yAxis: {\n                            ticks: {\n                                beginAtZero: true,\n                                precision: this.options.precision\n                            }\n                        }\n                    }\n                }\n            };\n        },\n\n        /**\n         * @public\n         */\n        handleChartLegendClick: function () {\n            // don't hide dataset on clicking into legend item\n        }\n    });\n\n    return $.mage.dashboardChart;\n});\n","Magento_Backend/js/dashboard/totals.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*global FORM_KEY*/\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.dashboardTotals', {\n        options: {\n            updateUrl: '',\n            periodSelect: null\n        },\n        elementId: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.elementId = $(this.element).attr('id');\n\n            if (this.options.periodSelect) {\n                $(document).on('change', this.options.periodSelect, $.proxy(function () {\n                    this.refreshTotals();\n                }, this));\n            }\n        },\n\n        /**\n         * @public\n         */\n        refreshTotals: function () {\n            var periodParam = '';\n\n            if (this.options.periodSelect && $(this.options.periodSelect).val()) {\n                periodParam = 'period/' + $(this.options.periodSelect).val() + '/';\n            }\n\n            $.ajax({\n                url: this.options.updateUrl + periodParam,\n                showLoader: true,\n                data: {\n                    'form_key': FORM_KEY\n                },\n                dataType: 'html',\n                type: 'POST',\n                success: $.proxy(function (response) {\n                    $('#' + this.elementId).replaceWith(response);\n                }, this)\n            });\n        }\n    });\n\n    return $.mage.dashboardTotals;\n});\n","Magento_Sales/js/bootstrap/order-create-index.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Sales/order/create/giftmessage'\n]);\n","Magento_Sales/js/bootstrap/order-post-action.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Sales/order/view/post-wrapper'\n]);\n","Magento_Sales/js/grid/columns/multiselect.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/multiselect'\n], function (Multiselect) {\n    'use strict';\n\n    return Multiselect.extend({\n        /**\n         * Prevent calling this.selectAll(); in parent\n         *\n         * @returns  {Object}\n         */\n        updateState: function () {\n            var selected = this.selected().length,\n                totalRecords = this.totalRecords();\n\n            if (totalRecords && selected === totalRecords && !this.preserveSelectionsOnFilter) {\n                return this;\n            }\n            return this._super();\n        }\n    });\n});\n","Magento_Sales/order/giftoptions_tooltip.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'prototype'\n], function () {\n    'use strict';\n\n    var GiftOptionsTooltip = Class.create();\n\n    GiftOptionsTooltip.prototype = {\n        _tooltipLines: [],\n        _tooltipWindow: null,\n        _tooltipWindowContent: null,\n        _targetLinks: [],\n        _eventMouseOver: null,\n        _eventMouseOut: null,\n        _styleOptions: null,\n        _tooltipContentLoaderFunction: null,\n\n        /**\n         * Initialize tooltip object\n         */\n        initialize: function () {\n            var options = Object.extend({\n                'delta_x': 30,\n                'delta_y': 0,\n                zindex: 1000\n            });\n\n            this._styleOptions = options;\n            this._eventMouseOver = this.showTooltip.bindAsEventListener(this);\n            this._eventMouseOut = this.hideTooltip.bindAsEventListener(this);\n        },\n\n        /**\n         * Set gift options tooltip window\n         *\n         * @param {String} windowId\n         * @param {String} contentId\n         *\n         * @return boolean success\n         */\n        setTooltipWindow: function (windowId, contentId) {\n            if (!$(windowId) || !$(contentId)) {\n                return false;\n            }\n            this._tooltipWindow = $(windowId);\n            this._tooltipWindowContent = $(contentId);\n            $(document.body).insert({\n                bottom: this._tooltipWindow\n            });\n            this.hideTooltip();\n\n            return true;\n        },\n\n        /**\n         * Add tooltip to specified link\n         *\n         * @param {String} linkId\n         * @param {String} itemId - identifier of the item related to link\n         *\n         * @return boolean success\n         */\n        addTargetLink: function (linkId, itemId) {\n            if ($(linkId)) {\n                this._targetLinks[linkId] = [];\n                this._targetLinks[linkId].object = $(linkId);\n                this._targetLinks[linkId].itemId = itemId;\n                this._registerEvents(this._targetLinks[linkId].object);\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Detach event listeners from target links when tooltip is destroyed\n         */\n        destroy: function () {\n            var linkId;\n\n            for (linkId in this._targetLinks) { //eslint-disable-line guard-for-in\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseover', this._eventMouseOver);\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseout', this._eventMouseOut);\n            }\n        },\n\n        /**\n         *  Register event listeners\n         *\n         *  @param {HTMLElement} element\n         */\n        _registerEvents: function (element) {\n            Event.observe(element, 'mouseover', this._eventMouseOver);\n            Event.observe(element, 'mouseout', this._eventMouseOut);\n        },\n\n        /**\n         * Move tooltip to mouse position\n         *\n         * @param {Prototype.Event} event\n         */\n        _moveTooltip: function (event) {\n            var mouseX, mouseY;\n\n            Event.stop(event);\n            mouseX = Event.pointerX(event);\n            mouseY = Event.pointerY(event);\n\n            this.setStyles(mouseX, mouseY);\n        },\n\n        /**\n         * Show tooltip\n         *\n         * @param {Object} event\n         *\n         * @return boolean success\n         */\n        showTooltip: function (event) {\n            var link, itemId, tooltipContent;\n\n            Event.stop(event);\n\n            if (this._tooltipWindow) {\n                link = Event.element(event);\n                itemId = this._targetLinks[link.id].itemId;\n                tooltipContent = '';\n\n                if (Object.isFunction(this._tooltipContentLoaderFunction)) {\n                    tooltipContent = this._tooltipContentLoaderFunction(itemId);\n                }\n\n                if (tooltipContent != '') { //eslint-disable-line eqeqeq\n                    this._updateTooltipWindowContent(tooltipContent);\n                    this._moveTooltip(event);\n                    new Element.show(this._tooltipWindow);\n\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Set tooltip window styles\n         *\n         * @param {Number} x\n         * @param {Number} y\n         */\n        setStyles: function (x, y) {\n            Element.setStyle(this._tooltipWindow, {\n                position: 'absolute',\n                top: y + this._styleOptions['delta_y'] + 'px',\n                left: x + this._styleOptions['delta_x'] + 'px',\n                zindex: this._styleOptions.zindex\n            });\n        },\n\n        /**\n         * Hide tooltip\n         */\n        hideTooltip: function () {\n            if (this._tooltipWindow) {\n                new Element.hide(this._tooltipWindow);\n            }\n        },\n\n        /**\n         * Set gift options tooltip content loader function\n         * This function should accept at least one parameter that will serve as an item ID\n         *\n         * @param {Function} loaderFunction - loader function\n         */\n        setTooltipContentLoaderFunction: function (loaderFunction) {\n            this._tooltipContentLoaderFunction = loaderFunction;\n        },\n\n        /**\n         * Update tooltip window content\n         *\n         * @param {String} content\n         */\n        _updateTooltipWindowContent: function (content) {\n            this._tooltipWindowContent.update(content);\n        }\n    };\n\n    window.giftOptionsTooltip = new GiftOptionsTooltip();\n});\n","Magento_Sales/order/create/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global AdminOrder */\ndefine([\n    'jquery',\n    'Magento_Sales/order/create/scripts'\n], function (jQuery) {\n    'use strict';\n\n    var $el = jQuery('#edit_form'),\n        config,\n        baseUrl,\n        order,\n        payment;\n\n    if (!$el.length || !$el.data('order-config')) {\n        return;\n    }\n\n    config = $el.data('order-config');\n    baseUrl = $el.data('load-base-url');\n\n    order = new AdminOrder(config);\n    order.setLoadBaseUrl(baseUrl);\n\n    payment = {\n        switchMethod: order.switchPaymentMethod.bind(order)\n    };\n\n    window.order = order;\n    window.payment = payment;\n});\n","Magento_Sales/order/create/giftmessage.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/********************* GIFT OPTIONS POPUP ***********************/\n/********************* GIFT OPTIONS SET ***********************/\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/translate',\n    'mage/validation',\n    'prototype'\n], function (jQuery) {\n\n    window.giftMessagesController = {\n        toogleRequired: function (source, objects) {\n            if (!$(source).value.blank()) {\n                objects.each(function (item) {\n                    $(item).addClassName('required-entry');\n                    var label = findFieldLabel($(item));\n\n                    if (label) {\n                        var span = label.down('span');\n\n                        if (!span) {\n                            Element.insert(label, {\n                                bottom: '&nbsp;<span class=\"required\">*</span>'\n                            });\n                        }\n                    }\n                });\n            } else {\n                objects.each(function (item) {\n                    if ($(source).formObj && $(source).formObj.validator) {\n                        $(source).formObj.validator.reset(item);\n                    }\n                    $(item).removeClassName('required-entry');\n                    var label = findFieldLabel($(item));\n\n                    if (label) {\n                        var span = label.down('span');\n\n                        if (span) {\n                            Element.remove(span);\n                        }\n                    }\n                    // Hide validation advices if exist\n                    if ($(item) && $(item).advices) {\n                        $(item).advices.each(function (pair) {\n                            if (pair.value != null) pair.value.hide();\n                        });\n                    }\n                });\n            }\n        },\n        toogleGiftMessage: function (container) {\n            if (!$(container).toogleGiftMessage) {\n                $(container).toogleGiftMessage = true;\n                $(this.getFieldId(container, 'edit')).show();\n                $(container).down('.action-link').addClassName('open');\n                $(container).down('.default-text').hide();\n                $(container).down('.close-text').show();\n            } else {\n                $(container).toogleGiftMessage = false;\n                $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\n                var form = jQuery('#' + this.getFieldId(container, 'form'));\n\n                jQuery('#' + this.getFieldId(container, 'form')).validate({\n                    errorClass: 'mage-error'\n                });\n\n                if (!form.valid()) {\n                    return false;\n                }\n\n                new Ajax.Request($(this.getFieldId(container, 'form')).action, {\n                    parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\n                    loaderArea: container,\n                    onComplete: function (transport) {\n\n                        $(container).down('.action-link').removeClassName('open');\n                        $(container).down('.default-text').show();\n                        $(container).down('.close-text').hide();\n                        $(this.getFieldId(container, 'edit')).hide();\n\n                        if (transport.responseText.match(/YES/g)) {\n                            $(container).down('.default-text').down('.edit').show();\n                            $(container).down('.default-text').down('.add').hide();\n                        } else {\n                            $(container).down('.default-text').down('.add').show();\n                            $(container).down('.default-text').down('.edit').hide();\n                        }\n\n                    }.bind(this)\n                });\n            }\n\n            return false;\n        },\n        saveGiftMessage: function (container) {\n            $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\n\n            var form = jQuery('#' + this.getFieldId(container, 'form'));\n\n            form.validate({\n                errorClass: 'mage-error'\n            });\n\n            if (!form.valid()) {\n                return;\n            }\n\n            new Ajax.Request($(this.getFieldId(container, 'form')).action, {\n                parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\n                loaderArea: container,\n                onSuccess: function (response) {\n                    var message = '<div class=\"messages\"><div class=\"message message-success success\">' +\n                        response.responseText +\n                        '<div data-ui-id=\"messages-message-success\"></div></div></div>';\n\n                    jQuery('#messages').html(message);\n                    jQuery(document).scrollTop(0);\n                }\n            });\n        },\n        getFieldId: function (container, name) {\n            return container + '_' + name;\n        }\n    };\n\n    function findFieldLabel(field) {\n        var tdField = $(field).up('td');\n\n        if (tdField) {\n            var tdLabel = tdField.previous('td');\n\n            if (tdLabel) {\n                var label = tdLabel.down('label');\n\n                if (label) {\n                    return label;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    window.findFieldLabel = findFieldLabel;\n\n    window.GiftOptionsPopup = Class.create();\n    GiftOptionsPopup.prototype = {\n        //giftOptionsWindowMask: null,\n        giftOptionsWindow: null,\n\n        initialize: function () {\n            $$('.action-link').each(function (el) {\n                Event.observe(el, 'click', this.showItemGiftOptions.bind(this));\n            }, this);\n\n            // Move gift options popup to start of body, because soon it will contain FORM tag that can break DOM layout if within other FORM\n            var oldPopupContainer = $('gift_options_configure');\n\n            if (oldPopupContainer) {\n                oldPopupContainer.remove();\n            }\n\n            var newPopupContainer = $('gift_options_configure_new');\n\n            $(document.body).insert({\n                top: newPopupContainer\n            });\n            newPopupContainer.id = 'gift_options_configure';\n\n            // Put controls container inside a FORM tag so we can use Validator\n            var form = new Element('form', {\n                action: '#', id: 'gift_options_configuration_form', method: 'post'\n            });\n            var formContents = $('gift_options_form_contents');\n\n            if (formContents) {\n                formContents.parentNode.appendChild(form);\n                form.appendChild(formContents);\n            }\n\n            this.giftOptionsWindow = $('gift_options_configure');\n\n            jQuery(this.giftOptionsWindow).dialog({\n                autoOpen:   false,\n                modal:      true,\n                resizable:  false,\n                dialogClass: 'gift-options-popup',\n                minWidth:   500,\n                width:      '75%',\n                position: {\n                    my: 'left+12.5% top',\n                    at: 'center top',\n                    of: 'body'\n                },\n                open: function () {\n                    jQuery(this).closest('.ui-dialog').addClass('ui-dialog-active');\n\n                    var topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 30;\n\n                    jQuery(this).closest('.ui-dialog').css({\n                        'margin-top' : topMargin,\n                        'z-index': 1000\n                    });\n                    jQuery(this).closest('.ui-dialog').nextAll('.ui-widget-overlay').css('z-index', 999);\n                },\n                close: function () {\n                    jQuery(this).closest('.ui-dialog').removeClass('ui-dialog-active');\n                }\n            });\n        },\n\n        showItemGiftOptions: function (event) {\n            var element = Event.element(event).id;\n            var itemId = element.sub('gift_options_link_', '');\n\n            jQuery(this.giftOptionsWindow).dialog('open');\n\n            this.setTitle(itemId);\n\n            Event.observe($('gift_options_cancel_button'), 'click', this.onCloseButton.bind(this));\n            Event.observe($('gift_options_ok_button'), 'click', this.onOkButton.bind(this));\n            Event.stop(event);\n        },\n\n        setTitle: function (itemId) {\n            var productTitleElement = $('order_item_' + itemId + '_title');\n            var productTitle = '';\n\n            if (productTitleElement) {\n                productTitle = productTitleElement.innerHTML;\n            }\n            jQuery(this.giftOptionsWindow).dialog({\n                title: jQuery.mage.__('Gift Options for ') + productTitle\n            });\n        },\n\n        onOkButton: function () {\n            var giftOptionsForm = jQuery('#gift_options_configuration_form');\n\n            if (!giftOptionsForm.validate({\n                errorClass: 'mage-error'\n            }).valid()) {\n                return false;\n            }\n\n            if (typeof (giftOptionsForm[0].reset) === 'function') {\n                giftOptionsForm[0].reset();\n            }\n            this.closeWindow();\n\n            return true;\n        },\n\n        onCloseButton: function () {\n            this.closeWindow();\n        },\n\n        closeWindow: function () {\n            jQuery(this.giftOptionsWindow).dialog('close');\n        }\n    };\n\n    window.GiftMessageSet = Class.create();\n\n    GiftMessageSet.prototype = {\n        destPrefix: 'current_item_giftmessage_',\n        sourcePrefix: 'giftmessage_',\n        fields: ['sender', 'recipient', 'message'],\n        isObserved: false,\n        callback: null,\n\n        initialize: function () {\n            $$('.action-link').each(function (el) {\n                Event.observe(el, 'click', this.setData.bind(this));\n            }, this);\n        },\n\n        setData: function (event) {\n            var element = Event.element(event).id;\n\n            this.id = element.sub('gift_options_link_', '');\n\n            if ($('gift-message-form-data-' + this.id)) {\n                this.fields.each(function (el) {\n                    if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\n                        $(this.destPrefix + el).value = $(this.sourcePrefix + this.id + '_' + el).value;\n                    }\n                }, this);\n                $('gift_options_giftmessage').show();\n            } else if ($('gift_options_giftmessage')) {\n                $('gift_options_giftmessage').hide();\n            }\n\n            if (!this.isObserved) {\n                Event.observe('gift_options_ok_button', 'click', this.saveData.bind(this));\n                this.isObserved = true;\n            }\n        },\n\n        prepareSaveData: function () {\n            var hash = $H();\n\n            $$('div[id^=gift_options_data_]').each(function (el) {\n                var fields = el.select('input', 'select', 'textarea');\n                var data = Form.serializeElements(fields, true);\n\n                hash.update(data);\n            });\n\n            return hash;\n        },\n\n        setSaveCallback: function (callback) {\n            if (typeof callback == 'function') {\n                this.callback = callback;\n            }\n        },\n\n        saveData: function (event) {\n            this.fields.each(function (el) {\n                if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\n                    $(this.sourcePrefix + this.id + '_' + el).value = $(this.destPrefix + el).value;\n                }\n            }, this);\n\n            if ($(this.sourcePrefix + this.id + '_form')) {\n                $(this.sourcePrefix + this.id + '_form').request();\n            } else if (typeof order != 'undefined') {\n                var data = this.prepareSaveData();\n                var self = this;\n\n                jQuery.when(order.loadArea(['items'], true, data.toObject())).done(function () {\n                    if (self.callback !== null) {\n                        self.callback();\n                    }\n                });\n            }\n        }\n    };\n\n});\n","Magento_Sales/order/create/scripts.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n define([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/modal/alert',\n    'mage/template',\n    'text!Magento_Sales/templates/order/create/shipping/reload.html',\n    'text!Magento_Sales/templates/order/create/payment/reload.html',\n    'mage/translate',\n    'prototype',\n    'Magento_Catalog/catalog/product/composite/configure',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (jQuery, confirm, alert, template, shippingTemplate, paymentTemplate) {\n\n    window.AdminOrder = new Class.create();\n\n    AdminOrder.prototype = {\n        initialize: function (data) {\n            if (!data) data = {};\n            this.loadBaseUrl = false;\n            this.customerId = data.customer_id ? data.customer_id : false;\n            this.storeId = data.store_id ? data.store_id : false;\n            this.quoteId = data['quote_id'] ? data['quote_id'] : false;\n            this.currencyId = false;\n            this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\n            this.addresses = data.addresses ? data.addresses : $H({});\n            this.shippingAsBilling = data.shippingAsBilling ? data.shippingAsBilling : false;\n            this.gridProducts = $H({});\n            this.gridProductsGift = $H({});\n            this.billingAddressContainer = '';\n            this.shippingAddressContainer = '';\n            this.isShippingMethodReseted = data.shipping_method_reseted ? data.shipping_method_reseted : false;\n            this.overlayData = $H({});\n            this.giftMessageDataChanged = false;\n            this.productConfigureAddFields = {};\n            this.productPriceBase = {};\n            this.collectElementsValue = true;\n            this.isOnlyVirtualProduct = false;\n            this.excludedPaymentMethods = [];\n            this.summarizePrice = true;\n            this.selectAddressEvent = false;\n            this.shippingTemplate = template(shippingTemplate, {\n                data: {\n                    title: jQuery.mage.__('Shipping Method'),\n                    linkText: jQuery.mage.__('Get shipping methods and rates')\n                }\n            });\n            this.paymentTemplate = template(paymentTemplate, {\n                data: {\n                    title: jQuery.mage.__('Payment Method'),\n                    linkText: jQuery.mage.__('Get available payment methods')\n                }\n            });\n\n            jQuery.async('#order-items', (function () {\n                this.dataArea = new OrderFormArea('data', $(this.getAreaId('data')), this);\n                this.itemsArea = Object.extend(new OrderFormArea('items', $(this.getAreaId('items')), this), {\n                    addControlButton: function (button) {\n                        var controlButtonArea = $(this.node).select('.actions')[0];\n                        if (typeof controlButtonArea != 'undefined') {\n                            var buttons = controlButtonArea.childElements();\n                            for (var i = 0; i < buttons.length; i++) {\n                                if (buttons[i].innerHTML.include(button.getLabel())) {\n                                    return;\n                                }\n                            }\n                            button.insertIn(controlButtonArea, 'top');\n                        }\n                    }\n                });\n\n                var searchButtonId = 'add_products',\n                    searchButton = new ControlButton(jQuery.mage.__('Add Products'), searchButtonId),\n                    searchAreaId = this.getAreaId('search');\n                searchButton.onClick = function () {\n                    $(searchAreaId).show();\n                    var el = this;\n                    window.setTimeout(function () {\n                        el.remove();\n                    }, 10);\n                };\n\n                jQuery.async('#order-items .admin__page-section-title', (function () {\n                    this.dataArea.onLoad = this.dataArea.onLoad.wrap(function (proceed) {\n                        proceed();\n                        this._parent.itemsArea.setNode($(this._parent.getAreaId('items')));\n                        this._parent.itemsArea.onLoad();\n                    });\n\n                    this.itemsArea.onLoad = this.itemsArea.onLoad.wrap(function (proceed) {\n                        proceed();\n                        if ($(searchAreaId) && !jQuery('#' + searchAreaId).is(':visible') && !$(searchButtonId)) {\n                            this.addControlButton(searchButton);\n                        }\n                    });\n                    this.areasLoaded();\n                    this.itemsArea.onLoad();\n\n                }).bind(this));\n\n            }).bind(this));\n\n            jQuery('#edit_form')\n                .on('submitOrder', function () {\n                    jQuery(this).trigger('realOrder');\n                })\n                .on('realOrder', this._realSubmit.bind(this));\n        },\n\n        areasLoaded: function () {\n        },\n\n        itemsLoaded: function () {\n        },\n\n        dataLoaded: function () {\n            this.dataShow();\n        },\n\n        setLoadBaseUrl: function (url) {\n            this.loadBaseUrl = url;\n        },\n\n        setAddresses: function (addresses) {\n            this.addresses = addresses;\n        },\n\n        addExcludedPaymentMethod: function (method) {\n            this.excludedPaymentMethods.push(method);\n        },\n\n        setCustomerId: function (id) {\n            this.customerId = id;\n            this.loadArea('header', true);\n            $(this.getAreaId('header')).callback = 'setCustomerAfter';\n            $('back_order_top_button').hide();\n            $('reset_order_top_button').show();\n        },\n\n        setCustomerAfter: function () {\n            this.customerSelectorHide();\n            if (this.storeId) {\n                $(this.getAreaId('data')).callback = 'dataLoaded';\n                this.loadArea(['data'], true);\n            } else {\n                this.storeSelectorShow();\n            }\n        },\n\n        setStoreId: function (id) {\n            this.storeId = id;\n            this.storeSelectorHide();\n            this.sidebarShow();\n            //this.loadArea(['header', 'sidebar','data'], true);\n            this.dataShow();\n            this.loadArea(['header', 'data'], true);\n            location.reload();\n        },\n\n        setCurrencyId: function (id) {\n            this.currencyId = id;\n            //this.loadArea(['sidebar', 'data'], true);\n            this.loadArea(['data'], true);\n        },\n\n        setCurrencySymbol: function (symbol) {\n            this.currencySymbol = symbol;\n        },\n\n        selectAddress: function (el, container) {\n            var id = el.value;\n            if (id.length == 0) {\n                id = '0';\n            }\n\n            this.selectAddressEvent = true;\n            if (this.addresses[id]) {\n                this.fillAddressFields(container, this.addresses[id]);\n            } else {\n                this.fillAddressFields(container, {});\n            }\n            this.selectAddressEvent = false;\n\n            var data = this.serializeData(container);\n            data[el.name] = id;\n\n            this.resetPaymentMethod();\n            if (this.isShippingField(container) && !this.isShippingMethodReseted) {\n                this.resetShippingMethod(data);\n            } else {\n                this.saveData(data);\n            }\n        },\n\n        /**\n         * Checks if the field belongs to the shipping address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isShippingField: function (fieldId) {\n            if (this.shippingAsBilling) {\n                return fieldId.include('billing');\n            }\n\n            return fieldId.include('shipping');\n        },\n\n        /**\n         * Checks if the field belongs to the billing address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isBillingField: function (fieldId) {\n            return fieldId.include('billing');\n        },\n\n        /**\n         * Binds events on container form fields.\n         *\n         * @param {String} container\n         */\n        bindAddressFields: function (container) {\n            var fields = $(container).select('input', 'select', 'textarea'),\n                i;\n\n            for (i = 0; i < fields.length; i++) {\n                jQuery(fields[i]).change(this.changeAddressField.bind(this));\n            }\n        },\n\n        /**\n         * Triggers on each form's element changes.\n         *\n         * @param {Event} event\n         */\n        changeAddressField: function (event) {\n            var field = Event.element(event),\n                re = /[^\\[]*\\[([^\\]]*)_address\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/,\n                matchRes = field.name.match(re),\n                type,\n                name,\n                data,\n                resetShipping = false;\n\n            if (!matchRes) {\n                return;\n            }\n\n            type = matchRes[1];\n            name = matchRes[2];\n\n            if (this.isBillingField(field.id)) {\n                data = this.serializeData(this.billingAddressContainer);\n            } else {\n                data = this.serializeData(this.shippingAddressContainer);\n            }\n            data = data.toObject();\n\n            if (type === 'billing' && this.shippingAsBilling) {\n                this.syncAddressField(this.shippingAddressContainer, field.name, field);\n                resetShipping = true;\n            }\n\n            if (type === 'shipping' && !this.shippingAsBilling) {\n                resetShipping = true;\n            }\n\n            if (resetShipping) {\n                data['reset_shipping'] = true;\n            }\n\n            if (name !== 'customer_address_id' && this.selectAddressEvent === false) {\n                if (this.shippingAsBilling) {\n                    $('order-shipping_address_customer_address_id').value = '';\n                }\n\n                $('order-' + type + '_address_customer_address_id').value = '';\n            }\n\n            data['order[' + type + '_address][customer_address_id]'] = null;\n            data['shipping_as_billing'] = +this.shippingAsBilling;\n\n            if (name === 'customer_address_id') {\n                data['order[' + type + '_address][customer_address_id]'] =\n                    $('order-' + type + '_address_customer_address_id').value;\n            }\n\n            if (name === 'country_id' && this.selectAddressEvent === false) {\n                $('order-' + type + '_address_customer_address_id').value = '';\n            }\n\n            this.resetPaymentMethod();\n\n            if (data['reset_shipping']) {\n                this.resetShippingMethod();\n            } else {\n                this.saveData(data);\n\n                if (name === 'country_id' || name === 'customer_address_id') {\n                    this.loadArea(['shipping_method', 'billing_method', 'totals', 'items'], true, data);\n                }\n            }\n        },\n\n        /**\n         * Set address container form field value.\n         *\n         * @param {String} container - container ID\n         * @param {String} fieldName - form field name\n         * @param {*} fieldValue - form field value\n         */\n        syncAddressField: function (container, fieldName, fieldValue) {\n            var syncName;\n\n            if (this.isBillingField(fieldName)) {\n                syncName = fieldName.replace('billing', 'shipping');\n            }\n\n            $(container).select('[name=\"' + syncName + '\"]').each(function (element) {\n                if (~['input', 'textarea', 'select'].indexOf(element.tagName.toLowerCase())) {\n                    if (element.type === \"checkbox\") {\n                        element.checked = fieldValue.checked;\n                    } else {\n                        element.value = fieldValue.value;\n                    }\n                }\n            });\n        },\n\n        fillAddressFields: function (container, data) {\n            var regionIdElem = false;\n            var regionIdElemValue = false;\n\n            var fields = $(container).select('input', 'select', 'textarea');\n            var re = /[^\\[]*\\[[^\\]]*\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/;\n            for (var i = 0; i < fields.length; i++) {\n                // skip input type file @Security error code: 1000\n                if (fields[i].tagName.toLowerCase() == 'input' && fields[i].type.toLowerCase() == 'file') {\n                    continue;\n                }\n                var matchRes = fields[i].name.match(re);\n                if (matchRes === null) {\n                    continue;\n                }\n                var name = matchRes[1];\n                var index = matchRes[3];\n\n                if (index) {\n                    // multiply line\n                    if (data[name]) {\n                        var values = data[name].split(\"\\n\");\n                        fields[i].value = values[index] ? values[index] : '';\n                    } else {\n                        fields[i].value = '';\n                    }\n                } else if (fields[i].tagName.toLowerCase() == 'select' && fields[i].multiple) {\n                    // multiselect\n                    if (data[name]) {\n                        values = [''];\n                        if (Object.isString(data[name])) {\n                            values = data[name].split(',');\n                        } else if (Object.isArray(data[name])) {\n                            values = data[name];\n                        }\n                        fields[i].setValue(values);\n                    }\n                } else {\n                    fields[i].setValue(data[name] ? data[name] : '');\n                }\n\n                if (fields[i].changeUpdater) {\n                    fields[i].changeUpdater();\n                }\n\n                if (name == 'region' && data['region_id'] && !data['region']) {\n                    fields[i].value = data['region_id'];\n                }\n\n                jQuery(fields[i]).trigger('change');\n            }\n        },\n\n        disableShippingAddress: function (flag) {\n            this.shippingAsBilling = flag;\n            if ($('order-shipping_address_customer_address_id')) {\n                $('order-shipping_address_customer_address_id').disabled = flag;\n            }\n            if ($(this.shippingAddressContainer)) {\n                var dataFields = $(this.shippingAddressContainer).select('input', 'select', 'textarea');\n                for (var i = 0; i < dataFields.length; i++) {\n                    dataFields[i].disabled = flag;\n\n                    if (this.isOnlyVirtualProduct) {\n                        dataFields[i].setValue('');\n                    }\n                }\n                var buttons = $(this.shippingAddressContainer).select('button');\n                // Add corresponding class to buttons while disabling them\n                for (i = 0; i < buttons.length; i++) {\n                    buttons[i].disabled = flag;\n                    if (flag) {\n                        buttons[i].addClassName('disabled');\n                    } else {\n                        buttons[i].removeClassName('disabled');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Equals shipping and billing addresses.\n         *\n         * @param {Boolean} flag\n         */\n        setShippingAsBilling: function (flag) {\n            var data,\n                areasToLoad = ['billing_method', 'shipping_address', 'shipping_method', 'totals', 'giftmessage'];\n\n            this.disableShippingAddress(flag);\n            data = this.serializeData(flag ? this.billingAddressContainer : this.shippingAddressContainer);\n            data = data.toObject();\n            data['shipping_as_billing'] = flag ? 1 : 0;\n            data['reset_shipping'] = 1;\n            // set customer_address_id to null for shipping address in order to treat it as new from backend\n            // Checkbox(Same As Billing Address) uncheck event\n            data['order[shipping_address][customer_address_id]'] = null;\n            this.loadArea(areasToLoad, true, data);\n        },\n\n        /**\n         * Replace shipping method area.\n         */\n        resetShippingMethod: function () {\n            if (!this.isOnlyVirtualProduct) {\n                $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\n            }\n        },\n\n        /**\n         * Replace payment method area.\n         */\n        resetPaymentMethod: function () {\n            $(this.getAreaId('billing_method')).update(this.paymentTemplate);\n        },\n\n        /**\n         * Loads shipping options according to address data.\n         *\n         * @return {Boolean}\n         */\n        loadShippingRates: function () {\n            var addressContainer = this.shippingAsBilling ?\n                'billingAddressContainer' :\n                'shippingAddressContainer',\n                data = this.serializeData(this[addressContainer]).toObject();\n\n            data['collect_shipping_rates'] = 1;\n            this.isShippingMethodReseted = false;\n            this.loadArea(['shipping_method', 'totals'], true, data);\n\n            return false;\n        },\n\n        setShippingMethod: function (method) {\n            var data = {};\n\n            data['order[shipping_method]'] = method;\n            this.loadArea([\n                'shipping_method',\n                'totals',\n                'billing_method'\n            ], true, data);\n        },\n\n        /**\n         * Updates available payment\n         * methods list according to order data.\n         *\n         * @return boolean\n         */\n        loadPaymentMethods: function () {\n            var data = this.serializeData(this.billingAddressContainer).toObject();\n\n            this.loadArea(['billing_method', 'totals'], true, data);\n\n            return false;\n        },\n\n        switchPaymentMethod: function(method){\n            if (this.paymentMethod !== method) {\n                jQuery('#edit_form')\n                    .off('submitOrder')\n                    .on('submitOrder', function(){\n                        jQuery(this).trigger('realOrder');\n                    });\n            }\n            jQuery('#edit_form').trigger('changePaymentMethod', [method]);\n            this.setPaymentMethod(method);\n            var data = {};\n            data['order[payment_method]'] = method;\n            this.loadArea(['card_validation'], true, data);\n        },\n\n        setPaymentMethod: function (method) {\n            if (this.paymentMethod && $('payment_form_' + this.paymentMethod)) {\n                var form = 'payment_form_' + this.paymentMethod;\n                [form + '_before', form, form + '_after'].each(function (el) {\n                    var block = $(el);\n                    if (block) {\n                        block.hide();\n                        block.select('input', 'select', 'textarea').each(function (field) {\n                            field.disabled = true;\n                        });\n                    }\n                });\n            }\n\n            if (!this.paymentMethod || method) {\n                $('order-billing_method_form').select('input', 'select', 'textarea').each(function (elem) {\n                    if (elem.type != 'radio') elem.disabled = true;\n                })\n            }\n\n            if ($('payment_form_' + method)) {\n                jQuery('#' + this.getAreaId('billing_method')).trigger('contentUpdated');\n                this.paymentMethod = method;\n                var form = 'payment_form_' + method;\n                [form + '_before', form, form + '_after'].each(function (el) {\n                    var block = $(el);\n                    if (block) {\n                        block.show();\n                        block.select('input', 'select', 'textarea').each(function (field) {\n                            field.disabled = false;\n                            if (!el.include('_before') && !el.include('_after') && !field.bindChange) {\n                                field.bindChange = true;\n                                field.paymentContainer = form;\n                                field.method = method;\n                                field.observe('change', this.changePaymentData.bind(this))\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n        },\n\n        changePaymentData: function (event) {\n            var elem = Event.element(event);\n            if (elem && elem.method) {\n                var data = this.getPaymentData(elem.method);\n                if (data) {\n                    this.loadArea(['card_validation'], true, data);\n                } else {\n                    return;\n                }\n            }\n        },\n\n        getPaymentData: function (currentMethod) {\n            if (typeof (currentMethod) == 'undefined') {\n                if (this.paymentMethod) {\n                    currentMethod = this.paymentMethod;\n                } else {\n                    return false;\n                }\n            }\n            if (this.isPaymentValidationAvailable() == false) {\n                return false;\n            }\n            var data = {};\n            var fields = $('payment_form_' + currentMethod).select('input', 'select');\n            for (var i = 0; i < fields.length; i++) {\n                data[fields[i].name] = fields[i].getValue();\n            }\n            if ((typeof data['payment[cc_type]']) != 'undefined' && (!data['payment[cc_type]'] || !data['payment[cc_number]'])) {\n                return false;\n            }\n            return data;\n        },\n\n        applyCoupon: function (code) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\n                'order[coupon][code]': code,\n                reset_shipping: true\n            });\n            this.orderItemChanged = false;\n            jQuery('html, body').animate({\n                scrollTop: 0\n            });\n        },\n\n        addProduct: function (id) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\n                add_product: id,\n                reset_shipping: true\n            });\n        },\n\n        removeQuoteItem: function (id) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true,\n                {remove_item: id, from: 'quote', reset_shipping: true});\n        },\n\n        moveQuoteItem: function (id, to) {\n            this.loadArea(['sidebar_' + to, 'items', 'shipping_method', 'totals', 'billing_method'], this.getAreaId('items'),\n                {move_item: id, to: to, reset_shipping: true});\n        },\n\n        productGridShow: function (buttonElement) {\n            this.productGridShowButton = buttonElement;\n            Element.hide(buttonElement);\n            this.showArea('search');\n        },\n\n        productGridRowInit: function (grid, row) {\n            var checkbox = $(row).select('.checkbox')[0];\n            var inputs = $(row).select('.input-text');\n            if (checkbox && inputs.length > 0) {\n                checkbox.inputElements = inputs;\n                for (var i = 0; i < inputs.length; i++) {\n                    var input = inputs[i];\n                    input.checkboxElement = checkbox;\n\n                    var product = this.gridProducts.get(checkbox.value);\n                    if (product) {\n                        var defaultValue = product[input.name];\n                        if (defaultValue) {\n                            if (input.name == 'giftmessage') {\n                                input.checked = true;\n                            } else {\n                                input.value = defaultValue;\n                            }\n                        }\n                    }\n\n                    input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\n\n                    Event.observe(input, 'keyup', this.productGridRowInputChange.bind(this));\n                    Event.observe(input, 'change', this.productGridRowInputChange.bind(this));\n                }\n            }\n        },\n\n        productGridRowInputChange: function (event) {\n            var element = Event.element(event);\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\n                if (element.name != 'giftmessage' || element.checked) {\n                    this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\n                } else if (element.name == 'giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\n                    delete (this.gridProducts.get(element.checkboxElement.value)[element.name]);\n                }\n            }\n        },\n\n        productGridRowClick: function (grid, event) {\n            var trElement = Event.findElement(event, 'tr');\n            var qtyElement = trElement.select('input[name=\"qty\"]')[0];\n            var eventElement = Event.element(event);\n\n            if (eventElement.tagName === 'LABEL'\n                && trElement.querySelector('#' + eventElement.htmlFor)\n                && trElement.querySelector('#' + eventElement.htmlFor).type === 'checkbox'\n            ) {\n                event.stopPropagation();\n                trElement.querySelector('#' + eventElement.htmlFor).trigger('click');\n                return;\n            }\n\n            var isInputCheckbox = (eventElement.tagName === 'INPUT' && eventElement.type === 'checkbox');\n            var isInputQty = grid.targetElement && grid.targetElement.tagName === 'INPUT' && grid.targetElement.name === 'qty';\n            if (trElement && !isInputQty) {\n                var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\n                var confLink = Element.select(trElement, 'a')[0];\n                var priceColl = Element.select(trElement, '.price')[0];\n                if (checkbox) {\n                    // processing non composite product\n                    if (confLink.readAttribute('disabled')) {\n                        var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\n                        grid.setCheckboxChecked(checkbox, checked);\n                        // processing composite product\n                    } else if (isInputCheckbox && !checkbox.checked) {\n                        grid.setCheckboxChecked(checkbox, false);\n                        // processing composite product\n                    } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\n                        var listType = confLink.readAttribute('list_type');\n                        var productId = confLink.readAttribute('product_id');\n                        if (typeof this.productPriceBase[productId] == 'undefined') {\n                            var priceBase = priceColl.innerHTML.match(/.*?([\\d,]+\\.?\\d*)/);\n                            if (!priceBase) {\n                                this.productPriceBase[productId] = 0;\n                            } else {\n                                this.productPriceBase[productId] = parseFloat(priceBase[1].replace(/,/g, ''));\n                            }\n                        }\n                        productConfigure.setConfirmCallback(listType, function () {\n                            // sync qty of popup and qty of grid\n                            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                                qtyElement.value = confirmedCurrentQty.value;\n                            }\n                            // calc and set product price\n                            var productPrice = this._calcProductPrice();\n                            if (this._isSummarizePrice()) {\n                                productPrice += this.productPriceBase[productId];\n                            }\n                            productPrice = parseFloat(Math.round(productPrice + \"e+2\") + \"e-2\");\n                            priceColl.innerHTML = this.currencySymbol + productPrice.toFixed(2);\n                            // and set checkbox checked\n                            grid.setCheckboxChecked(checkbox, true);\n                        }.bind(this));\n                        productConfigure.setCancelCallback(listType, function () {\n                            if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\n                                grid.setCheckboxChecked(checkbox, false);\n                            }\n                        });\n                        productConfigure.setShowWindowCallback(listType, function () {\n                            // sync qty of grid and qty of popup\n                            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                                formCurrentQty.value = qtyElement.value;\n                            }\n                        }.bind(this));\n                        productConfigure.showItemConfiguration(listType, productId);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Is need to summarize price\n         */\n        _isSummarizePrice: function (elm) {\n            if (elm && elm.hasAttribute('summarizePrice')) {\n                this.summarizePrice = parseInt(elm.readAttribute('summarizePrice'));\n            }\n            return this.summarizePrice;\n        },\n        /**\n         * Calc product price through its options\n         */\n        _calcProductPrice: function () {\n            var productPrice = 0;\n            var getPriceFields = function (elms) {\n                var productPrice = 0;\n                var getPrice = function (elm) {\n                    var optQty = 1;\n                    if (elm.hasAttribute('qtyId')) {\n                        if (!$(elm.getAttribute('qtyId')).value) {\n                            return 0;\n                        } else {\n                            optQty = parseFloat($(elm.getAttribute('qtyId')).value);\n                        }\n                    }\n                    if (elm.hasAttribute('price') && !elm.disabled) {\n                        return parseFloat(elm.readAttribute('price')) * optQty;\n                    }\n                    return 0;\n                };\n                for (var i = 0; i < elms.length; i++) {\n                    if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\n                        for (var ii = 0; ii < elms[i].options.length; ii++) {\n                            if (elms[i].options[ii].selected) {\n                                if (this._isSummarizePrice(elms[i].options[ii])) {\n                                    productPrice += getPrice(elms[i].options[ii]);\n                                } else {\n                                    productPrice = getPrice(elms[i].options[ii]);\n                                }\n                            }\n                        }\n                    } else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\n                            && Form.Element.getValue(elms[i]))\n                    ) {\n                        if (this._isSummarizePrice(elms[i])) {\n                            productPrice += getPrice(elms[i]);\n                        } else {\n                            productPrice = getPrice(elms[i]);\n                        }\n                    }\n                }\n                return productPrice;\n            }.bind(this);\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\n            return productPrice;\n        },\n\n        productGridCheckboxCheck: function (grid, element, checked) {\n            if (checked) {\n                if (element.inputElements) {\n                    this.gridProducts.set(element.value, {});\n                    var product = this.gridProducts.get(element.value);\n                    for (var i = 0; i < element.inputElements.length; i++) {\n                        var input = element.inputElements[i];\n                        if (!input.hasClassName('input-inactive')) {\n                            input.disabled = false;\n                            if (input.name == 'qty' && !input.value) {\n                                input.value = 1;\n                            }\n                        }\n\n                        if (input.checked || input.name != 'giftmessage') {\n                            product[input.name] = input.value;\n                        } else if (product[input.name]) {\n                            delete (product[input.name]);\n                        }\n                    }\n                }\n            } else {\n                if (element.inputElements) {\n                    for (var i = 0; i < element.inputElements.length; i++) {\n                        element.inputElements[i].disabled = true;\n                    }\n                }\n                this.gridProducts.unset(element.value);\n            }\n            grid.reloadParams = {'products[]': this.gridProducts.keys()};\n        },\n\n        productGridFilterKeyPress: function (grid, event) {\n            var returnKey = parseInt(Event.KEY_RETURN || 13, 10);\n\n            if (event.keyCode === returnKey) {\n                if (typeof event.stopPropagation === 'function') {\n                    event.stopPropagation();\n                }\n\n                if (typeof event.preventDefault === 'function') {\n                    event.preventDefault();\n                }\n            }\n        },\n\n        /**\n         * Submit configured products to quote\n         */\n        productGridAddSelected: function () {\n            if (this.productGridShowButton) Element.show(this.productGridShowButton);\n            var area = ['search', 'items', 'shipping_method', 'totals', 'giftmessage', 'billing_method'];\n            // prepare additional fields and filtered items of products\n            var fieldsPrepare = {};\n            var itemsFilter = [];\n            var products = this.gridProducts.toObject();\n            for (var productId in products) {\n                itemsFilter.push(productId);\n                var paramKey = 'item[' + productId + ']';\n                for (var productParamKey in products[productId]) {\n                    paramKey += '[' + productParamKey + ']';\n                    fieldsPrepare[paramKey] = products[productId][productParamKey];\n                }\n            }\n            this.productConfigureSubmit('product_to_add', area, fieldsPrepare, itemsFilter);\n            productConfigure.clean('quote_items');\n            this.hideArea('search');\n            this.gridProducts = $H({});\n        },\n\n        selectCustomer: function (grid, event) {\n            var element = Event.findElement(event, 'tr');\n            if (element.title) {\n                this.setCustomerId(element.title);\n            }\n        },\n\n        customerSelectorHide: function () {\n            this.hideArea('customer-selector');\n        },\n\n        customerSelectorShow: function () {\n            this.showArea('customer-selector');\n        },\n\n        storeSelectorHide: function () {\n            this.hideArea('store-selector');\n        },\n\n        storeSelectorShow: function () {\n            this.showArea('store-selector');\n        },\n\n        dataHide: function () {\n            this.hideArea('data');\n        },\n\n        dataShow: function () {\n            if ($('submit_order_top_button')) {\n                $('submit_order_top_button').show();\n            }\n            this.showArea('data');\n        },\n\n        clearShoppingCart: function (confirmMessage) {\n            var self = this;\n\n            confirm({\n                content: confirmMessage,\n                actions: {\n                    confirm: function () {\n                        self.collectElementsValue = false;\n                        order.sidebarApplyChanges({'sidebar[empty_customer_cart]': 1});\n                        self.collectElementsValue = true;\n                    }\n                }\n            });\n        },\n\n        sidebarApplyChanges: function (auxiliaryParams) {\n            if ($(this.getAreaId('sidebar'))) {\n                var data = {};\n                if (this.collectElementsValue) {\n                    var elems = $(this.getAreaId('sidebar')).select('input');\n                    for (var i = 0; i < elems.length; i++) {\n                        if (elems[i].getValue()) {\n                            data[elems[i].name] = elems[i].getValue();\n                        }\n                    }\n                }\n                if (auxiliaryParams instanceof Object) {\n                    for (var paramName in auxiliaryParams) {\n                        data[paramName] = String(auxiliaryParams[paramName]);\n                    }\n                }\n                data.reset_shipping = true;\n                this.loadArea(['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'], true, data);\n            }\n        },\n\n        sidebarHide: function () {\n            if (this.storeId === false && $('page:left') && $('page:container')) {\n                $('page:left').hide();\n                $('page:container').removeClassName('container');\n                $('page:container').addClassName('container-collapsed');\n            }\n        },\n\n        sidebarShow: function () {\n            if ($('page:left') && $('page:container')) {\n                $('page:left').show();\n                $('page:container').removeClassName('container-collapsed');\n                $('page:container').addClassName('container');\n            }\n        },\n\n        /**\n         * Show configuration of product and add handlers on submit form\n         *\n         * @param productId\n         */\n        sidebarConfigureProduct: function (listType, productId, itemId) {\n            // create additional fields\n            var params = {},\n                isWishlist = !!itemId;\n            params.reset_shipping = true;\n            params.add_product = productId;\n            this.prepareParams(params);\n            for (var i in params) {\n                if (params[i] === null) {\n                    unset(params[i]);\n                } else if (typeof (params[i]) == 'boolean') {\n                    params[i] = params[i] ? 1 : 0;\n                }\n            }\n            var fields = [];\n            for (var name in params) {\n                fields.push(new Element('input', {type: 'hidden', name: name, value: params[name]}));\n            }\n            // add additional fields before triggered submit\n            productConfigure.setBeforeSubmitCallback(listType, function () {\n                productConfigure.addFields(fields);\n            }.bind(this));\n            // response handler\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\n                var areas = ['items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\n\n                if (!response.ok) {\n                    return;\n                }\n                if (isWishlist) {\n                    this.removeSidebarItem(itemId, 'wishlist').done(function () {\n                        this.loadArea(areas, true);\n                    }.bind(this));\n                } else {\n                    this.loadArea(areas, true);\n                }\n            }.bind(this));\n            // show item configuration\n            itemId = itemId ? itemId : productId;\n            productConfigure.showItemConfiguration(listType, itemId);\n            return false;\n        },\n\n        removeSidebarItem: function (id, from) {\n            return this.loadArea(['sidebar_' + from], 'sidebar_data_' + from, {\n                remove_item: id,\n                from: from\n            });\n        },\n\n        itemsUpdate: function () {\n            var area = ['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\n            // prepare additional fields\n            var fieldsPrepare = {update_items: 1};\n            var info = $('order-items_grid').select('input', 'select', 'textarea');\n            for (var i = 0; i < info.length; i++) {\n                if (!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\n                    fieldsPrepare[info[i].name] = info[i].getValue();\n                }\n            }\n            fieldsPrepare = Object.extend(fieldsPrepare, this.productConfigureAddFields);\n            this.productConfigureSubmit('quote_items', area, fieldsPrepare);\n            this.orderItemChanged = false;\n        },\n\n        itemsOnchangeBind: function () {\n            var elems = $('order-items_grid').select('input', 'select', 'textarea');\n            for (var i = 0; i < elems.length; i++) {\n                if (!elems[i].bindOnchange) {\n                    elems[i].bindOnchange = true;\n                    elems[i].observe('change', this.itemChange.bind(this))\n                }\n            }\n        },\n\n        itemChange: function (event) {\n            this.giftmessageOnItemChange(event);\n            this.orderItemChanged = true;\n        },\n\n        /**\n         * Submit batch of configured products\n         *\n         * @param listType\n         * @param area\n         * @param fieldsPrepare\n         * @param itemsFilter\n         */\n        productConfigureSubmit: function (listType, area, fieldsPrepare, itemsFilter) {\n            // prepare loading areas and build url\n            area = this.prepareArea(area);\n            this.loadingAreas = area;\n            var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\n\n            // prepare additional fields\n            fieldsPrepare = this.prepareParams(fieldsPrepare);\n            fieldsPrepare.reset_shipping = 1;\n            fieldsPrepare.json = 1;\n\n            // create fields\n            var fields = [];\n            for (var name in fieldsPrepare) {\n                fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\n            }\n            productConfigure.addFields(fields);\n\n            // filter items\n            if (itemsFilter) {\n                productConfigure.addItemsFilter(listType, itemsFilter);\n            }\n\n            // prepare and do submit\n            productConfigure.addListType(listType, {urlSubmit: url});\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\n                this.loadAreaResponseHandler(response);\n            }.bind(this));\n            productConfigure.submit(listType);\n            // clean\n            this.productConfigureAddFields = {};\n        },\n\n        /**\n         * Show configuration of quote item\n         *\n         * @param itemId\n         */\n        showQuoteItemConfiguration: function (itemId) {\n            var listType = 'quote_items';\n            var qtyElement = $('order-items_grid').select('input[name=\"item\\[' + itemId + '\\]\\[qty\\]\"]')[0];\n            productConfigure.setConfirmCallback(listType, function () {\n                // sync qty of popup and qty of grid\n                var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                    qtyElement.value = confirmedCurrentQty.value;\n                }\n                this.productConfigureAddFields['item[' + itemId + '][configured]'] = 1;\n                this.itemsUpdate();\n\n            }.bind(this));\n            productConfigure.setShowWindowCallback(listType, function () {\n                // sync qty of grid and qty of popup\n                var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                    formCurrentQty.value = qtyElement.value;\n                }\n            }.bind(this));\n            productConfigure.showItemConfiguration(listType, itemId);\n        },\n\n        accountFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'select', 'textarea');\n                for (var i = 0; i < fields.length; i++) {\n                    if (fields[i].id == 'group_id') {\n                        fields[i].observe('change', this.accountGroupChange.bind(this))\n                    } else {\n                        fields[i].observe('change', this.accountFieldChange.bind(this))\n                    }\n                }\n            }\n        },\n\n        accountGroupChange: function () {\n            this.loadArea(['data'], true, this.serializeData('order-form_account').toObject());\n        },\n\n        accountFieldChange: function () {\n            this.saveData(this.serializeData('order-form_account'));\n        },\n\n        commentFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'textarea');\n                for (var i = 0; i < fields.length; i++)\n                    fields[i].observe('change', this.commentFieldChange.bind(this))\n            }\n        },\n\n        commentFieldChange: function () {\n            this.saveData(this.serializeData('order-comment'));\n        },\n\n        giftmessageFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'textarea');\n                for (var i = 0; i < fields.length; i++)\n                    fields[i].observe('change', this.giftmessageFieldChange.bind(this))\n            }\n        },\n\n        giftmessageFieldChange: function () {\n            this.giftMessageDataChanged = true;\n        },\n\n        giftmessageOnItemChange: function (event) {\n            var element = Event.element(event);\n            if (element.name.indexOf(\"giftmessage\") != -1 && element.type == \"checkbox\" && !element.checked) {\n                var messages = $(\"order-giftmessage\").select('textarea');\n                var name;\n                for (var i = 0; i < messages.length; i++) {\n                    name = messages[i].id.split(\"_\");\n                    if (name.length < 2) continue;\n                    if (element.name.indexOf(\"[\" + name[1] + \"]\") != -1 && messages[i].value != \"\") {\n                        alert({\n                            content: \"First, clean the Message field in Gift Message form\"\n                        });\n                        element.checked = true;\n                    }\n                }\n            }\n        },\n\n        loadArea: function (area, indicator, params) {\n            var deferred = new jQuery.Deferred();\n            var url = this.loadBaseUrl;\n            if (area) {\n                area = this.prepareArea(area);\n                url += 'block/' + area;\n            }\n            if (indicator === true) indicator = 'html-body';\n            params = this.prepareParams(params);\n            params.json = true;\n            if (!this.loadingAreas) this.loadingAreas = [];\n            if (indicator) {\n                this.loadingAreas = area;\n                new Ajax.Request(url, {\n                    parameters: params,\n                    loaderArea: indicator,\n                    onSuccess: function (transport) {\n                        var response = transport.responseText.evalJSON();\n                        this.loadAreaResponseHandler(response);\n                        deferred.resolve();\n                    }.bind(this)\n                });\n            } else {\n                new Ajax.Request(url, {\n                    parameters: params,\n                    loaderArea: indicator,\n                    onSuccess: function (transport) {\n                        deferred.resolve();\n                    }\n                });\n            }\n            if (typeof productConfigure != 'undefined' && area instanceof Array && area.indexOf('items') != -1) {\n                productConfigure.clean('quote_items');\n            }\n            return deferred.promise();\n        },\n\n        loadAreaResponseHandler: function (response) {\n            if (response.error) {\n                alert({\n                    content: response.message\n                });\n            }\n            if (response.ajaxExpired && response.ajaxRedirect) {\n                setLocation(response.ajaxRedirect);\n            }\n            if (!this.loadingAreas) {\n                this.loadingAreas = [];\n            }\n            if (typeof this.loadingAreas == 'string') {\n                this.loadingAreas = [this.loadingAreas];\n            }\n            if (this.loadingAreas.indexOf('message') == -1) {\n                this.loadingAreas.push('message');\n            }\n            if (response.header) {\n                jQuery('.page-actions-inner').attr('data-title', response.header);\n            }\n\n            for (var i = 0; i < this.loadingAreas.length; i++) {\n                var id = this.loadingAreas[i];\n                if ($(this.getAreaId(id))) {\n                    if ((id in response) && id !== 'message' || response[id]) {\n                        $(this.getAreaId(id)).update(response[id]);\n                    }\n                    if ($(this.getAreaId(id)).callback) {\n                        this[$(this.getAreaId(id)).callback]();\n                    }\n                }\n            }\n        },\n\n        prepareArea: function (area) {\n            if (this.giftMessageDataChanged) {\n                return area.without('giftmessage');\n            }\n            return area;\n        },\n\n        saveData: function (data) {\n            this.loadArea(false, false, data);\n        },\n\n        showArea: function (area) {\n            var id = this.getAreaId(area);\n            if ($(id)) {\n                $(id).show();\n                this.areaOverlay();\n            }\n        },\n\n        hideArea: function (area) {\n            var id = this.getAreaId(area);\n            if ($(id)) {\n                $(id).hide();\n                this.areaOverlay();\n            }\n        },\n\n        areaOverlay: function () {\n            $H(order.overlayData).each(function (e) {\n                e.value.fx();\n            });\n        },\n\n        getAreaId: function (area) {\n            return 'order-' + area;\n        },\n\n        prepareParams: function (params) {\n            if (!params) {\n                params = {};\n            }\n            if (!params.customer_id) {\n                params.customer_id = this.customerId;\n            }\n            if (!params.store_id) {\n                params.store_id = this.storeId;\n            }\n            if (!params.currency_id) {\n                params.currency_id = this.currencyId;\n            }\n            if (!params.form_key) {\n                params.form_key = FORM_KEY;\n            }\n\n            if (this.isPaymentValidationAvailable()) {\n                var data = this.serializeData('order-billing_method');\n                if (data) {\n                    data.each(function (value) {\n                        params[value[0]] = value[1];\n                    });\n                }\n            } else {\n                params['payment[method]'] = this.paymentMethod;\n            }\n            return params;\n        },\n\n        /**\n         * Prevent from sending credit card information to server for some payment methods\n         *\n         * @returns {boolean}\n         */\n        isPaymentValidationAvailable: function () {\n            return ((typeof this.paymentMethod) == 'undefined'\n                || this.excludedPaymentMethods.indexOf(this.paymentMethod) == -1);\n        },\n\n        /**\n         * Serializes container form elements data.\n         *\n         * @param {String} container\n         * @return {Object}\n         */\n        serializeData: function (container) {\n            var fields = $(container).select('input', 'select', 'textarea'),\n                data = Form.serializeElements(fields, true);\n\n            return $H(data);\n        },\n\n        toggleCustomPrice: function (checkbox, elemId, tierBlock) {\n            if (checkbox.checked) {\n                $(elemId).disabled = false;\n                $(elemId).show();\n                if ($(tierBlock)) $(tierBlock).hide();\n            } else {\n                $(elemId).disabled = true;\n                $(elemId).hide();\n                if ($(tierBlock)) $(tierBlock).show();\n            }\n        },\n\n        submit: function () {\n            var $editForm = jQuery('#edit_form'),\n                beforeSubmitOrderEvent;\n\n            if ($editForm.valid()) {\n                $editForm.trigger('processStart');\n                beforeSubmitOrderEvent = jQuery.Event('beforeSubmitOrder');\n                $editForm.trigger(beforeSubmitOrderEvent);\n                if (beforeSubmitOrderEvent.result !== false) {\n                    $editForm.trigger('submitOrder');\n                }\n            }\n        },\n\n        _realSubmit: function () {\n            var disableAndSave = function () {\n                disableElements('save');\n                jQuery('#edit_form').on('invalid-form.validate', function () {\n                    enableElements('save');\n                    jQuery('#edit_form').trigger('processStop');\n                    jQuery('#edit_form').off('invalid-form.validate');\n                });\n                jQuery('#edit_form').triggerHandler('save');\n            }\n            if (this.orderItemChanged) {\n                var self = this;\n\n                jQuery('#edit_form').trigger('processStop');\n\n                confirm({\n                    content: jQuery.mage.__('You have item changes'),\n                    actions: {\n                        confirm: function () {\n                            jQuery('#edit_form').trigger('processStart');\n                            disableAndSave();\n                        },\n                        cancel: function () {\n                            self.itemsUpdate();\n                        }\n                    }\n                });\n            } else {\n                disableAndSave();\n            }\n        },\n\n        overlay: function (elId, show, observe) {\n            if (typeof (show) == 'undefined') {\n                show = true;\n            }\n\n            var orderObj = this;\n            var obj = this.overlayData.get(elId);\n            if (!obj) {\n                obj = {\n                    show: show,\n                    el: elId,\n                    order: orderObj,\n                    fx: function (event) {\n                        this.order.processOverlay(this.el, this.show);\n                    }\n                };\n                obj.bfx = obj.fx.bindAsEventListener(obj);\n                this.overlayData.set(elId, obj);\n            } else {\n                obj.show = show;\n                Event.stopObserving(window, 'resize', obj.bfx);\n            }\n\n            Event.observe(window, 'resize', obj.bfx);\n\n            this.processOverlay(elId, show);\n        },\n\n        processOverlay: function (elId, show) {\n            var el = $(elId);\n\n            if (!el) {\n                return;\n            }\n\n            var parentEl = el.up(1);\n            if (show) {\n                parentEl.removeClassName('ignore-validate');\n            } else {\n                parentEl.addClassName('ignore-validate');\n            }\n\n            if (Prototype.Browser.IE) {\n                parentEl.select('select').each(function (elem) {\n                    if (show) {\n                        elem.needShowOnSuccess = false;\n                        elem.style.visibility = '';\n                    } else {\n                        elem.style.visibility = 'hidden';\n                        elem.needShowOnSuccess = true;\n                    }\n                });\n            }\n\n            parentEl.setStyle({position: 'relative'});\n            el.setStyle({\n                display: show ? 'none' : ''\n            });\n        },\n\n        validateVat: function (parameters) {\n            var params = {\n                country: $(parameters.countryElementId).value,\n                vat: $(parameters.vatElementId).value\n            };\n\n            if (this.storeId !== false) {\n                params.store_id = this.storeId;\n            }\n\n            var currentCustomerGroupId = $(parameters.groupIdHtmlId)\n                ? $(parameters.groupIdHtmlId).value : '';\n\n            new Ajax.Request(parameters.validateUrl, {\n                parameters: params,\n                onSuccess: function (response) {\n                    var message = '';\n                    var groupActionRequired = null;\n                    try {\n                        response = response.responseText.evalJSON();\n\n                        if (null === response.group) {\n                            if (true === response.valid) {\n                                message = parameters.vatValidMessage;\n                            } else if (true === response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                            }\n                        } else {\n                            if (true === response.valid) {\n                                message = parameters.vatValidAndGroupValidMessage;\n                                if (0 === response.group) {\n                                    message = parameters.vatValidAndGroupInvalidMessage;\n                                    groupActionRequired = 'inform';\n                                } else if (currentCustomerGroupId != response.group) {\n                                    message = parameters.vatValidAndGroupChangeMessage;\n                                    groupActionRequired = 'change';\n                                }\n                            } else if (response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                                groupActionRequired = 'inform';\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                                groupActionRequired = 'inform';\n                            }\n                        }\n                    } catch (e) {\n                        message = parameters.vatValidationFailedMessage;\n                    }\n                    if (null === groupActionRequired) {\n                        alert({\n                            content: message\n                        });\n                    } else {\n                        this.processCustomerGroupChange(\n                            parameters.groupIdHtmlId,\n                            message,\n                            parameters.vatCustomerGroupMessage,\n                            parameters.vatGroupErrorMessage,\n                            response.group,\n                            groupActionRequired\n                        );\n                    }\n                }.bind(this)\n            });\n        },\n\n        processCustomerGroupChange: function (groupIdHtmlId, message, customerGroupMessage, errorMessage, groupId, action) {\n            var groupMessage = '';\n            try {\n                var currentCustomerGroupId = $(groupIdHtmlId).value;\n                var currentCustomerGroupTitle =\n                    $$('#' + groupIdHtmlId + ' > option[value=' + currentCustomerGroupId + ']')[0].text;\n                var customerGroupOption = $$('#' + groupIdHtmlId + ' > option[value=' + groupId + ']')[0];\n                groupMessage = customerGroupMessage.replace(/%s/, customerGroupOption.text);\n            } catch (e) {\n                groupMessage = errorMessage;\n                if (action === 'change') {\n                    message = '';\n                    action = 'inform';\n                }\n            }\n\n            if (action === 'change') {\n                var confirmText = message.replace(/%s/, customerGroupOption.text);\n                confirmText = confirmText.replace(/%s/, currentCustomerGroupTitle);\n                confirm({\n                    content: confirmText,\n                    actions: {\n                        confirm: function() {\n                            $$('#' + groupIdHtmlId + ' option').each(function (o) {\n                                o.selected = o.readAttribute('value') == groupId;\n                            });\n                            this.accountGroupChange();\n                        }.bind(this)\n                    }\n                })\n            } else if (action === 'inform') {\n                alert({\n                    content: message + '\\n' + groupMessage\n                });\n            }\n        }\n    };\n\n    window.OrderFormArea = Class.create();\n    OrderFormArea.prototype = {\n        _name: null,\n        _node: null,\n        _parent: null,\n        _callbackName: null,\n\n        initialize: function (name, node, parent) {\n            if (!node)\n                return;\n            this._name = name;\n            this._parent = parent;\n            this._callbackName = node.callback;\n            if (typeof this._callbackName == 'undefined') {\n                this._callbackName = name + 'Loaded';\n                node.callback = this._callbackName;\n            }\n            parent[this._callbackName] = parent[this._callbackName].wrap((function (proceed) {\n                proceed();\n                this.onLoad();\n            }).bind(this));\n\n            this.setNode(node);\n        },\n\n        setNode: function (node) {\n            if (!node.callback) {\n                node.callback = this._callbackName;\n            }\n            this.node = node;\n        },\n\n        onLoad: function () {\n        }\n    };\n\n    window.ControlButton = Class.create();\n\n    ControlButton.prototype = {\n        _label: '',\n        _node: null,\n\n        initialize: function (label, id) {\n            this._label = label;\n            this._node = new Element('button', {\n                'class': 'action-secondary action-add',\n                'type': 'button'\n            });\n            if (typeof id !== 'undefined') {\n                this._node.setAttribute('id', id)\n            }\n        },\n\n        onClick: function () {\n        },\n\n        insertIn: function (element, position) {\n            var node = Object.extend(this._node),\n                content = {};\n            node.observe('click', this.onClick);\n            node.update('<span>' + this._label + '</span>');\n            content[position] = node;\n            Element.insert(element, content);\n        },\n\n        getLabel: function () {\n            return this._label;\n        }\n    };\n});\n","Magento_Sales/order/edit/message.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.orderEditDialog', {\n        options: {\n            url:     null,\n            message: null,\n            modal:  null\n        },\n\n        /**\n         * @protected\n         */\n        _create: function () {\n            this._prepareDialog();\n        },\n\n        /**\n         * Show modal\n         */\n        showDialog: function () {\n            this.options.dialog.html(this.options.message).modal('openModal');\n        },\n\n        /**\n         * Redirect to edit page\n         */\n        redirect: function () {\n            window.location = this.options.url;\n        },\n\n        /**\n         * Prepare modal\n         * @protected\n         */\n        _prepareDialog: function () {\n            var self = this;\n\n            this.options.dialog = $('<div class=\"ui-dialog-content ui-widget-content\"></div>').modal({\n                type: 'popup',\n                modalClass: 'edit-order-popup',\n                title: $.mage.__('Edit Order'),\n                buttons: [{\n                    text: $.mage.__('Ok'),\n                    'class': 'action-primary',\n\n                    /** @inheritdoc */\n                    click: function () {\n                        self.redirect();\n                    }\n                }]\n            });\n        }\n    });\n\n    return $.mage.orderEditDialog;\n});\n","Magento_Sales/order/edit/address/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * Currently Magento App stores both  region_id and region (as text) values.\n     * To prevent missing region (as text) we need to copy it in hidden field.\n     * @param {Array} config\n     * @param {String} element\n     */\n    return function (config, element) {\n        var form = $(element),\n            regionId = form.find('#region_id'),\n\n            /**\n             * Set region callback\n             */\n            setRegion = function () {\n                form.find('#region').val(regionId.filter(':visible').find(':selected').text());\n            };\n\n        if (regionId.is('visible')) {\n            setRegion();\n        }\n\n        regionId.on('change', setRegion);\n        form.find('#country_id').on('change', setRegion);\n    };\n});\n","Magento_Sales/order/view/post-wrapper.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, confirm) {\n    'use strict';\n\n    /**\n     * @param {String} url\n     * @returns {jQuery}\n     */\n    function getForm(url) {\n        return $('<form>', {\n            'action': url,\n            'method': 'POST'\n        }).append($('<input>', {\n            'name': 'form_key',\n            'value': window.FORM_KEY,\n            'type': 'hidden'\n        }));\n    }\n\n    $(document).on('click', '#order-view-cancel-button', function () {\n        var msg = $.mage.__('Are you sure you want to cancel this order?'),\n            url = $('#order-view-cancel-button').data('url');\n\n        confirm({\n            'content': msg,\n            'actions': {\n\n                /**\n                 * 'Confirm' action handler.\n                 */\n                confirm: function () {\n                    getForm(url).appendTo('body').trigger('submit');\n                }\n            }\n        });\n\n        return false;\n    });\n\n    $(document).on('click', '#order-view-hold-button', function () {\n        var url = $('#order-view-hold-button').data('url');\n\n        getForm(url).appendTo('body').trigger('submit');\n    });\n\n    $(document).on('click', '#order-view-unhold-button', function () {\n        var url = $('#order-view-unhold-button').data('url');\n\n        getForm(url).appendTo('body').trigger('submit');\n    });\n});\n","Magento_Customer/edit/post-wrapper.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, confirm) {\n    'use strict';\n\n    /**\n     * @param {String} url\n     * @returns {Object}\n     */\n    function getForm(url) {\n        return $('<form>', {\n            'action': url,\n            'method': 'POST'\n        }).append($('<input>', {\n            'name': 'form_key',\n            'value': window.FORM_KEY,\n            'type': 'hidden'\n        }));\n    }\n\n    $('#customer-edit-delete-button').on('click', function () {\n        var msg = $.mage.__('Are you sure you want to do this?'),\n            url = $('#customer-edit-delete-button').data('url');\n\n        confirm({\n            'content': msg,\n            'actions': {\n\n                /**\n                 * 'Confirm' action handler.\n                 */\n                confirm: function () {\n                    getForm(url).appendTo('body').submit();\n                }\n            }\n        });\n\n        return false;\n    });\n});\n","Magento_Customer/js/address/default-address.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/button',\n    'underscore'\n], function (Button, _) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            entityId: null,\n            parentId: null,\n            listens: {\n                entity: 'changeVisibility'\n            }\n        },\n\n        /**\n         * Apply action on target component,\n         * but previously create this component from template if it is not existed\n         *\n         * @param {Object} action - action configuration\n         */\n        applyAction: function (action) {\n            if (action.params && action.params[0]) {\n                action.params[0]['entity_id'] = this.entityId;\n                action.params[0]['parent_id'] = this.parentId;\n            } else {\n                action.params = [{\n                    'entity_id': this.entityId,\n                    'parent_id': this.parentId\n                }];\n            }\n\n            this._super();\n        },\n\n        /**\n         * Change visibility of the default address shipping/billing blocks\n         *\n         * @param {Object} entity - customer address\n         */\n        changeVisibility: function (entity) {\n            this.visible(!_.isEmpty(entity));\n        }\n    });\n});\n","Magento_Customer/js/bootstrap/customer-post-action.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Customer/edit/post-wrapper'\n]);\n","Magento_Customer/js/form/components/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/form/form',\n    'underscore',\n    'mage/translate'\n], function ($, uiAlert, uiConfirm, Form, _, $t) {\n    'use strict';\n\n    return Form.extend({\n        defaults: {\n            deleteConfirmationMessage: '',\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            }\n        },\n\n        /**\n         * Delete customer address by provided url.\n         * Will call confirmation message to be sure that user is really wants to delete this address\n         *\n         * @param {String} url - ajax url\n         */\n        deleteAddress: function (url) {\n            var that = this;\n\n            uiConfirm({\n                content: this.deleteConfirmationMessage,\n                actions: {\n                    /** @inheritdoc */\n                    confirm: function () {\n                        that._delete(url);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Perform asynchronous DELETE request to server.\n         * @param {String} url - ajax url\n         * @returns {Deferred}\n         */\n        _delete: function (url) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                    url: url,\n                    data: {\n                        'form_key': window.FORM_KEY\n                    }\n                }),\n                that = this;\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    } else {\n                        that.trigger('deleteAddressAction', that.source.get('data.entity_id'));\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n\n        }\n    });\n});\n","Magento_Customer/js/form/components/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form'\n], function (Insert) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            listens: {\n                responseData: 'onResponse'\n            },\n            modules: {\n                addressListing: '${ $.addressListingProvider }',\n                addressModal: '${ $.addressModalProvider }'\n            }\n        },\n\n        /**\n         * Close modal, reload customer address listing and save customer address\n         *\n         * @param {Object} responseData\n         */\n        onResponse: function (responseData) {\n            var data;\n\n            if (!responseData.error) {\n                this.addressModal().closeModal();\n                this.addressListing().reload({\n                    refresh: true\n                });\n                data = this.externalSource().get('data');\n                this.saveAddress(responseData, data);\n            }\n        },\n\n        /**\n         * Save customer address to customer form data source\n         *\n         * @param {Object} responseData\n         * @param {Object} data - customer address\n         */\n        saveAddress: function (responseData, data) {\n            data['entity_id'] = responseData.data['entity_id'];\n\n            if (parseFloat(data['default_billing'])) {\n                this.source.set('data.default_billing_address', data);\n            } else if (\n                parseFloat(this.source.get('data.default_billing_address')['entity_id']) === data['entity_id']\n            ) {\n                this.source.set('data.default_billing_address', []);\n            }\n\n            if (parseFloat(data['default_shipping'])) {\n                this.source.set('data.default_shipping_address', data);\n            } else if (\n                parseFloat(this.source.get('data.default_shipping_address')['entity_id']) === data['entity_id']\n            ) {\n                this.source.set('data.default_shipping_address', []);\n            }\n        },\n\n        /**\n         * Event method that closes \"Edit customer address\" modal and refreshes grid after customer address\n         * was removed through \"Delete\" button on the \"Edit customer address\" modal\n         *\n         * @param {String} id - customer address ID to delete\n         */\n        onAddressDelete: function (id) {\n            this.addressModal().closeModal();\n            this.addressListing().reload({\n                refresh: true\n            });\n            this.addressListing()._delete([parseFloat(id)]);\n        }\n    });\n});\n","Magento_Customer/js/form/components/insert-listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-listing',\n    'underscore'\n], function (Insert, _) {\n    'use strict';\n\n    return Insert.extend({\n\n        /**\n         * On action call\n         *\n         * @param {Object} data - customer address and actions\n         */\n        onAction: function (data) {\n            this[data.action + 'Action'].call(this, data.data);\n        },\n\n        /**\n         * On mass action call\n         *\n         * @param {Object} data - customer address\n         */\n        onMassAction: function (data) {\n            this[data.action + 'Massaction'].call(this, data.data);\n        },\n\n        /**\n         * Set default billing address\n         *\n         * @param {Object} data - customer address\n         */\n        setDefaultBillingAction: function (data) {\n            this.source.set('data.default_billing_address', data);\n        },\n\n        /**\n         * Set default shipping address\n         *\n         * @param {Object} data - customer address\n         */\n        setDefaultShippingAction: function (data) {\n            this.source.set('data.default_shipping_address', data);\n        },\n\n        /**\n         * Delete customer address\n         *\n         * @param {Object} data - customer address\n         */\n        deleteAction: function (data) {\n            this._delete([parseFloat(data[data['id_field_name']])]);\n        },\n\n        /**\n         * Mass action delete\n         *\n         * @param {Object} data - customer address\n         */\n        deleteMassaction: function (data) {\n            var ids = data.selected || this.selections().selected();\n\n            ids = _.map(ids, function (val) {\n                return parseFloat(val);\n            });\n\n            this._delete(ids);\n        },\n\n        /**\n         * Delete customer address and selections by provided ids.\n         *\n         * @param {Array} ids\n         */\n        _delete: function (ids) {\n            var defaultShippingId = parseFloat(this.source.get('data.default_shipping_address.entity_id')),\n                defaultBillingId = parseFloat(this.source.get('data.default_billing_address.entity_id'));\n\n            if (ids.indexOf(defaultShippingId) !== -1) {\n                this.source.set('data.default_shipping_address', []);\n            }\n\n            if (ids.indexOf(defaultBillingId) !== -1) {\n                this.source.set('data.default_billing_address', []);\n            }\n\n            _.each(ids, function (id) {\n                this.selections().deselect(id.toString(), false);\n            }, this);\n        }\n    });\n});\n","Magento_Customer/js/form/element/country.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/country'\n], function (Country) {\n    'use strict';\n\n    return Country.extend({\n        defaults: {\n            countryScope: 'data.country'\n        },\n\n        /**\n         * Set country to customer address form\n         *\n         * @param {String} value - country\n         */\n        setDifferedFromDefault: function (value) {\n            this._super();\n\n            if (value) {\n                this.source.set(this.countryScope, this.indexedOptions[value].label);\n            }\n        }\n    });\n});\n","Magento_Customer/js/form/element/region.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/region'\n], function (Region) {\n    'use strict';\n\n    return Region.extend({\n        defaults: {\n            regionScope: 'data.region'\n        },\n\n        /**\n         * Set region to customer address form\n         *\n         * @param {String} value - region\n         */\n        setDifferedFromDefault: function (value) {\n            this._super();\n\n            if (parseFloat(value)) {\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\n            }\n        }\n    });\n});\n","Magento_Customer/js/form/element/website.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/website',\n    'uiRegistry',\n    'underscore'\n], function (Website, registry, _) {\n    'use strict';\n\n    return Website.extend({\n        /**\n         * On value change handler.\n         *\n         * @param {String} value\n         */\n        onUpdate: function (value) {\n            var groupIdFieldKey = 'group_id',\n                sendEmailStoreIdFieldKey = 'sendemail_store_id',\n                groupId = registry.get('index = ' + groupIdFieldKey),\n                sendEmailStoreId = registry.get('index = ' + sendEmailStoreIdFieldKey),\n                customerAttributes = registry.filter('parentScope = data.customer'),\n                option = this.getOption(value);\n\n            customerAttributes.forEach(element => {\n                var requiredWebsites = element.validation['required-entry-website'];\n\n                if (!_.isArray(requiredWebsites)) {\n                    return;\n                }\n                if (requiredWebsites.includes(parseInt(value, 10))) {\n                    element.validation['required-entry'] = true;\n                    element.required(true);\n                } else {\n                    delete element.validation['required-entry'];\n                    element.required(false);\n                }\n            });\n\n            if (groupId) {\n                groupId.value(option[groupIdFieldKey]);\n            }\n\n            if (sendEmailStoreId && option['default_store_view_id']) {\n                sendEmailStoreId.value(option['default_store_view_id']);\n            }\n            return this._super();\n        }\n    });\n});\n","Magento_Customer/js/grid/massactions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/massactions',\n    'Magento_Ui/js/modal/alert',\n    'underscore',\n    'jquery',\n    'mage/translate'\n], function (Massactions, uiAlert, _, $, $t) {\n    'use strict';\n\n    return Massactions.extend({\n        defaults: {\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            },\n            listens: {\n                massaction: 'onAction'\n            }\n        },\n\n        /**\n         * Reload customer addresses listing\n         *\n         * @param {Object} data\n         */\n        onAction: function (data) {\n            if (data.action === 'delete') {\n                this.source.reload({\n                    refresh: true\n                });\n            }\n        },\n\n        /**\n         * Default action callback. Send selections data\n         * via POST request.\n         *\n         * @param {Object} action - Action data.\n         * @param {Object} data - Selections data.\n         */\n        defaultCallback: function (action, data) {\n            var itemsType, selections;\n\n            if (action.isAjax) {\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\n                selections = {};\n\n                selections[itemsType] = data[itemsType];\n\n                if (!selections[itemsType].length) {\n                    selections[itemsType] = false;\n                }\n\n                _.extend(selections, data.params || {});\n\n                this.request(action.url, selections).done(function (response) {\n                    if (!response.error) {\n                        this.trigger('massaction', {\n                            action: action.type,\n                            data: selections\n                        });\n                    }\n                }.bind(this));\n            } else {\n                this._super();\n            }\n        },\n\n        /**\n         * Send customer address listing mass action ajax request\n         *\n         * @param {String} href\n         * @param {Object} data\n         */\n        request: function (href, data) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                url: href,\n                data: data\n            });\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n        }\n    });\n});\n","Magento_Customer/js/grid/columns/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/actions',\n    'Magento_Ui/js/modal/alert',\n    'underscore',\n    'jquery',\n    'mage/translate'\n], function (Actions, uiAlert, _, $, $t) {\n    'use strict';\n\n    return Actions.extend({\n        defaults: {\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            },\n            listens: {\n                action: 'onAction'\n            },\n            ignoreTmpls: {\n                fieldAction: true,\n                options: true,\n                action: true\n            }\n        },\n\n        /**\n         * Reload customer address listing data source after customer address delete action\n         *\n         * @param {Object} data\n         */\n        onAction: function (data) {\n            if (data.action === 'delete') {\n                this.source().reload({\n                    refresh: true\n                });\n            }\n        },\n\n        /**\n         * Default action callback. Redirects to\n         * the specified in action's data url.\n         *\n         * @param {String} actionIndex - Action's identifier.\n         * @param {(Number|String)} recordId - Id of the record associated\n         *      with a specified action.\n         * @param {Object} action - Action's data.\n         */\n        defaultCallback: function (actionIndex, recordId, action) {\n            if (action.isAjax) {\n                this.request(action.href).done(function (response) {\n                    var data;\n\n                    if (!response.error) {\n                        data = _.findWhere(this.rows, {\n                            _rowIndex: action.rowIndex\n                        });\n\n                        this.trigger('action', {\n                            action: actionIndex,\n                            data: data\n                        });\n                    }\n                }.bind(this));\n\n            } else {\n                this._super();\n            }\n        },\n\n        /**\n         * Send customer address listing ajax request\n         *\n         * @param {String} href\n         */\n        request: function (href) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                url: href,\n                data: {\n                    'form_key': window.FORM_KEY\n                }\n            });\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n        }\n    });\n});\n","Magento_Customer/js/grid/filters/chips.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/filters/chips'\n], function (Chips) {\n    'use strict';\n\n    return Chips.extend({\n\n        /**\n         * Clear previous filters while initializing element to prevent filters sharing between customers\n         *\n         * @param {Object} elem\n         */\n        initElement: function (elem) {\n            this.clear();\n            this._super(elem);\n        }\n    });\n});\n","Magento_Customer/js/grid/filters/filters.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/filters/filters'\n], function (Filters) {\n    'use strict';\n\n    return Filters.extend({\n        defaults: {\n            chipsConfig: {\n                name: '${ $.name }_chips',\n                provider: '${ $.chipsConfig.name }',\n                component: 'Magento_Customer/js/grid/filters/chips'\n            }\n        }\n    });\n});\n","Magento_Integration/js/integration.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * jQuery plugin is added.\n *\n * @api\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'jquery/ui',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal'\n], function ($, alert) {\n    'use strict';\n\n    $.widget('mage.integration', {\n        /**\n         * Options common to all instances of this widget.\n         * @type {Object}\n         */\n        options: {\n            /**\n             * URL of the integration grid.\n             * @type {String}\n             */\n            gridUrl: ''\n        },\n\n        /**\n         * Bind event handler for the action when admin clicks \"Save & Activate\" button.\n         * @private\n         */\n        _create: function () {\n            if ($('#save-split-button-activate').length) {\n                // We're on the \"New integration\" page - bind related handler\n                this._form = $('#edit_form');\n                this._form.on('saveAndActivate', $.proxy(this._saveAndActivate, this));\n            }\n        },\n\n        /**\n         * Save new integration, then kick off the activate dialog.\n         * @private\n         */\n        _saveAndActivate: function () {\n            if (this._form.validation && !this._form.validation('isValid')) {\n                return false;\n            }\n\n            $.ajax({\n                url: this._form.prop('action'),\n                type: 'post',\n                data: this._form.serialize(),\n                dataType: 'json',\n                context: this,\n\n                /** @inheritdoc */\n                beforeSend: function () {\n                    $('body').trigger('processStart');\n                },\n\n                /** @inheritdoc */\n                success: function (data) {\n                    var integrationName, that;\n\n                    if (data._redirect) {\n                        window.location.href = data._redirect;\n                    } else if (data.integrationId) {\n                        integrationName = $('#integration_properties_name').val();\n                        window.integration.popup.show($('<span>').attr({\n                            'data-row-dialog': 'permissions',\n                            'data-row-id': data.integrationId,\n                            // We do escaping here instead of the place of actual output because _showPopup()\n                            // actually receives dialog window title from couple of places: from here and from the grid.\n                            // The issue is we always should escape values in the grid, so that value is already\n                            // escaped. To avoid double escaping we do it here instead of the output.\n                            'data-row-name': $('<div>').text(integrationName).html(),\n                            'data-row-is-reauthorize': '0',\n                            'data-row-is-token-exchange': data.isTokenExchange\n                        }));\n                        that = this;\n                        $('#integration-popup-container').on('dialogclose', function () {\n                            $('body').trigger('processStart');\n                            window.location.href = that.options.gridUrl;\n\n                            return false;\n                        });\n                    }\n                },\n\n                /** @inheritdoc */\n                error: function (jqXHR, status, error) {\n                    alert({\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\n                    });\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\n                },\n\n                /** @inheritdoc */\n                complete: function () {\n                    $('body').trigger('processStop');\n                }\n            });\n\n            return true;\n        }\n    });\n\n    /**\n     * @param {*} permissionsDialogUrl\n     * @param {*} tokensDialogUrl\n     * @param {*} tokensExchangeUrl\n     * @param {*} gridUrl\n     * @param {*} successCallbackUrl\n     * @return {Object}\n     * @constructor\n     */\n    window.Integration = function (\n        permissionsDialogUrl,\n        tokensDialogUrl,\n        tokensExchangeUrl,\n        gridUrl,\n        successCallbackUrl\n    ) {\n        var url = {\n            permissions: permissionsDialogUrl,\n            tokens: tokensDialogUrl,\n            tokensExchange: tokensExchangeUrl,\n            grid: gridUrl\n        },\n        IdentityLogin = {\n            win: null,\n            strLocation: null,\n            checker: null,\n            isCalledBack: false,\n            //Info popup dialog. Should be hidden when login window is closed\n            jqInfoDialog: $('#integration-popup-container'),\n            successCallbackUrl: successCallbackUrl,\n            Constants: {\n                /*\n                 This interval is set such that it adjusts to the child window closing timeout of 1000 ms. This will\n                 give the checker function enough time to detect if the successCallback has been invoked\n                 */\n                CHECKER_INTERVAL: 500,\n                //Login screen size plus some buffer\n                WIDTH: 680,\n                HEIGHT: 510,\n                // subtract pixels(30) and width(680) from screen width to move popup from extreme left\n                LEFT: screen.width - 680 - 30,\n                // subtract pixels(300) and height(300) from screen height to move from top\n                TOP: screen.height - 510 - 300\n            },\n\n            /**\n             * @param {*} identityCallbackUrl\n             * @param {*} consumerKey\n             * @param {*} jqInfoDialog\n             */\n            invokePopup: function (identityCallbackUrl, consumerKey, jqInfoDialog) {\n                var param;\n\n                // Callback should be invoked only once. Reset callback flag on subsequent invocations.\n                IdentityLogin.isCalledBack = false;\n                IdentityLogin.jqInfoDialog = jqInfoDialog;\n                param = $.param({\n                    'oauth_consumer_key': consumerKey,\n                    'success_call_back': IdentityLogin.successCallbackUrl\n                });\n                IdentityLogin.win = window.open(identityCallbackUrl + '?' + param, '',\n                    'top=' + IdentityLogin.Constants.TOP +\n                        ', left=' + IdentityLogin.Constants.LEFT +\n                        ', width=' + IdentityLogin.Constants.WIDTH +\n                        ', height=' + IdentityLogin.Constants.HEIGHT + ',scrollbars=no');\n\n                if (IdentityLogin.checker != null) {\n                    //Clear any previous check\n                    clearInterval(IdentityLogin.checker);\n                }\n                //Polling to detect url of the child window.\n                IdentityLogin.checker = setInterval(\n                    IdentityLogin.fnCheckLocation, IdentityLogin.Constants.CHECKER_INTERVAL\n                );\n            },\n\n            /**\n             * Function to check the location of the child popup window.\n             * Once detected if the callback is successful, parent window will be reloaded\n             */\n            fnCheckLocation: function () {\n                if (IdentityLogin.win == null) {\n                    return;\n                }\n                // Check to see if the location has changed.\n                try {\n                    //Is the success callback invoked\n                    if (IdentityLogin.win.closed ||\n                        IdentityLogin.win.location.href == IdentityLogin.successCallbackUrl //eslint-disable-line eqeqeq\n                    ) {\n                        //Stop the polling\n                        clearInterval(IdentityLogin.checker);\n                        $('body').trigger('processStart');\n                        //Check for window closed\n                        window.location.href = url.grid;\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\n                    }\n                } catch (e) {\n                    //squash. In case Window closed without success callback, clear polling\n                    if (IdentityLogin.win.closed) {\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\n                        clearInterval(IdentityLogin.checker);\n                    }\n\n                    return;\n                }\n            }\n        },\n\n        /**\n         * @param {Object} popupWindow\n         * @return {Boolean}\n         */\n        isPopupBlocked = function (popupWindow) {\n            try {\n                popupWindow.focus();\n            } catch (e) {\n                alert({\n                    content: $.mage.__('Popup Blocker is enabled! Please add this site to your exception list.')\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @param {*} dialog\n         * @param {*} title\n         * @param {*} okButton\n         * @param {*} ajaxUrl\n         * @private\n         */\n        _showPopup = function (dialog, title, okButton, ajaxUrl) {\n            $.ajax({\n                url: ajaxUrl,\n                cache: false,\n                data: {\n                    'form_key': window.FORM_KEY\n                },\n                method: 'GET',\n\n                /** @inheritdoc */\n                beforeSend: function () {\n                    // Show the spinner\n                    $('body').trigger('processStart');\n                },\n\n                /** @inheritdoc */\n                success: function (result) {\n                    var redirect = result._redirect,\n                        identityLinkUrl, consumerKey, popupHtml, popup, resultObj, buttons, dialogProperties;\n\n                    if (redirect) {\n                        window.location.href = redirect;\n\n                        return;\n                    }\n\n                    identityLinkUrl = null;\n                    consumerKey = null;\n                    popupHtml = null;\n                    popup = $('#integration-popup-container');\n\n                    try {\n                        resultObj = typeof result === 'string' ?\n                            JSON.parse(result) :\n                            result;\n\n                        identityLinkUrl = resultObj['identity_link_url'];\n                        consumerKey      = resultObj['oauth_consumer_key'];\n                        popupHtml       = resultObj['popup_content'];\n\n                    } catch (e) {\n                        //This is expected if result is not json. Do nothing.\n                    }\n\n                    if (identityLinkUrl && consumerKey && popupHtml) {\n                        IdentityLogin.invokePopup(identityLinkUrl, consumerKey, popup);\n\n                        if (isPopupBlocked(IdentityLogin.win)) {\n                            return;\n                        }\n                    } else {\n                        popupHtml = result;\n                    }\n\n                    if (popup.length === 0) {\n                        popup = $('<div></div>');\n                    }\n                    popup.html(popupHtml);\n\n                    buttons = [];\n                    dialogProperties = {\n                        title: title,\n                        type: 'slide',\n                        dialogClass: dialog == 'permissions' ? 'integration-dialog' : 'integration-dialog no-close' //eslint-disable-line\n                    };\n\n                    // Add confirmation button to the list of dialog buttons. okButton not set for tokenExchange dialog\n                    if (okButton) {\n                        buttons.push(okButton);\n                    }\n                    // Add button only if its not empty\n                    if (buttons.length > 0) {\n                        dialogProperties.buttons = buttons;\n                    }\n                    popup.modal(dialogProperties);\n                    popup.modal('openModal');\n                },\n\n                /** @inheritdoc */\n                error: function (jqXHR, status, error) {\n                    alert({\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\n                    });\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\n                },\n\n                /** @inheritdoc */\n                complete: function () {\n                    // Hide the spinner\n                    $('body').trigger('processStop');\n                }\n            });\n        };\n\n        return {\n            popup: {\n                /**\n                 * @param {*} ctx\n                 */\n                show: function (ctx) {\n                    var dialog = $(ctx).attr('data-row-dialog'),\n                        isReauthorize = $(ctx).attr('data-row-is-reauthorize'),\n                        isTokenExchange = $(ctx).attr('data-row-is-token-exchange'),\n                        integrationId, ajaxUrl, integrationName, okButton;\n\n                    if (!url.hasOwnProperty(dialog)) {\n                        throw 'Invalid dialog type';\n                    }\n\n                    integrationId = $(ctx).attr('data-row-id');\n\n                    if (!integrationId) {\n                        throw 'Unable to find integration ID';\n                    }\n\n                    // Replace placeholders in URL\n                    ajaxUrl = url[dialog].replace(':id', integrationId).replace(':isReauthorize', isReauthorize);\n\n                    try {\n                        // Get integration name either from current element or from neighbor column\n                        integrationName = $(ctx).attr('data-row-name') ||\n                            $(ctx).parents('tr').find('.col-name').html().trim(); // eslint-disable-line jquery-no-trim\n\n                        if (integrationName.indexOf('<span') > -1) {\n                            // Remove unsecure URL warning from popup window title if it is present\n                            integrationName = integrationName.substring(0, integrationName.indexOf('<span'));\n                        }\n                    } catch (e) {\n                        throw 'Unable to find integration name';\n                    }\n\n                    okButton = {\n                        permissions: {\n                            text: isReauthorize == '1' ? $.mage.__('Reauthorize') : $.mage.__('Allow'), //eslint-disable-line\n                            'class': 'action-primary',\n                            attr: {\n                                'data-row-id': integrationId,\n                                'data-row-name': integrationName,\n                                'data-row-dialog': isTokenExchange == '1' ? 'tokensExchange' : 'tokens', //eslint-disable-line\n                                'data-row-is-reauthorize': isReauthorize,\n                                'data-row-is-token-exchange': isTokenExchange\n                            },\n\n                            /**\n                             * Click.\n                             */\n                            click: function () {\n                                // Find the 'Allow' button and clone - it has all necessary data, but is going to be\n                                // destroyed along with the current dialog\n                                var context = this.modal.find('button.action-primary').clone(true);\n\n                                this.closeModal();\n                                this.modal.remove();\n                                // Make popup out of data we saved from 'Allow' button\n                                window.integration.popup.show(context);\n                            }\n                        },\n                        tokens: {\n                            text: $.mage.__('Done'),\n                            'class': 'action-primary',\n\n                            /**\n                             * Click.\n                             */\n                            click: function () {\n                                // Integration has been activated at the point of generating tokens\n                                window.location.href = url.grid;\n                            }\n                        }\n                    };\n\n                    _showPopup(dialog, integrationName, okButton[dialog], ajaxUrl);\n                }\n            }\n        };\n    };\n\n    return $.mage.integration;\n});\n","Magento_User/js/delete-user-account.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    var postData;\n\n    return function (params, elem) {\n\n        elem.on('click', function () {\n\n            postData = {\n                'data': {\n                    'user_id': params.objId,\n                    'current_password': $('[name=\"current_password\"]').val()\n                }\n            };\n\n            if ($.validator.validateElement($('[name=\"current_password\"]'))) {\n                window.deleteConfirm(params.message, params.url, postData);\n            }\n        });\n    };\n});\n","Magento_User/js/roles-tree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'jquery/ui',\n    'jquery/jstree/jquery.jstree'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.rolesTree', {\n        options: {\n            treeInitData: {},\n            editFormSelector: '',\n            resourceFieldName: 'resource[]',\n            checkboxVisible: true\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this.element.jstree({\n                plugins: ['checkbox'],\n                checkbox: {\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    three_state: false,\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    visible: this.options.checkboxVisible,\n                    cascade: 'undetermined'\n                },\n                core: {\n                    data: this.options.treeInitData,\n                    themes: {\n                        dots: false\n                    }\n                }\n            });\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _destroy: function () {\n            this.element.jstree('destroy');\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            this.element.on('select_node.jstree', $.proxy(this._selectChildNodes, this));\n            this.element.on('deselect_node.jstree', $.proxy(this._deselectChildNodes, this));\n            this.element.on('changed.jstree', $.proxy(this._changedNode, this));\n        },\n\n        /**\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _selectChildNodes: function (event, selected) {\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            selected.instance.open_node(selected.node);\n            selected.node.children.each(function (id) {\n                var selector = '[id=\"' + id + '\"]';\n\n                selected.instance.select_node(\n                    selected.instance.get_node($(selector), false)\n                );\n            });\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n        },\n\n        /**\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _deselectChildNodes: function (event, selected) {\n            selected.node.children.each(function (id) {\n                var selector = '[id=\"' + id + '\"]';\n\n                // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                selected.instance.deselect_node(\n                    selected.instance.get_node($(selector), false)\n                );\n                // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n            });\n        },\n\n        /**\n         * Add selected resources to form to be send later\n         *\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _changedNode: function (event, selected) {\n            var form = $(this.options.editFormSelector),\n                fieldName = this.options.resourceFieldName,\n                items = selected.selected.concat($(this.element).jstree('get_undetermined'));\n\n            if (this.options.editFormSelector === '') {\n                return;\n            }\n            form.find('input[name=\"' + this.options.resourceFieldName +  '\"]').remove();\n            items.each(function (id) {\n                $('<input>', {\n                    type: 'hidden',\n                    name: fieldName,\n                    value: id\n                }).appendTo(form);\n            });\n        }\n    });\n\n    return $.mage.rolesTree;\n});\n","Magento_Cms/js/folder-tree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'jquery/jstree/jquery.jstree'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.folderTree', {\n        options: {\n            root: 'root',\n            rootName: 'Root',\n            url: '',\n            currentPath: ['root'],\n            tree: {\n                core: {\n                    themes: {\n                        dots: false\n                    },\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    check_callback: true\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                }\n            }\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            var options = this.options,\n                treeOptions = $.extend(\n                    true,\n                    {},\n                    options.tree,\n                    {\n                        core: {\n                            data: {\n                                url: options.url,\n                                type: 'POST',\n                                dataType: 'text',\n                                dataFilter: $.proxy(function (data) {\n                                    return this._convertData(JSON.parse(data));\n                                }, this),\n\n                                /**\n                                 * @param {HTMLElement} node\n                                 * @return {Object}\n                                 */\n                                data: function (node) {\n                                    return {\n                                        node: node.id === 'root' ? null : node.id,\n                                        'form_key': window.FORM_KEY\n                                    };\n                                }\n                            }\n                        }\n                    }\n                );\n\n            this.element.jstree(treeOptions)\n                .on('ready.jstree', $.proxy(this.treeLoaded, this))\n                .on('load_node.jstree', $.proxy(this._createRootNode, this));\n        },\n\n        /**\n         * Tree loaded.\n         */\n        treeLoaded: function () {\n            var path = this.options.currentPath,\n                tree = this.element,\n                lastExistentFolderEl,\n\n                /**\n                 * Recursively open folders specified in path array.\n                 */\n                recursiveOpen = function () {\n                    var folderEl = $('[data-id=\"' + path.pop() + '\"]');\n\n                    // if folder doesn't exist, select the last opened folder\n                    if (!folderEl.length) {\n                        tree.jstree('select_node', lastExistentFolderEl);\n\n                        return;\n                    }\n\n                    lastExistentFolderEl = folderEl;\n\n                    if (path.length) {\n                        tree.jstree('open_node', folderEl, recursiveOpen);\n                    } else {\n                        tree.jstree('open_node', folderEl, function () {\n                            tree.jstree('select_node', folderEl);\n                        });\n                    }\n                };\n\n            recursiveOpen();\n        },\n\n        /**\n         * Create tree root node\n         *\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _createRootNode: function (event, data) {\n            var rootNode, children;\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (data.node.id === '#') {\n                rootNode = {\n                    id: this.options.root,\n                    text: this.options.rootName,\n                    li_attr: {\n                        'data-id': this.options.root\n                    }\n                };\n                children = data.node.children;\n\n                data.instance.element.jstree().create_node(null, rootNode, 'first', function () {\n                    data.instance.element.jstree().move_node(children, rootNode.id);\n                });\n            }\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n        },\n\n        /**\n         * @param {*} data\n         * @return {*}\n         * @private\n         */\n        _convertData: function (data) {\n            return $.map(data, function (node) {\n\n                return {\n                    id: node.id,\n                    text: node.text,\n                    path: node.path,\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    li_attr: {\n                        'data-id': node.id\n                    },\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    children: node.children\n                };\n            });\n        }\n    });\n\n    return $.mage.folderTree;\n});\n","Magento_Email/js/variables.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Variables, updateElementAtCursor */\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal',\n    'jquery/ui',\n    'prototype'\n], function (jQuery, $t) {\n    'use strict';\n\n    window.Variables = {\n        textareaElementId: null,\n        variablesContent: null,\n        dialogWindow: null,\n        dialogWindowId: 'variables-chooser',\n        overlayShowEffectOptions: null,\n        overlayHideEffectOptions: null,\n        insertFunction: 'Variables.insertVariable',\n        variablesValue: [],\n\n        /**\n         * @param {*} textareaElementId\n         * @param {Function} insertFunction\n         */\n        init: function (textareaElementId, insertFunction) {\n            if ($(textareaElementId)) {\n                this.textareaElementId = textareaElementId;\n            }\n\n            if (insertFunction) {\n                this.insertFunction = insertFunction;\n            }\n        },\n\n        /**\n         * reset data.\n         */\n        resetData: function () {\n            this.variablesContent = null;\n            this.dialogWindow = null;\n        },\n\n        /**\n         * @param {Object} variables\n         */\n        openVariableChooser: function (variables) {\n            if (this.variablesContent == null && variables) {\n                this.variablesContent = '<ul class=\"insert-variable\">';\n                variables.each(function (variableGroup) {\n                    if (variableGroup.label && variableGroup.value) {\n                        this.variablesContent += '<li><b>' + variableGroup.label.escapeHTML() + '</b></li>';\n                        variableGroup.value.each(function (variable) {\n                            if (variable.value && variable.label) {\n                                this.variablesValue.push(variable.value);\n                                this.variablesContent += '<li>' +\n                                    this.prepareVariableRow(this.variablesValue.length, variable.label) + '</li>';\n                            }\n                        }.bind(this));\n                    }\n                }.bind(this));\n                this.variablesContent += '</ul>';\n            }\n\n            if (this.variablesContent) {\n                this.openDialogWindow(this.variablesContent);\n            }\n        },\n\n        /**\n         * @param {*} variablesContent\n         */\n        openDialogWindow: function (variablesContent) {\n            var windowId = this.dialogWindowId;\n\n            jQuery('<div id=\"' + windowId + '\">' + variablesContent + '</div>').modal({\n                title: $t('Insert Variable...'),\n                type: 'slide',\n                buttons: [],\n\n                /** @inheritdoc */\n                closed: function (e, modal) {\n                    modal.modal.remove();\n                }\n            });\n\n            jQuery('#' + windowId).modal('openModal');\n        },\n\n        /**\n         * Close dialog window.\n         */\n        closeDialogWindow: function () {\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\n        },\n\n        /**\n         * @param {Number} index\n         * @param {*} varLabel\n         * @return {String}\n         */\n        prepareVariableRow: function (index, varLabel) {\n            return '<a href=\"#\" onclick=\"' +\n                this.insertFunction +\n                '(' +\n                index +\n                ');return false;\">' +\n                varLabel.escapeHTML() +\n                '</a>';\n        },\n\n        /**\n         * @param {*} variable\n         */\n        insertVariable: function (variable) {\n            var windowId = this.dialogWindowId,\n                textareaElm, scrollPos;\n\n            jQuery('#' + windowId).modal('closeModal');\n            textareaElm = $(this.textareaElementId);\n\n            if (textareaElm) {\n                scrollPos = textareaElm.scrollTop;\n\n                if (!isNaN(variable)) {\n                    updateElementAtCursor(textareaElm, Variables.variablesValue[variable - 1]);\n                } else {\n                    updateElementAtCursor(textareaElm, variable);\n                }\n                textareaElm.focus();\n                textareaElm.scrollTop = scrollPos;\n                jQuery(textareaElm).trigger('change');\n                textareaElm = null;\n            }\n        }\n    };\n\n    window.MagentovariablePlugin = {\n        editor: null,\n        variables: null,\n        textareaId: null,\n\n        /**\n         * @param {*} editor\n         */\n        setEditor: function (editor) {\n            this.editor = editor;\n        },\n\n        /**\n         * @param {String} url\n         * @param {*} textareaId\n         */\n        loadChooser: function (url, textareaId) {\n            this.textareaId = textareaId;\n\n            if (this.variables == null) {\n                new Ajax.Request(url, {\n                    parameters: {},\n                    onComplete: function (transport) {\n                        if (transport.responseText.isJSON()) {\n                            Variables.init(null, 'MagentovariablePlugin.insertVariable');\n                            this.variables = transport.responseText.evalJSON();\n                            this.openChooser(this.variables);\n                        }\n                    }.bind(this)\n                });\n            } else {\n                this.openChooser(this.variables);\n            }\n        },\n\n        /**\n         * @param {*} variables\n         */\n        openChooser: function (variables) {\n            Variables.openVariableChooser(variables);\n        },\n\n        /**\n         * @param {*} value\n         */\n        insertVariable: function (value) {\n            if (this.textareaId) {\n                Variables.init(this.textareaId);\n                Variables.insertVariable(value);\n            } else {\n                Variables.closeDialogWindow();\n                this.editor.execCommand('mceInsertContent', false, value);\n            }\n        }\n    };\n});\n","Magento_Theme/js/bootstrap.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'jquery/fileUploader/jquery.fileupload-ui',\n    'mage/adminhtml/browser',\n    'Magento_Theme/js/form'\n]);\n","Magento_Theme/js/custom-js-list.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery/ui'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('theme.themeJsList', {\n        options: {\n            templateId: null,\n            emptyTemplateId: null,\n            refreshFileListEvent: null,\n            prefixItemId: '',\n            suffixItemId: ''\n        },\n\n        /**\n         * Initialize widget\n         *\n         * @protected\n         */\n        _create: function () {\n            this._bind();\n        },\n\n        /**\n         * Bind event handlers\n         *\n         * @protected\n         */\n        _bind: function () {\n            $('body').on(this.options.refreshFileListEvent, $.proxy(this._onRefreshList, this));\n        },\n\n        /**\n         * Render js files list\n         *\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @protected\n         */\n        _onRefreshList: function (event, data) {\n            $(this.element).html('');\n\n            if (data.jsList.length) {\n                this._renderList(data.jsList);\n            } else {\n                this._renderEmptyList();\n            }\n        },\n\n        /**\n         * Get item js list id\n         *\n         * @param {*} fileId\n         * @return {String}\n         * @protected\n         */\n        _getItemId: function (fileId) {\n            return this.options.prefixItemId + fileId + this.options.suffixItemId;\n        },\n\n        /**\n         * Render js list\n         *\n         * @param {Array} jsList\n         * @protected\n         */\n        _renderList: function (jsList) {\n            var itemTmpl,\n                index,\n                tmpl;\n\n            for (index = 0; index < jsList.length; index++) {\n                itemTmpl = $('<li></li>').html($(this.options.templateId).html());\n\n                $(itemTmpl).attr('class', $(this.options.templateId).attr('class'));\n\n                itemTmpl.attr('id', this._getItemId(jsList[index].id));\n\n                tmpl = mageTemplate(itemTmpl.html(), {\n                    data: jsList[index]\n                });\n\n                itemTmpl.html(tmpl);\n\n                itemTmpl.removeClass('no-display');\n                itemTmpl.appendTo(this.element);\n            }\n        },\n\n        /**\n         * Set empty js list\n         *\n         * @protected\n         */\n        _renderEmptyList: function () {\n            var itemTmpl = $('<li></li>').html($(this.options.emptyTemplateId).html());\n\n            $(itemTmpl).attr('class', $(this.options.emptyTemplateId).attr('class'));\n\n            itemTmpl.attr('id', 'empty-js-list');\n            itemTmpl.removeClass('no-display');\n            itemTmpl.appendTo(this.element);\n        }\n    });\n});\n","Magento_Theme/js/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'prototype'\n], function () {\n    'use strict';\n\n    /**\n     * @param {*} selected\n     * @param {Object} defaultsById\n     */\n    function parentThemeOnChange(selected, defaultsById) {\n        var statusBar = $$('.tab-item-link')[0],\n            isChanged = statusBar.hasClassName('changed'),\n            defaults;\n\n        if (!isChanged) {\n            defaults = defaultsById[selected];\n            $('theme_title').value = defaults['theme_title'];\n        }\n    }\n\n    window.parentThemeOnChange = parentThemeOnChange;\n});\n","Magento_Theme/js/sortable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * JQuery UI Widget declaration: 'mage.sortable'\n *\n * @api\n */\ndefine([\n    'jquery',\n    'jquery/ui'\n], function ($) {\n    'use strict';\n\n    /**\n     * Widget panel\n     */\n    $.widget('mage.sortable', $.ui.sortable, {\n        options: {\n            moveUpEvent:   'moveUp',\n            moveDownEvent: 'moveDown'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this._super();\n            this.initButtons();\n            this.bind();\n        },\n\n        /**\n         * Init buttons.\n         */\n        initButtons: function () {\n            this.element.find('input.up').on('click', $.proxy(function (event) {\n                $('body').trigger(this.options.moveUpEvent, {\n                    item: $(event.target).parent('li')\n                });\n            }, this));\n            this.element.find('input.down').on('click', $.proxy(function (event) {\n                $('body').trigger(this.options.moveDownEvent, {\n                    item: $(event.target).parent('li')\n                });\n            }, this));\n        },\n\n        /**\n         * Bind.\n         */\n        bind: function () {\n            var $body = $('body');\n\n            $body.on(this.options.moveUpEvent, $.proxy(this._onMoveUp, this));\n            $body.on(this.options.moveDownEvent, $.proxy(this._onMoveDown, this));\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _onMoveUp: function (event, data) {\n            data.item.insertBefore(data.item.prev());\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _onMoveDown: function (event, data) {\n            data.item.insertAfter(data.item.next());\n        }\n    });\n\n    return $.mage.sortable;\n});\n","Magento_Theme/js/form/component/robots-reset-button.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/form/components/button',\n    'uiRegistry'\n], function (Button, registry) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            customInstructionField: '${ $.parentName }.custom_instructions',\n            label: '',\n            buttonTpl: 'Magento_Theme/form/element/button'\n        },\n\n        /**\n         * @private\n         * @param {String} json\n         * @return {String}\n         */\n        _parseJson: function (json) {\n            return JSON.parse(json);\n        },\n\n        /**\n         * @param {String} defaultRobotsTxt\n         */\n        reset: function (defaultRobotsTxt) {\n            var customInstructions = registry.get(this.customInstructionField);\n\n            if (customInstructions) {\n                customInstructions.set('value', this._parseJson(defaultRobotsTxt));\n            }\n        }\n    });\n});\n","Magento_Eav/js/input-types.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    return function (config) {\n        $('select#frontend_input').each(function () {\n            var select = $(this),\n                currentValue = select.find('option:selected').val(),\n                compatibleTypes = config.inputTypes,\n                enabledTypes = [],\n                iterator,\n                warning = $('<label>')\n                    .hide()\n                    .text($.mage.__('These changes affect all related products.'))\n                    .addClass('mage-error')\n                    .attr({\n                        generated: true, for: select.attr('id')\n                    }),\n                hint = $('<p>')\n                    .hide()\n                    .addClass('note')\n                    .attr({\n                        generated: true\n                    }),\n                hints = config.hints,\n\n            /**\n             * Toggle hint about changes types\n             */\n            toggleWarning = function () {\n                if (select.find('option:selected').val() === currentValue) {\n                    warning.hide();\n                } else {\n                    warning.show();\n                }\n            },\n\n            /**\n             * Toggle hint\n             */\n            toggleHint = function () {\n                if (typeof hints[select.find('option:selected').val()] !== 'undefined') {\n                    select.after(hint.show().text(hints[select.find('option:selected').val()]));\n                } else {\n                    hint.hide();\n                }\n            },\n\n            /**\n             * Remove unsupported options\n             */\n            removeOption = function () {\n                if (!~enabledTypes.indexOf($(this).val())) {\n                    $(this).remove();\n                }\n            };\n\n            // find enabled types for switching dor current input type\n            for (iterator = 0; iterator < compatibleTypes.length; iterator++) {\n                if (compatibleTypes[iterator].indexOf(currentValue) >= 0) {\n                    enabledTypes = compatibleTypes[iterator];\n                }\n            }\n\n            // Check current type (allow only compatible types)\n            if (~enabledTypes.indexOf(currentValue)) {\n                // Enable select and keep only available options (all other will be removed)\n                select.prop('disabled', false).find('option').each(removeOption);\n                // Add warning on page and event for show/hide it\n                select.after(warning).on('change', toggleWarning);\n            }\n            //bind hint toggling on change event\n            select.on('change', toggleHint);\n            //show hint for currently selected value\n            toggleHint();\n        });\n    };\n});\n","Magento_CatalogInventory/js/components/qty-validator-changer.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            valueUpdate: 'input'\n        },\n\n        /**\n         * Change validator\n         */\n        handleChanges: function (value) {\n            var isDigits = value !== 1;\n\n            this.validation['validate-integer'] = isDigits;\n            this.validation['less-than-equals-to'] = isDigits ? 99999999 : 99999999.9999;\n            this.validate();\n        }\n    });\n});\n","Magento_CatalogInventory/js/components/use-config-min-sale-qty.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox',\n    'underscore',\n    'uiRegistry'\n], function (checkbox, _, registry) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            valueFromConfig: ''\n        },\n\n        /**\n         * @returns {Element}\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['valueFromConfig']);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super();\n            this.onCheckedChanged(this.checked());\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        onCheckedChanged: function (newChecked) {\n            var valueFromConfig = this.valueFromConfig();\n\n            if (newChecked && (_.isArray(valueFromConfig) && valueFromConfig.length === 0 || valueFromConfig === 1)) {\n                this.changeVisibleDisabled(this.inputField, true, true, 1);\n            } else if (newChecked && _.isObject(valueFromConfig)) {\n                this.changeVisibleDisabled(this.inputField, false, true, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, true, true, null);\n            } else if (newChecked && _.isNumber(valueFromConfig)) {\n                this.changeVisibleDisabled(this.inputField, true, true, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\n            } else {\n                this.changeVisibleDisabled(this.inputField, true, this.disabled() || false, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\n            }\n\n            this._super(newChecked);\n        },\n\n        /**\n         * Change visible and disabled\n         *\n         * @param {String} filter\n         * @param {Boolean} visible\n         * @param {Boolean} disabled\n         * @param {Null|Number} valueFromConfig\n         */\n        changeVisibleDisabled: function (filter, visible, disabled, valueFromConfig) {\n            registry.async(filter)(\n                function (currentComponent) {\n                    var initialValue = currentComponent.initialValue;\n\n                    if (_.isString(initialValue) || initialValue === 0 || valueFromConfig === 1) {\n                        currentComponent.value(1);\n                    } else if (initialValue) {\n                        currentComponent.value(initialValue);\n                    }\n\n                    currentComponent.visible(visible);\n                    currentComponent.disabled(disabled);\n                }\n            );\n        }\n    });\n});\n","Magento_CatalogInventory/js/components/use-config-settings.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (checkbox) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            valueFromConfig: '',\n            linkedValue: '',\n            disableParent: false,\n            listens: {\n                disabled: 'processState',\n                checked: 'processState onCheckedChanged'\n            },\n            imports: {\n                readOnly: 'ns = ${ $.ns }, index = stock_data:disabled'\n            }\n        },\n\n        /**\n         * @returns {Element}\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['valueFromConfig', 'linkedValue', 'disableParent']);\n        },\n\n        /**\n         * Handle checked and disabled changes to calculate disableParent value\n         */\n        processState: function () {\n            this.disableParent(this.checked() || this.readOnly);\n\n            if (this.readOnly) {\n                this.disable();\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        onCheckedChanged: function (newChecked) {\n            if (newChecked) {\n                this.linkedValue(this.valueFromConfig());\n            }\n\n            this._super(newChecked);\n        }\n    });\n});\n","Magento_Downloadable/downloadable-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Catalog/js/product/weight-handler',\n    'Magento_Catalog/catalog/type-events'\n], function ($, weight, productType) {\n    'use strict';\n\n    return {\n        $checkbox: $('[data-action=change-type-product-downloadable]'),\n        $items: $('#product_info_tabs_downloadable_items'),\n        $tab: null,\n        isDownloadable: false,\n\n        /**\n         * Show\n         */\n        show: function () {\n            this.$checkbox.prop('checked', true);\n            this.$items.show();\n        },\n\n        /**\n         * Hide\n         */\n        hide: function () {\n            this.$checkbox.prop('checked', false);\n            this.$items.hide();\n        },\n\n        /**\n         * Constructor component\n         * @param {Object} data - this backend data\n         */\n        'Magento_Downloadable/downloadable-type-handler': function (data) {\n            this.$tab = $('[data-tab=' + data.tabId + ']');\n            this.isDownloadable = data.isDownloadable;\n            this.bindAll();\n            this._initType();\n        },\n\n        /**\n         * Bind all\n         */\n        bindAll: function () {\n            this.$checkbox.on('change', function (event) {\n                $(document).trigger('setTypeProduct', $(event.target).prop('checked') ?\n                    'downloadable' :\n                    productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\n                );\n            });\n\n            $(document).on('changeTypeProduct', this._initType.bind(this));\n        },\n\n        /**\n         * Init type\n         * @private\n         */\n        _initType: function () {\n            if (productType.type.current === 'downloadable') {\n                weight.change(false);\n                weight.$weightSwitcher().one('change', function () {\n                    $(document).trigger(\n                        'setTypeProduct',\n                        productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\n                    );\n                });\n                this.show();\n            } else {\n                this.hide();\n            }\n        }\n    };\n});\n","Magento_Downloadable/js/components/file-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/file-uploader'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            fileInputName: ''\n        },\n\n        /**\n         * Adds provided file to the files list.\n         *\n         * @param {Object} file\n         * @returns {FileUploder} Chainable.\n         */\n        addFile: function (file) {\n            var processedFile = this.processFile(file),\n                tmpFile = [],\n                resultFile = {\n                'file': processedFile.file,\n                'name': processedFile.name,\n                'size': processedFile.size,\n                'status': processedFile.status ? processedFile.status : 'new'\n            };\n\n            tmpFile[0] = resultFile;\n\n            this.isMultipleFiles ?\n                this.value.push(tmpFile) :\n                this.value(tmpFile);\n\n            return this;\n        }\n    });\n});\n","Magento_Downloadable/js/components/is-downloadable-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            listens: {\n                disabled: 'changeVisibility'\n            },\n            modules: {\n                samplesFieldset: '${ $.samplesFieldset }',\n                linksFieldset: '${ $.linksFieldset}'\n            }\n        },\n\n        /**\n         * Change visibility for samplesFieldset & linksFieldset based on current statuses of checkbox.\n         */\n        changeVisibility: function () {\n            if (this.samplesFieldset() && this.linksFieldset()) {\n                if (this.checked() && !this.disabled()) {\n                    this.samplesFieldset().visible(true);\n                    this.linksFieldset().visible(true);\n                } else {\n                    this.samplesFieldset().visible(false);\n                    this.linksFieldset().visible(false);\n                }\n            }\n        },\n\n        /**\n         * Handle checked state changes for checkbox / radio button.\n         *\n         * @param {Boolean} newChecked\n         */\n        onCheckedChanged: function (newChecked) {\n            this.changeVisibility();\n            this._super(newChecked);\n        }\n    });\n});\n","Magento_Downloadable/js/components/price-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            linksPurchasedSeparately: '0',\n            useDefaultPrice: false,\n            listens: {\n                linksPurchasedSeparately: 'changeDisabledStatus',\n                useDefaultPrice: 'changeDisabledStatus'\n            }\n        },\n\n        /**\n         * Invokes initialize method of parent class,\n         * contains initialization logic\n         */\n        initialize: function () {\n            this._super();\n            this.changeDisabledStatus();\n\n            return this;\n        },\n\n        /**\n         * Disable/enable price field\n         */\n        changeDisabledStatus: function () {\n            if (this.linksPurchasedSeparately === '1') {\n                if (this.useDefaultPrice) {\n                    this.disabled(true);\n                } else {\n                    this.disabled(false);\n                }\n            } else {\n                this.disabled(true);\n            }\n        }\n    });\n});\n","Magento_Downloadable/js/components/upload-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/select',\n    'uiRegistry'\n], function (Select, registry) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            listens: {\n                value: 'changeTypeUpload'\n            },\n            typeUrl: 'file',\n            typeFile: 'link_url',\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\n        },\n\n        /**\n         * Initialize component.\n         * @returns {Element}\n         */\n        initialize: function () {\n            return this\n                ._super()\n                .changeTypeUpload(this.initialValue);\n        },\n\n        /**\n         * Callback that fires when 'value' property is updated.\n         *\n         * @param {String} currentValue\n         * @returns {*}\n         */\n        onUpdate: function (currentValue) {\n            this.changeTypeUpload(currentValue);\n\n            return this._super();\n        },\n\n        /**\n         * Change visibility for typeUrl/typeFile based on current value.\n         *\n         * @param {String} currentValue\n         */\n        changeTypeUpload: function (currentValue) {\n            var componentFile = this.filterPlaceholder + ', index=' + this.typeFile,\n                componentUrl = this.filterPlaceholder + ', index=' + this.typeUrl;\n\n            switch (currentValue) {\n\n                case 'file':\n                    this.changeVisible(componentFile, true);\n                    this.changeVisible(componentUrl, false);\n                    break;\n\n                case 'url':\n                    this.changeVisible(componentFile, false);\n                    this.changeVisible(componentUrl, true);\n                    break;\n            }\n        },\n\n        /**\n         * Change visible\n         *\n         * @param {String} filter\n         * @param {Boolean} visible\n         */\n        changeVisible: function (filter, visible) {\n            registry.async(filter)(\n                function (currentComponent) {\n                    currentComponent.visible(visible);\n                }\n            );\n        }\n    });\n});\n","Magento_Downloadable/js/components/use-price-default-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            linksPurchasedSeparately: '0',\n            listens: {\n                linksPurchasedSeparately: 'changeVisibleStatus'\n            }\n        },\n\n        /**\n         * Change visibility of checkbox\n         */\n        changeVisibleStatus: function () {\n            if (this.linksPurchasedSeparately === '1') {\n                this.visible(true);\n            } else {\n                this.visible(false);\n            }\n        }\n    });\n});\n","Magento_Review/js/rating.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jquery/ui'\n], function ($) {\n    'use strict';\n\n    $.widget('marketing.ratingControl', {\n        options: {\n            colorFilled: '#333',\n            colorUnfilled: '#CCCCCC',\n            colorHover: '#f30'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this._labels = this.element.find('label');\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            this._labels.on({\n                click: $.proxy(function (e) {\n                    $(e.currentTarget).prev().prop('checked', true);\n                    this._updateRating();\n                }, this),\n\n                hover: $.proxy(function (e) {\n                    this._updateHover($(e.currentTarget), this.options.colorHover);\n                }, this),\n\n                mouseleave: $.proxy(function (e) {\n                    this._updateHover($(e.currentTarget), this.options.colorUnfilled);\n                }, this)\n            });\n\n            this._updateRating();\n        },\n\n        /**\n         * @param {jQuery} elem\n         * @param {String} color\n         * @private\n         */\n        _updateHover: function (elem, color) {\n            elem.nextAll('label').addBack().filter(function () {\n                return !$(this).data('checked');\n            }).css('color', color);\n        },\n\n        /**\n         * @private\n         */\n        _updateRating: function () {\n            var checkedInputs = this.element.find('input[type=\"radio\"]:checked');\n\n            checkedInputs.nextAll('label').addBack().css('color', this.options.colorFilled).data('checked', true);\n            checkedInputs.prevAll('label').css('color', this.options.colorUnfilled).data('checked', false);\n        },\n\n        /**\n         * Remove rating when form reset\n         */\n        removeRating: function () {\n            var checkedInputs = this.element.find('input[type=\"radio\"]');\n\n            checkedInputs.nextAll('label').css('color', this.options.colorUnfilled).data('checked', false);\n        }\n    });\n\n});\n","Magento_ConfigurableProduct/js/configurable-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Catalog/catalog/type-events',\n    'collapsible',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate',\n    'domReady!'\n], function ($, productType) {\n    'use strict';\n\n    return {\n        $block: null,\n        hasVariations: null,\n        configurationSectionMessageHandler: (function () {\n            var title = $('[data-role=\"product-create-configuration-info\"]'),\n                buttons = $('[data-action=\"product-create-configuration-buttons\"]'),\n                newText = 'Configurations cannot be created for a standard product with downloadable files.' +\n                ' To create configurations, first remove all downloadable files.',\n                oldText = title.text();\n\n            return function (change) {\n                if (change) {\n                    title.text(newText);\n                    buttons.hide();\n                } else {\n                    title.text(oldText);\n                    buttons.show();\n                }\n            };\n        }()),\n\n        /**\n         * Set element disabled\n         * @param {Object} $element - jquery instance element\n         * @param {Bool} state\n         * @param {Bool} triggerEvent\n         * @private\n         */\n        _setElementDisabled: function ($element, state, triggerEvent) {\n            if (!$element.is('[data-locked]')) {\n                $element.prop('disabled', state);\n\n                if (triggerEvent) {\n                    $element.trigger('change');\n                }\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function () {\n            this.configurationSectionMessageHandler(false);\n        },\n\n        /**\n         * Hide\n         */\n        hide: function () {\n            this.configurationSectionMessageHandler(true);\n        },\n\n        /**\n         * Bind all\n         */\n        bindAll: function () {\n            $(document).on('changeConfigurableTypeProduct', function (event, isConfigurable) {\n                $(document).trigger('setTypeProduct', isConfigurable ?\n                    'configurable' :\n                    productType.type.init === 'configurable' ? 'simple' : productType.type.init\n                );\n            });\n            $(document).on('changeTypeProduct', this._initType.bind(this));\n        },\n\n        /**\n         * Init type\n         * @private\n         */\n        _initType: function () {\n\n            /*var suggestContainer = $('#product-template-suggest-container .action-dropdown > .action-toggle');\n\n\n            if (productType.type.current === 'configurable') {\n                this._setElementDisabled(suggestContainer.addClass('disabled'), true);\n                this._setElementDisabled($('#inventory_qty'), true);\n                this._setElementDisabled($('#inventory_stock_availability'), false);\n                this._setElementDisabled($('#qty'), true, true);\n                this._setElementDisabled($('#quantity_and_stock_status'), false, false);\n            } else {\n                this._setElementDisabled(suggestContainer.removeClass('disabled'), false);\n                this._setElementDisabled($('#inventory_qty'), false);\n                this._setElementDisabled($('#inventory_stock_availability'), true);\n                this._setElementDisabled($('#qty'), false, true);\n            }\n            */\n\n            /*if (['simple', 'virtual', 'configurable'].indexOf(productType.type.current) < 0) {\n                this.hide();\n            } else {\n                this.show();\n            }*/\n\n            this.show();\n        },\n\n        /**\n         * Constructor component\n         * @param {Object} data - this backend data\n         */\n        'Magento_ConfigurableProduct/js/configurable-type-handler': function (data) {\n            this.$block = $(data.blockId + ' input[name=\"attributes[]\"]');\n            this.hasVariations = data.hasVariations;\n\n            //advancedPricingHandler.init();\n            //priceTypeHandler.init();\n\n            /*if (productType.type.init === 'configurable' && !this.hasVariations) {\n                $(document).trigger('setTypeProduct', 'simple');\n            }*/\n            $(document).trigger('setTypeProduct', 'simple');\n\n            this.bindAll();\n            this._initType();\n        }\n    };\n});\n","Magento_ConfigurableProduct/js/configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**************************** CONFIGURABLE PRODUCT **************************/\n/* global Product, optionsPrice */\ndefine([\n    'jquery',\n    'mage/template',\n    'mage/translate',\n    'prototype'\n], function (jQuery, mageTemplate) {\n    'use strict';\n\n    if (typeof Product == 'undefined') {\n        window.Product = {};\n    }\n\n    Product.Config = Class.create();\n    Product.Config.prototype = {\n        /**\n         * Initialize function.\n         *\n         * @param {Object} config\n         */\n        initialize: function (config) {\n            var separatorIndex, paramsStr, urlValues, i, childSettings, prevSetting, nextSetting;\n\n            // Magic preprocessing\n            // TODO MAGETWO-31539\n            config.taxConfig = {\n                showBothPrices: false,\n                inclTaxTitle: jQuery.mage.__('Incl. Tax')\n            };\n\n            this.config     = config;\n            this.taxConfig  = this.config.taxConfig;\n\n            if (config.containerId) {\n                this.settings   = $$('#' + config.containerId + ' ' + '.super-attribute-select');\n            } else {\n                this.settings   = $$('.super-attribute-select');\n            }\n            this.state      = new Hash();\n            this.priceTemplate = mageTemplate(this.config.template);\n            this.prices     = config.prices;\n            this.values     = {};\n\n            // Set default values from config\n            if (config.defaultValues) {\n                this.values = config.defaultValues;\n            }\n\n            // Overwrite defaults by url\n            separatorIndex = window.location.href.indexOf('#');\n\n            if (separatorIndex != -1) { //eslint-disable-line eqeqeq\n                paramsStr = window.location.href.substr(separatorIndex + 1);\n                urlValues = paramsStr.toQueryParams();\n\n                for (i in urlValues) { //eslint-disable-line guard-for-in\n                    this.values[i] = urlValues[i];\n                }\n            }\n\n            // Overwrite defaults by inputs values if needed\n            if (config.inputsInitialized) {\n                this.values = {};\n                this.settings.each(function (element) {\n                    var attributeId;\n\n                    if (element.value) {\n                        attributeId = element.id.replace(/[a-z]*/, '');\n                        this.values[attributeId] = element.value;\n                    }\n                }.bind(this));\n            }\n\n            // Put events to check select reloads\n            this.settings.each(function (element) {\n                Event.observe(element, 'change', this.configure.bind(this));\n            }.bind(this));\n\n            // fill state\n            this.settings.each(function (element) {\n                var attributeId = element.id.replace(/[a-z]*/, '');\n\n                if (attributeId && this.config.attributes[attributeId]) {\n                    element.config = this.config.attributes[attributeId];\n                    element.attributeId = attributeId;\n                    this.state[attributeId] = false;\n                }\n            }.bind(this));\n\n            // Init settings dropdown\n            childSettings = [];\n\n            for (i = this.settings.length - 1; i >= 0; i--) {\n                prevSetting = this.settings[i - 1] ? this.settings[i - 1] : false;\n                nextSetting = this.settings[i + 1] ? this.settings[i + 1] : false;\n\n                if (i === 0) {\n                    this.fillSelect(this.settings[i]);\n                } else {\n                    this.settings[i].disabled = true;\n                }\n                $(this.settings[i]).childSettings = childSettings.clone();\n                $(this.settings[i]).prevSetting   = prevSetting;\n                $(this.settings[i]).nextSetting   = nextSetting;\n                childSettings.push(this.settings[i]);\n            }\n\n            // Set values to inputs\n            this.configureForValues();\n            document.observe('dom:loaded', this.configureForValues.bind(this));\n        },\n\n        /**\n         * Configure for values.\n         */\n        configureForValues: function () {\n            if (this.values) {\n                this.settings.each(function (element) {\n                    var attributeId = element.attributeId;\n\n                    element.value = typeof this.values[attributeId] === 'undefined' ? '' : this.values[attributeId];\n                    this.configureElement(element);\n                }.bind(this));\n            }\n        },\n\n        /**\n         * @param {Object} event\n         */\n        configure: function (event) {\n            var element = Event.element(event);\n\n            this.configureElement(element);\n        },\n\n        /**\n         * @param {Object} element\n         */\n        configureElement: function (element) {\n            this.reloadOptionLabels(element);\n\n            if (element.value) {\n                this.state[element.config.id] = element.value;\n\n                if (element.nextSetting) {\n                    element.nextSetting.disabled = false;\n                    this.fillSelect(element.nextSetting);\n                    this.resetChildren(element.nextSetting);\n                }\n            } else {\n                this.resetChildren(element);\n            }\n            this.reloadPrice();\n        },\n\n        /**\n         * @param {Object} element\n         */\n        reloadOptionLabels: function (element) {\n            var selectedPrice = 0,\n                option, i;\n\n            if (element.options[element.selectedIndex] && element.options[element.selectedIndex].config) {\n                option = element.options[element.selectedIndex].config;\n                selectedPrice = parseFloat(this.config.optionPrices[option.allowedProducts[0]].finalPrice.amount);\n            }\n            element.setAttribute('price', selectedPrice);\n\n            for (i = 0; i < element.options.length; i++) {\n                if (element.options[i].config) {\n                    element.options[i].setAttribute('price', selectedPrice);\n                    element.options[i].setAttribute('summarizePrice', 0);\n                    element.options[i].text = this.getOptionLabel(element.options[i].config, selectedPrice);\n                }\n            }\n        },\n\n        /* eslint-disable max-depth */\n        /**\n         * @param {Object} element\n         */\n        resetChildren: function (element) {\n            var i;\n\n            if (element.childSettings) {\n                for (i = 0; i < element.childSettings.length; i++) {\n                    element.childSettings[i].selectedIndex = 0;\n                    element.childSettings[i].disabled = true;\n\n                    if (element.config) {\n                        this.state[element.config.id] = false;\n                    }\n                }\n            }\n        },\n\n        /**\n         * @param {Object} element\n         */\n        fillSelect: function (element) {\n            var attributeId = element.id.replace(/[a-z]*/, ''),\n                options = this.getAttributeOptions(attributeId),\n                prevConfig = false,\n                index = 1,\n                i, j, allowedProducts;\n\n            this.clearSelect(element);\n            element.options[0] = new Option('', '');\n            element.options[0].innerHTML = this.config.chooseText;\n\n            if (element.prevSetting) {\n                prevConfig = element.prevSetting.options[element.prevSetting.selectedIndex];\n            }\n\n            if (options) {\n                for (i = 0; i < options.length; i++) {\n                    allowedProducts = [];\n\n                    if (prevConfig) {\n                        for (j = 0; j < options[i].products.length; j++) {\n                            if (prevConfig.config.allowedProducts &&\n                                prevConfig.config.allowedProducts.indexOf(options[i].products[j]) > -1\n                            ) {\n                                allowedProducts.push(options[i].products[j]);\n                            }\n                        }\n                    } else {\n                        allowedProducts = options[i].products.clone();\n                    }\n\n                    if (allowedProducts.size() > 0) {\n                        options[i].allowedProducts = allowedProducts;\n                        element.options[index] = new Option(this.getOptionLabel(options[i]), options[i].id);\n\n                        if (typeof options[i].price != 'undefined') {\n                            element.options[index].setAttribute('price', options[i].price);\n                        }\n                        element.options[index].config = options[i];\n                        index++;\n                    }\n                }\n            }\n        },\n\n        //eslint-enable max-depth\n        /**\n         * @param {Object} option\n         */\n        getOptionLabel: function (option) {\n            return option.label;\n        },\n\n        /**\n         * @param {*} price\n         * @param {Boolean} showSign\n         * @return {String}\n         */\n        formatPrice: function (price, showSign) {\n            var str = '',\n                roundedPrice;\n\n            price = parseFloat(price);\n\n            if (showSign) {\n                if (price < 0) {\n                    str += '-';\n                    price = -price;\n                } else {\n                    str += '+';\n                }\n            }\n\n            roundedPrice = Number(Math.round(price + 'e+2') + 'e-2').toString();\n\n            if (this.prices && this.prices[roundedPrice]) {\n                str += this.prices[roundedPrice];\n            } else {\n                str += this.priceTemplate({\n                    data: {\n                        price: price.toFixed(2)\n                    }\n                });\n            }\n\n            return str;\n        },\n\n        /**\n         * @param {Object} element\n         */\n        clearSelect: function (element) {\n            var i;\n\n            for (i = element.options.length - 1; i >= 0; i--) {\n                element.remove(i);\n            }\n        },\n\n        /**\n         * @param {*} attributeId\n         * @return {*|undefined}\n         */\n        getAttributeOptions: function (attributeId) {\n            if (this.config.attributes[attributeId]) {\n                return this.config.attributes[attributeId].options;\n            }\n        },\n\n        /**\n         * Reload price.\n         *\n         * @return {undefined|Number}\n         */\n        reloadPrice: function () {\n            var price = 0,\n                oldPrice = 0,\n                inclTaxPrice = 0,\n                exclTaxPrice = 0,\n                i, selected;\n\n            if (this.config.disablePriceReload) {\n                return undefined;\n            }\n\n            for (i = this.settings.length - 1; i >= 0; i--) {\n                selected = this.settings[i].options[this.settings[i].selectedIndex];\n\n                if (selected.config) {\n                    price += parseFloat(selected.config.price);\n                    oldPrice += parseFloat(selected.config.oldPrice);\n                    inclTaxPrice += parseFloat(selected.config.inclTaxPrice);\n                    exclTaxPrice += parseFloat(selected.config.exclTaxPrice);\n                }\n            }\n\n            optionsPrice.changePrice(\n                'config', {\n                    'price': price,\n                    'oldPrice': oldPrice,\n                    'inclTaxPrice': inclTaxPrice,\n                    'exclTaxPrice': exclTaxPrice\n                }\n            );\n            optionsPrice.reload();\n\n            return price;\n        },\n\n        /**\n         * Reload old price.\n         */\n        reloadOldPrice: function () {\n            var price, i, selected;\n\n            if (this.config.disablePriceReload) {\n                return;\n            }\n\n            if ($('old-price-' + this.config.productId)) {\n\n                price = parseFloat(this.config.oldPrice);\n\n                for (i = this.settings.length - 1; i >= 0; i--) {\n                    selected = this.settings[i].options[this.settings[i].selectedIndex];\n\n                    if (selected.config) {\n                        price += parseFloat(selected.config.price);\n                    }\n                }\n\n                if (price < 0) {\n                    price = 0;\n                }\n                price = this.formatPrice(price);\n\n                if ($('old-price-' + this.config.productId)) {\n                    $('old-price-' + this.config.productId).innerHTML = price;\n                }\n\n            }\n        }\n    };\n});\n","Magento_ConfigurableProduct/js/components/associated-product-insert-listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/form/components/insert-listing'\n], function (_, insertListing) {\n    'use strict';\n\n    return insertListing.extend({\n        defaults: {\n            gridInitialized: false,\n            paramsUpdated: false,\n            showMassActionColumn: true,\n            currentProductId: 0,\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\n            typeGrid: '',\n            product: {},\n            rowIndexForChange: undefined,\n            changeProductData: [],\n            modules: {\n                productsProvider: '${ $.productsProvider }',\n                productsColumns: '${ $.productsColumns }',\n                productsMassAction: '${ $.productsMassAction }',\n                modalWithGrid: '${ $.modalWithGrid }',\n                productsFilters: '${ $.productsFilters }'\n            },\n            exports: {\n                externalProviderParams: '${ $.externalProvider }:params'\n            },\n            links: {\n                changeProductData: '${ $.provider }:${ $.changeProductProvider }'\n            },\n            listens: {\n                '${ $.externalProvider }:params': '_setFilters _setVisibilityMassActionColumn',\n                '${ $.productsProvider }:data': '_handleManualGridOpening',\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect'\n            }\n        },\n\n        /**\n         * Initialize observables.\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super().observe(\n                'changeProductData'\n            );\n\n            return this;\n        },\n\n        /**\n         * Get ids of used products.\n         *\n         * @returns {Array}\n         */\n        getUsedProductIds: function () {\n            var usedProductsIds = this.source.get(this.dataScopeAssociatedProduct);\n\n            return usedProductsIds.slice();\n        },\n\n        /**\n         * Request for render content.\n         *\n         * @returns {Object}\n         */\n        doRender: function (showMassActionColumn, typeGrid) {\n            this.typeGrid = typeGrid;\n            this.showMassActionColumn = showMassActionColumn;\n\n            if (this.gridInitialized) {\n                this.paramsUpdated = false;\n                this.productsFilters().clear();\n                this._setFilters(this.externalProviderParams);\n                this._setVisibilityMassActionColumn();\n            }\n\n            return this.render();\n        },\n\n        /**\n         * Show grid with assigned product.\n         *\n         * @returns {Object}\n         */\n        showGridAssignProduct: function () {\n            this.product = {};\n            this.rowIndexForChange = undefined;\n\n            return this.doRender(true, 'assignProduct');\n        },\n\n        /**\n         * Show grid with changed product.\n         *\n         * @param {String} rowIndex\n         * @param {String} product\n         */\n        showGridChangeProduct: function (rowIndex, product) {\n            this.rowIndexForChange = rowIndex;\n            this.product = product;\n            this.doRender(false, 'changeProduct');\n        },\n\n        /**\n         * Select product.\n         *\n         * @param {String} rowIndex\n         */\n        selectProduct: function (rowIndex) {\n            this.changeProductData({\n                rowIndex: this.rowIndexForChange,\n                product: this.productsProvider().data.items[rowIndex]\n            });\n            this.modalWithGrid().closeModal();\n        },\n\n        /**\n         * Set visibility state for mass action column\n         *\n         * @private\n         */\n        _setVisibilityMassActionColumn: function () {\n            this.productsMassAction(function (massActionComponent) {\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = this.showMassActionColumn;\n                }, this);\n                massActionComponent.visible = this.showMassActionColumn;\n            }.bind(this));\n        },\n\n        /**\n         * Set filters.\n         *\n         * @param {Object} params\n         * @private\n         */\n        _setFilters: function (params) {\n            var filterModifier = {},\n                attrCodes,\n                usedProductIds,\n                attributes;\n\n            params = _.omit(params);\n\n            if (!this.paramsUpdated) {\n                this.gridInitialized = true;\n                this.paramsUpdated = true;\n\n                attrCodes = this._getAttributesCodes();\n                usedProductIds = this.getUsedProductIds();\n\n                if (this.currentProductId) {\n                    usedProductIds.push(this.currentProductId);\n                }\n\n                filterModifier['entity_id'] = {\n                    'condition_type': 'nin', value: usedProductIds\n                };\n                attrCodes.each(function (code) {\n                    filterModifier[code] = {\n                        'condition_type': 'notnull'\n                    };\n                });\n\n                if (this.typeGrid === 'changeProduct') {\n                    attributes = JSON.parse(this.product.attributes);\n\n                    filterModifier = _.extend(filterModifier, _.mapObject(attributes, function (value) {\n                        return {\n                            'condition_type': 'eq',\n                            'value': value\n                        };\n                    }));\n\n                    params.filters = attributes;\n                } else {\n                    params.filters = {};\n                }\n\n                params['attributes_codes'] = attrCodes;\n\n                this.set('externalProviderParams', params);\n                this.set('externalFiltersModifier', filterModifier);\n            }\n        },\n\n        /**\n         * Get attribute codes.\n         *\n         * @returns {Array}\n         * @private\n         */\n        _getAttributesCodes: function () {\n            var attrCodes = this.source.get('data.attribute_codes');\n\n            return attrCodes ? attrCodes : [];\n        },\n\n        /**\n         * Get product variations.\n         *\n         * @returns {Array}\n         * @private\n         */\n        _getProductVariations: function () {\n            var matrix = this.source.get('data.configurable-matrix');\n\n            return matrix ? matrix : [];\n        },\n\n        /**\n         * Handle manual grid after opening\n         * @private\n         */\n        _handleManualGridOpening: function (data) {\n            if (data.items.length && this.typeGrid === 'assignProduct') {\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = true;\n                });\n\n                this._disableRows(data.items);\n            }\n        },\n\n        /**\n         * Handle manual selection.\n         *\n         * @param {Array} selected\n         * @private\n         */\n        _handleManualGridSelect: function (selected) {\n            var selectedRows,\n                selectedVariationKeys;\n\n            if (this.typeGrid === 'assignProduct') {\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\n                    return selected.indexOf(row['entity_id']) !== -1;\n                });\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\n            }\n        },\n\n        /**\n         * Disable rows in grid for products with the same variation key\n         *\n         * @param {Array} items\n         * @param {Array} selectedVariationKeys\n         * @param {Array} selected\n         * @private\n         */\n        _disableRows: function (items, selectedVariationKeys, selected) {\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\n            selected = selected === undefined ? [] : selected;\n            this.productsMassAction(function (massaction) {\n                var configurableVariationKeys = _.union(\n                    selectedVariationKeys,\n                    _.pluck(this._getProductVariations(), 'variationKey')\n                    ),\n                    variationKeyMap = this._getVariationKeyMap(items),\n                    rowsForDisable = _.keys(_.pick(\n                        variationKeyMap,\n                        function (variationKey) {\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\n                        }\n                    ));\n\n                massaction.disabled(_.difference(rowsForDisable, selected));\n            }.bind(this));\n        },\n\n        /**\n         * Get variation key map used in manual grid.\n         *\n         * @param {Array} items\n         * @returns {Array} [{entity_id: variation-key}, ...]\n         * @private\n         */\n        _getVariationKeyMap: function (items) {\n            var variationKeyMap = {};\n\n            _.each(items, function (row) {\n                variationKeyMap[row['entity_id']] = _.values(\n                    _.pick(row, this._getAttributesCodes())\n                ).sort().join('-');\n\n            }, this);\n\n            return variationKeyMap;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/container-configurable-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            listens: {\n                '${ $.provider }:data.is_downloadable': 'handleProductType'\n            },\n            links: {\n                isDownloadable: '${ $.provider }:data.is_downloadable'\n            },\n            modules: {\n                createConfigurableButton: '${$.createConfigurableButton}'\n            }\n        },\n\n        /**\n         * Invokes initialize method of parent class,\n         * contains initialization logic\n         */\n        initialize: function () {\n            this._super();\n            this.handleProductType(this.isDownloadable);\n\n            return this;\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['content']);\n\n            return this;\n        },\n\n        /**\n         * Change content for container and visibility for button\n         *\n         * @param {String} isDownloadable\n         */\n        handleProductType: function (isDownloadable) {\n            if (isDownloadable === '1') {\n                this.content(this.content2);\n\n                if (this.createConfigurableButton()) {\n                    this.createConfigurableButton().visible(false);\n                }\n            } else {\n                this.content(this.content1);\n\n                if (this.createConfigurableButton()) {\n                    this.createConfigurableButton().visible(true);\n                }\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/custom-options-price-type.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Catalog/js/components/custom-options-price-type'\n], function (_, PriceType) {\n    'use strict';\n\n    return PriceType.extend({\n        defaults: {\n            isConfigurable: false,\n            isFiltered: null,\n            defaultOptions: null,\n            filteredOptions: null,\n            bannedOptions: []\n        },\n\n        /**\n         * Updates options.\n         *\n         * @param {Boolean} variationsEmpty\n         * @returns {Boolean}\n         */\n        updateOptions: function (variationsEmpty) {\n            var isFiltered = this.isConfigurable || !variationsEmpty,\n                value;\n\n            if (this.isFiltered !== isFiltered) {\n                value = this.value();\n\n                this.options(isFiltered ? this.getFilteredOptions() : this.getDefaultOptions());\n                this.value(value);\n            }\n\n            return isFiltered;\n        },\n\n        /**\n         * Get default list of options.\n         *\n         * @returns {Array}\n         */\n        getDefaultOptions: function () {\n            if (this.defaultOptions === null) {\n                this.defaultOptions = this.options();\n            }\n\n            return this.defaultOptions;\n        },\n\n        /**\n         * Get filtered list of options.\n         *\n         * @returns {Array}\n         */\n        getFilteredOptions: function () {\n            var defaultOptions;\n\n            if (this.filteredOptions === null) {\n                defaultOptions = this.getDefaultOptions();\n                this.filteredOptions = [];\n\n                _.each(defaultOptions, function (option) {\n                    if (this.bannedOptions.indexOf(option.value) === -1) {\n                        this.filteredOptions.push(option);\n                    }\n                }, this);\n            }\n\n            return this.filteredOptions;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/custom-options-warning.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/html'\n], function (Html) {\n    'use strict';\n\n    return Html.extend({\n        defaults: {\n            isConfigurable: false\n        },\n\n        /**\n         * Updates component visibility state.\n         *\n         * @param {Boolean} variationsEmpty\n         * @returns {Boolean}\n         */\n        updateVisibility: function (variationsEmpty) {\n            var isVisible = this.isConfigurable || !variationsEmpty;\n\n            this.visible(isVisible);\n\n            return isVisible;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/dynamic-rows-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\n    'jquery'\n], function (_, registry, dynamicRows, $) {\n    'use strict';\n\n    return dynamicRows.extend({\n        defaults: {\n            actionsListOpened: false,\n            canEditField: 'canEdit',\n            newProductField: 'newProduct',\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\n            dataProviderFromGrid: '',\n            dataProviderChangeFromGrid: '',\n            insertDataFromGrid: [],\n            changeDataFromGrid: [],\n            dataProviderFromWizard: '',\n            insertDataFromWizard: [],\n            map: null,\n            isEmpty: true,\n            isShowAddProductButton: false,\n            cacheGridData: [],\n            unionInsertData: [],\n            deleteProperty: false,\n            dataLength: 0,\n            identificationProperty: 'id',\n            'attribute_set_id': '',\n            attributesTmp: [],\n            changedFlag: 'was_changed',\n            listens: {\n                'insertDataFromGrid': 'processingInsertDataFromGrid',\n                'insertDataFromWizard': 'processingInsertDataFromWizard',\n                'unionInsertData': 'processingUnionInsertData',\n                'changeDataFromGrid': 'processingChangeDataFromGrid',\n                'isEmpty': 'changeVisibility'\n            },\n            imports: {\n                'attribute_set_id': '${$.provider}:data.product.attribute_set_id'\n            },\n            'exports': {\n                'attribute_set_id': '${$.provider}:data.new-variations-attribute-set-id'\n            },\n            modules: {\n                modalWithGrid: '${ $.modalWithGrid }',\n                gridWithProducts: '${ $.gridWithProducts}'\n            }\n        },\n\n        /**\n         * Invokes initialize method of parent class,\n         * contains initialization logic\n         */\n        initialize: function () {\n            this._super()\n                .changeVisibility(this.isEmpty());\n\n            return this;\n        },\n\n        /**\n         * Change visibility\n         *\n         * When isEmpty = true, then visbible = false\n         *\n         * @param {Boolean} isEmpty\n         */\n        changeVisibility: function (isEmpty) {\n            this.visible(!isEmpty);\n        },\n\n        /**\n         * Open modal with grid.\n         *\n         * @param {String} rowIndex\n         */\n        openModalWithGrid: function (rowIndex) {\n            var productSource = this.source.get(this.dataScope + '.' + this.index + '.' + rowIndex),\n                product = {\n                    'id': productSource.id,\n                    'attributes': productSource['configurable_attribute']\n                };\n\n            this.modalWithGrid().openModal();\n            this.gridWithProducts().showGridChangeProduct(rowIndex, product);\n        },\n\n        /**\n         * Initialize children\n         *\n         * @returns {Object} Chainable.\n         */\n        initChildren: function () {\n            var tmpArray = [];\n\n            this.recordData.each(function (recordData) {\n                tmpArray.push(recordData);\n            }, this);\n\n            this.unionInsertData(tmpArray);\n\n            return this;\n        },\n\n        /**\n         * Delete record\n         *\n         * @param {Number} index - row index\n         */\n        deleteRecord: function (index) {\n            var tmpArray,\n                lastRecord;\n\n            this.reRender = false;\n            tmpArray = this.getUnionInsertData();\n            tmpArray.splice(index, 1);\n\n            if (!tmpArray.length) {\n                this.attributesTmp = this.source.get('data.attributes');\n                this.source.set('data.attributes', []);\n                this.cacheGridData = [];\n            }\n\n            if (parseInt(this.currentPage(), 10) === this.pages()) {\n                lastRecord =\n                    _.findWhere(this.elems(), {\n                        index: this.startIndex + this.getChildItems().length - 1\n                    }) ||\n                    _.findWhere(this.elems(), {\n                        index: (this.startIndex + this.getChildItems().length - 1).toString()\n                    });\n\n                lastRecord.destroy();\n            }\n\n            this.unionInsertData(tmpArray);\n\n            if (this.pages() < parseInt(this.currentPage(), 10)) {\n                this.currentPage(this.pages());\n            }\n\n            this.reRender = true;\n            this.showSpinner(false);\n        },\n\n        /**\n         * Generate associated products\n         */\n        generateAssociatedProducts: function () {\n            var productsIds = [];\n\n            this.getUnionInsertData().forEach(function (data) {\n                if (data.id !== null) {\n                    productsIds.push(data.id);\n                }\n            });\n\n            this.source.set(this.dataScopeAssociatedProduct, productsIds);\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'insertDataFromGrid', 'unionInsertData', 'isEmpty', 'isShowAddProductButton', 'actionsListOpened'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Get union insert data from source\n         *\n         * @returns {Array}\n         */\n        getUnionInsertData: function () {\n            var source = this.source.get(this.dataScope + '.' + this.index),\n                result = [];\n\n            _.each(source, function (data) {\n                result.push(data);\n            });\n\n            return result;\n        },\n\n        /**\n         * Process union insert data.\n         *\n         * @param {Array} data\n         */\n        processingUnionInsertData: function (data) {\n            var dataCount,\n                elemsCount,\n                tmpData,\n                path,\n                attributeCodes = this.source.get('data.attribute_codes');\n\n            this.isEmpty(data.length === 0);\n            this.isShowAddProductButton(\n                (!attributeCodes || data.length > 0 ? data.length : attributeCodes.length) > 0\n            );\n\n            tmpData = data.slice(this.pageSize * (this.currentPage() - 1),\n                                 this.pageSize * (this.currentPage() - 1) + parseInt(this.pageSize, 10));\n\n            this.source.set(this.dataScope + '.' + this.index, []);\n\n            _.each(tmpData, function (row, index) {\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + index);\n                row.attributes = $('<i></i>').text(row.attributes).html();\n                this.source.set(path, row);\n            }, this);\n\n            this.source.set(this.dataScope + '.' + this.index, data);\n            this.parsePagesData(data);\n\n            // Render\n            dataCount = tmpData.length;\n            elemsCount = this.elems().length;\n\n            if (dataCount > elemsCount) {\n                tmpData.each(function (elemData, index) {\n                    this.addChild(elemData, this.startIndex + index);\n                }, this);\n            } else {\n                for (elemsCount; elemsCount > dataCount; elemsCount--) {\n                    this.elems()[elemsCount - 1].destroy();\n                }\n            }\n\n            this.generateAssociatedProducts();\n        },\n\n        /**\n         * Set initial property to records data\n         *\n         * @returns {Object} Chainable.\n         */\n        setInitialProperty: function () {\n            return this;\n        },\n\n        /**\n         * Parsed data\n         *\n         * @param {Array} data - array with data\n         * about selected records\n         */\n        processingInsertDataFromGrid: function (data) {\n            var changes,\n                tmpArray;\n\n            if (!data.length) {\n                return;\n            }\n\n            tmpArray = this.getUnionInsertData();\n\n            changes = this._checkGridData(data);\n            this.cacheGridData = data;\n\n            changes.each(function (changedObject) {\n                var mappedData = this.mappingValue(changedObject);\n\n                mappedData[this.canEditField] = 0;\n                mappedData[this.newProductField] = 0;\n                mappedData.variationKey = this._getVariationKey(changedObject);\n                mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\n                tmpArray.push(mappedData);\n            }, this);\n\n            // Attributes cannot be changed before regeneration thought wizard\n            if (!this.source.get('data.attributes').length) {\n                this.source.set('data.attributes', this.attributesTmp);\n            }\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         * Process changes from grid.\n         *\n         * @param {Object} data\n         */\n        processingChangeDataFromGrid: function (data) {\n            var tmpArray = this.getUnionInsertData(),\n                mappedData = this.mappingValue(data.product);\n\n            mappedData[this.canEditField] = 0;\n            mappedData[this.newProductField] = 0;\n            mappedData.variationKey = this._getVariationKey(data.product);\n            mappedData['configurable_attribute'] = this._getConfigurableAttribute(data.product);\n            tmpArray[data.rowIndex] = mappedData;\n\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         * Get variation key.\n         *\n         * @param {Object} data\n         * @returns {String}\n         * @private\n         */\n        _getVariationKey: function (data) {\n            var attrCodes = this.source.get('data.attribute_codes'),\n                key = [];\n\n            attrCodes.each(function (code) {\n                key.push(data[code]);\n            });\n\n            return key.sort().join('-');\n        },\n\n        /**\n         * Get configurable attribute.\n         *\n         * @param {Object} data\n         * @returns {String}\n         * @private\n         */\n        _getConfigurableAttribute: function (data) {\n            var attrCodes = this.source.get('data.attribute_codes'),\n                confAttrs = {};\n\n            attrCodes.each(function (code) {\n                confAttrs[code] = data[code];\n            });\n\n            return JSON.stringify(confAttrs);\n        },\n\n        /**\n         * Process data insertion from wizard\n         *\n         * @param {Object} data\n         */\n        processingInsertDataFromWizard: function (data) {\n            var tmpArray = this.getUnionInsertData(),\n                productIdsToDelete = this.source.get(this.dataScopeAssociatedProduct),\n                index,\n                product = {};\n\n            tmpArray = this.unsetArrayItem(\n                tmpArray,\n                {\n                    id: null\n                }\n            );\n\n            _.each(data, function (row) {\n                if (row.productId) {\n                    index = _.indexOf(productIdsToDelete, row.productId);\n\n                    if (index > -1) {\n                        productIdsToDelete.splice(index, 1);\n                        tmpArray = this.unsetArrayItem(\n                            tmpArray,\n                            {\n                                id: row.productId\n                            }\n                        );\n                    }\n                }\n                product = this.getProductData(row);\n\n                product[this.changedFlag] = true;\n                product[this.canEditField] = row.editable;\n                product[this.newProductField] = row.newProduct;\n                tmpArray.push(product);\n            }, this);\n\n            _.each(productIdsToDelete, function (id) {\n                tmpArray = this.unsetArrayItem(\n                    tmpArray,\n                    {\n                        id: id\n                    }\n                );\n            }, this);\n\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         *\n         * @param {Object} row\n         * @returns {Object}\n         */\n        getProductData: function (row) {\n            var product,\n                attributesText = '';\n\n            _.each(row.options, function (attribute) {\n                if (attributesText) {\n                    attributesText += ', ';\n                }\n                attributesText += attribute['attribute_label'] + ': ' + attribute.label;\n            }, this);\n\n            product = {\n                'id': row.productId,\n                'product_link': row.productUrl,\n                'name': row.name,\n                'sku': row.sku,\n                'status': row.status,\n                'price': row.price,\n                'price_currency': row.priceCurrency,\n                'price_string': row.priceCurrency + row.price,\n                'weight': row.weight,\n                'qty': row.quantity,\n                'variationKey': row.variationKey,\n                'configurable_attribute': row.attribute,\n                'thumbnail_image': row.images.preview,\n                'media_gallery': row['media_gallery'],\n                'swatch_image': row['swatch_image'],\n                'small_image': row['small_image'],\n                image: row.image,\n                'thumbnail': row.thumbnail,\n                'attributes': attributesText\n            };\n\n            return product;\n        },\n\n        /**\n         * Remove array items matching condition.\n         *\n         * @param {Array} data\n         * @param {Object} condition\n         * @returns {Array}\n         */\n        unsetArrayItem: function (data, condition) {\n            var objs = _.where(data, condition);\n\n            _.each(objs, function (obj) {\n                var index = _.indexOf(data, obj);\n\n                if (index > -1) {\n                    data.splice(index, 1);\n                }\n            });\n\n            return data;\n        },\n\n        /**\n         * Check changed records\n         *\n         * @param {Array} data - array with records data\n         * @returns {Array} Changed records\n         */\n        _checkGridData: function (data) {\n            var cacheLength = this.cacheGridData.length,\n                curData = data.length,\n                max = cacheLength > curData ? this.cacheGridData : data,\n                changes = [],\n                obj = {};\n\n            max.each(function (record, index) {\n                obj[this.map.id] = record[this.map.id];\n\n                if (!_.where(this.cacheGridData, obj).length) {\n                    changes.push(data[index]);\n                }\n            }, this);\n\n            return changes;\n        },\n\n        /**\n         * Mapped value\n         */\n        mappingValue: function (data) {\n            var result = {};\n\n            _.each(this.map, function (prop, index) {\n                result[index] = data[prop];\n            });\n\n            return result;\n        },\n\n        /**\n         * Toggle actions list.\n         *\n         * @param {Number} rowIndex\n         * @returns {Object} Chainable.\n         */\n        toggleActionsList: function (rowIndex) {\n            var state = false;\n\n            if (rowIndex !== this.actionsListOpened()) {\n                state = rowIndex;\n            }\n            this.actionsListOpened(state);\n\n            return this;\n        },\n\n        /**\n         * Close action list.\n         *\n         * @param {Number} rowIndex\n         * @returns {Object} Chainable\n         */\n        closeList: function (rowIndex) {\n            if (this.actionsListOpened() === rowIndex) {\n                this.actionsListOpened(false);\n            }\n\n            return this;\n        },\n\n        /**\n         * Toggle product status.\n         *\n         * @param {Number} rowIndex\n         */\n        toggleStatusProduct: function (rowIndex) {\n            var tmpArray = this.getUnionInsertData(),\n                status = parseInt(tmpArray[rowIndex].status, 10);\n\n            if (status === 1) {\n                tmpArray[rowIndex].status = 2;\n            } else {\n                tmpArray[rowIndex].status = 1;\n            }\n\n            tmpArray[rowIndex][this.changedFlag] = true;\n            this.unionInsertData(tmpArray);\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/file-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/file-uploader',\n    'underscore'\n], function (Element, _) {\n    'use strict';\n\n    return Element.extend({\n        processedFile: {},\n        actionsListOpened: false,\n        thumbnailUrl: '',\n        thumbnail: null,\n        smallImage: null,\n        defaults: {\n            fileInputName: ''\n        },\n\n        /**\n         * Initialize observables.\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super().observe(['processedFile', 'actionsListOpened', 'thumbnailUrl', 'thumbnail', 'smallImage']);\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        setInitialValue: function () {\n            var value = this.getInitialValue();\n\n            if (!_.isString(value)) {\n                this._super();\n            }\n\n            return this;\n        },\n\n        /**\n         * Adds provided file to the files list.\n         *\n         * @param {Object} file\n         * @returns {Object} Chainable.\n         */\n        addFile: function (file) {\n            this.processedFile(this.processFile(file));\n\n            this.value(this.processedFile().file);\n\n            return this;\n        },\n\n        /**\n         * Toggle actions list.\n         *\n         * @returns {Object} Chainable.\n         */\n        toggleActionsList: function () {\n            if (this.actionsListOpened()) {\n                this.actionsListOpened(false);\n            } else {\n                this.actionsListOpened(true);\n            }\n\n            return this;\n        },\n\n        /**\n         * Close action list.\n         *\n         * @returns {Object} Chainable\n         */\n        closeList: function () {\n            if (this.actionsListOpened()) {\n                this.actionsListOpened(false);\n            }\n\n            return this;\n        },\n\n        /**\n         * Delete Image\n         *\n         * @returns {Object} Chainable\n         */\n        deleteImage: function () {\n            this.processedFile({});\n            this.value(null);\n            this.thumbnail(null);\n            this.thumbnailUrl(null);\n            this.smallImage(null);\n\n            return this;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/modal-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/modal/modal-component',\n    'uiRegistry',\n    'underscore'\n], function (Modal, registry, _) {\n    'use strict';\n\n    return Modal.extend({\n        defaults: {\n            stepWizard: '',\n            modules: {\n                form: '${ $.formName }'\n            }\n        },\n\n        /**\n         * Open modal\n         */\n        openModal: function () {\n            var stepWizard = {};\n\n            this.form().validate();\n\n            if (this.form().source.get('params.invalid') === false) {\n                stepWizard = registry.get('index = ' + this.stepWizard);\n\n                if (!_.isUndefined(stepWizard)) {\n                    stepWizard.open();\n                }\n\n                this._super();\n            } else {\n                this.form().focusInvalid();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/price-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/abstract'\n], function (_, registry, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            imports: {\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\n            },\n            modules: {\n                createConfigurableButton: '${$.createConfigurableButton}'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            // resolve initial disable state\n            this.handlePriceValue(this.isConfigurable);\n            // add listener to track \"configurable\" type\n            this.setListeners({\n                isConfigurable: 'handlePriceValue'\n            });\n\n            return this;\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['content']);\n\n            return this;\n        },\n\n        /**\n         * Disable and clear price if product type changed to configurable\n         *\n         * @param {String} isConfigurable\n         */\n        handlePriceValue: function (isConfigurable) {\n            this.disabled(!!this.isUseDefault() || isConfigurable);\n            this.required(!!this.isUseDefault() || !isConfigurable);\n\n            if (isConfigurable) {\n                this.clear();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/qty-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            imports: {\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            // resolve initial disable state\n            this.handleQtyValue(this.isConfigurable);\n\n            /** important to set this listener in initialize because of a different order of processing.\n             * Do not move to defaults->listens section */\n            this.setListeners({\n                isConfigurable: 'handleQtyValue'\n            });\n\n            return this;\n        },\n\n        /**\n         * Disable and clear Qty if product type changed to configurable\n         *\n         * @param {String} isConfigurable\n         */\n        handleQtyValue: function (isConfigurable) {\n            this.disabled(!!this.isUseDefault() || isConfigurable);\n\n            if (isConfigurable) {\n                this.clear();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/options/price-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*\ndefine([\n    'jquery',\n    'Magento_Catalog/catalog/type-events',\n    'notification',\n    'mage/translate'\n], function ($, productType) {\n    'use strict';\n\n    return {\n        isConfigurable: false,\n        messageInited: false,\n        messageSelector: '[data-role=product-custom-options-content]',\n        isPercentPriceTypeExist: function () {\n            var productOptionsContainer = $('#product_options_container_top');\n\n            return !!productOptionsContainer.length;\n        },\n        showWarning: function () {\n            if (!this.messageInited) {\n                $(this.messageSelector).notification();\n                this.messageInited = true;\n            }\n            this.hideWarning();\n            $(this.messageSelector).notification('add', {\n                message: $.mage.__('Custom options with price type \"percent\" is not available for ' +\n                    'configurable product.'),\n                error: false,\n                messageContainer: this.messageSelector\n            });\n        },\n        hideWarning: function () {\n            $(this.messageSelector).notification('clear');\n        },\n        init: function () {\n            $(document).on('changeTypeProduct', this._initType.bind(this));\n\n            $('#product-edit-form-tabs').on('change', '.opt-type > select', function () {\n                var selected = $('.opt-type > select :selected'),\n                    optGroup = selected.parent().attr('label');\n\n                if (optGroup === 'Select') {\n                    $('#product-edit-form-tabs').on(\n                        'click',\n                        '[data-ui-id=\"admin-product-options-options-box-select-option-type-add-select-row-button\"]',\n                        function () {\n                            this.percentPriceTypeHandler();\n                        }.bind(this)\n                    );\n                } else {\n                    this.percentPriceTypeHandler();\n                }\n            }.bind(this));\n\n            this._initType();\n        },\n        _initType: function () {\n            this.isConfigurable = productType.type.current === 'configurable';\n            if (this.isPercentPriceTypeExist()) {\n                this.percentPriceTypeHandler();\n            }\n        },\n        percentPriceTypeHandler: function () {\n            var priceType = $('[data-attr=\"price-type\"]'),\n                optionPercentPriceType = priceType.find('option[value=\"percent\"]');\n\n            if (this.isConfigurable) {\n                this.showWarning();\n                optionPercentPriceType.hide();\n                optionPercentPriceType.parent().val() === 'percent' ? optionPercentPriceType.parent().val('fixed') : '';\n            } else {\n                $(this.messageSelector).notification();\n                optionPercentPriceType.show();\n                this.hideWarning();\n            }\n        }\n    };\n});\n*/\n","Magento_ConfigurableProduct/js/variations/product-grid.js":"// jscs:disable requireDotNotation\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'Magento_Ui/js/core/app',\n    'underscore',\n    'notification',\n    'mage/translate'\n], function (Component, $, bootstrap, _) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            productsGridUrl: null,\n            productAttributes: [],\n            productsModal: null,\n            button: '',\n            gridSelector: '[data-grid-id=associated-products-container]',\n            modules: {\n                productsFilter: '${ $.productsFilter }',\n                productsProvider: '${ $.productsProvider }',\n                productsMassAction: '${ $.productsMassAction }',\n                productsColumns: '${ $.productsColumns }',\n                variationsComponent: '${ $.configurableVariations }'\n            },\n            listens: {\n                '${ $.productsProvider }:data': '_showMessageAssociatedGrid _handleManualGridOpening',\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect',\n                '${ $.configurableVariations }:productMatrix': '_showButtonAddManual _switchProductType'\n            }\n        },\n\n        /**\n         * Initialize\n         *\n         * @param {Array} options\n         */\n        initialize: function (options) {\n            this._super(options);\n            this.productsModal = $(this.gridSelector).modal({\n                title: $.mage.__('Select Associated Product'),\n                type: 'slide',\n                buttons: [\n                    {\n                        text: $.mage.__('Cancel'),\n\n                        /** Close modal */\n                        click: function () {\n                            this.closeModal();\n                        }\n                    }, {\n                        text: $.mage.__('Done'),\n                        click: this.close.bind(this, null)\n                    }\n                ]\n            });\n\n            this.productsProvider(function () {\n                this.productsModal.notification();\n            }.bind(this));\n            this.variationsComponent(function (variation) {\n                this._showButtonAddManual(variation.productMatrix());\n            }.bind(this));\n\n            this._initGrid = _.once(this._initGrid);\n            this._switchProductType = _.wrap(this._switchProductType.bind(this), function (func, params) {\n                if (!!params.length !== !!this.init) {\n                    this.init = !!params.length;\n                    func(params);\n                }\n            }.bind(this._switchProductType));\n        },\n\n        /**\n         * Initial observerable\n         * @returns {*}\n         */\n        initObservable: function () {\n            this._super().observe('button');\n\n            return this;\n        },\n\n        /**\n         * init Grid\n         * @private\n         */\n        _initGrid: function (filterData) {\n            $.ajax({\n                type: 'GET',\n                url: this._buildGridUrl(filterData),\n                context: $('body')\n            }).done(function (data) {\n                bootstrap(JSON.parse(data));\n            });\n        },\n\n        /**\n         * Select different product in configurations section\n         * @see configurable_associated_product_listing.xml\n         * @param {Integer} rowIndex\n         */\n        selectProduct: function (rowIndex) {\n            this.close(rowIndex);\n        },\n\n        /**\n         * Open\n         * @param {Object} filterData - filter data\n         * @param {Object|*} filterData.filters - attribute name\n         * @param {Object|*} filterData.filters_modifier - modifier value\n         * @param {String} callbackName\n         * @param {Boolean} showMassActionColumn\n         */\n        open: function (filterData, callbackName, showMassActionColumn) {\n            this.callbackName = callbackName;\n            this.productsMassAction(function (massActionComponent) {\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = showMassActionColumn;\n                });\n                massActionComponent.visible = showMassActionColumn;\n            }.bind(this));\n            this._setFilter(filterData);\n            this._initGrid(filterData);\n            this.productsModal.trigger('openModal');\n        },\n\n        /**\n         * Close\n         */\n        close: function (rowIndex) {\n            try {\n                if (this.productsMassAction().selected.getLength()) {\n                    this.variationsComponent()[this.callbackName](this.productsMassAction()\n                        .selected.map(this.getProductById.bind(this)));\n                    this.productsMassAction().deselectAll();\n                } else if (!_.isNull(rowIndex)) {\n                    this.variationsComponent()[this.callbackName]([this.getProductByIndex(rowIndex)]);\n                }\n                this.productsModal.trigger('closeModal');\n            } catch (e) {\n                if (e.name === 'UserException') {\n                    this.productsModal.notification('clear');\n                    this.productsModal.notification('add', {\n                        message: e.message,\n                        messageContainer: this.gridSelector\n                    });\n                } else {\n                    throw e;\n                }\n            }\n        },\n\n        /**\n         * Get product by id\n         * @param {Integer} productId\n         * @returns {*}\n         */\n        getProductById: function (productId) {\n            return _.findWhere(this.productsProvider().data.items, {\n                'entity_id': productId\n            });\n        },\n\n        /**\n         * Get product\n         * @param {Integer} rowIndex\n         * @returns {*}\n         */\n        getProductByIndex: function (rowIndex) {\n            return this.productsProvider().data.items[rowIndex];\n        },\n\n        /**\n         * Build grid url\n         * @private\n         */\n        _buildGridUrl: function (filterData) {\n            var params = '?' + $.param({\n                'filters': filterData.filters,\n                'attributes_codes': this._getAttributesCodes(),\n                'filters_modifier': filterData['filters_modifier']\n            });\n\n            return this.productsGridUrl + params;\n        },\n\n        /**\n         * Show button add manual\n         * @param {Array} variations\n         * @returns {*}\n         * @private\n         */\n        _showButtonAddManual: function (variations) {\n            return this.button(variations.length);\n        },\n\n        /**\n         * @param {Array} variations\n         * @private\n         */\n        _switchProductType: function (variations) {\n            $(document).trigger('changeConfigurableTypeProduct', variations.length);\n        },\n\n        /**\n         * Get attributes codes used for configurable\n         * @private\n         */\n        _getAttributesCodes: function () {\n            return this.variationsComponent().attributes.pluck('code');\n        },\n\n        /**\n         * Show data associated grid\n         * @private\n         */\n        _showMessageAssociatedGrid: function (data) {\n            this.productsModal.notification('clear');\n\n            if (data.items.length) {\n                this.productsModal.notification('add', {\n                    message: $.mage.__('Choose a new product to delete and replace the current product configuration.'),\n                    messageContainer: this.gridSelector\n                });\n            } else {\n                this.productsModal.notification('add', {\n                    message: $.mage.__('For better results, add attributes and attribute values to your products.'),\n                    messageContainer: this.gridSelector\n                });\n            }\n        },\n\n        /**\n         * Show manually grid\n         */\n        showManuallyGrid: function () {\n            var filterModifier = _.mapObject(_.object(this._getAttributesCodes(), []), function () {\n                    return {\n                        'condition_type': 'notnull'\n                    };\n                }),\n                usedProductIds = _.values(this.variationsComponent().productAttributesMap);\n\n            if (usedProductIds && usedProductIds.length > 0) {\n                filterModifier['entity_id'] = {\n                    'condition_type': 'nin', value: usedProductIds\n                };\n            }\n\n            this.open(\n                {\n                    'filters_modifier': filterModifier\n                },\n                'appendProducts',\n                true\n            );\n        },\n\n        /**\n         * Handle manual grid after opening\n         * @private\n         */\n        _handleManualGridOpening: function (data) {\n            if (data.items.length && this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = true;\n                });\n\n                this._disableRows(data.items);\n            }\n        },\n\n        /**\n         * Disable rows in grid for products with the same variation key\n         *\n         * @param {Array} items\n         * @param {Array} selectedVariationKeys\n         * @param {Array} selected\n         * @private\n         */\n        _disableRows: function (items, selectedVariationKeys, selected) {\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\n            selected = selected === undefined ? [] : selected;\n            this.productsMassAction(function (massaction) {\n                var configurableVariationKeys = _.union(\n                        selectedVariationKeys,\n                        _.pluck(this.variationsComponent().productMatrix(), 'variationKey')\n                    ),\n                    variationKeyMap = this._getVariationKeyMap(items),\n                    rowsForDisable = _.keys(_.pick(\n                        variationKeyMap,\n                        function (variationKey) {\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\n                        }\n                    ));\n\n                massaction.disabled(_.difference(rowsForDisable, selected));\n            }.bind(this));\n        },\n\n        /**\n         * @private\n         */\n        _handleManualGridSelect: function (selected) {\n            var selectedRows, selectedVariationKeys;\n\n            if (this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\n                    return selected.indexOf(row['entity_id']) !== -1;\n                });\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\n            }\n        },\n\n        /**\n         * Get variation key map used in manual grid.\n         *\n         * @param {Object} items\n         * @returns {Array} [{entity_id: variation-key}, ...]\n         * @private\n         */\n        _getVariationKeyMap: function (items) {\n            this._variationKeyMap = {};\n\n            _.each(items, function (row) {\n                this._variationKeyMap[row['entity_id']] = _.values(\n                    _.pick(row, this._getAttributesCodes())\n                ).sort().join('-');\n\n            }, this);\n\n            return this._variationKeyMap;\n        },\n\n        /**\n         * Set filter\n         * @private\n         */\n        _setFilter: function (filterData) {\n            this.productsProvider(function (provider) {\n                provider.params['filters_modifier'] = filterData['filters_modifier'];\n                provider.params['attributes_codes'] = this._getAttributesCodes();\n            }.bind(this));\n\n            this.productsFilter(function (filter) {\n                filter.set('filters', _.extend({\n                    'filters_modifier': filterData['filters_modifier']\n                }, filterData.filters))\n                    .apply();\n            });\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/variations.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/modal/alert',\n    'uiRegistry',\n    'mage/translate'\n], function (Component, $, ko, _, alert, registry, $t) {\n    'use strict';\n\n    /**\n     * @param {*} message\n     * @constructor\n     */\n    function UserException(message) {\n        this.message = message;\n        this.name = 'UserException';\n    }\n    UserException.prototype = Object.create(Error.prototype);\n\n    return Component.extend({\n        defaults: {\n            opened: false,\n            attributes: [],\n            usedAttributes: [],\n            attributeCodes: [],\n            attributesData: {},\n            productMatrix: [],\n            variations: [],\n            formSaveParams: [],\n            productAttributes: [],\n            disabledAttributes: [],\n            fullAttributes: [],\n            rowIndexToEdit: false,\n            productAttributesMap: null,\n            value: [],\n            modules: {\n                associatedProductGrid: '${ $.configurableProductGrid }',\n                wizardButtonElement: '${ $.wizardModalButtonName }',\n                formElement: '${ $.formName }',\n                attributeSetHandlerModal: '${ $.attributeSetHandler }'\n            },\n            imports: {\n                attributeSetName: '${ $.provider }:configurableNewAttributeSetName',\n                attributeSetId: '${ $.provider }:configurableExistingAttributeSetId',\n                attributeSetSelection: '${ $.provider }:configurableAffectedAttributeSet',\n                productPrice: '${ $.provider }:data.product.price'\n            },\n            links: {\n                value: '${ $.provider }:${ $.dataScopeVariations }',\n                usedAttributes: '${ $.provider }:${ $.dataScopeAttributes }',\n                attributesData: '${ $.provider }:${ $.dataScopeAttributesData }',\n                attributeCodes: '${ $.provider }:${ $.dataScopeAttributeCodes }',\n                skeletonAttributeSet: '${ $.provider }:data.new-variations-attribute-set-id'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.changeButtonWizard();\n            this.initProductAttributesMap();\n            this.disableConfigurableAttributes(this.productAttributes);\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(\n                'actions opened attributes productMatrix value usedAttributes attributesData attributeCodes'\n            );\n\n            return this;\n        },\n\n        /**\n         * @param {Object} product\n         * @return {Object}\n         * @private\n         */\n        _makeProduct: function (product) {\n            var productId = product['entity_id'] || product.productId || null,\n                attributes = _.pick(product, this.attributes.pluck('code')),\n                options = _.map(attributes, function (option, attribute) {\n                    var oldOptions = _.findWhere(this.attributes(), {\n                            code: attribute\n                        }).options,\n                        result;\n\n                    if (_.isFunction(oldOptions)) {\n                        result = oldOptions.findWhere({\n                            value: option\n                        });\n                    } else {\n                        result = _.findWhere(oldOptions, {\n                            value: option\n                        });\n                    }\n\n                    return result;\n                }.bind(this));\n\n            return {\n                attribute: JSON.stringify(attributes),\n                editable: false,\n                images: {\n                    preview: product['thumbnail_src']\n                },\n                name: product.name || product.sku,\n                options: options,\n                price: parseFloat(Math.round(product.price.replace(/[^\\d.]+/g, '') + 'e+4') + 'e-4').toFixed(4),\n                productId: productId,\n                productUrl: this.buildProductUrl(productId),\n                quantity: product.quantity || null,\n                sku: product.sku,\n                status: product.status === undefined ? 1 : parseInt(product.status, 10),\n                variationKey: this.getVariationKey(options),\n                weight: product.weight || null\n            };\n        },\n\n        /**\n         * @param {String} name\n         * @return {String|Number|Array}\n         */\n        getProductValue: function (name) {\n            var value;\n\n            name = name.split('/').join('][');\n            value = $('[name=\"product[' + name + ']\"]:enabled:not(.ignore-validate)', this.productForm).val();\n            if (value === undefined) {\n                value = this.source.get('data.product.' + name);\n            }\n            return value;\n        },\n\n        /**\n         * @param {Object} data\n         * @param {String} field\n         * @return {String}\n         */\n        getRowId: function (data, field) {\n            var key = data.variationKey;\n\n            return 'variations-matrix-' + key + '-' + field;\n        },\n\n        /**\n         * @param {Object} variation\n         * @param {String} field\n         * @return {String}\n         */\n        getVariationRowName: function (variation, field) {\n            var result;\n\n            if (variation.productId) {\n                result = 'configurations[' + variation.productId + '][' + field.split('/').join('][') + ']';\n            } else {\n                result = 'variations-matrix[' + variation.variationKey + '][' + field.split('/').join('][') + ']';\n            }\n\n            return result;\n        },\n\n        /**\n         * @param {*} variations\n         * @param {*} attributes\n         */\n        render: function (variations, attributes) {\n            this.changeButtonWizard();\n            this.populateVariationMatrix(variations);\n            this.attributes(attributes);\n            this.disableConfigurableAttributes(attributes);\n            this.handleValue(variations);\n            this.handleAttributes();\n        },\n\n        /**\n         * Change button wizard.\n         */\n        changeButtonWizard: function () {\n            if (this.variations.length) {\n                this.wizardButtonElement().title(this.wizardModalButtonTitle);\n            }\n        },\n\n        /**\n         * @param {Array} variations\n         */\n        handleValue: function (variations) {\n            var tmpArray = [];\n\n            _.each(variations, function (variation) {\n                var attributes = _.reduce(variation.options, function (memo, option) {\n                    var attribute = {};\n\n                    attribute[option['attribute_code']] = option.value;\n\n                    return _.extend(memo, attribute);\n                }, {}),\n                    gallery = {\n                        images: {}\n                    },\n                    types = {};\n\n                _.each(variation.images.images, function (image) {\n                    gallery.images[image['file_id']] = {\n                        position: image.position,\n                        file: image.file,\n                        disabled: image.disabled,\n                        label: image.label || ''\n                    };\n                    _.each(image.galleryTypes, function (type) {\n                        types[type] = image.file;\n                    });\n                }, this);\n\n                tmpArray.push(_.extend(variation, types, {\n                    productId: variation.productId || null,\n                    name: variation.name || variation.sku,\n                    priceCurrency: this.currencySymbol,\n                    weight: variation.weight,\n                    attribute: JSON.stringify(attributes),\n                    variationKey: this.getVariationKey(variation.options),\n                    editable: variation.editable === undefined ? 0 : 1,\n                    productUrl: this.buildProductUrl(variation.productId),\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10),\n                    newProduct: variation.productId ? 0 : 1,\n                    'media_gallery': gallery\n                }));\n            }, this);\n\n            this.value(tmpArray);\n        },\n\n        /**\n         * Handle attributes.\n         */\n        handleAttributes: function () {\n            var tmpArray = [],\n                codesArray = [],\n                tmpOptions = {},\n                option = {},\n                position = 0,\n                values = {};\n\n            _.each(this.attributes(), function (attribute) {\n                tmpArray.push(attribute.id);\n                codesArray.push(attribute.code);\n                values = {};\n                _.each(attribute.chosen, function (row) {\n                    values[row.value] = {\n                        'include': '1',\n                        'value_index': row.value\n                    };\n                }, this);\n                option = {\n                    'attribute_id': attribute.id,\n                    'code': attribute.code,\n                    'label': attribute.label,\n                    'position': position,\n                    'values': values\n                };\n                tmpOptions[attribute.id] = option;\n                position++;\n            }, this);\n\n            this.attributesData(tmpOptions);\n            this.usedAttributes(tmpArray);\n            this.attributeCodes(codesArray);\n        },\n\n        /**\n         * Get attributes options\n         * @see use in matrix.phtml\n         *\n         * @returns {Array}\n         */\n        getAttributesOptions: function () {\n            return this.showVariations() ? this.productMatrix()[0].options : [];\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        showVariations: function () {\n            return this.productMatrix().length > 0;\n        },\n\n        /**\n         * @param {Array} variations\n         */\n        populateVariationMatrix: function (variations) {\n            this.productMatrix([]);\n            _.each(variations, function (variation) {\n                var attributes = _.reduce(variation.options, function (memo, option) {\n                    var attribute = {};\n\n                    attribute[option['attribute_code']] = option.value;\n\n                    return _.extend(memo, attribute);\n                }, {});\n\n                this.productMatrix.push(_.extend(variation, {\n                    productId: variation.productId || null,\n                    name: variation.name || variation.sku,\n                    weight: variation.weight,\n                    attribute: JSON.stringify(attributes),\n                    variationKey: this.getVariationKey(variation.options),\n                    editable: variation.editable === undefined ? !variation.productId : variation.editable,\n                    productUrl: this.buildProductUrl(variation.productId),\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10)\n                }));\n            }, this);\n        },\n\n        /**\n         * @param {*} productId\n         */\n        buildProductUrl: function (productId) {\n            return this.productUrl.replace('%id%', productId);\n        },\n\n        /**\n         * @param {Object} options\n         * @return {String}\n         */\n        getVariationKey: function (options) {\n            return _.pluck(options, 'value').sort().join('-');\n        },\n\n        /**\n         * @param {*} options\n         * @return {*|null}\n         */\n        getProductIdByOptions: function (options) {\n            return this.productAttributesMap[this.getVariationKey(options)] || null;\n        },\n\n        /**\n         * Init product attributes map\n         */\n        initProductAttributesMap: function () {\n            if (this.productAttributesMap === null) {\n                this.productAttributesMap = {};\n                _.each(this.variations, function (product) {\n                    this.productAttributesMap[this.getVariationKey(product.options)] = product.productId;\n                }.bind(this));\n            }\n        },\n\n        /**\n         * @param {Array} attributes\n         */\n        disableConfigurableAttributes: function (attributes) {\n            var element;\n\n            _.each(this.disabledAttributes, function (attribute) {\n                registry.get('inputName = ' + 'product[' + attribute + ']').disabled(false);\n            });\n            this.disabledAttributes = [];\n\n            _.each(attributes, function (attribute) {\n                element = registry.get('inputName = ' + 'product[' + attribute.code + ']');\n\n                if (!_.isUndefined(element)) {\n                    element.disabled(true);\n                    this.disabledAttributes.push(attribute.code);\n                }\n            }, this);\n        },\n\n        /**\n         * Get currency symbol\n         * @returns {String}\n         */\n        getCurrencySymbol: function () {\n            return this.currencySymbol;\n        },\n\n        /**\n         * Chose action for the form save button\n         */\n        saveFormHandler: function () {\n            this.formElement().validate();\n\n            if (this.formElement().source.get('params.invalid') === false) {\n                this.serializeData();\n            }\n\n            if (this.checkForNewAttributes()) {\n                this.formSaveParams = arguments;\n                this.attributeSetHandlerModal().openModal();\n            } else {\n                if (this.validateForm(this.formElement())) {\n                    this.clearOutdatedData();\n                }\n                this.formElement().save(arguments[0], arguments[1]);\n\n                if (this.formElement().source.get('params.invalid')) {\n                    this.unserializeData();\n                }\n            }\n        },\n\n        /**\n         * @param {Object} formElement\n         *\n         * Validates each form element and returns true, if all elements are valid.\n         */\n        validateForm: function (formElement) {\n            formElement.validate();\n\n            return !formElement.additionalInvalid && !formElement.source.get('params.invalid');\n        },\n\n        /**\n         * Serialize data for specific form fields\n         *\n         * Serializes some complex data fields\n         *\n         * Original fields:\n         *   - configurable-matrix;\n         *   - associated_product_ids.\n         *\n         * Serialized fields in request:\n         *   - configurable-matrix-serialized;\n         *   - associated_product_ids_serialized.\n         */\n        serializeData: function () {\n            if (this.source.data['configurable-matrix']) {\n                this.source.data['configurable-matrix-serialized'] =\n                    JSON.stringify(this.source.data['configurable-matrix']);\n            }\n\n            if (this.source.data['associated_product_ids']) {\n                this.source.data['associated_product_ids_serialized'] =\n                    JSON.stringify(this.source.data['associated_product_ids']);\n            }\n        },\n\n        /**\n         * Clear outdated data for specific form fields\n         *\n         * Outdated fields:\n         *   - configurable-matrix;\n         *   - associated_product_ids.\n         */\n        clearOutdatedData: function () {\n            if (this.source.data['configurable-matrix']) {\n                delete this.source.data['configurable-matrix'];\n            }\n\n            if (this.source.data['associated_product_ids']) {\n                delete this.source.data['associated_product_ids'];\n            }\n        },\n\n        /**\n         * Unserialize data for specific form fields\n         *\n         * Unserializes some fields that were serialized this.serializeData\n         */\n        unserializeData: function () {\n            if (this.source.data['configurable-matrix-serialized']) {\n                this.source.data['configurable-matrix'] =\n                    JSON.parse(this.source.data['configurable-matrix-serialized']);\n                delete this.source.data['configurable-matrix-serialized'];\n            }\n\n            if (this.source.data['associated_product_ids_serialized']) {\n                this.source.data['associated_product_ids'] =\n                    JSON.parse(this.source.data['associated_product_ids_serialized']);\n                delete this.source.data['associated_product_ids_serialized'];\n            }\n        },\n\n        /**\n         * Check for newly added attributes\n         * @returns {Boolean}\n         */\n        checkForNewAttributes: function () {\n            var element, newAttributes = false;\n\n            _.each(this.source.get('data.attribute_codes'), function (attribute) {\n                element = registry.get('index = ' + attribute);\n\n                if (_.isUndefined(element)) {\n                    newAttributes = true;\n                }\n            }, this);\n\n            return newAttributes;\n        },\n\n        /**\n         * New attributes handler\n         * @returns {Boolean}\n         */\n        addNewAttributeSetHandler: function () {\n            var chosenAttributeSetOption;\n\n            this.formElement().validate();\n\n            if (this.formElement().source.get('params.invalid') === false) {\n                chosenAttributeSetOption = this.attributeSetSelection;\n\n                if (chosenAttributeSetOption === 'new') {\n                    this.createNewAttributeSet();\n\n                    return false;\n                }\n\n                if (chosenAttributeSetOption === 'existing') {\n                    this.set(\n                        'skeletonAttributeSet',\n                        this.attributeSetId\n                    );\n                }\n\n                this.closeDialogAndProcessForm();\n\n                return true;\n            }\n\n            this.unserializeData();\n\n            return false;\n        },\n\n        /**\n         * Handles new attribute set creation\n         * @returns {Boolean}\n         */\n        createNewAttributeSet: function () {\n            var messageBoxElement = registry.get('index = affectedAttributeSetError');\n\n            messageBoxElement.visible(false);\n\n            $.ajax({\n                type: 'POST',\n                url: this.attributeSetCreationUrl,\n                data: {\n                    gotoEdit: 1,\n                    'attribute_set_name': this.attributeSetName,\n                    'skeleton_set': this.skeletonAttributeSet,\n                    'return_session_messages_only': 1\n                },\n                dataType: 'json',\n                showLoader: true,\n                context: this\n            }).done(function (data) {\n                if (!data.error) {\n                    this.set(\n                        'skeletonAttributeSet',\n                        data.id\n                    );\n                    messageBoxElement.content(data.messages);\n                    messageBoxElement.visible(true);\n                    this.closeDialogAndProcessForm();\n                } else {\n                    messageBoxElement.content(data.messages);\n                    messageBoxElement.visible(true);\n                }\n\n                return false;\n            }).fail(function (xhr) {\n                if (xhr.statusText === 'abort') {\n                    return;\n                }\n\n                alert({\n                    content: $t('Something went wrong.')\n                });\n            });\n\n            return false;\n        },\n\n        /**\n         * Closes attribute set handler modal and process product form\n         */\n        closeDialogAndProcessForm: function () {\n            this.attributeSetHandlerModal().closeModal();\n            this.formElement().save(this.formSaveParams[0], this.formSaveParams[1]);\n        },\n\n        /**\n         * Retrieves product price\n         * @returns {*}\n         */\n        getProductPrice: function () {\n            return this.productPrice;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/paging/sizes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/paging/sizes'\n], function (Sizes) {\n    'use strict';\n\n    return Sizes.extend({\n        defaults: {\n            options: {\n                '20': {\n                    value: 20,\n                    label: 20\n                },\n                '30': {\n                    value: 30,\n                    label: 30\n                },\n                '50': {\n                    value: 50,\n                    label: 50\n                }\n            },\n            value: 20\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/attributes_values.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'mageUtils',\n    'Magento_Ui/js/lib/collapsible',\n    'mage/translate'\n], function (Component, $, ko, _, utils, Collapsible) {\n    'use strict';\n\n    //connect items with observableArrays\n    ko.bindingHandlers.sortableList = {\n        /** @inheritdoc */\n        init: function (element, valueAccessor) {\n            var list = valueAccessor();\n\n            $(element).sortable({\n                axis: 'y',\n                handle: '[data-role=\"draggable\"]',\n                tolerance: 'pointer',\n\n                /** @inheritdoc */\n                update: function (event, ui) {\n                    var item = ko.contextFor(ui.item[0]).$data,\n                        position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);\n\n                    if (ko.contextFor(ui.item[0]).$index() != position) { //eslint-disable-line eqeqeq\n                        if (position >= 0) {\n                            list.remove(item);\n                            list.splice(position, 0, item);\n                        }\n                        ui.item.remove();\n                    }\n                }\n            });\n        }\n    };\n\n    return Collapsible.extend({\n        defaults: {\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            createOptionsUrl: null,\n            attributes: [],\n            stepInitialized: false\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.createAttribute = _.wrap(this.createAttribute, function () {\n                var args = _.toArray(arguments),\n                    createAttribute = args.shift();\n\n                return this.doInitSavedOptions(createAttribute.apply(this, args));\n            });\n            this.createAttribute = _.memoize(this.createAttribute.bind(this), _.property('id'));\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(['attributes']);\n\n            return this;\n        },\n\n        /**\n         * Create option.\n         */\n        createOption: function () {\n            // this - current attribute\n            this.options.push({\n                value: 0,\n                label: '',\n                id: utils.uniqueid(),\n                'attribute_id': this.id,\n                'is_new': true\n            });\n        },\n\n        /**\n         * @param {Object} option\n         */\n        saveOption: function (option) {\n            if (this.isValidOption(option)) {\n                this.options.remove(option);\n                this.options.push(option);\n                this.chosenOptions.push(option.id);\n            }\n        },\n\n        /**\n         * @param {Object} newOption\n         * @return boolean\n         */\n        isValidOption: function (newOption) {\n            var duplicatedOptions = [],\n                errorOption,\n                allOptions = [];\n\n            newOption.label = newOption.label.trim();\n\n            if (_.isEmpty(newOption.label)) {\n                return false;\n            }\n\n            _.each(this.options(), function (option) {\n                if (!_.isUndefined(allOptions[option.label]) && newOption.label === option.label) {\n                    duplicatedOptions.push(option);\n                }\n\n                allOptions[option.label] = option.label;\n            });\n\n            if (duplicatedOptions.length) {\n                _.each(duplicatedOptions, function (duplicatedOption) {\n                    errorOption = $('[data-role=\"' + duplicatedOption.id + '\"]');\n                    errorOption.addClass('_error');\n                });\n\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @param {Object} option\n         */\n        removeOption: function (option) {\n            this.options.remove(option);\n        },\n\n        /**\n         * @param {String} attribute\n         */\n        removeAttribute: function (attribute) {\n            this.attributes.remove(attribute);\n            this.wizard.setNotificationMessage(\n                $.mage.__('An attribute has been removed. This attribute will no longer appear in your configurations.')\n            );\n        },\n\n        /**\n         * @param {Object} attribute\n         * @param {*} index\n         * @return {Object}\n         */\n        createAttribute: function (attribute, index) {\n            attribute.chosenOptions = ko.observableArray([]);\n            attribute.options = ko.observableArray(_.map(attribute.options, function (option) {\n                option.id = utils.uniqueid();\n\n                return option;\n            }));\n            attribute.opened = ko.observable(this.initialOpened(index));\n            attribute.collapsible = ko.observable(true);\n            attribute.isValidOption = this.isValidOption;\n\n            return attribute;\n        },\n\n        /**\n         * First 3 attribute panels must be open.\n         *\n         * @param {Number} index\n         * @return {Boolean}\n         */\n        initialOpened: function (index) {\n            return index < 3;\n        },\n\n        /**\n         * Save attribute.\n         */\n        saveAttribute: function () {\n            var errorMessage = $.mage.__('Select options for all attributes or remove unused attributes.');\n\n            if (!this.attributes().length) {\n                throw new Error(errorMessage);\n            }\n\n            _.each(this.attributes(), function (attribute) {\n                attribute.chosen = [];\n\n                if (!attribute.chosenOptions.getLength()) {\n                    throw new Error(errorMessage);\n                }\n                _.each(attribute.chosenOptions(), function (id) {\n                    attribute.chosen.push(attribute.options.findWhere({\n                        id: id\n                    }));\n                });\n            });\n        },\n\n        /**\n         * @param {Object} attribute\n         */\n        selectAllAttributes: function (attribute) {\n            this.chosenOptions(_.pluck(attribute.options(), 'id'));\n        },\n\n        /**\n         * @param {Object} attribute\n         */\n        deSelectAllAttributes: function (attribute) {\n            attribute.chosenOptions.removeAll();\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        saveOptions: function () {\n            var newOptions = [];\n\n            _.each(this.attributes(), function (attribute) {\n                _.each(attribute.options(), function (element) {\n                    var option = attribute.options.findWhere({\n                        id: element.id\n                    });\n\n                    if (option['is_new'] === true) {\n                        if (!attribute.isValidOption(option)) {\n                            throw new Error(\n                                $.mage.__('The value of attribute \"\"%1\"\" must be unique')\n                                    .replace('\"%1\"', attribute.label)\n                            );\n                        }\n\n                        newOptions.push(option);\n                    }\n                });\n            });\n\n            if (!newOptions.length) {\n                return false;\n            }\n\n            $.ajax({\n                type: 'POST',\n                url: this.createOptionsUrl,\n                data: {\n                    options: newOptions\n                },\n                showLoader: true\n            }).done(function (savedOptions) {\n                if (savedOptions.error) {\n                    this.notificationMessage.error = savedOptions.error;\n                    this.notificationMessage.text = savedOptions.message;\n\n                    return;\n                }\n\n                _.each(this.attributes(), function (attribute) {\n                    _.each(savedOptions, function (newOptionId, oldOptionId) {\n                        var option = attribute.options.findWhere({\n                            id: oldOptionId\n                        });\n\n                        if (option) {\n                            attribute.options.remove(option);\n                            option['is_new'] = false;\n                            option.value = newOptionId;\n                            attribute.options.push(option);\n                        }\n                    });\n                });\n\n            }.bind(this));\n        },\n\n        /**\n         * @param {*} attributeIds\n         */\n        requestAttributes: function (attributeIds) {\n            $.ajax({\n                type: 'GET',\n                url: this.optionsUrl,\n                data: {\n                    attributes: attributeIds\n                },\n                showLoader: true\n            }).done(function (attributes) {\n                attributes = _.sortBy(attributes, function (attribute) {\n                    return this.wizard.data.attributesIds.indexOf(attribute.id);\n                }.bind(this));\n                this.attributes(_.map(attributes, this.createAttribute));\n            }.bind(this));\n        },\n\n        /**\n         * @param {*} attribute\n         * @return {*}\n         */\n        doInitSavedOptions: function (attribute) {\n            var selectedOptions, selectedOptionsIds, selectedAttribute = _.findWhere(this.initData.attributes, {\n                id: attribute.id\n            });\n\n            if (selectedAttribute) {\n                selectedOptions = _.pluck(selectedAttribute.chosen, 'value');\n                selectedOptionsIds = _.pluck(_.filter(attribute.options(), function (option) {\n                    return _.contains(selectedOptions, option.value);\n                }), 'id');\n                attribute.chosenOptions(selectedOptionsIds);\n                this.initData.attributes = _.without(this.initData.attributes, selectedAttribute);\n            }\n\n            return attribute;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.requestAttributes(wizard.data.attributesIds());\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            this.saveOptions();\n            this.saveAttribute(wizard);\n\n            wizard.data.attributes = this.attributes;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        back: function (wizard) {\n            wizard.data.attributesIds(this.attributes().pluck('id'));\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/bulk.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global FORM_KEY, byteConvert */\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/lib/collapsible',\n    'mage/template',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Catalog/js/product-gallery',\n    'jquery/file-uploader',\n    'mage/translate',\n    'Magento_ConfigurableProduct/js/variations/variations'\n], function (Component, $, ko, _, Collapsible, mageTemplate, alert) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            modules: {\n                variationsComponent: '${ $.variationsComponent }'\n            },\n            countVariations: 0,\n            attributes: [],\n            sections: {},\n            images: null,\n            price: '',\n            quantity: '',\n            notificationMessage: {\n                text: null,\n                error: null\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('countVariations attributes sections');\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            var self = this;\n\n            this._super();\n            this.sections({\n                images: {\n                    label: 'images',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable()\n                },\n                price: {\n                    label: 'price',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable(),\n                    currencySymbol: ''\n                },\n                quantity: {\n                    label: 'quantity',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable()\n                }\n            });\n\n            this.variationsComponent(function (variationsComponent) {\n                this.sections().price.currencySymbol = variationsComponent.getCurrencySymbol();\n            }.bind(this));\n\n            /**\n             * Make options sections.\n             */\n            this.makeOptionSections = function () {\n                return {\n                    images: new this.makeImages(null),\n                    price: this.price,\n                    quantity: this.quantity\n                };\n            }.bind(this);\n\n            /**\n             * @param {Object} images\n             * @param {*} typePreview\n             */\n            this.makeImages = function (images, typePreview) {\n                var preview;\n\n                if (!images) {\n                    this.images = [];\n                    this.preview = self.noImage;\n                    this.file = null;\n                } else {\n                    this.images = images;\n                    preview = _.find(this.images, function (image) {\n                        return _.contains(image.galleryTypes, typePreview);\n                    });\n\n                    if (preview) {\n                        this.file = preview.file;\n                        this.preview = preview.url;\n                    } else {\n                        this.file = null;\n                        this.preview = self.noImage;\n                    }\n                }\n            };\n            this.images = new this.makeImages();\n            _.each(this.sections(), function (section) {\n                section.type.subscribe(function () {\n                    this.setWizardNotifyMessageDependOnSectionType();\n                }.bind(this));\n            }, this);\n        },\n        types: ['each', 'single', 'none'],\n\n        /**\n         * Set Wizard notify message depend on section type\n         */\n        setWizardNotifyMessageDependOnSectionType: function () {\n            var flag = false;\n\n            _.each(this.sections(), function (section) {\n                if (section.type() !== 'none') {\n                    flag = true;\n                }\n            }, this);\n\n            if (flag) {\n                this.wizard.setNotificationMessage(\n                    $.mage.__('Choose this option to delete and replace extension data for all past configurations.')\n                );\n            } else {\n                this.wizard.cleanNotificationMessage();\n            }\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.attributes(wizard.data.attributes());\n\n            if (this.mode === 'edit') {\n                this.setWizardNotifyMessageDependOnSectionType();\n            }\n            //fill option section data\n            this.attributes.each(function (attribute) {\n                attribute.chosen.each(function (option) {\n                    option.sections = ko.observable(this.makeOptionSections());\n                }, this);\n            }, this);\n            //reset section.attribute\n            _.each(this.sections(), function (section) {\n                section.attribute(null);\n            });\n\n            this.initCountVariations();\n            this.bindGalleries();\n        },\n\n        /**\n         * Init count variations.\n         */\n        initCountVariations: function () {\n            var variations = this.generateVariation(this.attributes()),\n                newVariations = _.map(variations, function (options) {\n                    return this.variationsComponent().getVariationKey(options);\n                }.bind(this)),\n                existingVariations = _.keys(this.variationsComponent().productAttributesMap);\n\n            this.countVariations(_.difference(newVariations, existingVariations).length);\n        },\n\n        /**\n         * @param {Object} attributes - example [['b1', 'b2'],['a1', 'a2', 'a3'],['c1', 'c2', 'c3'],['d1']]\n         * @returns {*} example [['b1','a1','c1','d1'],['b1','a1','c2','d1']...]\n         */\n        generateVariation: function (attributes) {\n            return _.reduce(attributes, function (matrix, attribute) {\n                var tmp = [];\n\n                _.each(matrix, function (variations) {\n                    _.each(attribute.chosen, function (option) {\n                        option['attribute_code'] = attribute.code;\n                        option['attribute_label'] = attribute.label;\n                        tmp.push(_.union(variations, [option]));\n                    });\n                });\n\n                if (!tmp.length) {\n                    return _.map(attribute.chosen, function (option) {\n                        option['attribute_code'] = attribute.code;\n                        option['attribute_label'] = attribute.label;\n\n                        return [option];\n                    });\n                }\n\n                return tmp;\n            }, []);\n        },\n\n        /**\n         * @param {*} section\n         * @param {Object} options\n         * @return {*}\n         */\n        getSectionValue: function (section, options) {\n            switch (this.sections()[section].type()) {\n                case 'each':\n                    return _.find(this.sections()[section].attribute().chosen, function (chosen) {\n                        return _.find(options, function (option) {\n                            return chosen.id == option.id; //eslint-disable-line eqeqeq\n                        });\n                    }).sections()[section];\n\n                case 'single':\n                    return this.sections()[section].value();\n\n                case 'none':\n                    return this[section];\n            }\n        },\n\n        /**\n         * @param {*} node\n         * @return {Promise|*}\n         */\n        getImageProperty: function (node) {\n            var types = node.find('[data-role=gallery]').productGallery('option').types,\n                images = _.map(node.find('[data-role=image]'), function (image) {\n                    var imageData = $(image).data('imageData'),\n                        positionElement;\n\n                    imageData.galleryTypes = _.pluck(_.filter(types, function (type) {\n                        return type.value === imageData.file;\n                    }), 'code');\n\n                    //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    positionElement =\n                        $(image).find('[name=\"product[media_gallery][images][' + imageData.file_id + '][position]\"]');\n                    //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    if (!_.isEmpty(positionElement.val())) {\n                        imageData.position = positionElement.val();\n                    }\n\n                    return imageData;\n                });\n\n            return _.reject(images, function (image) {\n                return !!image.isRemoved;\n            });\n        },\n\n        /**\n         * Fill images section.\n         */\n        fillImagesSection: function () {\n            switch (this.sections().images.type()) {\n                case 'each':\n                    if (this.sections().images.attribute()) {\n                        this.sections().images.attribute().chosen.each(function (option) {\n                            option.sections().images = new this.makeImages(\n                                this.getImageProperty($('[data-role=step-gallery-option-' + option.id + ']')),\n                                'thumbnail'\n                            );\n                        }, this);\n                    }\n                    break;\n\n                case 'single':\n                    this.sections().images.value(new this.makeImages(\n                        this.getImageProperty($('[data-role=step-gallery-single]')),\n                        'thumbnail'\n                    ));\n                    break;\n\n                default:\n                    this.sections().images.value(new this.makeImages());\n                    break;\n            }\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            this.fillImagesSection();\n            this.validate();\n            this.validateImage();\n            wizard.data.sections = this.sections;\n            wizard.data.sectionHelper = this.getSectionValue.bind(this);\n            wizard.data.variations = this.generateVariation(this.attributes());\n        },\n\n        /**\n         * Validate.\n         */\n        validate: function () {\n            var formValid;\n\n            _.each(this.sections(), function (section) {\n                switch (section.type()) {\n                    case 'each':\n                        if (!section.attribute()) {\n                            throw new Error($.mage.__('Please select attribute for {section} section.')\n                                .replace('{section}', section.label));\n                        }\n                        break;\n\n                    case 'single':\n                        if (!section.value()) {\n                            throw new Error($.mage.__('Please fill in the values for {section} section.')\n                                .replace('{section}', section.label));\n                        }\n                        break;\n                }\n            }, this);\n            formValid = true;\n            _.each($('[data-role=attributes-values-form]'), function (form) {\n                formValid = $(form).valid() && formValid;\n            });\n\n            if (!formValid) {\n                throw new Error($.mage.__('Please fill-in correct values.'));\n            }\n        },\n\n        /**\n         * Validate image.\n         */\n        validateImage: function () {\n            switch (this.sections().images.type()) {\n                case 'each':\n                    _.each(this.sections().images.attribute().chosen, function (option) {\n                        if (!option.sections().images.images.length) {\n                            throw new Error($.mage.__('Please select image(s) for your attribute.'));\n                        }\n                    });\n                    break;\n\n                case 'single':\n                    if (this.sections().images.value().file == null) {\n                        throw new Error($.mage.__('Please choose image(s).'));\n                    }\n                    break;\n            }\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n            this.setWizardNotifyMessageDependOnSectionType();\n        },\n\n        /**\n         * Bind galleries.\n         */\n        bindGalleries: function () {\n            $('[data-role=bulk-step] [data-role=gallery]').each(function (index, element) {\n                var gallery = $(element),\n                    uploadInput = $(gallery.find('[name=image]')),\n                    dropZone = $(gallery).find('.image-placeholder');\n\n                if (!gallery.data('gallery-initialized')) {\n                    gallery.mage('productGallery', {\n                        template: '[data-template=gallery-content]',\n                        dialogTemplate: '.dialog-template',\n                        dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\n                    });\n\n                    uploadInput.fileupload({\n                        dataType: 'json',\n                        dropZone: dropZone,\n                        process: [{\n                            action: 'load',\n                            fileTypes: /^image\\/(gif|jpeg|png)$/\n                        }, {\n                            action: 'resize',\n                            maxWidth: 1920,\n                            maxHeight: 1200\n                        }, {\n                            action: 'save'\n                        }],\n                        formData: {\n                            'form_key': FORM_KEY\n                        },\n                        sequentialUploads: true,\n                        acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        add: function (e, data) {\n                            var progressTmpl = mageTemplate('[data-template=uploader]'),\n                                fileSize,\n                                tmpl;\n\n                            $.each(data.files, function (i, file) {\n                                fileSize = typeof file.size == 'undefined' ?\n                                    $.mage.__('We could not detect a size.') :\n                                    byteConvert(file.size);\n\n                                data.fileId = Math.random().toString(33).substr(2, 18);\n\n                                tmpl = progressTmpl({\n                                    data: {\n                                        name: file.name,\n                                        size: fileSize,\n                                        id: data.fileId\n                                    }\n                                });\n\n                                $(tmpl).appendTo(gallery.find('[data-role=uploader]'));\n                            });\n\n                            $(this).fileupload('process', data).done(function () {\n                                data.submit();\n                            });\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        done: function (e, data) {\n                            if (data.result && !data.result.error) {\n                                gallery.trigger('addItem', data.result);\n                            } else {\n                                $('#' + data.fileId)\n                                    .delay(2000)\n                                    .hide('highlight');\n                                alert({\n                                    content: $.mage.__('We don\\'t recognize or support this file extension type.')\n                                });\n                            }\n                            $('#' + data.fileId).remove();\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        progress: function (e, data) {\n                            var progress = parseInt(data.loaded / data.total * 100, 10),\n                                progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\n\n                            $(progressSelector).css('width', progress + '%');\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        fail: function (e, data) {\n                            var progressSelector = '#' + data.fileId;\n\n                            $(progressSelector).removeClass('upload-progress').addClass('upload-failure')\n                                .delay(2000)\n                                .hide('highlight')\n                                .remove();\n                        }\n                    });\n                    gallery.data('gallery-initialized', 1);\n                }\n            });\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/select_attributes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore',\n    'mage/translate'\n], function (Component, $, _) {\n    'use strict';\n\n    /**\n     * @param {Function} provider\n     */\n    var initNewAttributeListener = function (provider) {\n        $('[data-role=product-variations-matrix]').on('add', function () {\n            provider().reload();\n        });\n    };\n\n    return Component.extend({\n        attributesLabels: {},\n        stepInitialized: false,\n        defaults: {\n            modules: {\n                multiselect: '${ $.multiselectName }',\n                attributeProvider: '${ $.providerName }'\n            },\n            listens: {\n                '${ $.multiselectName }:selected': 'doSelectedAttributesLabels',\n                '${ $.multiselectName }:rows': 'doSelectSavedAttributes'\n            },\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            selectedAttributes: []\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.selected = [];\n\n            initNewAttributeListener(this.attributeProvider);\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(['selectedAttributes']);\n\n            return this;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.setNotificationMessage();\n        },\n\n        /**\n         * Set notification message.\n         */\n        setNotificationMessage: function () {\n            /*eslint-disable max-len*/\n            var msg = $.mage.__('When you remove or add an attribute, we automatically update all configurations and you will need to recreate current configurations manually.');\n\n            /*eslint-enable max-len*/\n\n            if (this.mode === 'edit') {\n                this.wizard.setNotificationMessage(msg);\n            }\n        },\n\n        /**\n         * Do select saved attributes.\n         */\n        doSelectSavedAttributes: function () {\n            if (this.stepInitialized === false) {\n                this.stepInitialized = true;\n                //cache attributes labels, which can be present on the 2nd page\n                _.each(this.initData.attributes, function (attribute) {\n                    this.attributesLabels[attribute.id] = attribute.label;\n                }.bind(this));\n                this.multiselect().selected(_.pluck(this.initData.attributes, 'id'));\n            }\n        },\n\n        /**\n         * @param {*} selected\n         */\n        doSelectedAttributesLabels: function (selected) {\n            var labels = [];\n\n            this.selected = selected;\n            _.each(selected, function (attributeId) {\n                var attribute;\n\n                if (!this.attributesLabels[attributeId]) {\n                    attribute = _.findWhere(this.multiselect().rows(), {\n                        'attribute_id': attributeId\n                    });\n\n                    if (attribute) {\n                        this.attributesLabels[attribute['attribute_id']] = attribute['frontend_label'];\n                    }\n                }\n                labels.push(this.attributesLabels[attributeId]);\n            }.bind(this));\n            this.selectedAttributes(labels.join(', '));\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            wizard.data.attributesIds = this.multiselect().selected;\n\n            if (!wizard.data.attributesIds() || wizard.data.attributesIds().length === 0) {\n                throw new Error($.mage.__('Please select attribute(s).'));\n            }\n            this.setNotificationMessage();\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/summary.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/grid/paging/paging',\n    'mage/translate'\n], function (Component, $, ko, _, paging) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            modules: {\n                variationsComponent: '${ $.variationsComponent }',\n                modalComponent: '${ $.modalComponent }',\n                matrixGridComponent: '${ $.matrixGridComponent }'\n            },\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            gridExisting: [],\n            gridNew: [],\n            gridDeleted: [],\n            variationsExisting: [],\n            variationsNew: [],\n            variationsDeleted: [],\n            pagingExisting: paging({\n                name: 'configurableWizard.pagingExisting',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingExisting_sizes'\n                }\n            }),\n            pagingNew: paging({\n                name: 'configurableWizard.pagingNew',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingNew_sizes'\n                }\n            }),\n            pagingDeleted: paging({\n                name: 'configurableWizard.pagingDeleted',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingDeleted_sizes'\n                }\n            }),\n            attributes: [],\n            attributesName: [$.mage.__('Images'), $.mage.__('SKU'), $.mage.__('Quantity'), $.mage.__('Price')],\n            sections: [],\n            gridTemplate: 'Magento_ConfigurableProduct/variations/steps/summary-grid',\n            quantityFieldName: 'quantity'\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            var pagingObservables = {\n                currentNew: ko.getObservable(this.pagingNew, 'current'),\n                currentExisting: ko.getObservable(this.pagingExisting, 'current'),\n                currentDeleted: ko.getObservable(this.pagingDeleted, 'current'),\n                pageSizeNew: ko.getObservable(this.pagingNew, 'pageSize'),\n                pageSizeExisting: ko.getObservable(this.pagingExisting, 'pageSize'),\n                pageSizeDeleted: ko.getObservable(this.pagingDeleted, 'pageSize')\n            };\n\n            this._super().observe('gridExisting gridNew gridDeleted attributes sections');\n            this.gridExisting.columns = ko.observableArray();\n            this.gridNew.columns = ko.observableArray();\n            this.gridDeleted.columns = ko.observableArray();\n\n            _.each(pagingObservables, function (observable) {\n                observable.subscribe(function () {\n                    this.generateGrid();\n                }, this);\n            }, this);\n\n            return this;\n        },\n        nextLabelText: $.mage.__('Generate Products'),\n        variations: [],\n\n        /**\n         * @param {*} variations\n         * @param {Function} getSectionValue\n         */\n        calculate: function (variations, getSectionValue) {\n            var productSku = this.variationsComponent().getProductValue('sku'),\n                productPrice = this.variationsComponent().getProductPrice(),\n                productWeight = this.variationsComponent().getProductValue('weight'),\n                productName = this.variationsComponent().getProductValue('name'),\n                variationsKeys = [],\n                gridExisting = [],\n                gridNew = [],\n                gridDeleted = [],\n                matrixGridData = this.matrixGridComponent() ?\n                    _.indexBy(this.matrixGridComponent().getUnionInsertData(), 'variationKey') : {};\n\n            this.variations = [];\n            _.each(variations, function (options) {\n                var product, images, sku, name, quantity, price, variation,\n                    variationsKey = this.variationsComponent().getVariationKey(options),\n                    productDataFromGrid = matrixGridData[variationsKey] || {},\n                    productDataFromWizard = {},\n                    productId = this.variationsComponent().getProductIdByOptions(options);\n\n                if (productId) {\n                    product = _.findWhere(this.variationsComponent().variations, {\n                        productId: productId\n                    });\n                }\n                images = getSectionValue('images', options);\n                sku = productSku + _.reduce(options, function (memo, option) {\n                    return memo + '-' + option.label;\n                }, '');\n                name = productName + _.reduce(options, function (memo, option) {\n                    return memo + '-' + option.label;\n                }, '');\n                quantity = getSectionValue(this.quantityFieldName, options);\n\n                if (quantity) {\n                    productDataFromWizard[this.quantityFieldName] = quantity;\n                }\n                price = getSectionValue('price', options);\n\n                if (price) {\n                    productDataFromWizard.price = price;\n                }\n\n                if (productId && !images.file) {\n                    images = product.images;\n                }\n                productDataFromGrid = _.pick(\n                    productDataFromGrid,\n                    'sku',\n                    'name',\n                    'weight',\n                    'status',\n                    'price',\n                    'qty'\n                );\n\n                if (productDataFromGrid.hasOwnProperty('qty')) {\n                    productDataFromGrid[this.quantityFieldName] = productDataFromGrid.qty;\n                }\n                delete productDataFromGrid.qty;\n                product = _.pick(\n                    product || {},\n                    'sku',\n                    'name',\n                    'weight',\n                    'status',\n                    'price',\n                    this.quantityFieldName\n                );\n                variation = {\n                    options: options,\n                    images: images,\n                    sku: sku,\n                    name: name,\n                    price: productPrice,\n                    productId: productId,\n                    weight: productWeight,\n                    editable: true\n                };\n                variation[this.quantityFieldName] = quantity;\n                variation = _.extend(variation, product, productDataFromGrid, productDataFromWizard);\n\n                if (productId) {\n                    gridExisting.push(this.prepareRowForGrid(variation));\n                } else {\n                    gridNew.push(this.prepareRowForGrid(variation));\n                }\n                this.variations.push(variation);\n                variationsKeys.push(variationsKey);\n            }, this);\n\n            _.each(_.omit(this.variationsComponent().productAttributesMap, variationsKeys), function (productId) {\n                gridDeleted.push(this.prepareRowForGrid(\n                    _.findWhere(this.variationsComponent().variations, {\n                        productId: productId\n                    })\n                ));\n            }.bind(this));\n\n            this.variationsExisting = gridExisting;\n            this.variationsNew = gridNew;\n            this.variationsDeleted = gridDeleted;\n        },\n\n        /**\n         * Generate grid.\n         */\n        generateGrid: function () {\n            var pageExisting = this.pagingExisting.pageSize * this.pagingExisting.current,\n                pageNew = this.pagingNew.pageSize * this.pagingNew.current,\n                pageDeleted = this.pagingDeleted.pageSize * this.pagingDeleted.current;\n\n            this.pagingExisting.totalRecords = this.variationsExisting.length;\n            this.gridExisting(this.variationsExisting.slice(pageExisting - this.pagingExisting.pageSize, pageExisting));\n\n            this.pagingNew.totalRecords = this.variationsNew.length;\n            this.gridNew(this.variationsNew.slice(pageNew - this.pagingNew.pageSize, pageNew));\n\n            this.pagingDeleted.totalRecords = this.variationsDeleted.length;\n            this.gridDeleted(this.variationsDeleted.slice(pageDeleted - this.pagingDeleted.pageSize, pageDeleted));\n        },\n\n        /**\n         * @param {Object} variation\n         * @return {Array}\n         */\n        prepareRowForGrid: function (variation) {\n            var row = [];\n\n            row.push(_.extend({\n                images: []\n            }, variation.images));\n            row.push(variation.sku);\n            row.push(variation[this.quantityFieldName]);\n            _.each(variation.options, function (option) {\n                row.push(option.label);\n            });\n            row.push(this.variationsComponent().getCurrencySymbol() +  ' ' + variation.price);\n\n            return row;\n        },\n\n        /**\n         * @return {String|*}\n         */\n        getGridTemplate: function () {\n            return this.gridTemplate;\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getGridId: function () {\n            return _.uniqueId('grid_');\n        },\n\n        /**\n         * @param {*} attributes\n         * @return {Array}\n         */\n        getColumnsName: function (attributes) {\n            var columns = this.attributesName.slice(0);\n\n            attributes.each(function (attribute, index) {\n                columns.splice(3 + index, 0, attribute.label);\n            }, this);\n\n            return columns;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.sections(wizard.data.sections());\n            this.attributes(wizard.data.attributes());\n            this.gridNew([]);\n            this.gridExisting([]);\n            this.gridDeleted([]);\n            this.gridExisting.columns(this.getColumnsName(this.wizard.data.attributes));\n            this.gridNew.columns(this.getColumnsName(this.wizard.data.attributes));\n            this.gridDeleted.columns(this.getColumnsName(this.variationsComponent().productAttributes));\n            this.calculate(wizard.data.variations, wizard.data.sectionHelper);\n            this.generateGrid();\n        },\n\n        /**\n         * Force.\n         */\n        force: function () {\n            this.variationsComponent().render(this.variations, this.attributes());\n            this.modalComponent().closeModal();\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n        }\n    });\n});\n"}
}});
